weightid,signature,structure,concepts,language,time,user_id,vote_id,code
1,2.5,1.0,1.0,1.0,2017-03-24 05:12:33.944433,2,,"double getTax(Person person) {
  if(person.class == Employee.class) {
    Employee employee = (Employee) person;
    if(employee.getSalary() < 10000) {
      return 0.02 * employee.getSalary();
    }
    
    return 0.05 * employee.getSalary();
  } else if(person.class == BusinessOwner.class) {
    BusinessOwner employee = (BusinessOwner) person;
    
    return 0.1 * employee.getProfit();
  }
  
  return 0;
}"
2,2.5,3.5,1.0,1.0,2017-03-24 05:12:39.806373,2,,"double getTax(Person person) {
  if(person.class == Employee.class) {
    Employee employee = (Employee) person;
    if(employee.getSalary() < 10000) {
      return 0.02 * employee.getSalary();
    }
    
    return 0.05 * employee.getSalary();
  } else if(person.class == BusinessOwner.class) {
    BusinessOwner employee = (BusinessOwner) person;
    
    return 0.1 * employee.getProfit();
  }
  
  return 0;
}"
3,2.5,3.5,4.0,1.0,2017-03-24 05:12:51.608660,2,,"double getTax(Person person) {
  if(person.class == Employee.class) {
    Employee employee = (Employee) person;
    if(employee.getSalary() < 10000) {
      return 0.02 * employee.getSalary();
    }
    
    return 0.05 * employee.getSalary();
  } else if(person.class == BusinessOwner.class) {
    BusinessOwner employee = (BusinessOwner) person;
    
    return 0.1 * employee.getProfit();
  }
  
  return 0;
}"
4,2.5,3.5,4.0,3.0,2017-03-24 05:12:52.991738,2,,"double getTax(Person person) {
  if(person.class == Employee.class) {
    Employee employee = (Employee) person;
    if(employee.getSalary() < 10000) {
      return 0.02 * employee.getSalary();
    }
    
    return 0.05 * employee.getSalary();
  } else if(person.class == BusinessOwner.class) {
    BusinessOwner employee = (BusinessOwner) person;
    
    return 0.1 * employee.getProfit();
  }
  
  return 0;
}"
5,2.5,3.5,4.0,1.5,2017-03-24 05:13:21.377892,2,,"double getTax(Person person) {
  if(person.class == Employee.class) {
    Employee employee = (Employee) person;
    if(employee.getSalary() < 10000) {
      return 0.02 * employee.getSalary();
    }
    
    return 0.05 * employee.getSalary();
  } else if(person.class == BusinessOwner.class) {
    BusinessOwner employee = (BusinessOwner) person;
    
    return 0.1 * employee.getProfit();
  }
  
  return 0;
}"
6,3.5,3.5,4.0,1.5,2017-03-24 05:13:24.178289,2,,"double getTax(Person person) {
  if(person.class == Employee.class) {
    Employee employee = (Employee) person;
    if(employee.getSalary() < 10000) {
      return 0.02 * employee.getSalary();
    }
    
    return 0.05 * employee.getSalary();
  } else if(person.class == BusinessOwner.class) {
    BusinessOwner employee = (BusinessOwner) person;
    
    return 0.1 * employee.getProfit();
  }
  
  return 0;
}"
7,2.0,3.5,4.0,1.5,2017-03-24 05:13:24.881143,2,,"double getTax(Person person) {
  if(person.class == Employee.class) {
    Employee employee = (Employee) person;
    if(employee.getSalary() < 10000) {
      return 0.02 * employee.getSalary();
    }
    
    return 0.05 * employee.getSalary();
  } else if(person.class == BusinessOwner.class) {
    BusinessOwner employee = (BusinessOwner) person;
    
    return 0.1 * employee.getProfit();
  }
  
  return 0;
}"
8,2.0,4.5,4.0,1.5,2017-03-24 05:13:26.139906,2,,"double getTax(Person person) {
  if(person.class == Employee.class) {
    Employee employee = (Employee) person;
    if(employee.getSalary() < 10000) {
      return 0.02 * employee.getSalary();
    }
    
    return 0.05 * employee.getSalary();
  } else if(person.class == BusinessOwner.class) {
    BusinessOwner employee = (BusinessOwner) person;
    
    return 0.1 * employee.getProfit();
  }
  
  return 0;
}"
9,2.0,4.5,2.0,1.5,2017-03-24 05:13:27.638868,2,,"double getTax(Person person) {
  if(person.class == Employee.class) {
    Employee employee = (Employee) person;
    if(employee.getSalary() < 10000) {
      return 0.02 * employee.getSalary();
    }
    
    return 0.05 * employee.getSalary();
  } else if(person.class == BusinessOwner.class) {
    BusinessOwner employee = (BusinessOwner) person;
    
    return 0.1 * employee.getProfit();
  }
  
  return 0;
}"
10,2.0,4.5,2.0,3.5,2017-03-24 05:13:31.322494,2,,"double getTax(Person person) {
  if(person.class == Employee.class) {
    Employee employee = (Employee) person;
    if(employee.getSalary() < 10000) {
      return 0.02 * employee.getSalary();
    }
    
    return 0.05 * employee.getSalary();
  } else if(person.class == BusinessOwner.class) {
    BusinessOwner employee = (BusinessOwner) person;
    
    return 0.1 * employee.getProfit();
  }
  
  return 0;
}"
11,2.0,4.5,2.0,1.5,2017-03-24 05:14:43.018325,2,,"double getTax(Person person) {
  if(person.class == Employee.class) {
    Employee employee = (Employee) person;
    if(employee.getSalary() < 10000) {
      return 0.02 * employee.getSalary();
    }
    
    return 0.05 * employee.getSalary();
  } else if(person.class == BusinessOwner.class) {
    BusinessOwner employee = (BusinessOwner) person;
    
    return 0.1 * employee.getProfit();
  }
  
  return 0;
}"
12,2.0,4.5,4.0,1.5,2017-03-24 05:36:31.476401,2,,"double getTax(Person person) {
  if(person.class == Employee.class) {
    Employee employee = (Employee) person;
    if(employee.getSalary() < 10000) {
      return 0.02 * employee.getSalary();
    }
    
    return 0.05 * employee.getSalary();
  } else if(person.class == BusinessOwner.class) {
    BusinessOwner employee = (BusinessOwner) person;
    
    return 0.1 * employee.getProfit();
  }
  
  return 0;
}"
13,2.0,1.5,4.0,1.5,2017-03-24 05:36:31.930363,2,,"double getTax(Person person) {
  if(person.class == Employee.class) {
    Employee employee = (Employee) person;
    if(employee.getSalary() < 10000) {
      return 0.02 * employee.getSalary();
    }
    
    return 0.05 * employee.getSalary();
  } else if(person.class == BusinessOwner.class) {
    BusinessOwner employee = (BusinessOwner) person;
    
    return 0.1 * employee.getProfit();
  }
  
  return 0;
}"
14,2.0,3.5,4.0,1.5,2017-03-24 05:36:35.239403,2,,"double getTax(Person person) {
  if(person.class == Employee.class) {
    Employee employee = (Employee) person;
    if(employee.getSalary() < 10000) {
      return 0.02 * employee.getSalary();
    }
    
    return 0.05 * employee.getSalary();
  } else if(person.class == BusinessOwner.class) {
    BusinessOwner employee = (BusinessOwner) person;
    
    return 0.1 * employee.getProfit();
  }
  
  return 0;
}"
15,2.0,4.0,4.0,1.5,2017-03-24 05:36:35.785504,2,,"double getTax(Person person) {
  if(person.class == Employee.class) {
    Employee employee = (Employee) person;
    if(employee.getSalary() < 10000) {
      return 0.02 * employee.getSalary();
    }
    
    return 0.05 * employee.getSalary();
  } else if(person.class == BusinessOwner.class) {
    BusinessOwner employee = (BusinessOwner) person;
    
    return 0.1 * employee.getProfit();
  }
  
  return 0;
}"
16,0.5,4.0,4.0,1.5,2017-03-24 05:36:52.884253,2,,"double getTax(Person person) {
  if(person.class == Employee.class) {
    Employee employee = (Employee) person;
    if(employee.getSalary() < 10000) {
      return 0.02 * employee.getSalary();
    }
    
    return 0.05 * employee.getSalary();
  } else if(person.class == BusinessOwner.class) {
    BusinessOwner employee = (BusinessOwner) person;
    
    return 0.1 * employee.getProfit();
  }
  
  return 0;
}"
17,0.5,4.0,4.0,1.0,2017-03-24 05:36:54.304322,2,,"double getTax(Person person) {
  if(person.class == Employee.class) {
    Employee employee = (Employee) person;
    if(employee.getSalary() < 10000) {
      return 0.02 * employee.getSalary();
    }
    
    return 0.05 * employee.getSalary();
  } else if(person.class == BusinessOwner.class) {
    BusinessOwner employee = (BusinessOwner) person;
    
    return 0.1 * employee.getProfit();
  }
  
  return 0;
}"
18,0.5,3.0,4.0,1.0,2017-03-24 05:37:35.016918,2,,"double getTax(Person person) {
  if(person.class == Employee.class) {
    Employee employee = (Employee) person;
    if(employee.getSalary() < 10000) {
      return 0.02 * employee.getSalary();
    }
    
    return 0.05 * employee.getSalary();
  } else if(person.class == BusinessOwner.class) {
    BusinessOwner employee = (BusinessOwner) person;
    
    return 0.1 * employee.getProfit();
  }
  
  return 0;
}"
19,0.5,2.5,4.0,1.0,2017-03-24 05:37:36.701313,2,,"double getTax(Person person) {
  if(person.class == Employee.class) {
    Employee employee = (Employee) person;
    if(employee.getSalary() < 10000) {
      return 0.02 * employee.getSalary();
    }
    
    return 0.05 * employee.getSalary();
  } else if(person.class == BusinessOwner.class) {
    BusinessOwner employee = (BusinessOwner) person;
    
    return 0.1 * employee.getProfit();
  }
  
  return 0;
}"
20,0.5,1.0,4.0,1.0,2017-03-24 05:38:02.626217,2,,"double getTax(Person person) {
  if(person.class == Employee.class) {
    Employee employee = (Employee) person;
    if(employee.getSalary() < 10000) {
      return 0.02 * employee.getSalary();
    }
    
    return 0.05 * employee.getSalary();
  } else if(person.class == BusinessOwner.class) {
    BusinessOwner employee = (BusinessOwner) person;
    
    return 0.1 * employee.getProfit();
  }
  
  return 0;
}"
21,0.5,1.0,4.0,0.5,2017-03-24 05:38:04.035971,2,,"double getTax(Person person) {
  if(person.class == Employee.class) {
    Employee employee = (Employee) person;
    if(employee.getSalary() < 10000) {
      return 0.02 * employee.getSalary();
    }
    
    return 0.05 * employee.getSalary();
  } else if(person.class == BusinessOwner.class) {
    BusinessOwner employee = (BusinessOwner) person;
    
    return 0.1 * employee.getProfit();
  }
  
  return 0;
}"
22,0.5,1.0,4.0,0.5,2017-03-24 05:38:05.275943,2,,"double getTax(Person person) {
  if(person.class == Employee.class) {
    Employee employee = (Employee) person;
    if(employee.getSalary() < 10000) {
      return 0.02 * employee.getSalary();
    }
    
    return 0.05 * employee.getSalary();
  } else if(person.class == BusinessOwner.class) {
    BusinessOwner employee = (BusinessOwner) person;
    
    return 0.1 * employee.getProfit();
  }
  
  return 0;
}"
23,0.5,1.0,4.0,0.0,2017-03-24 05:38:06.324359,2,,"double getTax(Person person) {
  if(person.class == Employee.class) {
    Employee employee = (Employee) person;
    if(employee.getSalary() < 10000) {
      return 0.02 * employee.getSalary();
    }
    
    return 0.05 * employee.getSalary();
  } else if(person.class == BusinessOwner.class) {
    BusinessOwner employee = (BusinessOwner) person;
    
    return 0.1 * employee.getProfit();
  }
  
  return 0;
}"
24,0.0,1.0,4.0,0.0,2017-03-24 05:38:08.580544,2,,"double getTax(Person person) {
  if(person.class == Employee.class) {
    Employee employee = (Employee) person;
    if(employee.getSalary() < 10000) {
      return 0.02 * employee.getSalary();
    }
    
    return 0.05 * employee.getSalary();
  } else if(person.class == BusinessOwner.class) {
    BusinessOwner employee = (BusinessOwner) person;
    
    return 0.1 * employee.getProfit();
  }
  
  return 0;
}"
25,0.0,0.0,4.0,0.0,2017-03-24 05:38:14.861986,2,,"double getTax(Person person) {
  if(person.class == Employee.class) {
    Employee employee = (Employee) person;
    if(employee.getSalary() < 10000) {
      return 0.02 * employee.getSalary();
    }
    
    return 0.05 * employee.getSalary();
  } else if(person.class == BusinessOwner.class) {
    BusinessOwner employee = (BusinessOwner) person;
    
    return 0.1 * employee.getProfit();
  }
  
  return 0;
}"
26,0.0,0.0,4.0,0.0,2017-03-24 05:38:26.793549,2,1,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", targetDate = \""Jan 1, 2012\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":4},""code"":""double getTax(Person person) {\n  if(person.class == Employee.class) {\n    Employee employee = (Employee) person;\n    if(employee.getSalary() < 10000) {\n      return 0.02 * employee.getSalary();\n    }\n    \n    return 0.05 * employee.getSalary();\n  } else if(person.class == BusinessOwner.class) {\n    BusinessOwner employee = (BusinessOwner) person;\n    \n    return 0.1 * employee.getProfit();\n  }\n  \n  return 0;\n}""}"
27,0.0,0.0,4.0,0.0,2017-03-24 05:38:34.922050,2,2,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":2},""code"":""double getTax(Person person) {\n  if(person.class == Employee.class) {\n    Employee employee = (Employee) person;\n    if(employee.getSalary() < 10000) {\n      return 0.02 * employee.getSalary();\n    }\n    \n    return 0.05 * employee.getSalary();\n  } else if(person.class == BusinessOwner.class) {\n    BusinessOwner employee = (BusinessOwner) person;\n    \n    return 0.1 * employee.getProfit();\n  }\n  \n  return 0;\n}""}"
28,0.0,0.0,4.0,0.0,2017-03-24 05:38:38.137973,2,3,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":5},""code"":""double getTax(Person person) {\n  if(person.class == Employee.class) {\n    Employee employee = (Employee) person;\n    if(employee.getSalary() < 10000) {\n      return 0.02 * employee.getSalary();\n    }\n    \n    return 0.05 * employee.getSalary();\n  } else if(person.class == BusinessOwner.class) {\n    BusinessOwner employee = (BusinessOwner) person;\n    \n    return 0.1 * employee.getProfit();\n  }\n  \n  return 0;\n}""}"
29,0.0,0.0,4.0,0.0,2017-03-24 05:38:43.779918,2,4,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":5},""code"":""double getTax(Person person) {\n  if(person.class == Employee.class) {\n    Employee employee = (Employee) person;\n    if(employee.getSalary() < 10000) {\n      return 0.02 * employee.getSalary();\n    }\n    \n    return 0.05 * employee.getSalary();\n  } else if(person.class == BusinessOwner.class) {\n    BusinessOwner employee = (BusinessOwner) person;\n    \n    return 0.1 * employee.getProfit();\n  }\n  \n  return 0;\n}""}"
30,0.0,0.0,4.0,0.0,2017-03-24 05:38:44.065163,2,5,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":5},""code"":""double getTax(Person person) {\n  if(person.class == Employee.class) {\n    Employee employee = (Employee) person;\n    if(employee.getSalary() < 10000) {\n      return 0.02 * employee.getSalary();\n    }\n    \n    return 0.05 * employee.getSalary();\n  } else if(person.class == BusinessOwner.class) {\n    BusinessOwner employee = (BusinessOwner) person;\n    \n    return 0.1 * employee.getProfit();\n  }\n  \n  return 0;\n}""}"
31,0.0,0.0,4.0,0.0,2017-03-24 05:38:44.301950,2,6,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":5},""code"":""double getTax(Person person) {\n  if(person.class == Employee.class) {\n    Employee employee = (Employee) person;\n    if(employee.getSalary() < 10000) {\n      return 0.02 * employee.getSalary();\n    }\n    \n    return 0.05 * employee.getSalary();\n  } else if(person.class == BusinessOwner.class) {\n    BusinessOwner employee = (BusinessOwner) person;\n    \n    return 0.1 * employee.getProfit();\n  }\n  \n  return 0;\n}""}"
32,0.0,0.0,4.0,0.0,2017-03-24 05:38:44.491919,2,7,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":5},""code"":""double getTax(Person person) {\n  if(person.class == Employee.class) {\n    Employee employee = (Employee) person;\n    if(employee.getSalary() < 10000) {\n      return 0.02 * employee.getSalary();\n    }\n    \n    return 0.05 * employee.getSalary();\n  } else if(person.class == BusinessOwner.class) {\n    BusinessOwner employee = (BusinessOwner) person;\n    \n    return 0.1 * employee.getProfit();\n  }\n  \n  return 0;\n}""}"
33,0.0,0.0,4.0,0.0,2017-03-24 05:38:44.815043,2,8,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":5},""code"":""double getTax(Person person) {\n  if(person.class == Employee.class) {\n    Employee employee = (Employee) person;\n    if(employee.getSalary() < 10000) {\n      return 0.02 * employee.getSalary();\n    }\n    \n    return 0.05 * employee.getSalary();\n  } else if(person.class == BusinessOwner.class) {\n    BusinessOwner employee = (BusinessOwner) person;\n    \n    return 0.1 * employee.getProfit();\n  }\n  \n  return 0;\n}""}"
34,0.0,0.0,4.0,0.0,2017-03-24 05:38:45.035311,2,9,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":5},""code"":""double getTax(Person person) {\n  if(person.class == Employee.class) {\n    Employee employee = (Employee) person;\n    if(employee.getSalary() < 10000) {\n      return 0.02 * employee.getSalary();\n    }\n    \n    return 0.05 * employee.getSalary();\n  } else if(person.class == BusinessOwner.class) {\n    BusinessOwner employee = (BusinessOwner) person;\n    \n    return 0.1 * employee.getProfit();\n  }\n  \n  return 0;\n}""}"
35,0.0,0.0,4.0,0.0,2017-03-24 05:38:45.199136,2,10,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":5},""code"":""double getTax(Person person) {\n  if(person.class == Employee.class) {\n    Employee employee = (Employee) person;\n    if(employee.getSalary() < 10000) {\n      return 0.02 * employee.getSalary();\n    }\n    \n    return 0.05 * employee.getSalary();\n  } else if(person.class == BusinessOwner.class) {\n    BusinessOwner employee = (BusinessOwner) person;\n    \n    return 0.1 * employee.getProfit();\n  }\n  \n  return 0;\n}""}"
36,0.0,0.0,4.0,0.0,2017-03-24 05:38:46.147799,2,11,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":5},""code"":""double getTax(Person person) {\n  if(person.class == Employee.class) {\n    Employee employee = (Employee) person;\n    if(employee.getSalary() < 10000) {\n      return 0.02 * employee.getSalary();\n    }\n    \n    return 0.05 * employee.getSalary();\n  } else if(person.class == BusinessOwner.class) {\n    BusinessOwner employee = (BusinessOwner) person;\n    \n    return 0.1 * employee.getProfit();\n  }\n  \n  return 0;\n}""}"
37,1.0,0.0,4.0,0.0,2017-03-24 05:40:07.027182,2,,"double getTax(Person person) {
  if(person.class == Employee.class) {
    Employee employee = (Employee) person;
    if(employee.getSalary() < 10000) {
      return 0.02 * employee.getSalary();
    }
    
    return 0.05 * employee.getSalary();
  } else if(person.class == BusinessOwner.class) {
    BusinessOwner employee = (BusinessOwner) person;
    
    return 0.1 * employee.getProfit();
  }
  
  return 0;
}"
38,1.0,0.0,4.0,0.0,2017-03-24 05:40:28.010561,2,12,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""double performConversion(double f) {\n    return f *= 0.071428571429;\n}\n"",""rating"":4},""code"":""double getTax(Person person) {\n  if(person.class == Employee.class) {\n    Employee employee = (Employee) person;\n    if(employee.getSalary() < 10000) {\n      return 0.02 * employee.getSalary();\n    }\n    \n    return 0.05 * employee.getSalary();\n  } else if(person.class == BusinessOwner.class) {\n    BusinessOwner employee = (BusinessOwner) person;\n    \n    return 0.1 * employee.getProfit();\n  }\n  \n  return 0;\n}""}"
39,1.0,0.0,4.0,0.0,2017-03-24 05:40:28.976939,2,13,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""/**\n      Gets the name of this employee.\n      @return the name \n   */\npublic String getName() {\n    return name;\n}\n"",""rating"":2},""code"":""double getTax(Person person) {\n  if(person.class == Employee.class) {\n    Employee employee = (Employee) person;\n    if(employee.getSalary() < 10000) {\n      return 0.02 * employee.getSalary();\n    }\n    \n    return 0.05 * employee.getSalary();\n  } else if(person.class == BusinessOwner.class) {\n    BusinessOwner employee = (BusinessOwner) person;\n    \n    return 0.1 * employee.getProfit();\n  }\n  \n  return 0;\n}""}"
40,1.0,0.0,4.0,0.0,2017-03-24 05:40:35.441190,2,14,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""double peek() {\n    return ((Double) s.peek()).doubleValue();\n}\n"",""rating"":4},""code"":""double getTax(Person person) {\n  if(person.class == Employee.class) {\n    Employee employee = (Employee) person;\n    if(employee.getSalary() < 10000) {\n      return 0.02 * employee.getSalary();\n    }\n    \n    return 0.05 * employee.getSalary();\n  } else if(person.class == BusinessOwner.class) {\n    BusinessOwner employee = (BusinessOwner) person;\n    \n    return 0.1 * employee.getProfit();\n  }\n  \n  return 0;\n}""}"
41,1.0,0.0,4.0,0.0,2017-03-24 05:40:40.541627,2,15,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""/**\n      Constructs an employee with an empty name.\n   */\npublic Employee() {\n    name = \""\"";\n}\n"",""rating"":4},""code"":""double getTax(Person person) {\n  if(person.class == Employee.class) {\n    Employee employee = (Employee) person;\n    if(employee.getSalary() < 10000) {\n      return 0.02 * employee.getSalary();\n    }\n    \n    return 0.05 * employee.getSalary();\n  } else if(person.class == BusinessOwner.class) {\n    BusinessOwner employee = (BusinessOwner) person;\n    \n    return 0.1 * employee.getProfit();\n  }\n  \n  return 0;\n}""}"
42,3.0,1.0,1.0,1.0,2017-03-24 05:42:41.462269,2,,"int maxDiff(int[] array) {
  
}"
43,3.0,1.0,1.0,1.0,2017-03-24 05:45:59.341204,2,16,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""int getPrice() {\n    return price;\n}\n"",""rating"":3},""code"":""int maxDiff(int[] array) {\n  return large - small;\n}""}"
44,3.0,1.0,1.0,1.0,2017-03-24 05:46:00.127403,2,17,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""public static void main(String args[]) {\n    int m = 10, n = 20, max;\n    max = (m > n) ? m : n;\n    System.out.println(\""max of \"" + m + \"" and \"" + n + \"": \"" + max);\n    n = 5;\n    max = (m > n) ? m : n;\n    System.out.println(\""max of \"" + m + \"" and \"" + n + \"": \"" + max);\n}\n"",""rating"":5},""code"":""int maxDiff(int[] array) {\n  return large - small;\n}""}"
45,3.0,1.0,1.0,1.0,2017-03-24 05:46:01.169791,2,18,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""/**\n      Creates the radio buttons to select the font size.\n      @return the panel containing the radio buttons\n   */\npublic JPanel createRadioButtons() {\n    smallButton = new JRadioButton(\""Small\"");\n    smallButton.addActionListener(listener);\n    mediumButton = new JRadioButton(\""Medium\"");\n    mediumButton.addActionListener(listener);\n    largeButton = new JRadioButton(\""Large\"");\n    largeButton.addActionListener(listener);\n    largeButton.setSelected(true);\n    // Add radio buttons to button group\n    ButtonGroup group = new ButtonGroup();\n    group.add(smallButton);\n    group.add(mediumButton);\n    group.add(largeButton);\n    JPanel panel = new JPanel();\n    panel.add(smallButton);\n    panel.add(mediumButton);\n    panel.add(largeButton);\n    panel.setBorder(new TitledBorder(new EtchedBorder(), \""Size\""));\n    return panel;\n}\n"",""rating"":2},""code"":""int maxDiff(int[] array) {\n  return large - small;\n}""}"
46,3.0,1.0,1.0,1.0,2017-03-24 05:46:03.043561,2,19,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String[] argv) {\n    for (int i = 0; i < argv.length; i++) try {\n        long l = Long.parseLong(argv[i]);\n        if (l < 0) {\n            System.err.println(argv[i] + \"" -> TOO SMALL\"");\n            continue;\n        }\n        System.out.println(argv[i] + \""->\"" + findPalindrome(l));\n    } catch (NumberFormatException e) {\n        System.err.println(argv[i] + \""-> INVALID\"");\n    } catch (IllegalStateException e) {\n        System.err.println(argv[i] + \""-> \"" + e);\n    }\n}\n"",""rating"":4},""code"":""int maxDiff(int[] array) {\n  return large - small;\n}""}"
47,3.0,1.0,1.0,1.0,2017-03-24 05:46:04.687477,2,20,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""int getPlayer() {\n    return playerID;\n}\n"",""rating"":3},""code"":""int maxDiff(int[] array) {\n  return large - small;\n}""}"
48,3.0,1.0,1.0,1.0,2017-03-24 05:46:06.286325,2,21,"{""qId"":1,""reco"":{""rank"":6,""source"":0,""text"":""public static long factorial(int x) throws IllegalArgumentException {\n    // Check if x is too big or too small.  Throw an exception if so.\n    if (// \"".length\"" returns length of any array\n    x >= table.length)\n        throw new IllegalArgumentException(\""Overflow; x is too large.\"");\n    if (x < 0)\n        throw new IllegalArgumentException(\""x must be non-negative.\"");\n    // Compute and cache any values that are not yet cached.\n    while (last < x) {\n        table[last + 1] = table[last] * (last + 1);\n        last++;\n    }\n    // Now return the cached factorial of x.\n    return table[x];\n}\n"",""rating"":4},""code"":""int maxDiff(int[] array) {\n  return large - small;\n}""}"
49,3.0,1.0,1.0,1.0,2017-03-24 05:46:08.105939,2,22,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""/**\n      Gets user choice for font name, style, and size\n      and sets the font of the text sample.\n   */\npublic void setLabelFont() {\n    // Get font name   \n    String facename = (String) facenameCombo.getSelectedItem();\n    // Get font style\n    int style = 0;\n    if (italicCheckBox.isSelected()) {\n        style = style + Font.ITALIC;\n    }\n    if (boldCheckBox.isSelected()) {\n        style = style + Font.BOLD;\n    }\n    // Get font size   \n    int size = 0;\n    final int SMALL_SIZE = 24;\n    final int MEDIUM_SIZE = 36;\n    final int LARGE_SIZE = 48;\n    if (smallButton.isSelected()) {\n        size = SMALL_SIZE;\n    } else if (mediumButton.isSelected()) {\n        size = MEDIUM_SIZE;\n    } else if (largeButton.isSelected()) {\n        size = LARGE_SIZE;\n    }\n    // Set font of text field\n    label.setFont(new Font(facename, style, size));\n    label.repaint();\n}\n"",""rating"":2},""code"":""int maxDiff(int[] array) {\n  return large - small;\n}""}"
50,3.0,1.0,1.0,1.0,2017-03-24 05:46:10.148338,2,23,"{""qId"":1,""reco"":{""rank"":6,""source"":1,""text"":""int getX() {\n    return x;\n}\n"",""rating"":4},""code"":""int maxDiff(int[] array) {\n  return large - small;\n}""}"
51,3.0,1.0,1.0,1.0,2017-03-24 05:46:12.171315,2,24,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""int getCount() {\n    return count;\n}\n"",""rating"":3},""code"":""int maxDiff(int[] array) {\n  return large - small;\n}""}"
52,3.0,1.0,1.0,1.0,2017-03-24 05:46:13.349583,2,25,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""int getSize() {\n    // Return the number of Locations on the stack. \n    return size;\n}\n"",""rating"":3},""code"":""int maxDiff(int[] array) {\n  return large - small;\n}""}"
53,3.0,1.0,1.0,1.0,2017-03-24 05:46:14.448131,2,26,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""public FontUIResource getSubTextFont() {\n    return smallFont;\n}\n"",""rating"":4},""code"":""int maxDiff(int[] array) {\n  return large - small;\n}""}"
54,3.0,1.0,1.0,1.0,2017-03-24 05:46:15.030607,2,27,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""int getSize() {\n    // Return the number of items on the queue.\n    return size;\n}\n"",""rating"":4},""code"":""int maxDiff(int[] array) {\n  return large - small;\n}""}"
55,3.0,1.0,1.0,1.0,2017-03-24 05:46:19.259846,2,28,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""public static void main(String args[]) {\n    int m = 10, n = 20, max;\n    max = (m > n) ? m : n;\n    System.out.println(\""max of \"" + m + \"" and \"" + n + \"": \"" + max);\n    n = 5;\n    max = (m > n) ? m : n;\n    System.out.println(\""max of \"" + m + \"" and \"" + n + \"": \"" + max);\n}\n"",""rating"":4},""code"":""int maxDiff(int[] array) {\n  return large - small;\n}""}"
56,3.0,1.0,1.0,1.0,2017-03-24 05:46:19.396253,2,29,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""public static void main(String args[]) {\n    int m = 10, n = 20, max;\n    max = (m > n) ? m : n;\n    System.out.println(\""max of \"" + m + \"" and \"" + n + \"": \"" + max);\n    n = 5;\n    max = (m > n) ? m : n;\n    System.out.println(\""max of \"" + m + \"" and \"" + n + \"": \"" + max);\n}\n"",""rating"":4},""code"":""int maxDiff(int[] array) {\n  return large - small;\n}""}"
57,3.0,1.0,1.0,1.0,2017-03-24 05:46:30.215953,2,30,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""int getPrice() {\n    return price;\n}\n"",""rating"":5},""code"":""int maxDiff(int[] array) {\n  return large - small;\n}""}"
58,3.0,3.5,1.0,1.0,2017-03-24 05:49:03.770945,2,,"int maxDiff(int[] array) {
  return large - small;
}"
59,1.0,3.5,1.0,1.0,2017-03-24 05:49:04.999828,2,,"int maxDiff(int[] array) {
  return large - small;
}"
60,1.0,4.0,1.0,1.0,2017-03-24 05:49:58.460796,2,,"int maxDiff(int[] array) {
  return large - small;
}"
61,4.5,1.0,1.0,1.0,2017-03-24 06:02:05.073152,3,,"public int difference(int input[]) {
  int diff = 0;
  int max = Integer.MAX_INT;
  int min = Integer.MIN_INT;

  return 0;
}"
62,4.5,5.0,1.0,1.0,2017-03-24 06:02:15.390982,3,,"public int difference(int input[]) {
  int diff = 0;
  int max = Integer.MAX_INT;
  int min = Integer.MIN_INT;

  return 0;
}"
63,0.0,5.0,1.0,1.0,2017-03-24 06:02:17.407723,3,,"public int difference(int input[]) {
  int diff = 0;
  int max = Integer.MAX_INT;
  int min = Integer.MIN_INT;

  return 0;
}"
64,0.0,5.0,1.0,1.0,2017-03-24 06:03:25.612301,3,31,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String args[]) {\n    int m = 10, n = 20, max;\n    max = (m > n) ? m : n;\n    System.out.println(\""max of \"" + m + \"" and \"" + n + \"": \"" + max);\n    n = 5;\n    max = (m > n) ? m : n;\n    System.out.println(\""max of \"" + m + \"" and \"" + n + \"": \"" + max);\n}\n"",""rating"":4},""code"":""public int difference(int input[]) {\n  int diff = 0;\n  int max = Integer.MAX_INT;\n  int min = Integer.MIN_INT;\n\n  return 0;\n}""}"
65,0.0,5.0,1.0,1.0,2017-03-24 06:07:13.634796,3,32,"{""qId"":1,""reco"":{""rank"":6,""source"":0,""text"":""/**\n     * Count the primes between min and max, inclusive.\n     */\nprivate static int countPrimes(int min, int max) {\n    int count = 0;\n    for (int i = min; i <= max; i++) if (isPrime(i))\n        count++;\n    return count;\n}\n"",""rating"":4},""code"":""public int difference(int input[]) {\n  int max = Integer.MIN_INT;\n  int min = Integer.MAX_INT;\n  for(int i = 0; i < input.length(); i++) {\n    if(input[i] > max)\n      max = input[i];\n    if(input[i] < min)\n      min = input[i];\n  }\n  return max-min;\n}""}"
66,4.0,5.0,1.0,1.0,2017-03-24 06:07:20.626079,3,,"public int difference(int input[]) {
  int max = Integer.MIN_INT;
  int min = Integer.MAX_INT;
  for(int i = 0; i < input.length(); i++) {
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max-min;
}"
67,4.0,5.0,1.0,1.0,2017-03-24 06:07:40.142980,3,33,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent2(int[] a) {\n    // O(n log(n))\n    Arrays.sort(a);\n    int[] counts = new int[a.length];\n    int count = 0;\n    for (// O(n)\n    int i = 0; // O(n)\n    i < a.length; // O(n)\n    i++) {\n        count++;\n        if (i == a.length - 1 || a[i] != a[i + 1]) {\n            counts[i] = count;\n            count = 0;\n        }\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":3},""code"":""public int difference(int input[]) {\n  int max = Integer.MIN_INT;\n  int min = Integer.MAX_INT;\n  for(int i = 0; i < input.length(); i++) {\n    if(input[i] > max)\n      max = input[i];\n    if(input[i] < min)\n      min = input[i];\n  }\n  return max-min;\n}""}"
68,4.0,5.0,0.5,1.0,2017-03-24 06:07:59.131333,3,,"public int difference(int input[]) {
  int max = Integer.MIN_INT;
  int min = Integer.MAX_INT;
  for(int i = 0; i < input.length(); i++) {
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max-min;
}"
69,4.0,2.0,0.5,1.0,2017-03-24 06:08:00.550160,3,,"public int difference(int input[]) {
  int max = Integer.MIN_INT;
  int min = Integer.MAX_INT;
  for(int i = 0; i < input.length(); i++) {
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max-min;
}"
70,4.0,2.0,0.5,1.0,2017-03-24 06:08:13.117078,3,34,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent2(int[] a) {\n    // O(n log(n))\n    Arrays.sort(a);\n    int[] counts = new int[a.length];\n    int count = 0;\n    for (// O(n)\n    int i = 0; // O(n)\n    i < a.length; // O(n)\n    i++) {\n        count++;\n        if (i == a.length - 1 || a[i] != a[i + 1]) {\n            counts[i] = count;\n            count = 0;\n        }\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":3},""code"":""public int difference(int input[]) {\n  int max = Integer.MIN_INT;\n  int min = Integer.MAX_INT;\n  for(int i = 0; i < input.length(); i++) {\n    if(input[i] > max)\n      max = input[i];\n    if(input[i] < min)\n      min = input[i];\n  }\n  return max-min;\n}""}"
71,4.0,2.0,0.5,1.0,2017-03-24 06:08:30.064413,3,35,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent1(int[] a) {\n    int[] counts = new int[a.length];\n    for (// O(n*n)\n    int i = 0; // O(n*n)\n    i < a.length; // O(n*n)\n    i++) {\n        // O(n) in each iteration\n        counts[i] = count(a, a[i]);\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":4},""code"":""public int difference(int input[]) {\n  int max = Integer.MIN_INT;\n  int min = Integer.MAX_INT;\n  for(int i = 0; i < input.length(); i++) {\n    if(input[i] > max)\n      max = input[i];\n    if(input[i] < min)\n      min = input[i];\n  }\n  return max-min;\n}""}"
72,4.0,2.0,0.5,1.0,2017-03-24 06:08:49.428373,3,36,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String args[]) {\n    int m = 10, n = 20, max;\n    max = (m > n) ? m : n;\n    System.out.println(\""max of \"" + m + \"" and \"" + n + \"": \"" + max);\n    n = 5;\n    max = (m > n) ? m : n;\n    System.out.println(\""max of \"" + m + \"" and \"" + n + \"": \"" + max);\n}\n"",""rating"":4},""code"":""public int difference(int input[]) {\n  int max = Integer.MIN_INT;\n  int min = Integer.MAX_INT;\n  for(int i = 0; i < input.length(); i++) {\n    if(input[i] > max)\n      max = input[i];\n    if(input[i] < min)\n      min = input[i];\n  }\n  return max-min;\n}""}"
73,0.0,2.0,0.5,1.0,2017-03-24 06:08:52.938698,3,,"public int difference(int input[]) {
  int max = Integer.MIN_INT;
  int min = Integer.MAX_INT;
  for(int i = 0; i < input.length(); i++) {
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max-min;
}"
74,0.0,0.0,0.5,1.0,2017-03-24 06:08:57.229416,3,,"public int difference(int input[]) {
  int max = Integer.MIN_INT;
  int min = Integer.MAX_INT;
  for(int i = 0; i < input.length(); i++) {
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max-min;
}"
75,0.0,0.0,0.0,1.0,2017-03-24 06:08:58.225641,3,,"public int difference(int input[]) {
  int max = Integer.MIN_INT;
  int min = Integer.MAX_INT;
  for(int i = 0; i < input.length(); i++) {
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max-min;
}"
76,0.0,0.0,0.0,0.0,2017-03-24 06:08:59.213615,3,,"public int difference(int input[]) {
  int max = Integer.MIN_INT;
  int min = Integer.MAX_INT;
  for(int i = 0; i < input.length(); i++) {
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max-min;
}"
77,3.0,0.0,0.0,0.0,2017-03-24 06:09:04.374273,3,,"public int difference(int input[]) {
  int max = Integer.MIN_INT;
  int min = Integer.MAX_INT;
  for(int i = 0; i < input.length(); i++) {
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max-min;
}"
78,3.0,0.0,0.0,0.0,2017-03-24 06:09:40.299691,3,37,"{""qId"":1,""reco"":{""rank"":6,""source"":0,""text"":""/**\n     * Count the primes between min and max, inclusive.\n     */\nprivate static int countPrimes(int min, int max) {\n    int count = 0;\n    for (int i = min; i <= max; i++) if (isPrime(i))\n        count++;\n    return count;\n}\n"",""rating"":3},""code"":""public int difference(int input[]) {\n  int max = Integer.MIN_INT;\n  int min = Integer.MAX_INT;\n  for(int i = 0; i < input.length(); i++) {\n    if(input[i] > max)\n      max = input[i];\n    if(input[i] < min)\n      min = input[i];\n  }\n  return max-min;\n}""}"
79,2.0,0.0,0.0,0.0,2017-03-24 06:09:46.075873,3,,"public int difference(int input[]) {
  int max = Integer.MIN_INT;
  int min = Integer.MAX_INT;
  for(int i = 0; i < input.length(); i++) {
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max-min;
}"
80,2.0,2.0,0.0,0.0,2017-03-24 06:09:48.817728,3,,"public int difference(int input[]) {
  int max = Integer.MIN_INT;
  int min = Integer.MAX_INT;
  for(int i = 0; i < input.length(); i++) {
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max-min;
}"
81,2.0,2.0,0.0,0.0,2017-03-24 06:10:09.924918,3,38,"{""qId"":1,""reco"":{""rank"":6,""source"":0,""text"":""/**\n     * Count the primes between min and max, inclusive.\n     */\nprivate static int countPrimes(int min, int max) {\n    int count = 0;\n    for (int i = min; i <= max; i++) if (isPrime(i))\n        count++;\n    return count;\n}\n"",""rating"":3},""code"":""public int difference(int input[]) {\n  int max = Integer.MIN_INT;\n  int min = Integer.MAX_INT;\n  for(int i = 0; i < input.length(); i++) {\n    if(input[i] > max)\n      max = input[i];\n    if(input[i] < min)\n      min = input[i];\n  }\n  return max-min;\n}""}"
82,2.0,2.0,0.0,0.0,2017-03-24 06:10:12.844838,3,39,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String args[]) {\n    int m = 10, n = 20, max;\n    max = (m > n) ? m : n;\n    System.out.println(\""max of \"" + m + \"" and \"" + n + \"": \"" + max);\n    n = 5;\n    max = (m > n) ? m : n;\n    System.out.println(\""max of \"" + m + \"" and \"" + n + \"": \"" + max);\n}\n"",""rating"":4},""code"":""public int difference(int input[]) {\n  int max = Integer.MIN_INT;\n  int min = Integer.MAX_INT;\n  for(int i = 0; i < input.length(); i++) {\n    if(input[i] > max)\n      max = input[i];\n    if(input[i] < min)\n      min = input[i];\n  }\n  return max-min;\n}""}"
83,3.5,2.0,0.0,0.0,2017-03-24 06:10:16.604814,3,,"public int difference(int input[]) {
  int max = Integer.MIN_INT;
  int min = Integer.MAX_INT;
  for(int i = 0; i < input.length(); i++) {
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max-min;
}"
84,3.5,1.0,0.0,0.0,2017-03-24 06:10:22.823805,3,,"public int difference(int input[]) {
  int max = Integer.MIN_INT;
  int min = Integer.MAX_INT;
  for(int i = 0; i < input.length(); i++) {
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max-min;
}"
85,3.5,1.0,0.0,0.0,2017-03-24 06:10:33.444993,3,40,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent2(int[] a) {\n    // O(n log(n))\n    Arrays.sort(a);\n    int[] counts = new int[a.length];\n    int count = 0;\n    for (// O(n)\n    int i = 0; // O(n)\n    i < a.length; // O(n)\n    i++) {\n        count++;\n        if (i == a.length - 1 || a[i] != a[i + 1]) {\n            counts[i] = count;\n            count = 0;\n        }\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":3},""code"":""public int difference(int input[]) {\n  int max = Integer.MIN_INT;\n  int min = Integer.MAX_INT;\n  for(int i = 0; i < input.length(); i++) {\n    if(input[i] > max)\n      max = input[i];\n    if(input[i] < min)\n      min = input[i];\n  }\n  return max-min;\n}""}"
86,3.5,1.0,0.0,0.0,2017-03-24 06:10:43.265226,3,41,"{""qId"":1,""reco"":{""rank"":6,""source"":0,""text"":""/**\n     * Count the primes between min and max, inclusive.\n     */\nprivate static int countPrimes(int min, int max) {\n    int count = 0;\n    for (int i = min; i <= max; i++) if (isPrime(i))\n        count++;\n    return count;\n}\n"",""rating"":3},""code"":""public int difference(int input[]) {\n  int max = Integer.MIN_INT;\n  int min = Integer.MAX_INT;\n  for(int i = 0; i < input.length(); i++) {\n    if(input[i] > max)\n      max = input[i];\n    if(input[i] < min)\n      min = input[i];\n  }\n  return max-min;\n}""}"
87,3.5,1.0,0.0,0.0,2017-03-24 06:10:49.362611,3,42,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""public void run() {\n    count = countPrimes(min, max);\n    System.out.println(\""There are \"" + count + \"" primes between \"" + min + \"" and \"" + max);\n    addToTotal(count);\n}\n"",""rating"":2},""code"":""public int difference(int input[]) {\n  int max = Integer.MIN_INT;\n  int min = Integer.MAX_INT;\n  for(int i = 0; i < input.length(); i++) {\n    if(input[i] > max)\n      max = input[i];\n    if(input[i] < min)\n      min = input[i];\n  }\n  return max-min;\n}""}"
88,3.5,1.0,0.0,0.0,2017-03-24 06:10:53.530135,3,43,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String args[]) {\n    int m = 10, n = 20, max;\n    max = (m > n) ? m : n;\n    System.out.println(\""max of \"" + m + \"" and \"" + n + \"": \"" + max);\n    n = 5;\n    max = (m > n) ? m : n;\n    System.out.println(\""max of \"" + m + \"" and \"" + n + \"": \"" + max);\n}\n"",""rating"":3},""code"":""public int difference(int input[]) {\n  int max = Integer.MIN_INT;\n  int min = Integer.MAX_INT;\n  for(int i = 0; i < input.length(); i++) {\n    if(input[i] > max)\n      max = input[i];\n    if(input[i] < min)\n      min = input[i];\n  }\n  return max-min;\n}""}"
89,3.5,1.0,3.0,0.0,2017-03-24 06:11:11.357892,3,,"public int difference(int input[]) {
  int max = Integer.MIN_INT;
  int min = Integer.MAX_INT;
  for(int i = 0; i < input.length(); i++) {
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max-min;
}"
90,1.5,1.0,3.0,0.0,2017-03-24 06:12:06.080841,3,,"public int difference(int input[]) {
  int max = Integer.MIN_INT;
  int min = Integer.MAX_INT;
  for(int i = 0; i < input.length(); i++) {
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  //Return maximum difference in an array
  return max-min;
}"
91,1.5,1.0,1.0,0.0,2017-03-24 06:12:07.834819,3,,"public int difference(int input[]) {
  int max = Integer.MIN_INT;
  int min = Integer.MAX_INT;
  for(int i = 0; i < input.length(); i++) {
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  //Return maximum difference in an array
  return max-min;
}"
92,1.5,1.0,1.0,5.0,2017-03-24 06:12:09.013429,3,,"public int difference(int input[]) {
  int max = Integer.MIN_INT;
  int min = Integer.MAX_INT;
  for(int i = 0; i < input.length(); i++) {
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  //Return maximum difference in an array
  return max-min;
}"
93,1.5,1.0,1.0,5.0,2017-03-24 06:13:14.849653,3,44,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent1(int[] a) {\n    int[] counts = new int[a.length];\n    for (// O(n*n)\n    int i = 0; // O(n*n)\n    i < a.length; // O(n*n)\n    i++) {\n        // O(n) in each iteration\n        counts[i] = count(a, a[i]);\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":4},""code"":""public int difference(int input[]) {\n  int max = Integer.MIN_INT;\n  int min = Integer.MAX_INT;\n  for(int i = 0; i < input.length(); i++) {\n    if(input[i] > max)\n      max = input[i];\n    if(input[i] < min)\n      min = input[i];\n  }\n  //Return maximum difference in an array\n  return max-min;\n}""}"
94,1.5,1.0,1.0,5.0,2017-03-24 06:13:19.612274,3,45,"{""qId"":1,""reco"":{""rank"":6,""source"":1,""text"":""public void compute() {\n    int maxDivisors = 0;\n    int whichInt = 0;\n    for (int i = min; i < max; i++) {\n        int divisors = countDivisors(i);\n        if (divisors > maxDivisors) {\n            maxDivisors = divisors;\n            whichInt = i;\n        }\n    }\n    resultQueue.add(new Result(maxDivisors, whichInt));\n}\n"",""rating"":3},""code"":""public int difference(int input[]) {\n  int max = Integer.MIN_INT;\n  int min = Integer.MAX_INT;\n  for(int i = 0; i < input.length(); i++) {\n    if(input[i] > max)\n      max = input[i];\n    if(input[i] < min)\n      min = input[i];\n  }\n  //Return maximum difference in an array\n  return max-min;\n}""}"
95,1.0,1.0,1.0,1.0,2017-03-24 06:17:12.615803,3,46,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""/**\n      Constructs a manager with a given name, annual salary and weekly bonus.\n      @param name the name of this employee\n      @param salary the annual salary\n      @param bonus the weekly bonus\n    */\npublic Manager(String name, double salary, double bonus) {\n    super(name, salary);\n    weeklyBonus = bonus;\n}\n"",""rating"":5},""code"":""double getTax(Person p) {\n  Employee e = new Person();\n  double salary = p.getSalary();\n}""}"
96,1.0,1.0,4.0,1.0,2017-03-24 06:18:01.871071,3,,"double getTax(Person p) {
  Employee e = new Person();
  double salary = p.getSalary();
}"
97,0.0,1.0,4.0,1.0,2017-03-24 06:18:47.593610,3,,"double getTax(Person p) {
  Employee e = new Person();
  double salary = p.getSalary();
}"
98,0.0,0.0,4.0,1.0,2017-03-24 06:18:48.544856,3,,"double getTax(Person p) {
  Employee e = new Person();
  double salary = p.getSalary();
}"
99,0.0,0.0,4.0,0.0,2017-03-24 06:18:49.671816,3,,"double getTax(Person p) {
  Employee e = new Person();
  double salary = p.getSalary();
}"
100,0.0,0.0,4.0,0.0,2017-03-24 06:19:08.344956,3,47,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""/**\n      Constructs a manager with a given name, annual salary and weekly bonus.\n      @param name the name of this employee\n      @param salary the annual salary\n      @param bonus the weekly bonus\n    */\npublic Manager(String name, double salary, double bonus) {\n    super(name, salary);\n    weeklyBonus = bonus;\n}\n"",""rating"":4},""code"":""double getTax(Person p) {\n  Employee e = new Person();\n  double salary = p.getSalary();\n}""}"
101,0.0,0.0,4.0,4.0,2017-03-24 06:20:31.896810,3,,"double getTax(Person p) {
  //type casting objects
  Employee e = new Person();
  double salary = p.getSalary();
}"
102,0.0,0.0,4.0,4.0,2017-03-24 06:21:12.178754,3,48,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""@Test\npublic void testNameConcat() {\n    Person p = new Person(\""Ian\"", \""Darwin\"");\n    String f = p.getFullName();\n    assertThat(\""Name concatenation\"", f, equals(\""Ian Darwin\""));\n}\n"",""rating"":3},""code"":""double getTax(Person p) {\n  //type casting objects\n  Employee e = new Person();\n  double salary = p.getSalary();\n}""}"
103,0.0,0.0,4.0,4.0,2017-03-24 06:21:15.579198,3,49,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""@Test\npublic void testNameConcat() {\n    Person p = new Person(\""Ian\"", \""Darwin\"");\n    String f = p.getFullName();\n    assertThat(f, containsString(\""Ian\""));\n    assertThat(f, equalTo(\""Ian Darwin\""));\n    // contrived, to show syntax\n    assertThat(f, not(containsString(\""/\"")));\n}\n"",""rating"":3},""code"":""double getTax(Person p) {\n  //type casting objects\n  Employee e = new Person();\n  double salary = p.getSalary();\n}""}"
104,0.0,0.0,4.0,4.0,2017-03-24 06:21:22.613827,3,50,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""@Test\npublic void testNameConcat() {\n    Person p = new Person(\""Ian\"", \""Darwin\"");\n    String f = p.getFullName();\n    assertEquals(\""Name concatenation\"", \""Ian Darwin\"", f);\n}\n"",""rating"":3},""code"":""double getTax(Person p) {\n  //type casting objects\n  Employee e = new Person();\n  double salary = p.getSalary();\n}""}"
105,0.0,0.0,4.0,4.0,2017-03-24 06:25:25.796617,3,51,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""protected void doNode(Node p) {\n    if (p.getNodeType() == Node.ELEMENT_NODE)\n        doElement((Element) p);\n    else if (p.getNodeType() == Node.TEXT_NODE)\n        doCData((org.w3c.dom.CharacterData) p);\n    else\n        System.err.println(\""IGNORING non-Element: \"" + p.getClass() + ':' + p.toString() + \""\\n\"" + p.getNodeValue());\n}\n"",""rating"":5},""code"":""double getTax(Person p) {\n  //type casting objects\n  Employee e = (Employee) p;\n  BusinessOwner b = (BusinessOwner) p;\n  Veteran v = (Veteran) p;\n  double salary = e.getSalary();\n}""}"
106,0.0,0.0,4.0,0.0,2017-03-24 06:29:15.801552,3,,"double getTax(Person p) {
  //type casting objects
  Employee e = (Employee) p;
  BusinessOwner b = (BusinessOwner) p;
  Veteran v = (Veteran) p;
  //double salary = e.getSalary();
  //double profit = b.getProfit();
  //String veteran_id = v.veteran_id;
  
  
}"
107,0.0,0.0,4.0,4.5,2017-03-24 06:29:37.409264,3,,"double getTax(Person p) {
  //type casting objects
  Employee e = (Employee) p;
  BusinessOwner b = (BusinessOwner) p;
  Veteran v = (Veteran) p;

  
  
}"
108,0.0,3.5,4.0,4.5,2017-03-24 06:33:43.538387,3,,"double getTax(Person p) {
  //type casting objects
  if(p.instanceOf(Employee)) {
    
  }
  Employee e = (Employee) p;
  BusinessOwner b = (BusinessOwner) p;
  Veteran v = (Veteran) p;
  
}"
109,0.0,3.5,4.0,1.5,2017-03-24 06:33:46.104093,3,,"double getTax(Person p) {
  //type casting objects
  if(p.instanceOf(Employee)) {
    
  }
  Employee e = (Employee) p;
  BusinessOwner b = (BusinessOwner) p;
  Veteran v = (Veteran) p;
  
}"
110,0.0,3.5,4.0,1.5,2017-03-24 06:34:09.075223,3,52,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""public static void main(String[] args) {\n    Employee[] staff = new Employee[3];\n    staff[0] = new HourlyEmployee(\""Morgan, Harry\"", 30);\n    staff[1] = new SalariedEmployee(\""Lin, Sally\"", 52000);\n    staff[2] = new Manager(\""Smith, Mary\"", 104000, 50);\n    Scanner in = new Scanner(System.in);\n    for (Employee e : staff) {\n        System.out.print(\""Hours worked by \"" + e.getName() + \"": \"");\n        int hours = in.nextInt();\n        System.out.println(\""Salary: \"" + e.weeklyPay(hours));\n    }\n}\n"",""rating"":4},""code"":""double getTax(Person p) {\n  //type casting objects\n  if(p.instanceOf(Employee)) {\n    \n  }\n  Employee e = (Employee) p;\n  BusinessOwner b = (BusinessOwner) p;\n  Veteran v = (Veteran) p;\n  \n}""}"
111,0.0,3.5,4.0,0.5,2017-03-24 06:35:30.837524,3,,"double getTax(Person p) {
  //type casting objects
  if(p instanceof Employee) {
    
  }
  Employee e = (Employee) p;
  BusinessOwner b = (BusinessOwner) p;
  Veteran v = (Veteran) p;
  
}"
112,0.0,3.5,4.0,0.0,2017-03-24 06:35:33.328276,3,,"double getTax(Person p) {
  //type casting objects
  if(p instanceof Employee) {
    
  }
  Employee e = (Employee) p;
  BusinessOwner b = (BusinessOwner) p;
  Veteran v = (Veteran) p;
  
}"
113,0.0,3.5,4.0,0.5,2017-03-24 06:35:39.399083,3,,"double getTax(Person p) {
  //type casting objects
  if(p instanceof Employee) {
    
  }
  Employee e = (Employee) p;
  BusinessOwner b = (BusinessOwner) p;
  Veteran v = (Veteran) p;
  
}"
114,0.0,3.5,4.0,0.5,2017-03-24 06:36:14.799340,3,53,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""public static void process(Vehicle v, String plateNumber) {\n    // This example shows the syntax of instanceof and casting\n    if (v instanceof Car) {\n        // Vehicle has no setLicensePlateNumber method--must cast\n        Car c = (Car) v;\n        c.setLicensePlateNumber(plateNumber);\n    }\n    // calls v.toString()\n    System.out.println(v);\n}\n"",""rating"":5},""code"":""double getTax(Person p) {\n  //type casting objects\n  if(p instanceof Employee) {\n    \n  }\n  Employee e = (Employee) p;\n  BusinessOwner b = (BusinessOwner) p;\n  Veteran v = (Veteran) p;\n  \n}""}"
115,0.0,3.5,4.0,0.5,2017-03-24 06:36:17.039543,3,54,"{""qId"":2,""reco"":{""rank"":6,""source"":1,""text"":""/**\n     * This main() method is the standalone program that figures out what\n     * database to connect to with what driver, connects to the database,\n     * creates a RemoteDBBankServer object, and registers it with the registry,\n     * making it available for client use\n     **/\npublic static void main(String[] args) {\n    try {\n        // Create a new Properties object.  Attempt to initialize it from\n        // the BankDB.props file or the file optionally specified on the \n        // command line, ignoring errors.\n        Properties p = new Properties();\n        try {\n            p.load(new FileInputStream(args[0]));\n        } catch (Exception e) {\n            try {\n                p.load(new FileInputStream(\""BankDB.props\""));\n            } catch (Exception e2) {\n            }\n        }\n        // The BankDB.props file (or file specified on the command line)\n        // must contain properties \""driver\"" and \""database\"", and may\n        // optionally contain properties \""user\"" and \""password\"".\n        String driver = p.getProperty(\""driver\"");\n        String database = p.getProperty(\""database\"");\n        String user = p.getProperty(\""user\"", \""\"");\n        String password = p.getProperty(\""password\"", \""\"");\n        // Load the database driver class\n        Class.forName(driver);\n        // Connect to the database that stores our accounts\n        Connection db = DriverManager.getConnection(database, user, password);\n        // Configure the database to allow multiple queries and updates\n        // to be grouped into atomic transactions\n        db.setAutoCommit(false);\n        db.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\n        // Create a server object that uses our database connection\n        RemoteDBBankServer bank = new RemoteDBBankServer(db);\n        // Read a system property to figure out how to name this server.\n        // Use \""SecondRemote\"" as the default.\n        String name = System.getProperty(\""bankname\"", \""SecondRemote\"");\n        // Register the server with the name\n        Naming.rebind(name, bank);\n        // And tell everyone that we're up and running.\n        System.out.println(name + \"" is open and ready for customers.\"");\n    } catch (Exception e) {\n        System.err.println(e);\n        if (e instanceof SQLException)\n            System.err.println(\""SQL State: \"" + ((SQLException) e).getSQLState());\n        System.err.println(\""Usage: java [-Dbankname=<name>] \"" + \""com.davidflanagan.examples.sql.RemoteDBBankServer \"" + \""[<dbpropsfile>]\"");\n        System.exit(1);\n    }\n}\n"",""rating"":5},""code"":""double getTax(Person p) {\n  //type casting objects\n  if(p instanceof Employee) {\n    \n  }\n  Employee e = (Employee) p;\n  BusinessOwner b = (BusinessOwner) p;\n  Veteran v = (Veteran) p;\n  \n}""}"
116,0.0,3.5,4.0,0.5,2017-03-24 06:39:19.122414,3,55,"{""qId"":2,""reco"":{""rank"":6,""source"":1,""text"":""private void maybeKillParent() {\n    if (parent == null)\n        return;\n    if (parent instanceof Frame) {\n        ((Frame) parent).setVisible(true);\n        ((Frame) parent).dispose();\n    }\n    if (parent instanceof JInternalFrame) {\n        ((JInternalFrame) parent).setVisible(true);\n        ((JInternalFrame) parent).dispose();\n    }\n}\n"",""rating"":4},""code"":""double getTax(Person p) {\n  //type casting objects\n  if(p instanceof Employee) {\n    Employee e = (Employee) p;\n    \n  }\n  else if(p instanceof BusinessOwner) {\n    BusinessOwner b = (BusinessOwner) p;\n  }\n  else if(p instanceof Veteran) {\n    Veteran v = (Veteran) p;\n  }\n  \n  \n  \n  \n}""}"
117,0.0,3.5,4.0,0.5,2017-03-24 06:39:24.838792,3,56,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""public void run() {\n    if (message instanceof PokerGameState)\n        newState((PokerGameState) message);\n    else if (message instanceof String)\n        messageFromServer.setText((String) message);\n    else if (message instanceof PokerCard[]) {\n        opponentHand = (PokerCard[]) message;\n        display.repaint();\n    }\n}\n"",""rating"":5},""code"":""double getTax(Person p) {\n  //type casting objects\n  if(p instanceof Employee) {\n    Employee e = (Employee) p;\n    \n  }\n  else if(p instanceof BusinessOwner) {\n    BusinessOwner b = (BusinessOwner) p;\n  }\n  else if(p instanceof Veteran) {\n    Veteran v = (Veteran) p;\n  }\n  \n  \n  \n  \n}""}"
118,0.0,3.5,4.0,0.5,2017-03-24 06:39:43.930195,3,57,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""/**\n         * This method is called when a message from the hub is received \n         * by this client.  If the message is of type PokerGameState,\n         * then the newState() method in the PokerWindow class is called\n         * to handle the change in the state of the game.  If the message\n         * is of type String, it represents a message that is to be\n         * displayed to the user; the string is displayed in the JLabel\n         * messageFromServer.  If the message is of type PokerCard[],\n         * then it is the opponent's hand.  This had is sent when the\n         * game has ended and the player gets to see the opponent's hand.\n         * <p>Note that this method is called from a separate thread, not\n         * from the GUI event thread.  In order to avoid synchronization\n         * issues, this method uses SwingUtilties.invokeLater() to carry \n         * out its task in the GUI event thread.\n         */\nprotected void messageReceived(final Object message) {\n    SwingUtilities.invokeLater(new Runnable() {\n\n        public void run() {\n            if (message instanceof PokerGameState)\n                newState((PokerGameState) message);\n            else if (message instanceof String)\n                messageFromServer.setText((String) message);\n            else if (message instanceof PokerCard[]) {\n                opponentHand = (PokerCard[]) message;\n                display.repaint();\n            }\n        }\n    });\n}\n"",""rating"":5},""code"":""double getTax(Person p) {\n  //type casting objects\n  if(p instanceof Employee) {\n    Employee e = (Employee) p;\n    \n  }\n  else if(p instanceof BusinessOwner) {\n    BusinessOwner b = (BusinessOwner) p;\n  }\n  else if(p instanceof Veteran) {\n    Veteran v = (Veteran) p;\n  }\n  \n  \n  \n  \n}""}"
119,0.0,5.0,4.0,0.5,2017-03-24 06:51:49.373976,3,,"double getTax(Person p) {
  //type casting objects
  int tax = 0;
  if(p instanceof Employee) {
    Employee e = (Employee) p;
    if(e.getSalary() < 10000.0)
      tax = 0.02 * p.getSalary();
    else
      tax = 0.05 * p.getSalary();
    return tax;
  }
  else if(p instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) p;
    tax = 0.1 * b.getProfit();
    return tax;
  }
  else if(p instanceof Veteran) {
    return tax;
  }
  else return new Exception();
}"
120,0.0,5.0,2.5,0.5,2017-03-24 06:51:51.829096,3,,"double getTax(Person p) {
  //type casting objects
  int tax = 0;
  if(p instanceof Employee) {
    Employee e = (Employee) p;
    if(e.getSalary() < 10000.0)
      tax = 0.02 * p.getSalary();
    else
      tax = 0.05 * p.getSalary();
    return tax;
  }
  else if(p instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) p;
    tax = 0.1 * b.getProfit();
    return tax;
  }
  else if(p instanceof Veteran) {
    return tax;
  }
  else return new Exception();
}"
121,0.0,5.0,2.5,4.5,2017-03-24 06:52:22.354826,3,,"double getTax(Person p) {
  //type casting objects
  int tax = 0;
  if(p instanceof Employee) {
    Employee e = (Employee) p;
    if(e.getSalary() < 10000.0)
      tax = 0.02 * p.getSalary();
    else
      tax = 0.05 * p.getSalary();
    return tax;
  }
  else if(p instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) p;
    tax = 0.1 * b.getProfit();
    return tax;
  }
  else if(p instanceof Veteran) {
    return tax;
  }
  else return new Exception();
}"
122,0.0,5.0,2.5,0.0,2017-03-24 06:52:42.730938,3,,"double getTax(Person p) {
  //type casting objects
  int tax = 0;
  if(p instanceof Employee) {
    Employee e = (Employee) p;
    if(e.getSalary() < 10000.0)
      tax = 0.02 * p.getSalary();
    else
      tax = 0.05 * p.getSalary();
    return tax;
  }
  else if(p instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) p;
    tax = 0.1 * b.getProfit();
    return tax;
  }
  else if(p instanceof Veteran) {
    return tax;
  }
  else return new Exception();
}"
123,0.0,5.0,0.0,0.0,2017-03-24 06:52:43.788861,3,,"double getTax(Person p) {
  //type casting objects
  int tax = 0;
  if(p instanceof Employee) {
    Employee e = (Employee) p;
    if(e.getSalary() < 10000.0)
      tax = 0.02 * p.getSalary();
    else
      tax = 0.05 * p.getSalary();
    return tax;
  }
  else if(p instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) p;
    tax = 0.1 * b.getProfit();
    return tax;
  }
  else if(p instanceof Veteran) {
    return tax;
  }
  else return new Exception();
}"
124,0.0,5.0,0.0,0.0,2017-03-24 06:54:08.704739,3,58,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""/**\n      Loads a picture from a given source. \n      @param source the image source.\n      @return true if the file was loaded successfully\n   */\nprivate void load(File source) {\n    try {\n        InputStream in = new FileInputStream(source);\n        for (int i = 0; i < HEADER_SIZE; i++) {\n            int b = in.read();\n            if (b == -1) {\n                error(\""Premature end of file\"");\n            }\n            header[i] = (byte) b;\n        }\n        int formatType = getUnsignedInt2(20);\n        if (formatType != 1) {\n            error(\""Not an uncompressed sound file.\"");\n        }\n        int numChannels = getUnsignedInt2(22);\n        if (numChannels != 1) {\n            error(\""Not a mono sound file.\"");\n        }\n        sampleRate = getUnsignedInt2(24);\n        int bitsPerSample = getUnsignedInt2(34);\n        if (bitsPerSample != 16) {\n            error(\""Not a 16 bit sound file.\"");\n        }\n        // Read data size and allocate data array\n        // 2 bytes per data\n        int dataSize = getUnsignedInt4(40) / 2;\n        samples = new int[dataSize];\n        // Read sound data\n        for (int i = 0; i < dataSize; i++) {\n            samples[i] = getSignedInt2(in);\n        }\n    } catch (Exception ex) {\n        error(ex.getMessage());\n    }\n}\n"",""rating"":3},""code"":""double getTax(Person p) throws Exception{\n  //type casting objects\n  int tax = 0;\n  if(p instanceof Employee) {\n    Employee e = (Employee) p;\n    if(e.getSalary() < 10000.0)\n      tax = 0.02 * p.getSalary();\n    else\n      tax = 0.05 * p.getSalary();\n    return tax;\n  }\n  else if(p instanceof BusinessOwner) {\n    BusinessOwner b = (BusinessOwner) p;\n    tax = 0.1 * b.getProfit();\n    return tax;\n  }\n  else if(p instanceof Veteran) {\n    return tax;\n  }\n  else throw new Exception();\n}""}"
125,0.0,5.0,0.0,0.0,2017-03-24 06:54:11.633532,3,59,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""/**\n      Loads a picture from a given source. \n      @param source the image source.\n      @return true if the file was loaded successfully\n   */\nprivate void load(File source) {\n    try {\n        InputStream in = new FileInputStream(source);\n        for (int i = 0; i < HEADER_SIZE; i++) {\n            int b = in.read();\n            if (b == -1) {\n                error(\""Premature end of file\"");\n            }\n            header[i] = (byte) b;\n        }\n        int formatType = getUnsignedInt2(20);\n        if (formatType != 1) {\n            error(\""Not an uncompressed sound file.\"");\n        }\n        int numChannels = getUnsignedInt2(22);\n        if (numChannels != 1) {\n            error(\""Not a mono sound file.\"");\n        }\n        sampleRate = getUnsignedInt2(24);\n        int bitsPerSample = getUnsignedInt2(34);\n        if (bitsPerSample != 16) {\n            error(\""Not a 16 bit sound file.\"");\n        }\n        // Read data size and allocate data array\n        // 2 bytes per data\n        int dataSize = getUnsignedInt4(40) / 2;\n        samples = new int[dataSize];\n        // Read sound data\n        for (int i = 0; i < dataSize; i++) {\n            samples[i] = getSignedInt2(in);\n        }\n    } catch (Exception ex) {\n        error(ex.getMessage());\n    }\n}\n"",""rating"":4},""code"":""double getTax(Person p) throws Exception{\n  //type casting objects\n  int tax = 0;\n  if(p instanceof Employee) {\n    Employee e = (Employee) p;\n    if(e.getSalary() < 10000.0)\n      tax = 0.02 * p.getSalary();\n    else\n      tax = 0.05 * p.getSalary();\n    return tax;\n  }\n  else if(p instanceof BusinessOwner) {\n    BusinessOwner b = (BusinessOwner) p;\n    tax = 0.1 * b.getProfit();\n    return tax;\n  }\n  else if(p instanceof Veteran) {\n    return tax;\n  }\n  else throw new Exception();\n}""}"
126,0.0,5.0,0.0,0.0,2017-03-24 06:54:19.466523,3,60,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""/**\n    * Attempts to save the current image to a file selected by the user. \n    * @param format the format of the image, either \""PNG\"" or \""JPEG\"" in this program\n    */\nprivate void doSaveFile(String format) {\n    if (fileDialog == null)\n        fileDialog = new JFileChooser();\n    fileDialog.setSelectedFile(new File(\""image.\"" + format.toLowerCase()));\n    fileDialog.setDialogTitle(\""Select File to be Saved\"");\n    int option = fileDialog.showSaveDialog(null);\n    if (option != JFileChooser.APPROVE_OPTION)\n        // User canceled or clicked the dialog's close box.\n        return;\n    File selectedFile = fileDialog.getSelectedFile();\n    if (selectedFile.exists()) {\n        // Ask the user whether to replace the file.\n        int response = JOptionPane.showConfirmDialog(null, \""The file \\\""\"" + selectedFile.getName() + \""\\\"" already exists.\\nDo you want to replace it?\"", \""Confirm Save\"", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);\n        if (response != JOptionPane.YES_OPTION)\n            // User does not want to replace the file.\n            return;\n    }\n    try {\n        boolean hasFormat = ImageIO.write(OSC, format, selectedFile);\n        if (!hasFormat)\n            throw new Exception(format + \"" format is not available.\"");\n    } catch (Exception e) {\n        System.out.println(\""Sorry, but an error occurred while trying to save the image.\"");\n        e.printStackTrace();\n    }\n}\n"",""rating"":5},""code"":""double getTax(Person p) throws Exception{\n  //type casting objects\n  int tax = 0;\n  if(p instanceof Employee) {\n    Employee e = (Employee) p;\n    if(e.getSalary() < 10000.0)\n      tax = 0.02 * p.getSalary();\n    else\n      tax = 0.05 * p.getSalary();\n    return tax;\n  }\n  else if(p instanceof BusinessOwner) {\n    BusinessOwner b = (BusinessOwner) p;\n    tax = 0.1 * b.getProfit();\n    return tax;\n  }\n  else if(p instanceof Veteran) {\n    return tax;\n  }\n  else throw new Exception();\n}""}"
127,1.0,1.0,1.0,1.0,2017-03-24 06:55:49.407431,4,61,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""double getTax(Person p){\n  \n}""}"
128,1.0,1.0,1.0,1.0,2017-03-24 07:02:02.088443,4,62,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""double getTax(Person p){\n  \n}""}"
129,1.0,1.0,1.0,1.0,2017-03-24 07:02:34.823364,4,63,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""double peek() {\n    return ((Double) s.peek()).doubleValue();\n}\n"",""rating"":2},""code"":""double getTax(Person p){\n  \n}""}"
130,1.0,1.0,1.0,1.0,2017-03-24 07:02:53.533993,4,64,"{""qId"":2,""reco"":{""rank"":6,""source"":1,""text"":""/**\n      Gets the time at which the customer entered the bank.\n      @return the arrival time\n   */\ndouble getArrivalTime() {\n    return arrivalTime;\n}\n"",""rating"":1},""code"":""double getTax(Person p){\n  \n}""}"
131,1.0,1.0,1.0,1.5,2017-03-24 07:03:05.839667,4,,"double getTax(Person p){
  
}"
132,1.0,1.0,1.0,1.5,2017-03-24 07:03:15.723884,4,65,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""double peek() {\n    return ((Double) s.peek()).doubleValue();\n}\n"",""rating"":2},""code"":""double getTax(Person p){\n  \n}""}"
133,1.0,1.0,1.0,1.5,2017-03-24 07:03:42.203479,4,66,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String[] args) {\n    double price = 9.95;\n    double taxRate = 8.25;\n    double tax = Financial.percentOf(price, taxRate);\n    System.out.printf(\""Tax: %.2f\\n\"", tax);\n}\n"",""rating"":3},""code"":""double getTax(Person p){\n  \n}""}"
134,1.0,1.0,1.0,1.5,2017-03-24 07:04:08.886431,4,67,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""double peek() {\n    return ((Double) s.peek()).doubleValue();\n}\n"",""rating"":2},""code"":""double getTax(Person p){\n  // typecasting\n}""}"
135,1.0,1.0,1.0,4.0,2017-03-24 21:38:05.667023,61,,"int Dif(int[] array){
  //find max of array
  //find min of array
  //return max-min
}"
136,1.0,1.0,1.0,5.0,2017-03-24 21:38:07.224905,15,,/**sum array
137,1.0,1.0,1.0,0.5,2017-03-24 21:38:10.459592,15,,/**sum array
138,1.0,1.0,1.0,4.0,2017-03-24 21:38:43.621112,61,68,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""/**\n      Computes the largest value of an array.\n      @param a the array\n      @return the largest value in a\n   */\npublic static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":4},""code"":""int Dif(int[] array){\n  //find max of array\n  //find min of array\n  //return max-min\n}""}"
139,1.0,1.0,1.0,4.0,2017-03-24 21:38:57.913248,61,69,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""// pre: list != null, list.length > 0\n// post: return index of minimum element of array\npublic static int findMin(int[] list) {\n    assert list != null && list.length > 0 : \""failed precondition\"";\n    int indexOfMin = 0;\n    for (int i = 1; i < list.length; i++) {\n        if (list[i] < list[indexOfMin]) {\n            indexOfMin = i;\n        }\n    }\n    return indexOfMin;\n}\n"",""rating"":4},""code"":""int Dif(int[] array){\n  //find max of array\n  //find min of array\n  //return max-min\n}""}"
140,1.0,1.0,1.0,4.5,2017-03-24 21:39:01.114531,61,,"int Dif(int[] array){
  //find max of array
  //find min of array
  //return max-min
}"
141,1.0,1.0,1.0,5.0,2017-03-24 21:39:02.209045,61,,"int Dif(int[] array){
  //find max of array
  //find min of array
  //return max-min
}"
142,3.5,1.0,1.0,5.0,2017-03-24 21:39:06.388770,61,,"int Dif(int[] array){
  //find max of array
  //find min of array
  //return max-min
}"
143,3.5,1.0,1.0,5.0,2017-03-24 21:39:19.207723,61,70,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""// pre: list != null, list.length > 0\n// post: return index of minimum element of array\npublic static int findMin(int[] list) {\n    assert list != null && list.length > 0 : \""failed precondition\"";\n    int indexOfMin = 0;\n    for (int i = 1; i < list.length; i++) {\n        if (list[i] < list[indexOfMin]) {\n            indexOfMin = i;\n        }\n    }\n    return indexOfMin;\n}\n"",""rating"":4},""code"":""int Dif(int[] array){\n  //find max of array\n  //find min of array\n  //return max-min\n}""}"
144,1.0,1.0,1.0,5.0,2017-03-24 21:39:20.643048,15,,"Array = [7,4,1];

"
145,3.5,1.0,1.0,5.0,2017-03-24 21:39:24.913964,61,71,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""/**\n      Computes the largest value of an array.\n      @param a the array\n      @return the largest value in a\n   */\npublic static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":4},""code"":""int Dif(int[] array){\n  //find max of array\n  //find min of array\n  //return max-min\n}""}"
146,1.0,1.0,1.0,2.5,2017-03-24 21:39:27.695395,59,,Return largest difference between elements of an integer array
147,1.0,1.0,1.0,3.5,2017-03-24 21:39:28.405548,59,,Return largest difference between elements of an integer array
148,1.0,1.0,1.0,1.0,2017-03-24 21:39:32.671784,16,,"/*

*/"
149,1.0,1.0,1.0,5.0,2017-03-24 21:39:34.180442,16,,"/*

*/"
150,1.0,1.0,1.0,5.0,2017-03-24 21:39:39.939141,61,,"int Dif(int[] array){
  //find max of array
  //find min of array
  //return max-min
}"
151,2.5,1.0,1.0,5.0,2017-03-24 21:39:41.338500,61,,"int Dif(int[] array){
  //find max of array
  //find min of array
  //return max-min
}"
152,2.5,3.0,1.0,5.0,2017-03-24 21:39:42.604250,61,,"int Dif(int[] array){
  //find max of array
  //find min of array
  //return max-min
}"
153,1.0,1.0,1.0,2.5,2017-03-24 21:39:46.663734,47,,"//return differnce from maximum and minimum integerest from array

"
154,1.0,1.0,1.0,3.0,2017-03-24 21:39:49.011774,59,,Return largest difference between elements of an integer array
155,2.5,3.0,1.0,2.0,2017-03-24 21:39:49.279058,61,,"int Dif(int[] array){
  //find max of array
  //find min of array
  //return max-min
}"
156,1.0,1.0,1.0,2.5,2017-03-24 21:39:51.383858,59,,Return largest difference between elements of an integer array
157,2.5,3.0,1.5,2.0,2017-03-24 21:39:52.338495,61,,"int Dif(int[] array){
  //find max of array
  //find min of array
  //return max-min
}"
158,1.0,1.0,1.0,1.0,2017-03-24 21:40:14.185632,17,72,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""int getPlayer() {\n    return playerID;\n}\n"",""rating"":1},""code"":""int largeDiff(int[] myArray){\n  \n}""}"
159,1.0,1.0,1.0,1.0,2017-03-24 21:40:23.792105,17,73,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public int compare(Object a, Object b) {\n    TimerTask t1 = (TimerTask) a;\n    TimerTask t2 = (TimerTask) b;\n    long diff = t1.nextTime - t2.nextTime;\n    if (diff < 0)\n        return -1;\n    else if (diff > 0)\n        return 1;\n    else\n        return 0;\n}\n"",""rating"":2},""code"":""int largeDiff(int[] myArray){\n  \n}""}"
160,1.0,1.0,1.0,2.0,2017-03-24 21:40:25.803785,46,,"double returnTax(){
  
}"
161,1.0,1.5,1.0,1.0,2017-03-24 21:40:30.438702,23,,
162,1.0,1.0,4.0,1.0,2017-03-24 21:40:34.615426,17,,"int largeDiff(int[] myArray){
  
}"
163,1.0,2.5,1.0,1.0,2017-03-24 21:40:40.517019,8,,"Double tax(Person p)
{
  if(p.getSalary() < 10000)
    return p.getSalary()*.02
    else
      return p.getSalary()*.02
}"
164,1.0,1.0,4.0,1.0,2017-03-24 21:40:40.826650,17,74,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""/**\n     * This constructor allows printing the contents of any JTextComponent\n     * using a default PageFormat and a default scale factor.  The default\n     * scale factor is .75 because the default fonts are overly large.\n     */\npublic PrintableDocument(JTextComponent textComponent) {\n    this(textComponent, new PageFormat(), .75);\n}\n"",""rating"":1},""code"":""int largeDiff(int[] myArray){\n  \n}""}"
165,1.0,2.5,1.5,1.0,2017-03-24 21:40:42.069285,8,,"Double tax(Person p)
{
  if(p.getSalary() < 10000)
    return p.getSalary()*.02
    else
      return p.getSalary()*.02
}"
166,1.0,1.0,4.0,1.0,2017-03-24 21:40:46.449879,17,75,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""int getPlayer() {\n    return playerID;\n}\n"",""rating"":1},""code"":""int largeDiff(int[] myArray){\n  \n}""}"
167,2.5,1.0,1.5,2.0,2017-03-24 21:40:48.012352,61,,"int Dif(int[] array){
  //find max value of array
  //find min value of array
  //return max-min
}"
168,2.5,1.0,1.0,2.0,2017-03-24 21:40:51.389920,61,,"int Dif(int[] array){
  //find max value of array
  //find min value of array
  //return max-min
}"
169,2.5,1.0,1.0,5.0,2017-03-24 21:40:53.162511,61,,"int Dif(int[] array){
  //find max value of array
  //find min value of array
  //return max-min
}"
170,1.0,1.0,4.0,1.0,2017-03-24 21:40:54.449940,17,76,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""public static void main(String[] args) {\n    /** The date at the end of the last century */\n    LocalDate endofCentury = LocalDate.of(2000, 12, 31);\n    LocalDate now = LocalDate.now();\n    Period diff = Period.between(endofCentury, now);\n    System.out.printf(\""The 21st century (up to %s) is %s old%n\"", now, diff);\n    System.out.printf(\""The 21st century is %d years, %d months and %d days old\"", diff.getYears(), diff.getMonths(), diff.getDays());\n}\n"",""rating"":2},""code"":""int largeDiff(int[] myArray){\n  \n}""}"
171,5.0,1.0,1.0,5.0,2017-03-24 21:40:54.881194,61,,"int Dif(int[] array){
  //find max value of array
  //find min value of array
  //return max-min
}"
172,1.0,1.0,4.0,1.0,2017-03-24 21:40:59.433351,17,77,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""/**\n      Creates the radio buttons to select the font size.\n      @return the panel containing the radio buttons\n   */\npublic JPanel createRadioButtons() {\n    smallButton = new JRadioButton(\""Small\"");\n    smallButton.addActionListener(listener);\n    mediumButton = new JRadioButton(\""Medium\"");\n    mediumButton.addActionListener(listener);\n    largeButton = new JRadioButton(\""Large\"");\n    largeButton.addActionListener(listener);\n    largeButton.setSelected(true);\n    // Add radio buttons to button group\n    ButtonGroup group = new ButtonGroup();\n    group.add(smallButton);\n    group.add(mediumButton);\n    group.add(largeButton);\n    JPanel panel = new JPanel();\n    panel.add(smallButton);\n    panel.add(mediumButton);\n    panel.add(largeButton);\n    panel.setBorder(new TitledBorder(new EtchedBorder(), \""Size\""));\n    return panel;\n}\n"",""rating"":1},""code"":""int largeDiff(int[] myArray){\n  \n}""}"
173,1.5,1.0,1.0,1.0,2017-03-24 21:40:59.627507,29,,"public array(int a, int b, int c)
{
  int[] list = {a, b, c};
  double difference = list[0] - list[1];
  
  return difference;
}"
174,1.5,1.0,1.0,1.0,2017-03-24 21:40:59.809807,29,,"public array(int a, int b, int c)
{
  int[] list = {a, b, c};
  double difference = list[0] - list[1];
  
  return difference;
}"
175,1.0,1.0,1.0,1.0,2017-03-24 21:41:05.606512,18,78,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String[] args) {\n    Employee[] staff = new Employee[3];\n    staff[0] = new HourlyEmployee(\""Morgan, Harry\"", 30);\n    staff[1] = new SalariedEmployee(\""Lin, Sally\"", 52000);\n    staff[2] = new Manager(\""Smith, Mary\"", 104000, 50);\n    Scanner in = new Scanner(System.in);\n    for (Employee e : staff) {\n        System.out.print(\""Hours worked by \"" + e.getName() + \"": \"");\n        int hours = in.nextInt();\n        System.out.println(\""Salary: \"" + e.weeklyPay(hours));\n    }\n}\n"",""rating"":3},""code"":""class Person{\n  String name;\n  int age;\n}\nclass Employee extends Person{\n  double getSalary();\n}\n""}"
176,1.0,1.0,4.0,1.0,2017-03-24 21:41:05.741473,17,79,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Adds a disk to this tower.\n      @param size the size of the disk to add\n   */\npublic void add(int size) {\n    if (disks.size() > 0 && disks.get(disks.size() - 1) < size) {\n        throw new IllegalStateException(\""Disk is too large\"");\n    }\n    disks.add(size);\n}\n"",""rating"":3},""code"":""int largeDiff(int[] myArray){\n  \n}""}"
177,1.0,1.0,1.0,1.0,2017-03-24 21:41:14.395379,18,80,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""/**\n      Constructs a manager with a given name, annual salary and weekly bonus.\n      @param name the name of this employee\n      @param salary the annual salary\n      @param bonus the weekly bonus\n    */\npublic Manager(String name, double salary, double bonus) {\n    super(name, salary);\n    weeklyBonus = bonus;\n}\n"",""rating"":3},""code"":""class Person{\n  String name;\n  int age;\n}\nclass Employee extends Person{\n  double getSalary();\n}\n""}"
178,1.0,1.0,4.0,1.0,2017-03-24 21:41:20.963625,17,81,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public int compare(Object a, Object b) {\n    TimerTask t1 = (TimerTask) a;\n    TimerTask t2 = (TimerTask) b;\n    long diff = t1.nextTime - t2.nextTime;\n    if (diff < 0)\n        return -1;\n    else if (diff > 0)\n        return 1;\n    else\n        return 0;\n}\n"",""rating"":3},""code"":""int largeDiff(int[] myArray){\n  \n}""}"
179,2.0,1.5,1.0,1.0,2017-03-24 21:41:26.321500,23,,"int add
"
180,1.0,1.0,4.0,1.0,2017-03-24 21:41:28.772935,17,82,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""/**\n         * Return the contents of the square in the specified row and column.\n         */\nint pieceAt(int row, int col) {\n    return board[row][col];\n}\n"",""rating"":3},""code"":""int largeDiff(int[] myArray){\n  \n}""}"
181,1.0,1.0,4.0,1.0,2017-03-24 21:41:30.562471,17,83,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""int getCount() {\n    return count;\n}\n"",""rating"":1},""code"":""int largeDiff(int[] myArray){\n  \n}""}"
182,1.0,1.0,4.0,1.0,2017-03-24 21:41:33.562762,17,84,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""int intFieldValue(Object o, String name) throws NoSuchFieldException, IllegalAccessException {\n    Class<?> c = o.getClass();\n    Field fld = c.getField(name);\n    int value = fld.getInt(o);\n    return value;\n}\n"",""rating"":1},""code"":""int largeDiff(int[] myArray){\n  \n}""}"
183,5.0,1.0,1.0,5.0,2017-03-24 21:41:33.596902,61,85,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""/**\n      Computes the largest value of an array.\n      @param a the array\n      @return the largest value in a\n   */\npublic static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":4},""code"":""int Dif(int[] array){\n  //find max value of array\n  //find min value of array\n  //return max-min\n}""}"
184,1.0,1.0,1.0,1.0,2017-03-24 21:41:34.372510,18,86,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""double value() {\n    // The value is obtained by evaluating the left and right\n    // operands and combining the values with the operator.\n    double x = left.value();\n    double y = right.value();\n    switch(op) {\n        case '+':\n            return x + y;\n        case '-':\n            return x - y;\n        case '*':\n            return x * y;\n        case '/':\n            return x / y;\n        // Bad operator!\n        default:\n            return Double.NaN;\n    }\n}\n"",""rating"":2},""code"":""class Person{\n  String name;\n  int age;\n}\nclass Employee extends Person{\n  double getSalary();\n}\n""}"
185,1.0,1.0,1.0,1.0,2017-03-24 21:41:41.132212,18,87,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""double performConversion(double f) {\n    return f *= 0.45359237;\n}\n"",""rating"":1},""code"":""class Person{\n  String name;\n  int age;\n}\nclass Employee extends Person{\n  double getSalary();\n}\n""}"
186,1.0,1.0,1.0,1.0,2017-03-24 21:41:42.682113,18,88,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Constructs a salaried employee with a given name and annual salary.\n      @param name the name of this employee\n      @param salary the annual salary\n    */\npublic SalariedEmployee(String name, double salary) {\n    setName(name);\n    annualSalary = salary;\n}\n"",""rating"":1},""code"":""class Person{\n  String name;\n  int age;\n}\nclass Employee extends Person{\n  double getSalary();\n}\n""}"
187,1.0,1.0,4.0,1.0,2017-03-24 21:41:42.902959,17,89,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""// pre: list != null\n// post: return sum of elements\n// use traditional for loop\npublic static int sumListOld(int[] list) {\n    int total = 0;\n    for (int i = 0; i < list.length; i++) {\n        total += list[i];\n        System.out.println(list[i]);\n    }\n    return total;\n}\n"",""rating"":4},""code"":""int largeDiff(int[] myArray){\n  \n}""}"
188,1.0,1.0,1.0,1.0,2017-03-24 21:41:48.741397,18,90,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""double value() {\n    // The value is the negative of the value of the operand.\n    double neg = operand.value();\n    return -neg;\n}\n"",""rating"":1},""code"":""class Person{\n  String name;\n  int age;\n}\nclass Employee extends Person{\n  double getSalary();\n}\n""}"
189,1.0,1.0,1.0,1.0,2017-03-24 21:41:50.568111,18,91,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""double performConversion(double f) {\n    return f *= 453.59237;\n}\n"",""rating"":1},""code"":""class Person{\n  String name;\n  int age;\n}\nclass Employee extends Person{\n  double getSalary();\n}\n""}"
190,1.0,1.0,1.0,1.0,2017-03-24 21:41:52.793046,18,92,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""public double weeklyPay(int hoursWorked) {\n    final int WEEKS_PER_YEAR = 52;\n    return annualSalary / WEEKS_PER_YEAR;\n}\n"",""rating"":1},""code"":""class Person{\n  String name;\n  int age;\n}\nclass Employee extends Person{\n  double getSalary();\n}\n""}"
191,1.0,1.0,5.0,1.0,2017-03-24 21:41:54.632707,17,,"int largeDiff(int[] myArray){
  
}"
192,1.0,1.0,1.0,1.0,2017-03-24 21:41:55.007742,18,93,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""public static void main(String[] args) {\n    double sum = 0;\n    int count = 0;\n    double salary = 0;\n    System.out.print(\""Enter salaries, -1 to finish: \"");\n    Scanner in = new Scanner(System.in);\n    while (salary != -1) {\n        salary = in.nextDouble();\n        if (salary != -1) {\n            sum = sum + salary;\n            count++;\n        }\n    }\n    if (count > 0) {\n        double average = sum / count;\n        System.out.println(\""Average salary: \"" + average);\n       // Process data until the sentinel is entered \n\n    } else {\n        System.out.println(\""No data\"");\n    }\n}\n       // Compute and print the average\n\n"",""rating"":1},""code"":""class Person{\n  String name;\n  int age;\n}\nclass Employee extends Person{\n  double getSalary();\n}\n""}"
193,5.0,1.0,1.0,5.0,2017-03-24 21:41:57.497536,61,94,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String args[]) {\n    int m = 10, n = 20, max;\n    max = (m > n) ? m : n;\n    System.out.println(\""max of \"" + m + \"" and \"" + n + \"": \"" + max);\n    n = 5;\n    max = (m > n) ? m : n;\n    System.out.println(\""max of \"" + m + \"" and \"" + n + \"": \"" + max);\n}\n"",""rating"":2},""code"":""int Dif(int[] array){\n  //find max value of array\n  //find min value of array\n  //return max-min\n}""}"
194,1.0,1.0,1.0,1.0,2017-03-24 21:41:57.662408,18,95,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""double value() {\n    // The value of the node is the number that it contains.\n    return number;\n}\n"",""rating"":1},""code"":""class Person{\n  String name;\n  int age;\n}\nclass Employee extends Person{\n  double getSalary();\n}\n""}"
195,5.0,1.0,1.0,5.0,2017-03-24 21:42:02.284027,61,96,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""// pre: list != null, list.length > 0\n// post: return index of minimum element of array\npublic static int findMin(int[] list) {\n    assert list != null && list.length > 0 : \""failed precondition\"";\n    int indexOfMin = 0;\n    for (int i = 1; i < list.length; i++) {\n        if (list[i] < list[indexOfMin]) {\n            indexOfMin = i;\n        }\n    }\n    return indexOfMin;\n}\n"",""rating"":4},""code"":""int Dif(int[] array){\n  //find max value of array\n  //find min value of array\n  //return max-min\n}""}"
196,1.0,1.0,5.0,1.0,2017-03-24 21:42:02.653687,17,97,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Adds a disk to this tower.\n      @param size the size of the disk to add\n   */\npublic void add(int size) {\n    if (disks.size() > 0 && disks.get(disks.size() - 1) < size) {\n        throw new IllegalStateException(\""Disk is too large\"");\n    }\n    disks.add(size);\n}\n"",""rating"":5},""code"":""int largeDiff(int[] myArray){\n  \n}""}"
197,1.0,1.0,1.0,2.5,2017-03-24 21:42:09.697320,47,98,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""int countEmptyBlock(int r, int c) {\n    // Find the size of one empty region on the board; recursive routine called by obviousBlockExists.\n    if (blockCheck[r][c] == blockCheckCt || board.getColor(r, c) != null)\n        return 0;\n    int c1 = c, c2 = c;\n    while (c1 > 0 && blockCheck[r][c1 - 1] < blockCheckCt && board.getColor(r, c1 - 1) == null) c1--;\n    while (c2 < cols - 1 && blockCheck[r][c2 + 1] < blockCheckCt && board.getColor(r, c2 + 1) == null) c2++;\n    for (int i = c1; i <= c2; i++) blockCheck[r][i] = blockCheckCt;\n    int ct = c2 - c1 + 1;\n    if (r > 0)\n        for (int i = c1; i <= c2; i++) ct += countEmptyBlock(r - 1, i);\n    if (r < rows - 1)\n        for (int i = c1; i <= c2; i++) ct += countEmptyBlock(r + 1, i);\n    return ct;\n}\n"",""rating"":1},""code"":""//return differnce from maximum and minimum integerest from array\nint something = new array[1,2,3];\nint first;\nint method(int first)\n{\n  return first;\n}""}"
198,1.0,1.0,1.0,1.0,2017-03-24 21:42:10.196655,34,99,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""/**\n      Constructs a Person object\n      @param aName the name of the person\n   */\npublic Person(String aName) {\n    name = aName;\n}\n"",""rating"":3},""code"":""public void Person()\n{\n  //interface\n}""}"
199,1.0,1.0,1.0,2.5,2017-03-24 21:42:12.662715,47,100,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""int getPlayer() {\n    return playerID;\n}\n"",""rating"":1},""code"":""//return differnce from maximum and minimum integerest from array\nint something = new array[1,2,3];\nint first;\nint method(int first)\n{\n  return first;\n}""}"
200,5.0,1.0,1.0,5.0,2017-03-24 21:42:13.233722,61,101,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""public CountDivisorsThread(int min, int max) {\n    this.min = min;\n    this.max = max;\n}\n"",""rating"":1},""code"":""int Dif(int[] array){\n  //find max value of array\n  //find min value of array\n  //return max-min\n}""}"
201,1.0,1.0,1.0,2.5,2017-03-24 21:42:14.895784,47,102,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public String toString() {\n    return \""(\"" + first + \"", \"" + second + \"")\"";\n}\n"",""rating"":1},""code"":""//return differnce from maximum and minimum integerest from array\nint something = new array[1,2,3];\nint first;\nint method(int first)\n{\n  return first;\n}""}"
202,5.0,1.0,1.0,5.0,2017-03-24 21:42:16.391911,61,103,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""Task(int min, int max) {\n    this.min = min;\n    this.max = max;\n}\n"",""rating"":1},""code"":""int Dif(int[] array){\n  //find max value of array\n  //find min value of array\n  //return max-min\n}""}"
203,1.0,1.0,1.0,2.5,2017-03-24 21:42:16.704771,47,104,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""/**\n         * Return the contents of the square in the specified row and column.\n         */\nint pieceAt(int row, int col) {\n    return board[row][col];\n}\n"",""rating"":1},""code"":""//return differnce from maximum and minimum integerest from array\nint something = new array[1,2,3];\nint first;\nint method(int first)\n{\n  return first;\n}""}"
204,1.0,1.0,5.0,1.0,2017-03-24 21:42:16.744555,17,105,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public int compare(Object a, Object b) {\n    TimerTask t1 = (TimerTask) a;\n    TimerTask t2 = (TimerTask) b;\n    long diff = t1.nextTime - t2.nextTime;\n    if (diff < 0)\n        return -1;\n    else if (diff > 0)\n        return 1;\n    else\n        return 0;\n}\n"",""rating"":3},""code"":""int largeDiff(int[] myArray){\n  \n}""}"
205,5.0,1.0,1.0,5.0,2017-03-24 21:42:19.539035,61,106,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""public void run() {\n    count = countPrimes(min, max);\n    System.out.println(\""There are \"" + count + \"" primes between \"" + min + \"" and \"" + max);\n    addToTotal(count);\n}\n"",""rating"":1},""code"":""int Dif(int[] array){\n  //find max value of array\n  //find min value of array\n  //return max-min\n}""}"
206,5.0,1.0,1.0,5.0,2017-03-24 21:42:21.611264,61,107,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent1(int[] a) {\n    int[] counts = new int[a.length];\n    for (// O(n*n)\n    int i = 0; // O(n*n)\n    i < a.length; // O(n*n)\n    i++) {\n        // O(n) in each iteration\n        counts[i] = count(a, a[i]);\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":2},""code"":""int Dif(int[] array){\n  //find max value of array\n  //find min value of array\n  //return max-min\n}""}"
207,1.0,1.0,1.0,2.5,2017-03-24 21:42:22.315566,47,108,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""/**\n       * Return the contents of the square in the specified row and column.\n       */\nint pieceAt(int row, int col) {\n    return board[row][col];\n}\n"",""rating"":1},""code"":""//return differnce from maximum and minimum integerest from array\nint something = new array[1,2,3];\nint first;\nint method(int first)\n{\n  return first;\n}""}"
208,1.0,1.0,1.0,2.5,2017-03-24 21:42:23.512844,47,109,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""int getSize() {\n    // Return the number of items on the queue.\n    return size;\n}\n"",""rating"":1},""code"":""//return differnce from maximum and minimum integerest from array\nint something = new array[1,2,3];\nint first;\nint method(int first)\n{\n  return first;\n}""}"
209,1.0,1.0,1.0,1.0,2017-03-24 21:42:23.634708,34,110,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""/**\n   * This method takes the current contents of the text field, creates a\n   * StringSelection object to represent that string, and puts the \n   * StringSelection onto the clipboard\n   **/\npublic void cut() {\n    // Get the currently displayed value\n    String s = field.getText();\n    // Create a StringSelection object to represent it.\n    // This is a big convenience, because StringSelection implements both\n    // the Transferable interface and the ClipboardOwner.  We don't have\n    // to deal with either of them.\n    StringSelection ss = new StringSelection(s);\n    // Now set the StringSelection object as the contents of the clipboard\n    // Also set it as the owner of the clipboard.\n    this.getToolkit().getSystemClipboard().setContents(ss, ss);\n}\n"",""rating"":1},""code"":""public void Person()\n{\n  //interface\n}""}"
210,5.0,1.0,1.0,5.0,2017-03-24 21:42:24.340733,61,111,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""int getSize() {\n    // Return the number of items on the queue.\n    return size;\n}\n"",""rating"":1},""code"":""int Dif(int[] array){\n  //find max value of array\n  //find min value of array\n  //return max-min\n}""}"
211,1.0,1.0,1.0,2.5,2017-03-24 21:42:24.661745,47,112,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""public String getFirstName() {\n    return firstName;\n}\n"",""rating"":1},""code"":""//return differnce from maximum and minimum integerest from array\nint something = new array[1,2,3];\nint first;\nint method(int first)\n{\n  return first;\n}""}"
212,1.0,1.0,1.0,1.0,2017-03-24 21:42:25.358999,36,113,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String[] args) {\n    Employee[] staff = new Employee[3];\n    staff[0] = new HourlyEmployee(\""Morgan, Harry\"", 30);\n    staff[1] = new SalariedEmployee(\""Lin, Sally\"", 52000);\n    staff[2] = new Manager(\""Smith, Mary\"", 104000, 50);\n    Scanner in = new Scanner(System.in);\n    for (Employee e : staff) {\n        System.out.print(\""Hours worked by \"" + e.getName() + \"": \"");\n        int hours = in.nextInt();\n        System.out.println(\""Salary: \"" + e.weeklyPay(hours));\n    }\n}\n"",""rating"":1},""code"":""class Employee extends Person{\n  double getSalary();\n}""}"
213,1.0,1.0,1.0,2.5,2017-03-24 21:42:25.691630,47,114,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""public String firstName() {\n    return first;\n}\n"",""rating"":1},""code"":""//return differnce from maximum and minimum integerest from array\nint something = new array[1,2,3];\nint first;\nint method(int first)\n{\n  return first;\n}""}"
214,5.0,1.0,1.0,5.0,2017-03-24 21:42:26.990480,61,115,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""public CountPrimesThread(int min, int max) {\n    this.min = min;\n    this.max = max;\n}\n"",""rating"":1},""code"":""int Dif(int[] array){\n  //find max value of array\n  //find min value of array\n  //return max-min\n}""}"
215,1.0,1.0,1.0,2.5,2017-03-24 21:42:28.150777,47,116,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""public String firstName() {\n    return firstName;\n}\n"",""rating"":1},""code"":""//return differnce from maximum and minimum integerest from array\nint something = new array[1,2,3];\nint first;\nint method(int first)\n{\n  return first;\n}""}"
216,1.0,1.0,1.0,1.0,2017-03-24 21:42:28.494375,34,117,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""public CalcInterface() {\n    super.setTitle(\""Calc\"");\n    initGUI();\n}\n"",""rating"":1},""code"":""public void Person()\n{\n  //interface\n}""}"
217,5.0,1.0,1.0,5.0,2017-03-24 21:42:29.006390,61,118,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent2(int[] a) {\n    // O(n log(n))\n    Arrays.sort(a);\n    int[] counts = new int[a.length];\n    int count = 0;\n    for (// O(n)\n    int i = 0; // O(n)\n    i < a.length; // O(n)\n    i++) {\n        count++;\n        if (i == a.length - 1 || a[i] != a[i + 1]) {\n            counts[i] = count;\n            count = 0;\n        }\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":1},""code"":""int Dif(int[] array){\n  //find max value of array\n  //find min value of array\n  //return max-min\n}""}"
218,1.0,1.0,1.0,1.0,2017-03-24 21:42:30.211617,36,119,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Constructs a salaried employee with a given name and annual salary.\n      @param name the name of this employee\n      @param salary the annual salary\n    */\npublic SalariedEmployee(String name, double salary) {\n    setName(name);\n    annualSalary = salary;\n}\n"",""rating"":3},""code"":""class Employee extends Person{\n  double getSalary();\n}""}"
219,1.0,1.0,1.0,1.0,2017-03-24 21:42:31.763080,34,120,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""/** Return the person's name.  Not a remote method */\npublic String getName() {\n    return name;\n}\n"",""rating"":4},""code"":""public void Person()\n{\n  //interface\n}""}"
220,5.0,1.0,3.5,5.0,2017-03-24 21:42:32.974927,61,,"int Dif(int[] array){
  //find max value of array
  //find min value of array
  //return max-min
}"
221,1.0,1.0,1.0,1.0,2017-03-24 21:42:33.088532,39,121,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""public int compareTo(Object other) {\n    return sign(this.magnitude() - ((ComplexNumber) other).magnitude());\n}\n"",""rating"":5},""code"":""public int compare(){\n//array try= [7,4,1];\n//for (i=0; i<= try.length; i++){\n // array temp.copy(try);\n // try[i].compareTo(temp[i]);\n}\n""}"
222,5.0,1.0,3.5,2.0,2017-03-24 21:42:34.110999,61,,"int Dif(int[] array){
  //find max value of array
  //find min value of array
  //return max-min
}"
223,1.0,1.0,1.0,5.0,2017-03-24 21:42:34.542254,16,122,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""public float getPreferredSpan(int axis) {\n    return 0.0f;\n}\n"",""rating"":1},""code"":""void mymethod() {\n  // comments\n}""}"
224,1.0,1.0,5.0,1.0,2017-03-24 21:42:34.676781,17,123,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""public static void main(String[] args) {\n    /** The date at the end of the last century */\n    LocalDate endofCentury = LocalDate.of(2000, 12, 31);\n    LocalDate now = LocalDate.now();\n    Period diff = Period.between(endofCentury, now);\n    System.out.printf(\""The 21st century (up to %s) is %s old%n\"", now, diff);\n    System.out.printf(\""The 21st century is %d years, %d months and %d days old\"", diff.getYears(), diff.getMonths(), diff.getDays());\n}\n"",""rating"":4},""code"":""int largeDiff(int[] myArray){\n  \n}""}"
225,1.0,1.0,1.0,1.0,2017-03-24 21:42:36.140687,36,124,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""double value() {\n    // The value is obtained by evaluating the left and right\n    // operands and combining the values with the operator.\n    double x = left.value();\n    double y = right.value();\n    switch(op) {\n        case '+':\n            return x + y;\n        case '-':\n            return x - y;\n        case '*':\n            return x * y;\n        case '/':\n            return x / y;\n        // Bad operator!\n        default:\n            return Double.NaN;\n    }\n}\n"",""rating"":2},""code"":""class Employee extends Person{\n  double getSalary();\n}""}"
226,1.0,1.0,1.0,2.5,2017-03-24 21:42:37.969177,47,125,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""public String firstName() {\n    return first;\n}\n"",""rating"":1},""code"":""//return differnce from maximum and minimum integerest from array\n\nint method(int first)\n{\n  return first;\n}""}"
227,1.0,1.0,1.0,2.5,2017-03-24 21:42:38.937860,47,126,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""/**\n       * Return the contents of the square in the specified row and column.\n       */\nint pieceAt(int row, int col) {\n    return board[row][col];\n}\n"",""rating"":1},""code"":""//return differnce from maximum and minimum integerest from array\n\nint method(int first)\n{\n  return first;\n}""}"
228,1.0,1.0,1.0,5.0,2017-03-24 21:42:38.950487,16,127,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""void checkImage() {\n    // create or resize OSC if necessary\n    if (OSC == null) {\n        // Create the OSC, with a size to match the size of the panel.\n        OSC = new BufferedImage(getWidth(), getHeight(), BufferedImage.TYPE_INT_RGB);\n        clear();\n    } else if (OSC.getWidth() != getWidth() || OSC.getHeight() != getHeight()) {\n        // OSC size does not match the panel's size, so create a new OSC and\n        // copy the picture in the old OSC to the new one.  This will scale\n        // the current image to fit the new size.\n        BufferedImage newOSC;\n        newOSC = new BufferedImage(getWidth(), getHeight(), BufferedImage.TYPE_INT_RGB);\n        Graphics g = newOSC.getGraphics();\n        g.drawImage(OSC, 0, 0, getWidth(), getHeight(), null);\n        g.dispose();\n        OSC = newOSC;\n    }\n}\n"",""rating"":1},""code"":""void mymethod() {\n  // comments\n}""}"
229,1.0,1.0,1.0,2.5,2017-03-24 21:42:40.097196,47,128,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""/**\n         * Return the contents of the square in the specified row and column.\n         */\nint pieceAt(int row, int col) {\n    return board[row][col];\n}\n"",""rating"":1},""code"":""//return differnce from maximum and minimum integerest from array\n\nint method(int first)\n{\n  return first;\n}""}"
230,1.0,1.0,1.0,1.0,2017-03-24 21:42:40.732992,34,129,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""/** Set the person's name.  Not a remote method */\npublic void setName(String n) {\n    name = n;\n}\n"",""rating"":3},""code"":""public void Person()\n{\n  //interface\n}""}"
231,1.0,1.0,1.0,1.0,2017-03-24 21:42:41.033627,36,130,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""/**\n      Constructs a manager with a given name, annual salary and weekly bonus.\n      @param name the name of this employee\n      @param salary the annual salary\n      @param bonus the weekly bonus\n    */\npublic Manager(String name, double salary, double bonus) {\n    super(name, salary);\n    weeklyBonus = bonus;\n}\n"",""rating"":3},""code"":""class Employee extends Person{\n  double getSalary();\n}""}"
232,1.0,1.0,1.0,5.0,2017-03-24 21:42:41.256202,16,131,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""void close() {\n    closed = true;\n    sendThread.interrupt();\n    if (receiveThread != null)\n        receiveThread.interrupt();\n    try {\n        connection.close();\n    } catch (IOException e) {\n    }\n}\n"",""rating"":1},""code"":""void mymethod() {\n  // comments\n}""}"
233,1.0,1.0,1.0,1.0,2017-03-24 21:42:43.045289,36,132,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""double value() {\n    // The value is the negative of the value of the operand.\n    double neg = operand.value();\n    return -neg;\n}\n"",""rating"":3},""code"":""class Employee extends Person{\n  double getSalary();\n}""}"
234,1.0,1.0,1.0,2.5,2017-03-24 21:42:43.454181,47,133,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""int getSize() {\n    // Return the number of items on the queue.\n    return size;\n}\n"",""rating"":2},""code"":""//return differnce from maximum and minimum integerest from array\n\nint method(int first)\n{\n  return first;\n}""}"
235,1.0,1.0,1.0,1.0,2017-03-24 21:42:46.237527,34,134,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""/** Run one script, by name, given a BufferedReader.\n     * Deprecated because of the poor capability\n     * for error handling; it would be better for the\n     * user interface code to do:\n     * <pre>while ((stmt = SQLRunner.getStatement(is)) != null) {\n            stmt = stmt.trim();\n            try {\n                myRunner.runStatement(stmt);\n            } catch (Exception e) {\n                // Display the message to the user ...\n            }\n        }\n     * </pre>\n     * @throws SyntaxException\n     */\n@Deprecated\npublic void runScript(BufferedReader is, String name) throws IOException, SQLException, SyntaxException {\n    String stmt;\n    while ((stmt = getStatement(is)) != null) {\n        stmt = stmt.trim();\n        runStatement(stmt);\n    }\n}\n"",""rating"":1},""code"":""public void Person()\n{\n  //interface\n}""}"
236,5.0,1.0,3.5,2.0,2017-03-24 21:42:46.256867,61,135,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""public void run() {\n    count = countPrimes(min, max);\n    System.out.println(\""There are \"" + count + \"" primes between \"" + min + \"" and \"" + max);\n    addToTotal(count);\n}\n"",""rating"":1},""code"":""int Dif(int[] array){\n  //find max value of array\n  //find min value of array\n  //return max-min\n}""}"
237,1.0,1.0,1.0,2.5,2017-03-24 21:42:46.279901,47,136,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""/**\n         * Return the contents of the square in the specified row and column.\n         */\nint pieceAt(int row, int col) {\n    return board[row][col];\n}\n"",""rating"":1},""code"":""//return differnce from maximum and minimum integerest from array\n\nint method(int first)\n{\n  return first;\n}""}"
238,2.0,1.5,1.0,2.5,2017-03-24 21:42:46.386382,23,,"int add(comments)
  
"
239,1.0,1.0,1.0,1.0,2017-03-24 21:42:46.903938,36,137,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""public double weeklyPay(int hoursWorked) {\n    final int WEEKS_PER_YEAR = 52;\n    return annualSalary / WEEKS_PER_YEAR;\n}\n"",""rating"":3},""code"":""class Employee extends Person{\n  double getSalary();\n}""}"
240,1.0,1.0,1.0,1.0,2017-03-24 21:42:47.455322,39,138,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""public int compare(Object a, Object b) {\n    return ((String) a).compareTo((String) b);\n}\n"",""rating"":4},""code"":""public int compare(){\n//array try= [7,4,1];\n//for (i=0; i<= try.length; i++){\n // array temp.copy(try);\n // try[i].compareTo(temp[i]);\n}\n""}"
241,2.0,1.5,1.0,2.0,2017-03-24 21:42:47.838054,23,,"int add(comments)
  
"
242,1.0,1.0,1.0,1.0,2017-03-24 21:42:48.472147,36,139,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""double performConversion(double f) {\n    return f *= 453.59237;\n}\n"",""rating"":3},""code"":""class Employee extends Person{\n  double getSalary();\n}""}"
243,1.0,1.0,1.0,5.0,2017-03-24 21:42:48.860560,16,140,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""/**\n     * Stop the computation, if one is running.  This is called\n     * when the user clicks the Abort button.\n     */\nvoid doAbort() {\n    if (timer != null) {\n        timer.stop();\n        timer = null;\n        methodChoice.setEnabled(true);\n        abortButton.setEnabled(false);\n        message.setText(\""Click any square to begin.\"");\n        queue = null;\n        stack = null;\n        randomList = null;\n    }\n}\n"",""rating"":1},""code"":""void mymethod() {\n  // comments\n}""}"
244,1.0,1.0,1.0,2.5,2017-03-24 21:42:51.361225,47,141,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""public void setFirstName(String firstName) {\n    this.firstName = firstName;\n}\n"",""rating"":1},""code"":""//return differnce from maximum and minimum integerest from array\n\nint method(int first)\n{\n  return first;\n}""}"
245,1.0,1.0,1.0,5.0,2017-03-24 21:42:52.158163,16,142,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""/** Called when the user clicks */\npublic void processMouseEvent(MouseEvent e) {\n    if (e.getID() == MouseEvent.MOUSE_PRESSED) {\n        // remember click position\n        last_x = (short) e.getX();\n        last_y = (short) e.getY();\n    } else\n        super.processMouseEvent(e);\n}\n"",""rating"":1},""code"":""void mymethod() {\n  // comments\n}""}"
246,1.0,1.0,1.0,5.0,2017-03-24 21:42:53.545109,16,143,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String[] unuxed) {\n    new ButtonDemo().setVisible(true);\n}\n"",""rating"":1},""code"":""void mymethod() {\n  // comments\n}""}"
247,1.0,1.0,1.0,1.0,2017-03-24 21:42:53.934394,34,144,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""/**\n     * This method from the Externalizable interface is responsible for saving\n     * the complete state of the object to the specified stream.  It can write\n     * anything it wants as long as readExternal() can read it.\n     **/\npublic void writeExternal(ObjectOutput out) throws IOException {\n    // Compact the array.\n    if (data.length > size)\n        resize(size);\n    // Start with our version number.\n    out.writeByte(version);\n    // Output the number of array elements\n    out.writeInt(size);\n    for (int i = 0; i < size; i++) {\n        // Now loop through the array\n        // The array element to write\n        int n = data[i];\n        if ((n < Short.MAX_VALUE) && (n > Short.MIN_VALUE + 1)) {\n            // If n fits in a short and is not Short.MIN_VALUE, then write\n            // it out as a short, saving ourselves two bytes\n            out.writeShort(n);\n        } else {\n            // Otherwise write out the special value Short.MIN_VALUE to\n            // signal that the number does not fit in a short, and then\n            // output the number using a full 4 bytes, for 6 bytes total\n            out.writeShort(Short.MIN_VALUE);\n            out.writeInt(n);\n        }\n    }\n}\n"",""rating"":1},""code"":""public void Person()\n{\n  //interface\n}""}"
248,1.0,1.0,1.0,5.0,2017-03-24 21:42:55.698433,16,145,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""/** Display the next frame. Called by the animator timer */\nvoid animate() {\n    // Get next frame\n    String frame = animationFrames[animationFrame++];\n    // Update msgline\n    messageLine.setText(animationMessage + \"" \"" + frame);\n    animationFrame = animationFrame % animationFrames.length;\n}\n"",""rating"":1},""code"":""void mymethod() {\n  // comments\n}""}"
249,1.0,1.0,1.0,1.0,2017-03-24 21:42:56.251161,36,146,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""public static void main(String[] args) {\n    double sum = 0;\n    int count = 0;\n    double salary = 0;\n    System.out.print(\""Enter salaries, -1 to finish: \"");\n    Scanner in = new Scanner(System.in);\n    while (salary != -1) {\n        salary = in.nextDouble();\n        if (salary != -1) {\n            sum = sum + salary;\n            count++;\n        }\n    }\n    if (count > 0) {\n        double average = sum / count;\n        System.out.println(\""Average salary: \"" + average);\n       // Process data until the sentinel is entered \n\n    } else {\n        System.out.println(\""No data\"");\n    }\n}\n       // Compute and print the average\n\n"",""rating"":2},""code"":""class Employee extends Person{\n  double getSalary();\n}""}"
250,1.0,1.0,1.0,5.0,2017-03-24 21:42:57.850562,16,147,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""public void run() {\n    System.out.println(\""Client receive thread started.\"");\n    try {\n        while (!closed) {\n            Object obj = in.readObject();\n            if (obj instanceof DisconnectMessage) {\n                close();\n                serverShutdown(((DisconnectMessage) obj).message);\n            } else if (obj instanceof StatusMessage) {\n                StatusMessage msg = (StatusMessage) obj;\n                connectedPlayerIDs = msg.players;\n                if (msg.connecting)\n                    playerConnected(msg.playerID);\n                else\n                    playerDisconnected(msg.playerID);\n            } else\n                messageReceived(obj);\n        }\n    } catch (IOException e) {\n        if (!closed) {\n            closedByError(\""IO error occurred while waiting to receive  message.\"");\n            System.out.println(\""Client receive thread terminated by IOException: \"" + e);\n        }\n    } catch (Exception e) {\n        if (!closed) {\n            closedByError(\""Unexpected internal error in receive thread: \"" + e);\n            System.out.println(\""\\nUnexpected error shuts down client receive thread:\"");\n            e.printStackTrace();\n        }\n    } finally {\n        System.out.println(\""Client receive thread terminated.\"");\n    }\n}\n"",""rating"":1},""code"":""void mymethod() {\n  // comments\n}""}"
251,1.0,1.0,1.0,5.0,2017-03-24 21:42:59.311091,16,148,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""/** \n     * Break a page at the specified Y coordinate.  Store the necessary\n     * information into the pageLengths and pageOffsets lists\n     **/\nvoid breakPage(double y) {\n    double pageLength = y - pageStart - printY;\n    pageStart = y - printY;\n    pageLengths.add(new Double(pageLength));\n    pageOffsets.add(new Double(pageStart));\n}\n"",""rating"":1},""code"":""void mymethod() {\n  // comments\n}""}"
252,1.0,1.0,1.0,1.0,2017-03-24 21:43:01.208536,34,149,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""/**\n     * Print out the scribble.  This is the method invoked by the Print button;\n     * it is not part of the Printable interface\n     **/\npublic void printScribble() {\n    // Obtain a java.awt.print.PrinterJob  (not java.awt.PrintJob)\n    PrinterJob job = PrinterJob.getPrinterJob();\n    // Tell the PrinterJob to print us (since we implement Printable)\n    // using the default page layout\n    job.setPrintable(this, job.defaultPage());\n    // The method returns false if the user cancelled the print request\n    if (job.printDialog()) {\n        // method defined by the Printable interface.\n        try {\n            job.print();\n        } catch (PrinterException e) {\n            System.err.println(e);\n        }\n    }\n}\n     // Display the print dialog that allows the user to set options.\n\n         // If not cancelled, start printing!  This will call the print()\n\n"",""rating"":2},""code"":""public void Person()\n{\n  //interface\n}""}"
253,1.0,1.0,1.0,1.0,2017-03-24 21:43:02.949428,13,150,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""/**\n     * The square containing the mouse comes to life or, if the right-mouse button is down, dies.\n     */\npublic void mousePressed(MouseEvent e) {\n    if (timer.isRunning())\n        return;\n    int row = display.yCoordToRowNumber(e.getY());\n    int col = display.yCoordToRowNumber(e.getX());\n    if (row >= 0 && row < display.getRowCount() && col >= 0 && col < display.getColumnCount()) {\n        if (e.isMetaDown() || e.isControlDown()) {\n            display.setColor(row, col, null);\n            alive[row][col] = false;\n        } else {\n            display.setColor(row, col, Color.WHITE);\n            alive[row][col] = true;\n        }\n    }\n}\n"",""rating"":3},""code"":""void somethod () {\n  // come\n}""}"
254,1.0,1.0,1.0,1.0,2017-03-24 21:43:02.986581,36,151,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""double value() {\n    // The value of the node is the number that it contains.\n    return number;\n}\n"",""rating"":1},""code"":""class Employee extends Person{\n  double getSalary();\n}""}"
255,1.0,1.0,1.0,1.0,2017-03-24 21:43:04.292171,36,152,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""double performConversion(double f) {\n    return f *= 0.45359237;\n}\n"",""rating"":1},""code"":""class Employee extends Person{\n  double getSalary();\n}""}"
256,1.0,1.0,1.0,1.0,2017-03-24 21:43:04.481077,13,153,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""void setValueFromString(String str) {\n    int length = Integer.parseInt(str);\n    if (length < 0 || length > 500000)\n        throw new IllegalArgumentException();\n    for (int i = 0; i < standardValues.length; i++) {\n        if (length == standardValues[i]) {\n            selectedItem = i;\n            owner.getDisplay().setMaxIterations(standardValues[i]);\n            items[i].setSelected(true);\n            return;\n        }\n    }\n    items[items.length - 1].setSelected(true);\n    owner.getDisplay().setMaxIterations(length);\n}\n"",""rating"":2},""code"":""void somethod () {\n  // come\n}""}"
257,1.0,1.0,1.0,1.0,2017-03-24 21:43:06.403860,13,154,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""/**\n      Returns the number of days between this day and another\n      day.\n      @param other the other day\n      @return the number of days that this day is away from \n      the other (larger than 0 if this day comes later than <code>other</code>)\n   */\npublic int daysFrom(Day other) {\n    int n = 0;\n    Day d = this;\n    while (d.compareTo(other) > 0) {\n        d = d.previousDay();\n        n++;\n    }\n    while (d.compareTo(other) < 0) {\n        d = d.nextDay();\n        n--;\n    }\n    return n;\n}\n"",""rating"":1},""code"":""void somethod () {\n  // come\n}""}"
258,1.0,1.0,1.0,5.0,2017-03-24 21:43:08.156969,16,155,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""/**\n         * Draws a card as a 80 by 100 rectangle with upper left corner at (x,y).\n         * The card is drawn in the graphics context g.  If card is null, then\n         * a face-down card is drawn.  (The cards are rather primitive!)\n         */\nvoid drawCard(Graphics g, Card card, int x, int y) {\n    if (card == null) {\n        // Draw a face-down card\n        g.setColor(Color.BLUE);\n        g.fillRect(x, y, 80, 100);\n        g.setColor(Color.WHITE);\n        g.drawRect(x + 3, y + 3, 73, 93);\n        g.drawRect(x + 4, y + 4, 71, 91);\n    } else {\n        g.setColor(Color.WHITE);\n        g.fillRect(x, y, 80, 100);\n        g.setColor(Color.GRAY);\n        g.drawRect(x, y, 79, 99);\n        g.drawRect(x + 1, y + 1, 77, 97);\n        if (card.getSuit() == Card.DIAMONDS || card.getSuit() == Card.HEARTS)\n            g.setColor(Color.RED);\n        else\n            g.setColor(Color.BLACK);\n        g.drawString(card.getValueAsString(), x + 10, y + 30);\n        g.drawString(\""of\"", x + 10, y + 50);\n        g.drawString(card.getSuitAsString(), x + 10, y + 70);\n    }\n}\n"",""rating"":1},""code"":""void mymethod() {\n  // comments\n}""}"
259,1.0,1.0,1.0,1.0,2017-03-24 21:43:08.248233,13,156,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""/** \n     * To create a ReaderPipeSource, specify the Reader that data comes from\n     * and the Pipe sink that it should be sent to.\n     **/\npublic ReaderPipeSource(Pipe sink, Reader in) throws IOException {\n    super(sink);\n    this.in = in;\n}\n"",""rating"":3},""code"":""void somethod () {\n  // come\n}""}"
260,1.0,1.0,1.0,1.0,2017-03-24 21:43:09.684624,12,157,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""public static void main(String[] args) {\n    LinkedList staff = new LinkedList();\n    staff.addLast(\""Diana\"");\n    staff.addLast(\""Harry\"");\n    staff.addLast(\""Romeo\"");\n    staff.addLast(\""Tom\"");\n    // | in the comments indicates the iterator position\n    // |DHRT\n    ListIterator iterator = staff.listIterator();\n    // D|HRT\n    iterator.next();\n    // DH|RT\n    iterator.next();\n    // Add more elements after second element\n    // DHJ|RT\n    iterator.add(\""Juliet\"");\n    // DHJN|RT\n    iterator.add(\""Nina\"");\n    // DHJNR|T\n    System.out.println(iterator.next());\n    // DHJN|RT\n    System.out.println(iterator.previous());\n    // Remove last traversed element \n    // DHJN|T\n    iterator.remove();\n    // Print all elements\n    iterator = staff.listIterator();\n    while (iterator.hasNext()) {\n        System.out.print(iterator.next() + \"" \"");\n    }\n    System.out.println();\n}\n"",""rating"":4},""code"":""void somethod() {\n  //some comments\n}""}"
261,1.0,1.0,1.0,1.0,2017-03-24 21:43:10.530326,13,158,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""/**\n     * After this method is called, input will be read from inputStream, provided it\n     * is non-null.  If inputStream is null, then this method has the same effect\n     * as calling readStandardInput(); that is, future input will come from the\n     * standard input stream.\n     */\npublic static void readStream(InputStream inputStream) {\n    if (inputStream == null)\n        readStandardInput();\n    else\n        readStream(new InputStreamReader(inputStream));\n}\n"",""rating"":2},""code"":""void somethod () {\n  // come\n}""}"
262,1.0,1.0,1.0,1.0,2017-03-24 21:43:12.549970,34,159,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""/** Run one script file, by name. Called from cmd line main\n     * or from user code. Deprecated because of the poor capability\n     * for error handling; it would be better for the user interface\n     * code to create a Reader and then say:\n     * <pre>while ((stmt = SQLRunner.getStatement(is)) != null) {\n            stmt = stmt.trim();\n            try {\n                myRunner.runStatement(stmt);\n            } catch (Exception e) {\n                // Display the message to the user ...\n            }\n        }\n     * </pre>\n     * @throws SyntaxException\n     */\n@Deprecated\npublic void runScript(String scriptFile) throws IOException, SQLException, SyntaxException {\n    BufferedReader is;\n    // Load the script file first, it's the most likely error\n    is = new BufferedReader(new FileReader(scriptFile));\n    runScript(is, scriptFile);\n}\n"",""rating"":1},""code"":""public void Person()\n{\n  //interface\n}""}"
263,1.0,1.0,1.0,1.0,2017-03-24 21:43:12.680087,13,160,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""void printStackCommands() {\n    // To evaluate this expression on a stack machine, first do\n    // whatever is necessary to evaluate the operand, leaving the\n    // operand on the stack.  Then apply the unary minus (which means\n    // popping the operand, negating it, and pushing the result).\n    operand.printStackCommands();\n    System.out.println(\""  Unary minus\"");\n}\n"",""rating"":1},""code"":""void somethod () {\n  // come\n}""}"
264,1.0,1.0,1.0,1.0,2017-03-24 21:43:14.820601,13,161,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""/** \n     * Break a page at the specified Y coordinate.  Store the necessary\n     * information into the pageLengths and pageOffsets lists\n     **/\nvoid breakPage(double y) {\n    double pageLength = y - pageStart - printY;\n    pageStart = y - printY;\n    pageLengths.add(new Double(pageLength));\n    pageOffsets.add(new Double(pageStart));\n}\n"",""rating"":2},""code"":""void somethod () {\n  // come\n}""}"
265,1.0,3.0,1.0,1.0,2017-03-24 21:43:17.237206,36,,"class Employee extends Person{
  double getSalary();
}"
266,1.0,1.0,1.0,1.0,2017-03-24 21:43:21.716715,12,162,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""/**\n     * Output the specified DOM Node object, printing it using the specified\n     * indentation string\n     **/\npublic void write(Node node, String indent) {\n    // The output depends on the type of the node\n    switch(node.getNodeType()) {\n        case Node.DOCUMENT_NODE:\n            {\n                // If its a Document node\n                Document doc = (Document) node;\n                // Output header\n                out.println(indent + \""<?xml version='1.0'?>\"");\n                // Get the first node\n                Node child = doc.getFirstChild();\n                while (child != null) {\n                    // Loop 'till no more nodes\n                    // Output node\n                    write(child, indent);\n                    // Get next node\n                    child = child.getNextSibling();\n                }\n                break;\n            }\n        case Node.DOCUMENT_TYPE_NODE:\n            {\n                // It is a <!DOCTYPE> tag\n                DocumentType doctype = (DocumentType) node;\n                // Note that the DOM Level 1 does not give us information about\n                // the the public or system ids of the doctype, so we can't output\n                // a complete <!DOCTYPE> tag here.  We can do better with Level 2.\n                out.println(\""<!DOCTYPE \"" + doctype.getName() + \"">\"");\n                break;\n            }\n        case Node.ELEMENT_NODE:\n            {\n                // Most nodes are Elements\n                Element elt = (Element) node;\n                // Begin start tag\n                out.print(indent + \""<\"" + elt.getTagName());\n                // Get attributes\n                NamedNodeMap attrs = elt.getAttributes();\n                for (int i = 0; i < attrs.getLength(); i++) {\n                    // Loop through them\n                    Node a = attrs.item(i);\n                    out.print(// Print attr. name\n                    \"" \"" + a.getNodeName() + \""='\"" + fixup(a.getNodeValue()) + // Print attr. value\n                    \""'\"");\n                }\n                // Finish start tag\n                out.println(\"">\"");\n                // Increase indent\n                String newindent = indent + \""    \"";\n                // Get child\n                Node child = elt.getFirstChild();\n                while (child != null) {\n                    // Loop \n                    // Output child\n                    write(child, newindent);\n                    // Get next child\n                    child = child.getNextSibling();\n                }\n                out.println(// Output end tag\n                indent + \""</\"" + elt.getTagName() + \"">\"");\n                break;\n            }\n        case Node.TEXT_NODE:\n            {\n                // Plain text node\n                Text textNode = (Text) node;\n                // Strip off space\n                String text = textNode.getData().trim();\n                if (// If non-empty\n                (text != null) && text.length() > 0)\n                    // print text\n                    out.println(indent + fixup(text));\n                break;\n            }\n        case Node.PROCESSING_INSTRUCTION_NODE:\n            {\n                // Handle PI nodes\n                ProcessingInstruction pi = (ProcessingInstruction) node;\n                out.println(indent + \""<?\"" + pi.getTarget() + \"" \"" + pi.getData() + \""?>\"");\n                break;\n            }\n        case Node.ENTITY_REFERENCE_NODE:\n            {\n                // Handle entities\n                out.println(indent + \""&\"" + node.getNodeName() + \"";\"");\n                break;\n            }\n        case Node.CDATA_SECTION_NODE:\n            {\n                // Output CDATA sections\n                CDATASection cdata = (CDATASection) node;\n                // Careful! Don't put a CDATA section in the program itself!\n                out.println(indent + \""<\"" + \""![CDATA[\"" + cdata.getData() + \""]]\"" + \"">\"");\n                break;\n            }\n        case Node.COMMENT_NODE:\n            {\n                // Comments\n                Comment c = (Comment) node;\n                out.println(indent + \""<!--\"" + c.getData() + \""-->\"");\n                break;\n            }\n        default:\n            // Hopefully, this won't happen too much!\n            System.err.println(\""Ignoring node: \"" + node.getClass().getName());\n            break;\n    }\n}\n"",""rating"":5},""code"":""void somethod() {\n  //some comments\n}""}"
267,1.0,1.0,1.0,1.0,2017-03-24 21:43:21.986333,13,163,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""/**\n    * Simulates rolling a pair of dice until a given total comes up.\n    * Precondition:  The desired total is between 2 and 12, inclusive.\n    * @param N the total that we want to get on the dice\n    * @return the number of times the dice are rolled before the\n    *    desired total occurs\n    * @throws IllegalArgumentException if the parameter, N, is not a number\n    *    that could possibly come up on a pair of dice\n    */\npublic static int rollFor(int N) {\n    if (N < 2 || N > 12)\n        throw new IllegalArgumentException(\""Impossible total for a pair of dice.\"");\n    // Numbers between 1 and 6 representing the dice.\n    int die1, die2;\n    // Total showing on dice.\n    int roll;\n    // Number of rolls made.\n    int rollCt;\n    rollCt = 0;\n    do {\n        die1 = (int) (Math.random() * 6) + 1;\n        die2 = (int) (Math.random() * 6) + 1;\n        roll = die1 + die2;\n        rollCt++;\n    } while (roll != N);\n    return rollCt;\n}\n"",""rating"":1},""code"":""void somethod () {\n  // come\n}""}"
268,1.0,1.0,1.0,1.0,2017-03-24 21:43:25.773309,13,164,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""/** Display the next frame. Called by the animator timer */\nvoid animate() {\n    // Get next frame\n    String frame = animationFrames[animationFrame++];\n    // Update msgline\n    messageLine.setText(animationMessage + \"" \"" + frame);\n    animationFrame = animationFrame % animationFrames.length;\n}\n"",""rating"":1},""code"":""void somethod () {\n  // come\n}""}"
269,1.0,1.0,1.0,1.0,2017-03-24 21:43:27.061982,12,165,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""/**\n         * When the ERASE or SMUDGE tools are used and the mouse jumps\n         * from (x1,y1) to (x2,y2), the tool has to be applied to a\n         * line of pixel positions between the two points in order to\n         * cover the entire line that the mouse moves along.  The change\n         * is made to the off-screen canvas, and repaint() is called to\n         * copy the changes to the screen.\n         */\nvoid applyToolAlongLine(int x1, int y1, int x2, int y2) {\n    Graphics g = OSC.createGraphics();\n    // (for ERASE only)\n    g.setColor(fillColor);\n    // (for SMUDGE only)\n    int w = OSC.getWidth();\n    // (for SMUDGE only)\n    int h = OSC.getHeight();\n    int dist = Math.max(Math.abs(x2 - x1), Math.abs(y2 - y1));\n    // dist is the number of points along the line from\n    // (x1,y1) to (x2,y2) at which the tool will be applied.\n    double dx = (double) (x2 - x1) / dist;\n    double dy = (double) (y2 - y1) / dist;\n    for (int d = 1; d <= dist; d++) {\n        // Apply the tool at one of the points (x,y) along the\n        // line from (x1,y1) to (x2,y2).\n        int x = (int) Math.round(x1 + dx * d);\n        int y = (int) Math.round(y1 + dy * d);\n        if (currentTool == Tool.ERASE) {\n            // Erase a 10-by-10 block of pixels around (x,y)\n            g.fillRect(x - 5, y - 5, 10, 10);\n            repaint(x - 5, y - 5, 10, 10);\n        } else {\n            // of pixels that are visited by the tool.\n            for (int i = 0; i < 7; i++) for (int j = 0; j < 7; j++) {\n                int r = y + j - 3;\n                int c = x + i - 3;\n                if (!(r < 0 || r >= h || c < 0 || c >= w || smudgeRed[i][j] == -1)) {\n                    int curCol = OSC.getRGB(c, r);\n                    int curRed = (curCol >> 16) & 0xFF;\n                    int curGreen = (curCol >> 8) & 0xFF;\n                    int curBlue = curCol & 0xFF;\n                    int newRed = (int) (curRed * 0.7 + smudgeRed[i][j] * 0.3);\n                    int newGreen = (int) (curGreen * 0.7 + smudgeGreen[i][j] * 0.3);\n                    int newBlue = (int) (curBlue * 0.7 + smudgeBlue[i][j] * 0.3);\n                    int newCol = newRed << 16 | newGreen << 8 | newBlue;\n                    OSC.setRGB(c, r, newCol);\n                    smudgeRed[i][j] = curRed * 0.3 + smudgeRed[i][j] * 0.7;\n                    smudgeGreen[i][j] = curGreen * 0.3 + smudgeGreen[i][j] * 0.7;\n                    smudgeBlue[i][j] = curBlue * 0.3 + smudgeBlue[i][j] * 0.7;\n                }\n            }\n            repaint(x - 3, y - 3, 7, 7);\n        }\n    }\n    g.dispose();\n}\n                         // For the SMUDGE tool, blend some of the color from\n\n                         // the smudgeRed, smudgeGreen, and smudgeBlue arrays\n\n                         // into the pixels in a 7-by-7 block around (x,y), and\n\n                         // vice versa.  The effect is to smear out the color\n\n"",""rating"":4},""code"":""void somethod() {\n  //some comments\n}""}"
270,1.0,1.0,1.0,1.0,2017-03-24 21:43:27.110095,13,166,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""/**\n       * This method is called when the user clicks the \""Stand!\"" button.\n       * Check whether a game is actually in progress.  If it is, the game \n       * ends.  The dealer takes cards until either the dealer has 5 cards \n       * or more than 16 points.  Then the  winner of the game is determined. \n       */\nvoid doStand() {\n    if (gameInProgress == false) {\n        message = \""Click \\\""New Game\\\"" to start a new game.\"";\n        repaint();\n        return;\n    }\n    gameInProgress = false;\n    while (dealerHand.getBlackjackValue() <= 16 && dealerHand.getCardCount() < 5) dealerHand.addCard(deck.dealCard());\n    if (dealerHand.getBlackjackValue() > 21)\n        message = \""You win!  Dealer has busted with \"" + dealerHand.getBlackjackValue() + \"".\"";\n    else if (dealerHand.getCardCount() == 5)\n        message = \""Sorry, you lose.  Dealer took 5 cards without going over 21.\"";\n    else if (dealerHand.getBlackjackValue() > playerHand.getBlackjackValue())\n        message = \""Sorry, you lose, \"" + dealerHand.getBlackjackValue() + \"" to \"" + playerHand.getBlackjackValue() + \"".\"";\n    else if (dealerHand.getBlackjackValue() == playerHand.getBlackjackValue())\n        message = \""Sorry, you lose.  Dealer wins on a tie.\"";\n    else\n        message = \""You win, \"" + playerHand.getBlackjackValue() + \"" to \"" + dealerHand.getBlackjackValue() + \""!\"";\n    repaint();\n}\n"",""rating"":1},""code"":""void somethod () {\n  // come\n}""}"
271,1.0,1.0,1.0,1.0,2017-03-24 21:43:28.052563,34,167,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""public Person(String firstName, String lastName) {\n    this.firstName = firstName;\n    this.lastName = lastName;\n}\n"",""rating"":5},""code"":""public void Person()\n{\n  //interface\n}""}"
272,1.0,1.0,1.0,1.0,2017-03-24 21:43:28.243407,4,168,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""/**\n       * When the ERASE or SMUDGE tools are used and the mouse jumps\n       * from (x1,y1) to (x2,y2), the tool has to be applied to a\n       * line of pixel positions between the two points in order to\n       * cover the entire line that the mouse moves along.  The change\n       * is made to the off-screen canvas, and repaint() is called to\n       * copy the changes to the screen.\n       */\nvoid applyToolAlongLine(int x1, int y1, int x2, int y2) {\n    Graphics g = OSC.createGraphics();\n    Graphics2D g2 = (Graphics2D) g;\n    g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n    // (for ERASE only)\n    g.setColor(fillColor);\n    // (for SMUDGE only)\n    int w = OSC.getWidth();\n    // (for SMUDGE only)\n    int h = OSC.getHeight();\n    int dist = Math.max(Math.abs(x2 - x1), Math.abs(y2 - y1));\n    // dist is the number of points along the line from\n    // (x1,y1) to (x2,y2) at which the tool will be applied.\n    double dx = (double) (x2 - x1) / dist;\n    double dy = (double) (y2 - y1) / dist;\n    for (int d = 1; d <= dist; d++) {\n        // Apply the tool at one of the points (x,y) along the\n        // line from (x1,y1) to (x2,y2).\n        int x = (int) Math.round(x1 + dx * d);\n        int y = (int) Math.round(y1 + dy * d);\n        if (currentTool == Tool.ERASE) {\n            // Erase a 10-by-10 block of pixels around (x,y)\n            g.fillRect(x - 5, y - 5, 10, 10);\n            repaint(x - 5, y - 5, 10, 10);\n        } else {\n            // of pixels that are visited by the tool.\n            for (int i = 0; i < 7; i++) for (int j = 0; j < 7; j++) {\n                int r = y + j - 3;\n                int c = x + i - 3;\n                if (!(r < 0 || r >= h || c < 0 || c >= w || smudgeRed[i][j] == -1)) {\n                    int curCol = OSC.getRGB(c, r);\n                    int curRed = (curCol >> 16) & 0xFF;\n                    int curGreen = (curCol >> 8) & 0xFF;\n                    int curBlue = curCol & 0xFF;\n                    int newRed = (int) (curRed * 0.7 + smudgeRed[i][j] * 0.3);\n                    int newGreen = (int) (curGreen * 0.7 + smudgeGreen[i][j] * 0.3);\n                    int newBlue = (int) (curBlue * 0.7 + smudgeBlue[i][j] * 0.3);\n                    int newCol = newRed << 16 | newGreen << 8 | newBlue;\n                    OSC.setRGB(c, r, newCol);\n                    smudgeRed[i][j] = curRed * 0.3 + smudgeRed[i][j] * 0.7;\n                    smudgeGreen[i][j] = curGreen * 0.3 + smudgeGreen[i][j] * 0.7;\n                    smudgeBlue[i][j] = curBlue * 0.3 + smudgeBlue[i][j] * 0.7;\n                }\n            }\n            repaint(x - 3, y - 3, 7, 7);\n        }\n    }\n    g.dispose();\n}\n                   // For the SMUDGE tool, blend some of the color from\n\n                   // the smudgeRed, smudgeGreen, and smudgeBlue arrays\n\n                   // into the pixels in a 7-by-7 block around (x,y), and\n\n                   // vice versa.  The effect is to smear out the color\n\n"",""rating"":3},""code"":""void somethod(){\n  // some comments\n}""}"
273,1.0,2.5,1.5,1.0,2017-03-24 21:43:30.598522,8,169,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""default boolean smallerThan(Measurable other) {\n    return getMeasure() < other.getMeasure();\n}\n"",""rating"":1},""code"":""//takes a person and returns their tax as below\nDouble tax(Person p)\n{\n  if(p.getSalary() < 10000)\n  return p.getSalary()*.02;\n    else\n      return p.getSalary()*.02;\n if(p.getSalary() < 10000){\n   p.getSalary()*.02;\n }     \n}""}"
274,1.0,1.0,1.0,1.0,2017-03-24 21:43:31.563276,12,170,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""/**\n       * When the ERASE or SMUDGE tools are used and the mouse jumps\n       * from (x1,y1) to (x2,y2), the tool has to be applied to a\n       * line of pixel positions between the two points in order to\n       * cover the entire line that the mouse moves along.  The change\n       * is made to the off-screen canvas, and repaint() is called to\n       * copy the changes to the screen.\n       */\nvoid applyToolAlongLine(int x1, int y1, int x2, int y2) {\n    Graphics g = OSC.createGraphics();\n    // (for ERASE only)\n    g.setColor(fillColor);\n    // (for SMUDGE only)\n    int w = OSC.getWidth();\n    // (for SMUDGE only)\n    int h = OSC.getHeight();\n    int dist = Math.max(Math.abs(x2 - x1), Math.abs(y2 - y1));\n    // dist is the number of points along the line from\n    // (x1,y1) to (x2,y2) at which the tool will be applied.\n    double dx = (double) (x2 - x1) / dist;\n    double dy = (double) (y2 - y1) / dist;\n    for (int d = 1; d <= dist; d++) {\n        // Apply the tool at one of the points (x,y) along the\n        // line from (x1,y1) to (x2,y2).\n        int x = (int) Math.round(x1 + dx * d);\n        int y = (int) Math.round(y1 + dy * d);\n        if (currentTool == Tool.ERASE) {\n            // Erase a 10-by-10 block of pixels around (x,y)\n            g.fillRect(x - 5, y - 5, 10, 10);\n            repaint(x - 5, y - 5, 10, 10);\n        } else {\n            // of pixels that are visited by the tool.\n            for (int i = 0; i < 7; i++) for (int j = 0; j < 7; j++) {\n                int r = y + j - 3;\n                int c = x + i - 3;\n                if (!(r < 0 || r >= h || c < 0 || c >= w || smudgeRed[i][j] == -1)) {\n                    int curCol = OSC.getRGB(c, r);\n                    int curRed = (curCol >> 16) & 0xFF;\n                    int curGreen = (curCol >> 8) & 0xFF;\n                    int curBlue = curCol & 0xFF;\n                    int newRed = (int) (curRed * 0.7 + smudgeRed[i][j] * 0.3);\n                    int newGreen = (int) (curGreen * 0.7 + smudgeGreen[i][j] * 0.3);\n                    int newBlue = (int) (curBlue * 0.7 + smudgeBlue[i][j] * 0.3);\n                    int newCol = newRed << 16 | newGreen << 8 | newBlue;\n                    OSC.setRGB(c, r, newCol);\n                    smudgeRed[i][j] = curRed * 0.3 + smudgeRed[i][j] * 0.7;\n                    smudgeGreen[i][j] = curGreen * 0.3 + smudgeGreen[i][j] * 0.7;\n                    smudgeBlue[i][j] = curBlue * 0.3 + smudgeBlue[i][j] * 0.7;\n                }\n            }\n            repaint(x - 3, y - 3, 7, 7);\n        }\n    }\n    g.dispose();\n}\n                   // For the SMUDGE tool, blend some of the color from\n\n                   // the smudgeRed, smudgeGreen, and smudgeBlue arrays\n\n                   // into the pixels in a 7-by-7 block around (x,y), and\n\n                   // vice versa.  The effect is to smear out the color\n\n"",""rating"":2},""code"":""void somethod() {\n  //some comments\n}""}"
275,1.0,3.0,1.0,1.0,2017-03-24 21:43:33.055526,36,171,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""public static void main(String[] args) {\n    double sum = 0;\n    int count = 0;\n    double salary = 0;\n    System.out.print(\""Enter salaries, -1 to finish: \"");\n    Scanner in = new Scanner(System.in);\n    while (salary != -1) {\n        salary = in.nextDouble();\n        if (salary != -1) {\n            sum = sum + salary;\n            count++;\n        }\n    }\n    if (count > 0) {\n        double average = sum / count;\n        System.out.println(\""Average salary: \"" + average);\n       // Process data until the sentinel is entered \n\n    } else {\n        System.out.println(\""No data\"");\n    }\n}\n       // Compute and print the average\n\n"",""rating"":3},""code"":""class Employee extends Person{\n  double getSalary();\n}""}"
276,1.0,1.0,1.0,2.0,2017-03-24 21:43:33.731338,46,172,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""void compute() {\n    iterationCounts = new int[count];\n    for (int i = 0; i < count; i++) {\n        double x0 = xmin + i * dx;\n        double y0 = y;\n        double a = x0;\n        double b = y0;\n        int ct = 0;\n        while (a * a + b * b < 4.1) {\n            ct++;\n            if (ct > maxIterations) {\n                ct = -1;\n                break;\n            }\n            double newa = a * a - b * b + x0;\n            b = 2 * a * b + y0;\n            a = newa;\n        }\n        iterationCounts[i] = ct;\n    }\n}\n"",""rating"":3},""code"":""void returnTax(){\n  double tax;\n  if(Employee.getSalary < 100000)\n  {\n     tax = .02*Employee.getSalary;\n  }\n}""}"
277,1.0,1.0,1.0,1.0,2017-03-24 21:43:34.462617,12,173,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""/**\n       * Called by the constructor, and called by actionPerformed() if  the \n       * user clicks the \""New Game\"" button.  Start a new game.  Deal two cards \n       * to each player.  The game might end right then  if one of the players \n       * had blackjack.  Otherwise, gameInProgress is set to true and the game \n       * begins.\n       */\nvoid doNewGame() {\n    if (gameInProgress) {\n        // If the current game is not over, it is an error to try\n        // to start a new game.\n        message = \""You still have to finish this game!\"";\n        repaint();\n        return;\n    }\n    // Create the deck and hands to use for this game.\n    deck = new Deck();\n    dealerHand = new BlackjackHand();\n    playerHand = new BlackjackHand();\n    deck.shuffle();\n    // Deal two cards to each player.\n    dealerHand.addCard(deck.dealCard());\n    dealerHand.addCard(deck.dealCard());\n    playerHand.addCard(deck.dealCard());\n    playerHand.addCard(deck.dealCard());\n    if (dealerHand.getBlackjackValue() == 21) {\n        message = \""Sorry, you lose.  Dealer has Blackjack.\"";\n        gameInProgress = false;\n    } else if (playerHand.getBlackjackValue() == 21) {\n        message = \""You win!  You have Blackjack.\"";\n        gameInProgress = false;\n    } else {\n        message = \""You have \"" + playerHand.getBlackjackValue() + \"".  Hit or stand?\"";\n        gameInProgress = true;\n    }\n    repaint();\n}\n"",""rating"":1},""code"":""void somethod() {\n  //some comments\n}""}"
278,1.0,1.0,1.0,1.0,2017-03-24 21:43:38.895746,12,174,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""/**\n         * Called by actionPerformed() when user clicks \""Lower\"" button.\n         * Check the user's prediction.  Game ends if user guessed\n         * wrong or if the user has made three correct predictions.\n         */\nvoid doLower() {\n    if (gameInProgress == false) {\n        // If the game has ended, it was an error to click \""Lower\"",\n        // So set up an error message and abort processing.\n        message = \""Click \\\""New Game\\\"" to start a new game!\"";\n        repaint();\n        return;\n    }\n    // Deal a card to the hand.\n    hand.addCard(deck.dealCard());\n    int cardCt = hand.getCardCount();\n    // Card just dealt.\n    Card thisCard = hand.getCard(cardCt - 1);\n    // The previous card.\n    Card prevCard = hand.getCard(cardCt - 2);\n    if (thisCard.getValue() > prevCard.getValue()) {\n        gameInProgress = false;\n        message = \""Too bad! You lose.\"";\n    } else if (thisCard.getValue() == prevCard.getValue()) {\n        gameInProgress = false;\n        message = \""Too bad!  You lose on ties.\"";\n    } else if (cardCt == 4) {\n        gameInProgress = false;\n        message = \""You win!  You made three correct guesses.\"";\n    } else {\n        message = \""Got it right!  Try for \"" + cardCt + \"".\"";\n    }\n    repaint();\n}\n"",""rating"":4},""code"":""void somethod() {\n  //some comments\n}""}"
279,1.0,1.0,1.0,1.0,2017-03-24 21:43:38.909038,39,175,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""public int compareTo(Object other) {\n    return sign(this.magnitude() - ((ComplexNumber) other).magnitude());\n}\n"",""rating"":5},""code"":""public int compare(){\n  \n}""}"
280,1.0,3.0,1.0,1.0,2017-03-24 21:43:39.574701,36,176,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""double value() {\n    // The value is obtained by evaluating the left and right\n    // operands and combining the values with the operator.\n    double x = left.value();\n    double y = right.value();\n    switch(op) {\n        case '+':\n            return x + y;\n        case '-':\n            return x - y;\n        case '*':\n            return x * y;\n        case '/':\n            return x / y;\n        // Bad operator!\n        default:\n            return Double.NaN;\n    }\n}\n"",""rating"":2},""code"":""class Employee extends Person{\n  double getSalary();\n}""}"
281,1.0,1.0,1.0,1.0,2017-03-24 21:43:41.780532,12,177,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String[] args) {\n    LinkedList staff = new LinkedList();\n    staff.addFirst(\""Tom\"");\n    staff.addFirst(\""Romeo\"");\n    staff.addFirst(\""Harry\"");\n    staff.addFirst(\""Diana\"");\n    // | in the comments indicates the iterator position\n    // |DHRT\n    ListIterator iterator = staff.listIterator();\n    // D|HRT\n    iterator.next();\n    // DH|RT\n    iterator.next();\n    // Add more elements after second element\n    // DHJ|RT\n    iterator.add(\""Juliet\"");\n    // DHJN|RT\n    iterator.add(\""Nina\"");\n    // DHJNR|T\n    iterator.next();\n    // Remove last traversed element \n    // DHJN|T\n    iterator.remove();\n    // Print all elements\n    iterator = staff.listIterator();\n    while (iterator.hasNext()) {\n        System.out.print(iterator.next() + \"" \"");\n    }\n    System.out.println();\n}\n"",""rating"":4},""code"":""void somethod() {\n  //some comments\n}""}"
282,1.0,3.0,1.0,1.0,2017-03-24 21:43:42.179481,36,178,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String[] args) {\n    Employee[] staff = new Employee[3];\n    staff[0] = new HourlyEmployee(\""Morgan, Harry\"", 30);\n    staff[1] = new SalariedEmployee(\""Lin, Sally\"", 52000);\n    staff[2] = new Manager(\""Smith, Mary\"", 104000, 50);\n    Scanner in = new Scanner(System.in);\n    for (Employee e : staff) {\n        System.out.print(\""Hours worked by \"" + e.getName() + \"": \"");\n        int hours = in.nextInt();\n        System.out.println(\""Salary: \"" + e.weeklyPay(hours));\n    }\n}\n"",""rating"":2},""code"":""class Employee extends Person{\n  double getSalary();\n}""}"
283,1.0,1.0,1.0,1.0,2017-03-24 21:43:42.220008,11,179,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""/** Compare two doubles within a given epsilon */\npublic static boolean equals(double a, double b, double eps) {\n    if (a == b)\n        return true;\n    // If the difference is less than epsilon, treat as equal.\n    return Math.abs(a - b) < eps;\n}\n"",""rating"":2},""code"":""int largeDifference(int[] array)\n{\n  int count=0; \n  \n  if(array.length==0)\n  {\n    retun -1;\n  }\n  \n  for(int i=0;i<=array.length;i++)\n  {\n    if(i==array.length)\n    {\n      count=Math.abs(array[i]-array[]);\n    }\n  }\n}""}"
284,1.0,1.0,1.0,1.0,2017-03-24 21:43:42.771952,12,180,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""/**\n       * When the ERASE or SMUDGE tools are used and the mouse jumps\n       * from (x1,y1) to (x2,y2), the tool has to be applied to a\n       * line of pixel positions between the two points in order to\n       * cover the entire line that the mouse moves along.  The change\n       * is made to the off-screen canvas, and repaint() is called to\n       * copy the changes to the screen.\n       */\nvoid applyToolAlongLine(int x1, int y1, int x2, int y2) {\n    Graphics g = OSC.createGraphics();\n    Graphics2D g2 = (Graphics2D) g;\n    g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n    // (for ERASE only)\n    g.setColor(fillColor);\n    // (for SMUDGE only)\n    int w = OSC.getWidth();\n    // (for SMUDGE only)\n    int h = OSC.getHeight();\n    int dist = Math.max(Math.abs(x2 - x1), Math.abs(y2 - y1));\n    // dist is the number of points along the line from\n    // (x1,y1) to (x2,y2) at which the tool will be applied.\n    double dx = (double) (x2 - x1) / dist;\n    double dy = (double) (y2 - y1) / dist;\n    for (int d = 1; d <= dist; d++) {\n        // Apply the tool at one of the points (x,y) along the\n        // line from (x1,y1) to (x2,y2).\n        int x = (int) Math.round(x1 + dx * d);\n        int y = (int) Math.round(y1 + dy * d);\n        if (currentTool == Tool.ERASE) {\n            // Erase a 10-by-10 block of pixels around (x,y)\n            g.fillRect(x - 5, y - 5, 10, 10);\n            repaint(x - 5, y - 5, 10, 10);\n        } else {\n            // of pixels that are visited by the tool.\n            for (int i = 0; i < 7; i++) for (int j = 0; j < 7; j++) {\n                int r = y + j - 3;\n                int c = x + i - 3;\n                if (!(r < 0 || r >= h || c < 0 || c >= w || smudgeRed[i][j] == -1)) {\n                    int curCol = OSC.getRGB(c, r);\n                    int curRed = (curCol >> 16) & 0xFF;\n                    int curGreen = (curCol >> 8) & 0xFF;\n                    int curBlue = curCol & 0xFF;\n                    int newRed = (int) (curRed * 0.7 + smudgeRed[i][j] * 0.3);\n                    int newGreen = (int) (curGreen * 0.7 + smudgeGreen[i][j] * 0.3);\n                    int newBlue = (int) (curBlue * 0.7 + smudgeBlue[i][j] * 0.3);\n                    int newCol = newRed << 16 | newGreen << 8 | newBlue;\n                    OSC.setRGB(c, r, newCol);\n                    smudgeRed[i][j] = curRed * 0.3 + smudgeRed[i][j] * 0.7;\n                    smudgeGreen[i][j] = curGreen * 0.3 + smudgeGreen[i][j] * 0.7;\n                    smudgeBlue[i][j] = curBlue * 0.3 + smudgeBlue[i][j] * 0.7;\n                }\n            }\n            repaint(x - 3, y - 3, 7, 7);\n        }\n    }\n    g.dispose();\n}\n                   // For the SMUDGE tool, blend some of the color from\n\n                   // the smudgeRed, smudgeGreen, and smudgeBlue arrays\n\n                   // into the pixels in a 7-by-7 block around (x,y), and\n\n                   // vice versa.  The effect is to smear out the color\n\n"",""rating"":4},""code"":""void somethod() {\n  //some comments\n}""}"
285,1.0,1.0,1.0,1.0,2017-03-24 21:43:44.384612,39,181,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""public int compare(Object a, Object b) {\n    return ((String) a).compareTo((String) b);\n}\n"",""rating"":5},""code"":""public int compare(){\n  \n}""}"
286,1.0,1.0,1.0,5.0,2017-03-24 21:43:46.328952,16,182,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""/**\n      Adds a percentage to an amount. \n      @param percentage the percentage to apply\n      @param amount the amount to which the percentage is applied\n      @return the sum of the amount and the requested percentage\n   */\npublic static double addPercentTo(double percentage, double amount) {\n    return (1 + percentage / 100) * amount;\n}\n"",""rating"":2},""code"":""void mymethod() {\n  // get salary from percentages\n}""}"
287,1.0,3.0,1.0,1.0,2017-03-24 21:43:48.322723,36,183,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""double performConversion(double f) {\n    return f *= 453.59237;\n}\n"",""rating"":1},""code"":""class Employee extends Person{\n  double getSalary();\n}""}"
288,1.0,1.0,1.0,5.0,2017-03-24 21:43:50.444624,16,184,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""public static void main(String[] args) {\n    double sum = 0;\n    int count = 0;\n    double salary = 0;\n    System.out.print(\""Enter salaries, -1 to finish: \"");\n    Scanner in = new Scanner(System.in);\n    while (salary != -1) {\n        salary = in.nextDouble();\n        if (salary != -1) {\n            sum = sum + salary;\n            count++;\n        }\n    }\n    if (count > 0) {\n        double average = sum / count;\n        System.out.println(\""Average salary: \"" + average);\n       // Process data until the sentinel is entered \n\n    } else {\n        System.out.println(\""No data\"");\n    }\n}\n       // Compute and print the average\n\n"",""rating"":1},""code"":""void mymethod() {\n  // get salary from percentages\n}""}"
289,1.0,1.0,1.0,1.0,2017-03-24 21:43:50.596578,13,185,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""/**\n     * Roll the dice by randomizing their values.  Tell the\n     * system to repaint the panel, to show the new values.\n     */\nvoid roll() {\n    die1 = (int) (Math.random() * 6) + 1;\n    die2 = (int) (Math.random() * 6) + 1;\n    repaint();\n}\n"",""rating"":3},""code"":""void somethod () {\n  // show\n}""}"
290,1.0,1.0,1.0,1.0,2017-03-24 21:43:51.982218,13,186,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""/**\n       * This is called by mousePressed() when a player clicks on the\n       * square in the specified row and col.  It has already been checked\n       * that a game is, in fact, in progress.\n       */\nvoid doClickSquare(int row, int col) {\n    if (board[row][col] != EMPTY) {\n        if (currentPlayer == BLACK)\n            message.setText(\""BLACK:  Please click an empty square.\"");\n        else\n            message.setText(\""WHITE:  Please click an empty square.\"");\n        return;\n    }\n    /* Make the move.  Check if the board is full or if the move\n          is a winning move.  If so, the game ends.  If not, then it's\n          the other user's turn. */\n    // Make the move.\n    board[row][col] = currentPlayer;\n    repaint();\n    if (winner(row, col)) {\n        // First, check for a winner.\n        if (currentPlayer == WHITE)\n            gameOver(\""WHITE wins the game!\"");\n        else\n            gameOver(\""BLACK wins the game!\"");\n        return;\n    }\n    // Check if the board is full.\n    boolean emptySpace = false;\n    for (int i = 0; i < 13; i++) for (int j = 0; j < 13; j++) if (board[i][j] == EMPTY)\n        emptySpace = true;\n    if (emptySpace == false) {\n        gameOver(\""The game ends in a draw.\"");\n        return;\n    }\n    if (currentPlayer == BLACK) {\n        currentPlayer = WHITE;\n        message.setText(\""WHITE:  Make your move.\"");\n    } else {\n        currentPlayer = BLACK;\n        message.setText(\""BLACK:  Make your move.\"");\n    }\n}\n          /* Check that the user clicked an empty square.  If not, show an\n          error message and exit. */\n\n          /* Continue the game.  It's the other player's turn. */\n\n"",""rating"":1},""code"":""void somethod () {\n  // show\n}""}"
291,1.0,1.0,1.0,1.0,2017-03-24 21:43:53.227606,13,187,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""/** \""main program\"" method - construct and show */\npublic static void main(String[] av) {\n    testTwoCols();\n    testFiveCols();\n}\n"",""rating"":2},""code"":""void somethod () {\n  // show\n}""}"
292,1.0,3.0,1.0,1.0,2017-03-24 21:43:53.291067,36,188,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Constructs a salaried employee with a given name and annual salary.\n      @param name the name of this employee\n      @param salary the annual salary\n    */\npublic SalariedEmployee(String name, double salary) {\n    setName(name);\n    annualSalary = salary;\n}\n"",""rating"":4},""code"":""class Employee extends Person{\n  double getSalary();\n}""}"
293,1.0,1.0,1.0,2.0,2017-03-24 21:43:56.279262,46,189,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""public static void main(String[] args) {\n    String input = JOptionPane.showInputDialog(\""Enter price:\"");\n    double price = Double.parseDouble(input);\n    final double TAX_RATE = 8.5;\n    price = price * (1 + TAX_RATE / 100);\n    JOptionPane.showMessageDialog(null, \""Price after tax: \"" + price);\n}\n"",""rating"":3},""code"":""void returnTax(){\n  double tax;\n  if(Employee.getSalary < 100000)\n  {\n     tax = .02*Employee.getSalary;\n  }\n}""}"
294,1.0,1.0,1.0,1.0,2017-03-24 21:43:57.879268,13,190,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static void showList(int[] list) {\n    for (int i = 0; i < list.length; i++) System.out.print(list[i] + \"" \"");\n    System.out.println();\n}\n"",""rating"":2},""code"":""void somethod () {\n  // show\n}""}"
295,1.0,1.0,1.0,2.0,2017-03-24 21:43:58.097603,46,191,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", targetDate = \""Jan 1, 2012\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""void returnTax(){\n  double tax;\n  if(Employee.getSalary < 100000)\n  {\n     tax = .02*Employee.getSalary;\n  }\n}""}"
296,1.0,1.0,1.0,1.0,2017-03-24 21:43:59.088621,13,192,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""/** This shows everything */\npublic void show() {\n    frame.setVisible(true);\n}\n"",""rating"":2},""code"":""void somethod () {\n  // show\n}""}"
297,1.0,1.0,1.0,5.0,2017-03-24 21:43:59.100064,16,193,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""/*\n     * Load the Applet into memory. Should do caching.\n     */\nvoid loadApplet(String appletName, int w, int h) {\n    // height =         ditto\n    try {\n        // get a Class object for the Applet subclass\n        ac = Class.forName(appletName);\n        // Construct an instance (as if using no-argument constructor)\n        ai = (Applet) ac.newInstance();\n    } catch (ClassNotFoundException e) {\n        showStatus(\""Applet subclass \"" + appletName + \"" did not load\"");\n        return;\n    } catch (Exception e) {\n        showStatus(\""Applet \"" + appletName + \"" did not instantiate\"");\n        return;\n    }\n    ai.setSize(w, h);\n}\n         // appletName = ... extract from the HTML CODE= somehow ...;\n\n         // width =         ditto\n\n"",""rating"":1},""code"":""void mymethod() {\n  // get salary from percentages\n}""}"
298,1.0,1.0,1.0,5.0,2017-03-24 21:43:59.847790,16,194,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""public double weeklyPay(int hoursWorked) {\n    final int WEEKS_PER_YEAR = 52;\n    return annualSalary / WEEKS_PER_YEAR;\n}\n"",""rating"":1},""code"":""void mymethod() {\n  // get salary from percentages\n}""}"
299,1.0,1.0,1.0,1.0,2017-03-24 21:44:00.221207,18,195,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""double value() {\n    // The value is obtained by evaluating the left and right\n    // operands and combining the values with the operator.\n    double x = left.value();\n    double y = right.value();\n    switch(op) {\n        case '+':\n            return x + y;\n        case '-':\n            return x - y;\n        case '*':\n            return x * y;\n        case '/':\n            return x / y;\n        // Bad operator!\n        default:\n            return Double.NaN;\n    }\n}\n"",""rating"":2},""code"":""class Person{\n  String name;\n  int age;\n}\nclass Employee extends Person{\n  double getSalary();\n}\nclass BuisnessOwner extends Person {\n  double getProfit();\n}\nclass Veteran extends Person{\n  String veteran_id;\n}""}"
300,1.0,1.0,1.0,1.0,2017-03-24 21:44:00.683799,39,196,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""/**\n        * Return the value of this Roman numeral as an int.\n        */\npublic int toInt() {\n    return num;\n}\n"",""rating"":5},""code"":""public int compare(){\n  \n}""}"
301,1.0,1.0,1.0,3.5,2017-03-24 21:44:00.828804,11,,"int largeDifference(int[] array)
{
  int count=0; 
  
  if(array.length==0)
  {
    retun -1;
  }
  
  for(int i=0;i<=array.length;i++)
  {
    if(i==array.length)
    {
      count=Math.abs(array[i]-array[]);
    }
  }
}"
302,1.0,1.0,1.0,5.0,2017-03-24 21:44:01.517856,16,197,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""void removePiece(int p, int row, int col) {\n    // Remove piece p from the board, at position (row,col)\n    board.setColor(row, col, null);\n    for (int i = 1; i < 9; i += 2) {\n        board.setColor(row + pieces[p][i], col + pieces[p][i + 1], null);\n    }\n}\n"",""rating"":1},""code"":""void mymethod() {\n  // get salary from percentages\n}""}"
303,1.0,1.0,1.0,1.0,2017-03-24 21:44:02.775661,18,198,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""double performConversion(double f) {\n    return f *= 0.45359237;\n}\n"",""rating"":1},""code"":""class Person{\n  String name;\n  int age;\n}\nclass Employee extends Person{\n  double getSalary();\n}\nclass BuisnessOwner extends Person {\n  double getProfit();\n}\nclass Veteran extends Person{\n  String veteran_id;\n}""}"
304,1.0,3.0,1.0,3.5,2017-03-24 21:44:03.153074,11,,"int largeDifference(int[] array)
{
  int count=0; 
  
  if(array.length==0)
  {
    retun -1;
  }
  
  for(int i=0;i<=array.length;i++)
  {
    if(i==array.length)
    {
      count=Math.abs(array[i]-array[]);
    }
  }
}"
305,1.0,2.5,1.5,1.0,2017-03-24 21:44:03.227095,8,199,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""boolean containsPoint(int x, int y) {\n    // appropriate for the subclass.\n    if (x >= left && x < left + width && y >= top && y < top + height)\n        return true;\n    else\n        return false;\n}\n                 // Check whether the shape contains the point (x,y).\n\n                 // By default, this just checks whether (x,y) is inside the\n\n                 // rectangle that bounds the shape.  This method should be\n\n                 // overridden by a subclass if the default behavior is not\n\n"",""rating"":1},""code"":""//takes a person and returns their tax as below\nDouble tax(Person p)\n{\n  if(p.getSalary() < 10000)\n  return p.getSalary()*.02;\n    else\n      return p.getSalary()*.02;\n if(p.getSalary() < 10000){\n   return p.getSalary()*.02;\n }     \n}""}"
306,1.0,1.0,1.0,2.0,2017-03-24 21:44:03.874564,46,200,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""/** \n       Displays a summary of the gathered statistics.\n   */\npublic void displaySummary() {\n    double averageTime = 0;\n    if (totalCustomers > 0) {\n        averageTime = totalTime / totalCustomers;\n    }\n    System.out.println(totalCustomers + \"" customers. Average time \"" + averageTime + \"" minutes.\"");\n}\n"",""rating"":1},""code"":""void returnTax(){\n  double tax;\n  if(Employee.getSalary < 100000)\n  {\n     tax = .02*Employee.getSalary;\n  }\n}""}"
307,1.0,1.0,1.0,5.0,2017-03-24 21:44:03.939381,16,201,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""// end drawFunction()\nvoid putLine(Graphics g, double x1, double y1, double x2, double y2) {\n    // Draw a line segment from the point (x1,y1) to (x2,y2).\n    // These real values must be scaled to get the integer \n    // coordinates of the corresponding pixels.\n    // Pixel coordinates corresponding to (x1,y1).\n    int a1, b1;\n    // Pixel coordinates corresponding to (x2,y2).\n    int a2, b2;\n    // Width of the canvas.\n    int width = getWidth();\n    // Height of the canvas. \n    int height = getHeight();\n    a1 = (int) ((x1 + 5) / 10 * width);\n    b1 = (int) ((5 - y1) / 10 * height);\n    a2 = (int) ((x2 + 5) / 10 * width);\n    b2 = (int) ((5 - y2) / 10 * height);\n    if (Math.abs(y1) < 30000 && Math.abs(y2) < 30000) {\n        // Only draw lines for reasonable y-values.\n        // This should not be necessary, I think,\n        // but I got a problem when y was very large.)\n        g.drawLine(a1, b1, a2, b2);\n    }\n}\n"",""rating"":1},""code"":""void mymethod() {\n  // get salary from percentages\n}""}"
308,1.0,2.5,1.5,1.0,2017-03-24 21:44:05.942406,8,202,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""String valueAsString() {\n    return \""\"" + owner.getDisplay().getMaxIterations();\n}\n"",""rating"":1},""code"":""//takes a person and returns their tax as below\nDouble tax(Person p)\n{\n  if(p.getSalary() < 10000)\n  return p.getSalary()*.02;\n    else\n      return p.getSalary()*.02;\n if(p.getSalary() < 10000){\n   return p.getSalary()*.02;\n }     \n}""}"
309,1.0,1.0,1.0,1.0,2017-03-24 21:44:06.461512,18,203,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Constructs a salaried employee with a given name and annual salary.\n      @param name the name of this employee\n      @param salary the annual salary\n    */\npublic SalariedEmployee(String name, double salary) {\n    setName(name);\n    annualSalary = salary;\n}\n"",""rating"":2},""code"":""class Person{\n  String name;\n  int age;\n}\nclass Employee extends Person{\n  double getSalary();\n}\nclass BuisnessOwner extends Person {\n  double getProfit();\n}\nclass Veteran extends Person{\n  String veteran_id;\n}""}"
310,1.0,1.0,1.0,2.0,2017-03-24 21:44:06.487338,46,204,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""/** \n     * Break a page at the specified Y coordinate.  Store the necessary\n     * information into the pageLengths and pageOffsets lists\n     **/\nvoid breakPage(double y) {\n    double pageLength = y - pageStart - printY;\n    pageStart = y - printY;\n    pageLengths.add(new Double(pageLength));\n    pageOffsets.add(new Double(pageStart));\n}\n"",""rating"":1},""code"":""void returnTax(){\n  double tax;\n  if(Employee.getSalary < 100000)\n  {\n     tax = .02*Employee.getSalary;\n  }\n}""}"
311,1.0,1.0,1.0,5.0,2017-03-24 21:44:06.631404,16,205,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""/**\n      Transfers money from this account and tries to add it\n      @param amount the amount of money to transfer\n      @param otherBalance balance to add the amount to\n   */\nvoid transfer(double amount, double otherBalance) {\n    balance = balance - amount;\n    otherBalance = otherBalance + amount;\n// Won’t update the argument\n}\n"",""rating"":1},""code"":""void mymethod() {\n  // get salary from percentages\n}""}"
312,1.0,3.0,1.0,3.5,2017-03-24 21:44:09.697145,11,206,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""int intFieldValue(Object o, String name) throws NoSuchFieldException, IllegalAccessException {\n    Class<?> c = o.getClass();\n    Field fld = c.getField(name);\n    int value = fld.getInt(o);\n    return value;\n}\n"",""rating"":1},""code"":""int largeDifference(int[] array)\n{\n  int count=0; \n  \n  if(array.length==0)\n  {\n    retun -1;\n  }\n  \n  for(int i=0;i<=array.length;i++)\n  {\n    if(i==array.length)\n    {\n      count=Math.abs(array[i]-array[]);\n    }\n  }\n}""}"
313,1.0,1.0,1.0,2.0,2017-03-24 21:44:09.785208,46,207,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""void returnTax(){\n  double tax;\n  if(Employee.getSalary < 100000)\n  {\n     tax = .02*Employee.getSalary;\n  }\n}""}"
314,1.0,1.0,1.0,1.0,2017-03-24 21:44:10.003816,18,208,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""public double weeklyPay(int hoursWorked) {\n    final int WEEKS_PER_YEAR = 52;\n    return annualSalary / WEEKS_PER_YEAR;\n}\n"",""rating"":1},""code"":""class Person{\n  String name;\n  int age;\n}\nclass Employee extends Person{\n  double getSalary();\n}\nclass BuisnessOwner extends Person {\n  double getProfit();\n}\nclass Veteran extends Person{\n  String veteran_id;\n}""}"
315,1.0,3.0,1.0,3.5,2017-03-24 21:44:10.266498,11,209,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""// pre: list != null\n// post: return sum of elements\n// use traditional for loop\npublic static int sumListOld(int[] list) {\n    int total = 0;\n    for (int i = 0; i < list.length; i++) {\n        total += list[i];\n        System.out.println(list[i]);\n    }\n    return total;\n}\n"",""rating"":1},""code"":""int largeDifference(int[] array)\n{\n  int count=0; \n  \n  if(array.length==0)\n  {\n    retun -1;\n  }\n  \n  for(int i=0;i<=array.length;i++)\n  {\n    if(i==array.length)\n    {\n      count=Math.abs(array[i]-array[]);\n    }\n  }\n}""}"
316,1.0,2.5,1.5,1.0,2017-03-24 21:44:10.513238,8,210,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""public static void main(String[] args) {\n    String input = JOptionPane.showInputDialog(\""Enter price:\"");\n    double price = Double.parseDouble(input);\n    final double TAX_RATE = 8.5;\n    price = price * (1 + TAX_RATE / 100);\n    JOptionPane.showMessageDialog(null, \""Price after tax: \"" + price);\n}\n"",""rating"":3},""code"":""//takes a person and returns their tax as below\nDouble tax(Person p)\n{\n  if(p.getSalary() < 10000)\n  return p.getSalary()*.02;\n    else\n      return p.getSalary()*.02;\n if(p.getSalary() < 10000){\n   return p.getSalary()*.02;\n }     \n}""}"
317,1.0,3.0,1.0,3.5,2017-03-24 21:44:11.217476,11,211,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""/**\n         * Return the contents of the square in the specified row and column.\n         */\nint pieceAt(int row, int col) {\n    return board[row][col];\n}\n"",""rating"":1},""code"":""int largeDifference(int[] array)\n{\n  int count=0; \n  \n  if(array.length==0)\n  {\n    retun -1;\n  }\n  \n  for(int i=0;i<=array.length;i++)\n  {\n    if(i==array.length)\n    {\n      count=Math.abs(array[i]-array[]);\n    }\n  }\n}""}"
318,1.0,1.0,1.0,1.0,2017-03-24 21:44:11.377911,29,212,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""/**\n      Computes the change due and resets the machine for the next customer.\n      @return the change due to the customer\n   */\npublic double giveChange() {\n    double change = payment - purchase - get;\n    purchase = 0;\n    payment = 0;\n    return change;\n}\n"",""rating"":4},""code"":""public double array(double a, double b, double c)\n{\n  double[] list = {a, b, c};\n  \n  double difference  = list[0] - list[2];\n  \n  return difference;\n}""}"
319,1.0,1.0,1.0,1.0,2017-03-24 21:44:11.403550,18,213,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""double performConversion(double f) {\n    return f *= 453.59237;\n}\n"",""rating"":1},""code"":""class Person{\n  String name;\n  int age;\n}\nclass Employee extends Person{\n  double getSalary();\n}\nclass BuisnessOwner extends Person {\n  double getProfit();\n}\nclass Veteran extends Person{\n  String veteran_id;\n}""}"
320,1.0,2.5,1.5,1.0,2017-03-24 21:44:12.035702,8,214,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""/** Return the person's name.  Not a remote method */\npublic String getName() {\n    return name;\n}\n"",""rating"":2},""code"":""//takes a person and returns their tax as below\nDouble tax(Person p)\n{\n  if(p.getSalary() < 10000)\n  return p.getSalary()*.02;\n    else\n      return p.getSalary()*.02;\n if(p.getSalary() < 10000){\n   return p.getSalary()*.02;\n }     \n}""}"
321,1.0,1.0,1.0,2.0,2017-03-24 21:44:13.472632,46,215,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""void drawFunction(Graphics g) {\n    // Draw the graph of the function defined by the instance \n    // variable func.  Just plot 301 points with lines \n    // between them. \n    // A point on the graph.  y is f(x).\n    double x, y;\n    // The previous point on the graph.\n    double prevx, prevy;\n    // Difference between the x-values of consecutive \n    double dx;\n    // points on the graph.\n    dx = 10.0 / 300;\n    g.setColor(Color.RED);\n    /* Compute the first point. */\n    x = -5;\n    y = func.value(x);\n    for (int i = 1; i <= 300; i++) {\n        // Save the coords of the previous point.\n        prevx = x;\n        prevy = y;\n        // Get the coords of the next point.\n        x += dx;\n        y = func.value(x);\n        if ((!Double.isNaN(y)) && (!Double.isNaN(prevy))) {\n            // Draw a line segment between the two points.\n            putLine(g, prevx, prevy, x, y);\n        }\n    }\n// end for\n}\n          /* Compute each of the other 300 points, and draw a line segment\n               between each consecutive pair of points.  Note that if the\n               function is undefined at one of the points in a pair, then \n               the line segment is not drawn.  */\n\n"",""rating"":1},""code"":""void returnTax(){\n  double tax;\n  if(Employee.getSalary < 100000)\n  {\n     tax = .02*Employee.getSalary;\n  }\n}""}"
322,1.0,2.5,1.5,1.0,2017-03-24 21:44:14.642955,8,216,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""default boolean smallerThan(Measurable other) {\n    return getMeasure() < other.getMeasure();\n}\n"",""rating"":2},""code"":""//takes a person and returns their tax as below\nDouble tax(Person p)\n{\n  if(p.getSalary() < 10000)\n  return p.getSalary()*.02;\n    else\n      return p.getSalary()*.02;\n if(p.getSalary() < 10000){\n   return p.getSalary()*.02;\n }     \n}""}"
323,1.0,1.0,1.0,5.0,2017-03-24 21:44:16.703443,16,217,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Computes a percentage of an amount. \n      @param percentage the percentage to apply\n      @param amount the amount to which the percentage is applied\n      @return the requested percentage of the amount \n   */\npublic static double percentOf(double percentage, double amount) {\n    return (percentage / 100) * amount;\n}\n"",""rating"":3},""code"":""void mymethod() {\n  // get salary from percentages\n}""}"
324,1.0,1.0,1.0,1.0,2017-03-24 21:44:18.414090,12,218,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""/**\n         * Called by actionPerformed() when user clicks \""Lower\"" button.\n         * Check the user's prediction.  Game ends if user guessed\n         * wrong or if the user has made three correct predictions.\n         */\nvoid doLower() {\n    if (gameInProgress == false) {\n        // If the game has ended, it was an error to click \""Lower\"",\n        // So set up an error message and abort processing.\n        message = \""Click \\\""New Game\\\"" to start a new game!\"";\n        repaint();\n        return;\n    }\n    // Deal a card to the hand.\n    hand.addCard(deck.dealCard());\n    int cardCt = hand.getCardCount();\n    // Card just dealt.\n    Card thisCard = hand.getCard(cardCt - 1);\n    // The previous card.\n    Card prevCard = hand.getCard(cardCt - 2);\n    if (thisCard.getValue() > prevCard.getValue()) {\n        gameInProgress = false;\n        message = \""Too bad! You lose.\"";\n    } else if (thisCard.getValue() == prevCard.getValue()) {\n        gameInProgress = false;\n        message = \""Too bad!  You lose on ties.\"";\n    } else if (cardCt == 4) {\n        gameInProgress = false;\n        message = \""You win!  You made three correct guesses.\"";\n    } else {\n        message = \""Got it right!  Try for \"" + cardCt + \"".\"";\n    }\n    repaint();\n}\n"",""rating"":3},""code"":""void somethod(){\n  //some comments\n}""}"
325,1.0,1.0,1.0,1.0,2017-03-24 21:44:24.365319,12,219,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""/**\n     * Output the specified DOM Node object, printing it using the specified\n     * indentation string\n     **/\npublic void write(Node node, String indent) {\n    // The output depends on the type of the node\n    switch(node.getNodeType()) {\n        case Node.DOCUMENT_NODE:\n            {\n                // If its a Document node\n                Document doc = (Document) node;\n                // Output header\n                out.println(indent + \""<?xml version='1.0'?>\"");\n                // Get the first node\n                Node child = doc.getFirstChild();\n                while (child != null) {\n                    // Loop 'till no more nodes\n                    // Output node\n                    write(child, indent);\n                    // Get next node\n                    child = child.getNextSibling();\n                }\n                break;\n            }\n        case Node.DOCUMENT_TYPE_NODE:\n            {\n                // It is a <!DOCTYPE> tag\n                DocumentType doctype = (DocumentType) node;\n                // Note that the DOM Level 1 does not give us information about\n                // the the public or system ids of the doctype, so we can't output\n                // a complete <!DOCTYPE> tag here.  We can do better with Level 2.\n                out.println(\""<!DOCTYPE \"" + doctype.getName() + \"">\"");\n                break;\n            }\n        case Node.ELEMENT_NODE:\n            {\n                // Most nodes are Elements\n                Element elt = (Element) node;\n                // Begin start tag\n                out.print(indent + \""<\"" + elt.getTagName());\n                // Get attributes\n                NamedNodeMap attrs = elt.getAttributes();\n                for (int i = 0; i < attrs.getLength(); i++) {\n                    // Loop through them\n                    Node a = attrs.item(i);\n                    out.print(// Print attr. name\n                    \"" \"" + a.getNodeName() + \""='\"" + fixup(a.getNodeValue()) + // Print attr. value\n                    \""'\"");\n                }\n                // Finish start tag\n                out.println(\"">\"");\n                // Increase indent\n                String newindent = indent + \""    \"";\n                // Get child\n                Node child = elt.getFirstChild();\n                while (child != null) {\n                    // Loop \n                    // Output child\n                    write(child, newindent);\n                    // Get next child\n                    child = child.getNextSibling();\n                }\n                out.println(// Output end tag\n                indent + \""</\"" + elt.getTagName() + \"">\"");\n                break;\n            }\n        case Node.TEXT_NODE:\n            {\n                // Plain text node\n                Text textNode = (Text) node;\n                // Strip off space\n                String text = textNode.getData().trim();\n                if (// If non-empty\n                (text != null) && text.length() > 0)\n                    // print text\n                    out.println(indent + fixup(text));\n                break;\n            }\n        case Node.PROCESSING_INSTRUCTION_NODE:\n            {\n                // Handle PI nodes\n                ProcessingInstruction pi = (ProcessingInstruction) node;\n                out.println(indent + \""<?\"" + pi.getTarget() + \"" \"" + pi.getData() + \""?>\"");\n                break;\n            }\n        case Node.ENTITY_REFERENCE_NODE:\n            {\n                // Handle entities\n                out.println(indent + \""&\"" + node.getNodeName() + \"";\"");\n                break;\n            }\n        case Node.CDATA_SECTION_NODE:\n            {\n                // Output CDATA sections\n                CDATASection cdata = (CDATASection) node;\n                // Careful! Don't put a CDATA section in the program itself!\n                out.println(indent + \""<\"" + \""![CDATA[\"" + cdata.getData() + \""]]\"" + \"">\"");\n                break;\n            }\n        case Node.COMMENT_NODE:\n            {\n                // Comments\n                Comment c = (Comment) node;\n                out.println(indent + \""<!--\"" + c.getData() + \""-->\"");\n                break;\n            }\n        default:\n            // Hopefully, this won't happen too much!\n            System.err.println(\""Ignoring node: \"" + node.getClass().getName());\n            break;\n    }\n}\n"",""rating"":4},""code"":""void somethod(){\n  //some comments\n}""}"
326,1.0,1.0,1.0,1.0,2017-03-24 21:44:30.104139,12,220,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String[] args) {\n    LinkedList staff = new LinkedList();\n    staff.addFirst(\""Tom\"");\n    staff.addFirst(\""Romeo\"");\n    staff.addFirst(\""Harry\"");\n    staff.addFirst(\""Diana\"");\n    // | in the comments indicates the iterator position\n    // |DHRT\n    ListIterator iterator = staff.listIterator();\n    // D|HRT\n    iterator.next();\n    // DH|RT\n    iterator.next();\n    // Add more elements after second element\n    // DHJ|RT\n    iterator.add(\""Juliet\"");\n    // DHJN|RT\n    iterator.add(\""Nina\"");\n    // DHJNR|T\n    iterator.next();\n    // Remove last traversed element \n    // DHJN|T\n    iterator.remove();\n    // Print all elements\n    iterator = staff.listIterator();\n    while (iterator.hasNext()) {\n        System.out.print(iterator.next() + \"" \"");\n    }\n    System.out.println();\n}\n"",""rating"":3},""code"":""void somethod(){\n  //some comments\n}""}"
327,1.0,1.0,1.0,1.0,2017-03-24 21:44:31.811287,12,221,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""/** The constructor.  See comment above for meanings of these arguments */\npublic ColumnLayout(int margin_height, int margin_width, int spacing, int alignment) {\n    this.margin_height = margin_height;\n    this.margin_width = margin_width;\n    this.spacing = spacing;\n    this.alignment = alignment;\n}\n"",""rating"":4},""code"":""void somethod(){\n  //some comments\n}""}"
328,1.0,2.5,1.5,1.0,2017-03-24 21:44:33.906810,8,222,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", targetDate = \""Jan 1, 2012\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":2},""code"":""//takes a person and returns their tax as below\nDouble tax(Person p)\n{\n  if(p.getSalary() < 10000)\n  return p.getSalary()*.02;\n    else\n      return p.getSalary()*.02;\n if(p.getSalary() < 10000){\n   return p.getSalary()*.02;\n }     \n}""}"
329,1.0,1.0,1.0,1.0,2017-03-24 21:44:34.907233,12,223,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""public static void main(String[] args) {\n    LinkedList staff = new LinkedList();\n    staff.addLast(\""Diana\"");\n    staff.addLast(\""Harry\"");\n    staff.addLast(\""Romeo\"");\n    staff.addLast(\""Tom\"");\n    // | in the comments indicates the iterator position\n    // |DHRT\n    ListIterator iterator = staff.listIterator();\n    // D|HRT\n    iterator.next();\n    // DH|RT\n    iterator.next();\n    // Add more elements after second element\n    // DHJ|RT\n    iterator.add(\""Juliet\"");\n    // DHJN|RT\n    iterator.add(\""Nina\"");\n    // DHJNR|T\n    System.out.println(iterator.next());\n    // DHJN|RT\n    System.out.println(iterator.previous());\n    // Remove last traversed element \n    // DHJN|T\n    iterator.remove();\n    // Print all elements\n    iterator = staff.listIterator();\n    while (iterator.hasNext()) {\n        System.out.print(iterator.next() + \"" \"");\n    }\n    System.out.println();\n}\n"",""rating"":2},""code"":""void somethod(){\n  //some comments\n}""}"
330,1.0,1.0,1.0,1.0,2017-03-24 21:44:36.533229,12,224,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""/**\n       * Called by the constructor, and called by actionPerformed() if  the \n       * user clicks the \""New Game\"" button.  Start a new game.  Deal two cards \n       * to each player.  The game might end right then  if one of the players \n       * had blackjack.  Otherwise, gameInProgress is set to true and the game \n       * begins.\n       */\nvoid doNewGame() {\n    if (gameInProgress) {\n        // If the current game is not over, it is an error to try\n        // to start a new game.\n        message = \""You still have to finish this game!\"";\n        repaint();\n        return;\n    }\n    // Create the deck and hands to use for this game.\n    deck = new Deck();\n    dealerHand = new BlackjackHand();\n    playerHand = new BlackjackHand();\n    deck.shuffle();\n    // Deal two cards to each player.\n    dealerHand.addCard(deck.dealCard());\n    dealerHand.addCard(deck.dealCard());\n    playerHand.addCard(deck.dealCard());\n    playerHand.addCard(deck.dealCard());\n    if (dealerHand.getBlackjackValue() == 21) {\n        message = \""Sorry, you lose.  Dealer has Blackjack.\"";\n        gameInProgress = false;\n    } else if (playerHand.getBlackjackValue() == 21) {\n        message = \""You win!  You have Blackjack.\"";\n        gameInProgress = false;\n    } else {\n        message = \""You have \"" + playerHand.getBlackjackValue() + \"".  Hit or stand?\"";\n        gameInProgress = true;\n    }\n    repaint();\n}\n"",""rating"":5},""code"":""void somethod(){\n  //some comments\n}""}"
331,1.0,1.0,1.0,1.0,2017-03-24 21:44:36.635764,15,225,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""/**\n       * When the ERASE or SMUDGE tools are used and the mouse jumps\n       * from (x1,y1) to (x2,y2), the tool has to be applied to a\n       * line of pixel positions between the two points in order to\n       * cover the entire line that the mouse moves along.  The change\n       * is made to the off-screen canvas, and repaint() is called to\n       * copy the changes to the screen.\n       */\nvoid applyToolAlongLine(int x1, int y1, int x2, int y2) {\n    Graphics g = OSC.createGraphics();\n    // (for ERASE only)\n    g.setColor(fillColor);\n    // (for SMUDGE only)\n    int w = OSC.getWidth();\n    // (for SMUDGE only)\n    int h = OSC.getHeight();\n    int dist = Math.max(Math.abs(x2 - x1), Math.abs(y2 - y1));\n    // dist is the number of points along the line from\n    // (x1,y1) to (x2,y2) at which the tool will be applied.\n    double dx = (double) (x2 - x1) / dist;\n    double dy = (double) (y2 - y1) / dist;\n    for (int d = 1; d <= dist; d++) {\n        // Apply the tool at one of the points (x,y) along the\n        // line from (x1,y1) to (x2,y2).\n        int x = (int) Math.round(x1 + dx * d);\n        int y = (int) Math.round(y1 + dy * d);\n        if (currentTool == Tool.ERASE) {\n            // Erase a 10-by-10 block of pixels around (x,y)\n            g.fillRect(x - 5, y - 5, 10, 10);\n            repaint(x - 5, y - 5, 10, 10);\n        } else {\n            // of pixels that are visited by the tool.\n            for (int i = 0; i < 7; i++) for (int j = 0; j < 7; j++) {\n                int r = y + j - 3;\n                int c = x + i - 3;\n                if (!(r < 0 || r >= h || c < 0 || c >= w || smudgeRed[i][j] == -1)) {\n                    int curCol = OSC.getRGB(c, r);\n                    int curRed = (curCol >> 16) & 0xFF;\n                    int curGreen = (curCol >> 8) & 0xFF;\n                    int curBlue = curCol & 0xFF;\n                    int newRed = (int) (curRed * 0.7 + smudgeRed[i][j] * 0.3);\n                    int newGreen = (int) (curGreen * 0.7 + smudgeGreen[i][j] * 0.3);\n                    int newBlue = (int) (curBlue * 0.7 + smudgeBlue[i][j] * 0.3);\n                    int newCol = newRed << 16 | newGreen << 8 | newBlue;\n                    OSC.setRGB(c, r, newCol);\n                    smudgeRed[i][j] = curRed * 0.3 + smudgeRed[i][j] * 0.7;\n                    smudgeGreen[i][j] = curGreen * 0.3 + smudgeGreen[i][j] * 0.7;\n                    smudgeBlue[i][j] = curBlue * 0.3 + smudgeBlue[i][j] * 0.7;\n                }\n            }\n            repaint(x - 3, y - 3, 7, 7);\n        }\n    }\n    g.dispose();\n}\n                   // For the SMUDGE tool, blend some of the color from\n\n                   // the smudgeRed, smudgeGreen, and smudgeBlue arrays\n\n                   // into the pixels in a 7-by-7 block around (x,y), and\n\n                   // vice versa.  The effect is to smear out the color\n\n"",""rating"":2},""code"":""void somethod(){\n  //some comments \n}""}"
332,1.0,1.0,1.0,1.0,2017-03-24 21:44:41.169063,12,226,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""/**\n       * When the ERASE or SMUDGE tools are used and the mouse jumps\n       * from (x1,y1) to (x2,y2), the tool has to be applied to a\n       * line of pixel positions between the two points in order to\n       * cover the entire line that the mouse moves along.  The change\n       * is made to the off-screen canvas, and repaint() is called to\n       * copy the changes to the screen.\n       */\nvoid applyToolAlongLine(int x1, int y1, int x2, int y2) {\n    Graphics g = OSC.createGraphics();\n    Graphics2D g2 = (Graphics2D) g;\n    g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n    // (for ERASE only)\n    g.setColor(fillColor);\n    // (for SMUDGE only)\n    int w = OSC.getWidth();\n    // (for SMUDGE only)\n    int h = OSC.getHeight();\n    int dist = Math.max(Math.abs(x2 - x1), Math.abs(y2 - y1));\n    // dist is the number of points along the line from\n    // (x1,y1) to (x2,y2) at which the tool will be applied.\n    double dx = (double) (x2 - x1) / dist;\n    double dy = (double) (y2 - y1) / dist;\n    for (int d = 1; d <= dist; d++) {\n        // Apply the tool at one of the points (x,y) along the\n        // line from (x1,y1) to (x2,y2).\n        int x = (int) Math.round(x1 + dx * d);\n        int y = (int) Math.round(y1 + dy * d);\n        if (currentTool == Tool.ERASE) {\n            // Erase a 10-by-10 block of pixels around (x,y)\n            g.fillRect(x - 5, y - 5, 10, 10);\n            repaint(x - 5, y - 5, 10, 10);\n        } else {\n            // of pixels that are visited by the tool.\n            for (int i = 0; i < 7; i++) for (int j = 0; j < 7; j++) {\n                int r = y + j - 3;\n                int c = x + i - 3;\n                if (!(r < 0 || r >= h || c < 0 || c >= w || smudgeRed[i][j] == -1)) {\n                    int curCol = OSC.getRGB(c, r);\n                    int curRed = (curCol >> 16) & 0xFF;\n                    int curGreen = (curCol >> 8) & 0xFF;\n                    int curBlue = curCol & 0xFF;\n                    int newRed = (int) (curRed * 0.7 + smudgeRed[i][j] * 0.3);\n                    int newGreen = (int) (curGreen * 0.7 + smudgeGreen[i][j] * 0.3);\n                    int newBlue = (int) (curBlue * 0.7 + smudgeBlue[i][j] * 0.3);\n                    int newCol = newRed << 16 | newGreen << 8 | newBlue;\n                    OSC.setRGB(c, r, newCol);\n                    smudgeRed[i][j] = curRed * 0.3 + smudgeRed[i][j] * 0.7;\n                    smudgeGreen[i][j] = curGreen * 0.3 + smudgeGreen[i][j] * 0.7;\n                    smudgeBlue[i][j] = curBlue * 0.3 + smudgeBlue[i][j] * 0.7;\n                }\n            }\n            repaint(x - 3, y - 3, 7, 7);\n        }\n    }\n    g.dispose();\n}\n                   // For the SMUDGE tool, blend some of the color from\n\n                   // the smudgeRed, smudgeGreen, and smudgeBlue arrays\n\n                   // into the pixels in a 7-by-7 block around (x,y), and\n\n                   // vice versa.  The effect is to smear out the color\n\n"",""rating"":1},""code"":""void somethod(){\n  //some comments\n}""}"
333,1.0,1.0,1.0,1.0,2017-03-24 21:44:42.211767,18,227,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String[] args) {\n    Employee[] staff = new Employee[3];\n    staff[0] = new HourlyEmployee(\""Morgan, Harry\"", 30);\n    staff[1] = new SalariedEmployee(\""Lin, Sally\"", 52000);\n    staff[2] = new Manager(\""Smith, Mary\"", 104000, 50);\n    Scanner in = new Scanner(System.in);\n    for (Employee e : staff) {\n        System.out.print(\""Hours worked by \"" + e.getName() + \"": \"");\n        int hours = in.nextInt();\n        System.out.println(\""Salary: \"" + e.weeklyPay(hours));\n    }\n}\n"",""rating"":3},""code"":""class Person{\n  String name;\n  int age;\n}\nclass Employee extends Person{\n  double getSalary();\n}\nclass BuisnessOwner extends Person {\n  double getProfit();\n}\nclass Veteran extends Person{\n  String veteran_id;\n}""}"
334,1.0,1.0,1.0,1.0,2017-03-24 21:44:43.608988,12,228,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""/**\n       * When the ERASE or SMUDGE tools are used and the mouse jumps\n       * from (x1,y1) to (x2,y2), the tool has to be applied to a\n       * line of pixel positions between the two points in order to\n       * cover the entire line that the mouse moves along.  The change\n       * is made to the off-screen canvas, and repaint() is called to\n       * copy the changes to the screen.\n       */\nvoid applyToolAlongLine(int x1, int y1, int x2, int y2) {\n    Graphics g = OSC.createGraphics();\n    // (for ERASE only)\n    g.setColor(fillColor);\n    // (for SMUDGE only)\n    int w = OSC.getWidth();\n    // (for SMUDGE only)\n    int h = OSC.getHeight();\n    int dist = Math.max(Math.abs(x2 - x1), Math.abs(y2 - y1));\n    // dist is the number of points along the line from\n    // (x1,y1) to (x2,y2) at which the tool will be applied.\n    double dx = (double) (x2 - x1) / dist;\n    double dy = (double) (y2 - y1) / dist;\n    for (int d = 1; d <= dist; d++) {\n        // Apply the tool at one of the points (x,y) along the\n        // line from (x1,y1) to (x2,y2).\n        int x = (int) Math.round(x1 + dx * d);\n        int y = (int) Math.round(y1 + dy * d);\n        if (currentTool == Tool.ERASE) {\n            // Erase a 10-by-10 block of pixels around (x,y)\n            g.fillRect(x - 5, y - 5, 10, 10);\n            repaint(x - 5, y - 5, 10, 10);\n        } else {\n            // of pixels that are visited by the tool.\n            for (int i = 0; i < 7; i++) for (int j = 0; j < 7; j++) {\n                int r = y + j - 3;\n                int c = x + i - 3;\n                if (!(r < 0 || r >= h || c < 0 || c >= w || smudgeRed[i][j] == -1)) {\n                    int curCol = OSC.getRGB(c, r);\n                    int curRed = (curCol >> 16) & 0xFF;\n                    int curGreen = (curCol >> 8) & 0xFF;\n                    int curBlue = curCol & 0xFF;\n                    int newRed = (int) (curRed * 0.7 + smudgeRed[i][j] * 0.3);\n                    int newGreen = (int) (curGreen * 0.7 + smudgeGreen[i][j] * 0.3);\n                    int newBlue = (int) (curBlue * 0.7 + smudgeBlue[i][j] * 0.3);\n                    int newCol = newRed << 16 | newGreen << 8 | newBlue;\n                    OSC.setRGB(c, r, newCol);\n                    smudgeRed[i][j] = curRed * 0.3 + smudgeRed[i][j] * 0.7;\n                    smudgeGreen[i][j] = curGreen * 0.3 + smudgeGreen[i][j] * 0.7;\n                    smudgeBlue[i][j] = curBlue * 0.3 + smudgeBlue[i][j] * 0.7;\n                }\n            }\n            repaint(x - 3, y - 3, 7, 7);\n        }\n    }\n    g.dispose();\n}\n                   // For the SMUDGE tool, blend some of the color from\n\n                   // the smudgeRed, smudgeGreen, and smudgeBlue arrays\n\n                   // into the pixels in a 7-by-7 block around (x,y), and\n\n                   // vice versa.  The effect is to smear out the color\n\n"",""rating"":4},""code"":""void somethod(){\n  //some comments\n}""}"
335,1.0,1.0,1.0,2.0,2017-03-24 21:44:45.085880,46,229,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""void drawFunction(Graphics g) {\n    // Draw the graph of the function defined by the instance \n    // variable func.  Just plot 301 points with lines \n    // between them. \n    // A point on the graph.  y is f(x).\n    double x, y;\n    // The previous point on the graph.\n    double prevx, prevy;\n    // Difference between the x-values of consecutive \n    double dx;\n    // points on the graph.\n    dx = 10.0 / 300;\n    g.setColor(Color.RED);\n    /* Compute the first point. */\n    x = -5;\n    y = func.value(x);\n    for (int i = 1; i <= 300; i++) {\n        // Save the coords of the previous point.\n        prevx = x;\n        prevy = y;\n        // Get the coords of the next point.\n        x += dx;\n        y = func.value(x);\n        if ((!Double.isNaN(y)) && (!Double.isNaN(prevy))) {\n            // Draw a line segment between the two points.\n            putLine(g, prevx, prevy, x, y);\n        }\n    }\n// end for\n}\n          /* Compute each of the other 300 points, and draw a line segment\n               between each consecutive pair of points.  Note that if the\n               function is undefined at one of the points in a pair, then \n               the line segment is not drawn.  */\n\n"",""rating"":2},""code"":""void returnTax(){\n  double tax;\n  if(Employee.getSalary < 100000)\n  {\n     tax = .02*Employee.getSalary;\n  }\n}""}"
336,1.0,1.0,1.0,1.0,2017-03-24 21:44:46.439744,13,230,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String[] args) {\n    LinkedList staff = new LinkedList();\n    staff.addFirst(\""Tom\"");\n    staff.addFirst(\""Romeo\"");\n    staff.addFirst(\""Harry\"");\n    staff.addFirst(\""Diana\"");\n    // | in the comments indicates the iterator position\n    // |DHRT\n    ListIterator iterator = staff.listIterator();\n    // D|HRT\n    iterator.next();\n    // DH|RT\n    iterator.next();\n    // Add more elements after second element\n    // DHJ|RT\n    iterator.add(\""Juliet\"");\n    // DHJN|RT\n    iterator.add(\""Nina\"");\n    // DHJNR|T\n    iterator.next();\n    // Remove last traversed element \n    // DHJN|T\n    iterator.remove();\n    // Print all elements\n    iterator = staff.listIterator();\n    while (iterator.hasNext()) {\n        System.out.print(iterator.next() + \"" \"");\n    }\n    System.out.println();\n}\n"",""rating"":1},""code"":""void somethod() {\n  // some comments\n}""}"
337,1.0,1.0,1.0,1.0,2017-03-24 21:44:46.942654,12,231,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""/** Construct from an existing Reader */\npublic SimpleCalcStreamTok(Reader rdr) throws IOException {\n    tf = new StreamTokenizer(rdr);\n    // Control the input character set:\n    // treat \""//\"" as comments\n    tf.slashSlashComments(true);\n    // used for subtraction\n    tf.ordinaryChar('-');\n    // used for division\n    tf.ordinaryChar('/');\n    s = new Stack();\n}\n"",""rating"":3},""code"":""void somethod(){\n  //some comments\n}""}"
338,1.0,2.5,1.5,1.0,2017-03-24 21:44:47.337469,8,232,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""public Product(float price) {\n    this.price = price;\n    tax = (float) (price * 0.20);\n}\n"",""rating"":3},""code"":""//takes a person and returns their tax as below\nDouble tax(Person p)\n{\n  if(p.getSalary() < 10000)\n  return p.getSalary()*.02;\n    else\n      return p.getSalary()*.02;\n if(p.getSalary() < 10000){\n   return p.getSalary()*.02;\n }     \n}""}"
339,1.0,1.0,1.0,1.0,2017-03-24 21:44:47.930830,12,233,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""/**\n         * When the ERASE or SMUDGE tools are used and the mouse jumps\n         * from (x1,y1) to (x2,y2), the tool has to be applied to a\n         * line of pixel positions between the two points in order to\n         * cover the entire line that the mouse moves along.  The change\n         * is made to the off-screen canvas, and repaint() is called to\n         * copy the changes to the screen.\n         */\nvoid applyToolAlongLine(int x1, int y1, int x2, int y2) {\n    Graphics g = OSC.createGraphics();\n    // (for ERASE only)\n    g.setColor(fillColor);\n    // (for SMUDGE only)\n    int w = OSC.getWidth();\n    // (for SMUDGE only)\n    int h = OSC.getHeight();\n    int dist = Math.max(Math.abs(x2 - x1), Math.abs(y2 - y1));\n    // dist is the number of points along the line from\n    // (x1,y1) to (x2,y2) at which the tool will be applied.\n    double dx = (double) (x2 - x1) / dist;\n    double dy = (double) (y2 - y1) / dist;\n    for (int d = 1; d <= dist; d++) {\n        // Apply the tool at one of the points (x,y) along the\n        // line from (x1,y1) to (x2,y2).\n        int x = (int) Math.round(x1 + dx * d);\n        int y = (int) Math.round(y1 + dy * d);\n        if (currentTool == Tool.ERASE) {\n            // Erase a 10-by-10 block of pixels around (x,y)\n            g.fillRect(x - 5, y - 5, 10, 10);\n            repaint(x - 5, y - 5, 10, 10);\n        } else {\n            // of pixels that are visited by the tool.\n            for (int i = 0; i < 7; i++) for (int j = 0; j < 7; j++) {\n                int r = y + j - 3;\n                int c = x + i - 3;\n                if (!(r < 0 || r >= h || c < 0 || c >= w || smudgeRed[i][j] == -1)) {\n                    int curCol = OSC.getRGB(c, r);\n                    int curRed = (curCol >> 16) & 0xFF;\n                    int curGreen = (curCol >> 8) & 0xFF;\n                    int curBlue = curCol & 0xFF;\n                    int newRed = (int) (curRed * 0.7 + smudgeRed[i][j] * 0.3);\n                    int newGreen = (int) (curGreen * 0.7 + smudgeGreen[i][j] * 0.3);\n                    int newBlue = (int) (curBlue * 0.7 + smudgeBlue[i][j] * 0.3);\n                    int newCol = newRed << 16 | newGreen << 8 | newBlue;\n                    OSC.setRGB(c, r, newCol);\n                    smudgeRed[i][j] = curRed * 0.3 + smudgeRed[i][j] * 0.7;\n                    smudgeGreen[i][j] = curGreen * 0.3 + smudgeGreen[i][j] * 0.7;\n                    smudgeBlue[i][j] = curBlue * 0.3 + smudgeBlue[i][j] * 0.7;\n                }\n            }\n            repaint(x - 3, y - 3, 7, 7);\n        }\n    }\n    g.dispose();\n}\n                         // For the SMUDGE tool, blend some of the color from\n\n                         // the smudgeRed, smudgeGreen, and smudgeBlue arrays\n\n                         // into the pixels in a 7-by-7 block around (x,y), and\n\n                         // vice versa.  The effect is to smear out the color\n\n"",""rating"":4},""code"":""void somethod(){\n  //some comments\n}""}"
340,1.0,2.5,1.0,1.0,2017-03-24 21:44:48.080683,34,,"public void Person()
{
  //interface
}"
341,1.0,1.0,1.0,2.0,2017-03-24 21:44:50.358851,46,234,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", targetDate = \""Jan 1, 2012\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":3},""code"":""void returnTax(){\n  double tax;\n  if(Employee.getSalary < 100000)\n  {\n     tax = .02*Employee.getSalary;\n  }\n}""}"
342,1.0,1.0,1.0,1.0,2017-03-24 21:44:50.719832,39,235,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""/**\n      Encrypts a value.\n      @param b the value to encrypt (between 0 and 255)\n      @return the encrypted value\n   */\npublic int encrypt(int b) {\n    return (b + key) % 256;\n}\n"",""rating"":1},""code"":""public int compare(){\n  \n}""}"
343,1.0,1.0,1.0,1.0,2017-03-24 21:44:52.024601,15,236,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""/**\n         * When the ERASE or SMUDGE tools are used and the mouse jumps\n         * from (x1,y1) to (x2,y2), the tool has to be applied to a\n         * line of pixel positions between the two points in order to\n         * cover the entire line that the mouse moves along.  The change\n         * is made to the off-screen canvas, and repaint() is called to\n         * copy the changes to the screen.\n         */\nvoid applyToolAlongLine(int x1, int y1, int x2, int y2) {\n    Graphics g = OSC.createGraphics();\n    // (for ERASE only)\n    g.setColor(fillColor);\n    // (for SMUDGE only)\n    int w = OSC.getWidth();\n    // (for SMUDGE only)\n    int h = OSC.getHeight();\n    int dist = Math.max(Math.abs(x2 - x1), Math.abs(y2 - y1));\n    // dist is the number of points along the line from\n    // (x1,y1) to (x2,y2) at which the tool will be applied.\n    double dx = (double) (x2 - x1) / dist;\n    double dy = (double) (y2 - y1) / dist;\n    for (int d = 1; d <= dist; d++) {\n        // Apply the tool at one of the points (x,y) along the\n        // line from (x1,y1) to (x2,y2).\n        int x = (int) Math.round(x1 + dx * d);\n        int y = (int) Math.round(y1 + dy * d);\n        if (currentTool == Tool.ERASE) {\n            // Erase a 10-by-10 block of pixels around (x,y)\n            g.fillRect(x - 5, y - 5, 10, 10);\n            repaint(x - 5, y - 5, 10, 10);\n        } else {\n            // of pixels that are visited by the tool.\n            for (int i = 0; i < 7; i++) for (int j = 0; j < 7; j++) {\n                int r = y + j - 3;\n                int c = x + i - 3;\n                if (!(r < 0 || r >= h || c < 0 || c >= w || smudgeRed[i][j] == -1)) {\n                    int curCol = OSC.getRGB(c, r);\n                    int curRed = (curCol >> 16) & 0xFF;\n                    int curGreen = (curCol >> 8) & 0xFF;\n                    int curBlue = curCol & 0xFF;\n                    int newRed = (int) (curRed * 0.7 + smudgeRed[i][j] * 0.3);\n                    int newGreen = (int) (curGreen * 0.7 + smudgeGreen[i][j] * 0.3);\n                    int newBlue = (int) (curBlue * 0.7 + smudgeBlue[i][j] * 0.3);\n                    int newCol = newRed << 16 | newGreen << 8 | newBlue;\n                    OSC.setRGB(c, r, newCol);\n                    smudgeRed[i][j] = curRed * 0.3 + smudgeRed[i][j] * 0.7;\n                    smudgeGreen[i][j] = curGreen * 0.3 + smudgeGreen[i][j] * 0.7;\n                    smudgeBlue[i][j] = curBlue * 0.3 + smudgeBlue[i][j] * 0.7;\n                }\n            }\n            repaint(x - 3, y - 3, 7, 7);\n        }\n    }\n    g.dispose();\n}\n                         // For the SMUDGE tool, blend some of the color from\n\n                         // the smudgeRed, smudgeGreen, and smudgeBlue arrays\n\n                         // into the pixels in a 7-by-7 block around (x,y), and\n\n                         // vice versa.  The effect is to smear out the color\n\n"",""rating"":3},""code"":""void somethod(){\n  //some comments \n}""}"
344,1.0,1.0,1.0,1.0,2017-03-24 21:44:52.980843,18,237,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""/**\n      Constructs a manager with a given name, annual salary and weekly bonus.\n      @param name the name of this employee\n      @param salary the annual salary\n      @param bonus the weekly bonus\n    */\npublic Manager(String name, double salary, double bonus) {\n    super(name, salary);\n    weeklyBonus = bonus;\n}\n"",""rating"":3},""code"":""class Person{\n  String name;\n  int age;\n}\nclass Employee extends Person{\n  double getSalary();\n}\nclass BuisnessOwner extends Person {\n  double getProfit();\n}\nclass Veteran extends Person{\n  String veteran_id;\n}""}"
345,1.0,1.0,1.0,1.0,2017-03-24 21:44:53.392208,52,238,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""public void startServer(int portNum) throws Exception {\n    String portNumString = null;\n    if (portNum == HTTP) {\n        portNumString = wsp.getProperty(\""portNum\"");\n        if (portNumString != null) {\n            portNum = Integer.parseInt(portNumString);\n        }\n    }\n    sock = new ServerSocket(portNum);\n    System.out.println(\""Listening on port \"" + portNum);\n}\n"",""rating"":2},""code"":""void Taxreturn(int s)\n{\n  String per1;\n  System.out.println(\""Are you an Employee,Business Owner,or Veterans?\"");\n  \n}""}"
346,1.0,1.0,1.0,1.0,2017-03-24 21:44:53.918399,60,239,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""public Product(float price) {\n    this.price = price;\n    tax = (float) (price * 0.20);\n}\n"",""rating"":2},""code"":""//FIND TAX BASED ON A PERSONS STATUS IN A BUSINESS\nvoid personalTax(){\n  \n}""}"
347,1.0,2.5,1.5,1.0,2017-03-24 21:44:54.227690,8,240,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""String valueAsString() {\n    // which is used in turn by the Save Params command.\n    if (selectedItem < valueStrings.length)\n        return valueStrings[selectedItem];\n    else {\n        Color c1 = owner.getDisplay().getGradientPaletteColor1();\n        Color c2 = owner.getDisplay().getGradientPaletteColor2();\n        if (c1 == null || c2 == null)\n            // Should not happen!\n            return valueStrings[0];\n        return \""Custom/\"" + c1.getRed() + \"",\"" + c1.getGreen() + \"",\"" + c1.getBlue() + \""/\"" + c2.getRed() + \"",\"" + c2.getGreen() + \"",\"" + c2.getBlue();\n    }\n}\n                 // Converts the setting of this menu to a string that can be saved\n\n                 // in an XML file.  This is used by the currentSettingAsXML() method,\n\n"",""rating"":1},""code"":""//takes a person and returns their tax as below\nDouble tax(Person p)\n{\n  if(p.getSalary() < 10000)\n  return p.getSalary()*.02;\n    else\n      return p.getSalary()*.02;\n if(p.getSalary() < 10000){\n   return p.getSalary()*.02;\n }     \n}""}"
348,1.0,1.0,1.0,1.0,2017-03-24 21:44:54.829544,52,241,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""void readData() throws IOException, NumberFormatException {\n    String str;\n    while ((str = reader.readLine()) != null) {\n        int n = Integer.parseInt(str);\n        System.out.println(n);\n    }\n}\n"",""rating"":2},""code"":""void Taxreturn(int s)\n{\n  String per1;\n  System.out.println(\""Are you an Employee,Business Owner,or Veterans?\"");\n  \n}""}"
349,1.0,1.0,1.0,1.0,2017-03-24 21:44:56.584333,13,242,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""/**\n         * When the ERASE or SMUDGE tools are used and the mouse jumps\n         * from (x1,y1) to (x2,y2), the tool has to be applied to a\n         * line of pixel positions between the two points in order to\n         * cover the entire line that the mouse moves along.  The change\n         * is made to the off-screen canvas, and repaint() is called to\n         * copy the changes to the screen.\n         */\nvoid applyToolAlongLine(int x1, int y1, int x2, int y2) {\n    Graphics g = OSC.createGraphics();\n    // (for ERASE only)\n    g.setColor(fillColor);\n    // (for SMUDGE only)\n    int w = OSC.getWidth();\n    // (for SMUDGE only)\n    int h = OSC.getHeight();\n    int dist = Math.max(Math.abs(x2 - x1), Math.abs(y2 - y1));\n    // dist is the number of points along the line from\n    // (x1,y1) to (x2,y2) at which the tool will be applied.\n    double dx = (double) (x2 - x1) / dist;\n    double dy = (double) (y2 - y1) / dist;\n    for (int d = 1; d <= dist; d++) {\n        // Apply the tool at one of the points (x,y) along the\n        // line from (x1,y1) to (x2,y2).\n        int x = (int) Math.round(x1 + dx * d);\n        int y = (int) Math.round(y1 + dy * d);\n        if (currentTool == Tool.ERASE) {\n            // Erase a 10-by-10 block of pixels around (x,y)\n            g.fillRect(x - 5, y - 5, 10, 10);\n            repaint(x - 5, y - 5, 10, 10);\n        } else {\n            // of pixels that are visited by the tool.\n            for (int i = 0; i < 7; i++) for (int j = 0; j < 7; j++) {\n                int r = y + j - 3;\n                int c = x + i - 3;\n                if (!(r < 0 || r >= h || c < 0 || c >= w || smudgeRed[i][j] == -1)) {\n                    int curCol = OSC.getRGB(c, r);\n                    int curRed = (curCol >> 16) & 0xFF;\n                    int curGreen = (curCol >> 8) & 0xFF;\n                    int curBlue = curCol & 0xFF;\n                    int newRed = (int) (curRed * 0.7 + smudgeRed[i][j] * 0.3);\n                    int newGreen = (int) (curGreen * 0.7 + smudgeGreen[i][j] * 0.3);\n                    int newBlue = (int) (curBlue * 0.7 + smudgeBlue[i][j] * 0.3);\n                    int newCol = newRed << 16 | newGreen << 8 | newBlue;\n                    OSC.setRGB(c, r, newCol);\n                    smudgeRed[i][j] = curRed * 0.3 + smudgeRed[i][j] * 0.7;\n                    smudgeGreen[i][j] = curGreen * 0.3 + smudgeGreen[i][j] * 0.7;\n                    smudgeBlue[i][j] = curBlue * 0.3 + smudgeBlue[i][j] * 0.7;\n                }\n            }\n            repaint(x - 3, y - 3, 7, 7);\n        }\n    }\n    g.dispose();\n}\n                         // For the SMUDGE tool, blend some of the color from\n\n                         // the smudgeRed, smudgeGreen, and smudgeBlue arrays\n\n                         // into the pixels in a 7-by-7 block around (x,y), and\n\n                         // vice versa.  The effect is to smear out the color\n\n"",""rating"":1},""code"":""void somethod() {\n  // some comments\n}""}"
350,1.0,1.0,1.0,1.0,2017-03-24 21:44:57.284945,39,243,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public int compare(Song one, Song two) {\n    return one.getArtist().compareTo(two.getArtist());\n}\n"",""rating"":4},""code"":""public int compare(){\n  \n}""}"
351,1.0,1.0,1.0,2.0,2017-03-24 21:44:58.768189,46,244,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""/** \n       Displays a summary of the gathered statistics.\n   */\npublic void displaySummary() {\n    double averageTime = 0;\n    if (totalCustomers > 0) {\n        averageTime = totalTime / totalCustomers;\n    }\n    System.out.println(totalCustomers + \"" customers. Average time \"" + averageTime + \"" minutes.\"");\n}\n"",""rating"":2},""code"":""void returnTax(){\n  double tax;\n  if(Employee.getSalary < 100000)\n  {\n     tax = .02*Employee.getSalary;\n  }\n}""}"
352,1.0,1.0,1.0,2.0,2017-03-24 21:45:00.760549,46,245,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""/** \n     * Break a page at the specified Y coordinate.  Store the necessary\n     * information into the pageLengths and pageOffsets lists\n     **/\nvoid breakPage(double y) {\n    double pageLength = y - pageStart - printY;\n    pageStart = y - printY;\n    pageLengths.add(new Double(pageLength));\n    pageOffsets.add(new Double(pageStart));\n}\n"",""rating"":1},""code"":""void returnTax(){\n  double tax;\n  if(Employee.getSalary < 100000)\n  {\n     tax = .02*Employee.getSalary;\n  }\n}""}"
353,1.0,1.0,1.0,1.0,2017-03-24 21:45:01.262744,13,246,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""/**\n         * Called by actionPerformed() when user clicks \""Lower\"" button.\n         * Check the user's prediction.  Game ends if user guessed\n         * wrong or if the user has made three correct predictions.\n         */\nvoid doLower() {\n    if (gameInProgress == false) {\n        // If the game has ended, it was an error to click \""Lower\"",\n        // So set up an error message and abort processing.\n        message = \""Click \\\""New Game\\\"" to start a new game!\"";\n        repaint();\n        return;\n    }\n    // Deal a card to the hand.\n    hand.addCard(deck.dealCard());\n    int cardCt = hand.getCardCount();\n    // Card just dealt.\n    Card thisCard = hand.getCard(cardCt - 1);\n    // The previous card.\n    Card prevCard = hand.getCard(cardCt - 2);\n    if (thisCard.getValue() > prevCard.getValue()) {\n        gameInProgress = false;\n        message = \""Too bad! You lose.\"";\n    } else if (thisCard.getValue() == prevCard.getValue()) {\n        gameInProgress = false;\n        message = \""Too bad!  You lose on ties.\"";\n    } else if (cardCt == 4) {\n        gameInProgress = false;\n        message = \""You win!  You made three correct guesses.\"";\n    } else {\n        message = \""Got it right!  Try for \"" + cardCt + \"".\"";\n    }\n    repaint();\n}\n"",""rating"":1},""code"":""void somethod() {\n  // some comments\n}""}"
354,1.0,1.0,1.0,1.0,2017-03-24 21:45:02.130058,39,247,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""/** \n   * This method computes a pseudo-random integer between 0 and specified\n   * maximum.  It uses randomFloat() above.\n   **/\npublic int randomInt(int max) {\n    return Math.round(max * randomFloat());\n}\n"",""rating"":1},""code"":""public int compare(){\n  \n}""}"
355,1.0,2.5,1.5,1.0,2017-03-24 21:45:02.244789,8,248,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":2},""code"":""//takes a person and returns their tax as below\nDouble tax(Person p)\n{\n  if(p.getSalary() < 10000)\n  return p.getSalary()*.02;\n    else\n      return p.getSalary()*.02;\n if(p.getSalary() < 10000){\n   return p.getSalary()*.02;\n }     \n}""}"
356,1.0,1.0,1.0,1.0,2017-03-24 21:45:05.435783,15,249,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""/**\n       * Called by the constructor, and called by actionPerformed() if  the \n       * user clicks the \""New Game\"" button.  Start a new game.  Deal two cards \n       * to each player.  The game might end right then  if one of the players \n       * had blackjack.  Otherwise, gameInProgress is set to true and the game \n       * begins.\n       */\nvoid doNewGame() {\n    if (gameInProgress) {\n        // If the current game is not over, it is an error to try\n        // to start a new game.\n        message = \""You still have to finish this game!\"";\n        repaint();\n        return;\n    }\n    // Create the deck and hands to use for this game.\n    deck = new Deck();\n    dealerHand = new BlackjackHand();\n    playerHand = new BlackjackHand();\n    deck.shuffle();\n    // Deal two cards to each player.\n    dealerHand.addCard(deck.dealCard());\n    dealerHand.addCard(deck.dealCard());\n    playerHand.addCard(deck.dealCard());\n    playerHand.addCard(deck.dealCard());\n    if (dealerHand.getBlackjackValue() == 21) {\n        message = \""Sorry, you lose.  Dealer has Blackjack.\"";\n        gameInProgress = false;\n    } else if (playerHand.getBlackjackValue() == 21) {\n        message = \""You win!  You have Blackjack.\"";\n        gameInProgress = false;\n    } else {\n        message = \""You have \"" + playerHand.getBlackjackValue() + \"".  Hit or stand?\"";\n        gameInProgress = true;\n    }\n    repaint();\n}\n"",""rating"":1},""code"":""void somethod(){\n  //some comments \n}""}"
357,1.0,1.0,1.0,1.0,2017-03-24 21:45:06.329241,39,250,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""public int compare(Object a, Object b) {\n    return ((CollationKey) a).compareTo((CollationKey) b);\n}\n"",""rating"":3},""code"":""public int compare(){\n  \n}""}"
358,1.0,1.0,1.0,4.0,2017-03-24 21:45:06.415599,60,,"//FIND TAX BASED ON A PERSONS STATUS IN A BUSINESS
void personalTax(){
  
}"
359,1.0,1.0,1.0,0.0,2017-03-24 21:45:06.863393,60,,"//FIND TAX BASED ON A PERSONS STATUS IN A BUSINESS
void personalTax(){
  
}"
360,1.0,1.0,1.0,2.0,2017-03-24 21:45:07.265965,46,251,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":2},""code"":""void returnTax(){\n  double tax;\n  if(Employee.getSalary < 100000)\n  {\n     tax = .02*Employee.getSalary;\n  }\n}""}"
361,1.0,1.0,1.0,1.0,2017-03-24 21:45:07.343398,44,252,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String[] args) {\n    Employee[] staff = new Employee[3];\n    staff[0] = new HourlyEmployee(\""Morgan, Harry\"", 30);\n    staff[1] = new SalariedEmployee(\""Lin, Sally\"", 52000);\n    staff[2] = new Manager(\""Smith, Mary\"", 104000, 50);\n    Scanner in = new Scanner(System.in);\n    for (Employee e : staff) {\n        System.out.print(\""Hours worked by \"" + e.getName() + \"": \"");\n        int hours = in.nextInt();\n        System.out.println(\""Salary: \"" + e.weeklyPay(hours));\n    }\n}\n"",""rating"":4},""code"":""void salary(){\n\t\n      \n}\n\n\n\n  \n  ""}"
362,1.0,1.0,1.0,2.0,2017-03-24 21:45:08.207377,46,253,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""public static void main(String[] args) {\n    String input = JOptionPane.showInputDialog(\""Enter price:\"");\n    double price = Double.parseDouble(input);\n    final double TAX_RATE = 8.5;\n    price = price * (1 + TAX_RATE / 100);\n    JOptionPane.showMessageDialog(null, \""Price after tax: \"" + price);\n}\n"",""rating"":2},""code"":""void returnTax(){\n  double tax;\n  if(Employee.getSalary < 100000)\n  {\n     tax = .02*Employee.getSalary;\n  }\n}""}"
363,1.0,1.0,1.0,1.0,2017-03-24 21:45:08.805868,39,254,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""public int compare(Player a, Player b) {\n    return a.getName().compareTo(b.getName());\n}\n"",""rating"":3},""code"":""public int compare(){\n  \n}""}"
364,1.0,1.0,1.0,0.0,2017-03-24 21:45:09.323330,60,,"//FIND TAX BASED ON A PERSONS STATUS IN A BUSINESS
void personalTax(){
  
}"
365,1.0,1.0,1.0,1.0,2017-03-24 21:45:09.431605,13,255,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""/** The constructor.  See comment above for meanings of these arguments */\npublic ColumnLayout(int margin_height, int margin_width, int spacing, int alignment) {\n    this.margin_height = margin_height;\n    this.margin_width = margin_width;\n    this.spacing = spacing;\n    this.alignment = alignment;\n}\n"",""rating"":2},""code"":""void somethod() {\n  // some comments\n}""}"
366,1.0,2.5,1.5,1.0,2017-03-24 21:45:10.573793,8,256,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""boolean putPiece(int p, int row, int col) {\n    // try to place a piece on the board, return true if it fits\n    if (board.getColor(row, col) != null)\n        return false;\n    for (int i = 1; i < 8; i += 2) {\n        if (row + pieces[p][i] < 0 || row + pieces[p][i] >= rows || col + pieces[p][i + 1] < 0 || col + pieces[p][i + 1] >= cols)\n            return false;\n        else if (// one of the squares needed is already occupied\n        board.getColor(row + pieces[p][i], col + pieces[p][i + 1]) != null)\n            return false;\n    }\n    board.setColor(row, col, pieceColor[pieces[p][0]]);\n    for (int i = 1; i < 8; i += 2) board.setColor(row + pieces[p][i], col + pieces[p][i + 1], pieceColor[pieces[p][0]]);\n    return true;\n}\n"",""rating"":1},""code"":""//takes a person and returns their tax as below\nDouble tax(Person p)\n{\n  if(p.getSalary() < 10000)\n  return p.getSalary()*.02;\n    else\n      return p.getSalary()*.02;\n if(p.getSalary() < 10000){\n   return p.getSalary()*.02;\n }     \n}""}"
367,1.0,1.0,1.0,1.0,2017-03-24 21:45:11.649356,13,257,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""/** Construct from an existing Reader */\npublic SimpleCalcStreamTok(Reader rdr) throws IOException {\n    tf = new StreamTokenizer(rdr);\n    // Control the input character set:\n    // treat \""//\"" as comments\n    tf.slashSlashComments(true);\n    // used for subtraction\n    tf.ordinaryChar('-');\n    // used for division\n    tf.ordinaryChar('/');\n    s = new Stack();\n}\n"",""rating"":2},""code"":""void somethod() {\n  // some comments\n}""}"
368,1.0,1.0,1.0,1.0,2017-03-24 21:45:11.871905,39,258,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""/**\n      Returns the year of this day.\n      @return the year\n   */\npublic int getYear() {\n    return year;\n}\n"",""rating"":1},""code"":""public int compare(){\n  \n}""}"
369,1.0,1.0,1.0,5.0,2017-03-24 21:45:13.573169,60,,"//FIND TAX BASED ON A PERSONS STATUS IN A BUSINESS
void personalTax(){
  
}"
370,1.0,1.0,1.0,1.0,2017-03-24 21:45:13.621195,13,259,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""/**\n     * Output the specified DOM Node object, printing it using the specified\n     * indentation string\n     **/\npublic void write(Node node, String indent) {\n    // The output depends on the type of the node\n    switch(node.getNodeType()) {\n        case Node.DOCUMENT_NODE:\n            {\n                // If its a Document node\n                Document doc = (Document) node;\n                // Output header\n                out.println(indent + \""<?xml version='1.0'?>\"");\n                // Get the first node\n                Node child = doc.getFirstChild();\n                while (child != null) {\n                    // Loop 'till no more nodes\n                    // Output node\n                    write(child, indent);\n                    // Get next node\n                    child = child.getNextSibling();\n                }\n                break;\n            }\n        case Node.DOCUMENT_TYPE_NODE:\n            {\n                // It is a <!DOCTYPE> tag\n                DocumentType doctype = (DocumentType) node;\n                // Note that the DOM Level 1 does not give us information about\n                // the the public or system ids of the doctype, so we can't output\n                // a complete <!DOCTYPE> tag here.  We can do better with Level 2.\n                out.println(\""<!DOCTYPE \"" + doctype.getName() + \"">\"");\n                break;\n            }\n        case Node.ELEMENT_NODE:\n            {\n                // Most nodes are Elements\n                Element elt = (Element) node;\n                // Begin start tag\n                out.print(indent + \""<\"" + elt.getTagName());\n                // Get attributes\n                NamedNodeMap attrs = elt.getAttributes();\n                for (int i = 0; i < attrs.getLength(); i++) {\n                    // Loop through them\n                    Node a = attrs.item(i);\n                    out.print(// Print attr. name\n                    \"" \"" + a.getNodeName() + \""='\"" + fixup(a.getNodeValue()) + // Print attr. value\n                    \""'\"");\n                }\n                // Finish start tag\n                out.println(\"">\"");\n                // Increase indent\n                String newindent = indent + \""    \"";\n                // Get child\n                Node child = elt.getFirstChild();\n                while (child != null) {\n                    // Loop \n                    // Output child\n                    write(child, newindent);\n                    // Get next child\n                    child = child.getNextSibling();\n                }\n                out.println(// Output end tag\n                indent + \""</\"" + elt.getTagName() + \"">\"");\n                break;\n            }\n        case Node.TEXT_NODE:\n            {\n                // Plain text node\n                Text textNode = (Text) node;\n                // Strip off space\n                String text = textNode.getData().trim();\n                if (// If non-empty\n                (text != null) && text.length() > 0)\n                    // print text\n                    out.println(indent + fixup(text));\n                break;\n            }\n        case Node.PROCESSING_INSTRUCTION_NODE:\n            {\n                // Handle PI nodes\n                ProcessingInstruction pi = (ProcessingInstruction) node;\n                out.println(indent + \""<?\"" + pi.getTarget() + \"" \"" + pi.getData() + \""?>\"");\n                break;\n            }\n        case Node.ENTITY_REFERENCE_NODE:\n            {\n                // Handle entities\n                out.println(indent + \""&\"" + node.getNodeName() + \"";\"");\n                break;\n            }\n        case Node.CDATA_SECTION_NODE:\n            {\n                // Output CDATA sections\n                CDATASection cdata = (CDATASection) node;\n                // Careful! Don't put a CDATA section in the program itself!\n                out.println(indent + \""<\"" + \""![CDATA[\"" + cdata.getData() + \""]]\"" + \"">\"");\n                break;\n            }\n        case Node.COMMENT_NODE:\n            {\n                // Comments\n                Comment c = (Comment) node;\n                out.println(indent + \""<!--\"" + c.getData() + \""-->\"");\n                break;\n            }\n        default:\n            // Hopefully, this won't happen too much!\n            System.err.println(\""Ignoring node: \"" + node.getClass().getName());\n            break;\n    }\n}\n"",""rating"":1},""code"":""void somethod() {\n  // some comments\n}""}"
371,1.0,1.0,1.0,1.0,2017-03-24 21:45:13.728535,15,260,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""/**\n       * When the ERASE or SMUDGE tools are used and the mouse jumps\n       * from (x1,y1) to (x2,y2), the tool has to be applied to a\n       * line of pixel positions between the two points in order to\n       * cover the entire line that the mouse moves along.  The change\n       * is made to the off-screen canvas, and repaint() is called to\n       * copy the changes to the screen.\n       */\nvoid applyToolAlongLine(int x1, int y1, int x2, int y2) {\n    Graphics g = OSC.createGraphics();\n    Graphics2D g2 = (Graphics2D) g;\n    g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n    // (for ERASE only)\n    g.setColor(fillColor);\n    // (for SMUDGE only)\n    int w = OSC.getWidth();\n    // (for SMUDGE only)\n    int h = OSC.getHeight();\n    int dist = Math.max(Math.abs(x2 - x1), Math.abs(y2 - y1));\n    // dist is the number of points along the line from\n    // (x1,y1) to (x2,y2) at which the tool will be applied.\n    double dx = (double) (x2 - x1) / dist;\n    double dy = (double) (y2 - y1) / dist;\n    for (int d = 1; d <= dist; d++) {\n        // Apply the tool at one of the points (x,y) along the\n        // line from (x1,y1) to (x2,y2).\n        int x = (int) Math.round(x1 + dx * d);\n        int y = (int) Math.round(y1 + dy * d);\n        if (currentTool == Tool.ERASE) {\n            // Erase a 10-by-10 block of pixels around (x,y)\n            g.fillRect(x - 5, y - 5, 10, 10);\n            repaint(x - 5, y - 5, 10, 10);\n        } else {\n            // of pixels that are visited by the tool.\n            for (int i = 0; i < 7; i++) for (int j = 0; j < 7; j++) {\n                int r = y + j - 3;\n                int c = x + i - 3;\n                if (!(r < 0 || r >= h || c < 0 || c >= w || smudgeRed[i][j] == -1)) {\n                    int curCol = OSC.getRGB(c, r);\n                    int curRed = (curCol >> 16) & 0xFF;\n                    int curGreen = (curCol >> 8) & 0xFF;\n                    int curBlue = curCol & 0xFF;\n                    int newRed = (int) (curRed * 0.7 + smudgeRed[i][j] * 0.3);\n                    int newGreen = (int) (curGreen * 0.7 + smudgeGreen[i][j] * 0.3);\n                    int newBlue = (int) (curBlue * 0.7 + smudgeBlue[i][j] * 0.3);\n                    int newCol = newRed << 16 | newGreen << 8 | newBlue;\n                    OSC.setRGB(c, r, newCol);\n                    smudgeRed[i][j] = curRed * 0.3 + smudgeRed[i][j] * 0.7;\n                    smudgeGreen[i][j] = curGreen * 0.3 + smudgeGreen[i][j] * 0.7;\n                    smudgeBlue[i][j] = curBlue * 0.3 + smudgeBlue[i][j] * 0.7;\n                }\n            }\n            repaint(x - 3, y - 3, 7, 7);\n        }\n    }\n    g.dispose();\n}\n                   // For the SMUDGE tool, blend some of the color from\n\n                   // the smudgeRed, smudgeGreen, and smudgeBlue arrays\n\n                   // into the pixels in a 7-by-7 block around (x,y), and\n\n                   // vice versa.  The effect is to smear out the color\n\n"",""rating"":2},""code"":""void somethod(){\n  //some comments \n}""}"
372,1.0,1.0,1.0,5.0,2017-03-24 21:45:14.098175,60,,"//FIND TAX BASED ON A PERSONS STATUS IN A BUSINESS
void personalTax(){
  
}"
373,1.0,1.0,1.0,5.0,2017-03-24 21:45:15.399305,60,,"//FIND TAX BASED ON A PERSONS STATUS IN A BUSINESS
void personalTax(){
  
}"
374,1.0,1.0,1.0,1.0,2017-03-24 21:45:15.560323,37,261,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""public int run() {\n    ArrayList<MutableInteger> list = new ArrayList<>();\n    for (int i = 0; i < MAX; i++) {\n        list.add(new MutableInteger(i));\n    }\n    int sum = 0;\n    for (int i = 0; i < MAX; i++) {\n        sum += ((MutableInteger) list.get(i)).getValue();\n    }\n    return sum;\n}\n"",""rating"":3},""code"":""public int Compare(int[] test){\n  int diff = 0;\n  int min = 0;\n  int max = 0;\n  for(int i = 0; i < test.length; i++)\n  \tif(test[i] < min){\n      min = test[i];\n    }\n  \telse if(test[i] > max){\n      max = test[i];\n    }\n   diff = max - min;\n   return diff;\n}""}"
375,1.0,2.5,1.0,1.0,2017-03-24 21:45:16.660879,34,262,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""public Person(String firstName, String lastName) {\n    this.firstName = firstName;\n    this.lastName = lastName;\n}\n"",""rating"":3},""code"":""public void Person()\n{\n  //interface\n}""}"
376,1.0,1.0,1.0,1.0,2017-03-24 21:45:17.134374,39,263,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""/**\n     * This method is called when the closing </decor:box> tag is encountered\n     **/\npublic int doEndTag() throws JspException {\n    // Catch IOExceptions and rethrow them as JspExceptions\n    try {\n        JspWriter out = pageContext.getOut();\n        out.println(\""</td></tr></table></td></tr></table></div>\"");\n    } catch (IOException e) {\n        throw new JspException(e.getMessage());\n    }\n    // This return value says to continue processing the JSP page.\n    return EVAL_PAGE;\n}\n     // Try to output HTML to close the <table> and <div> tags.\n\n"",""rating"":1},""code"":""public int compare(){\n  \n}""}"
377,1.0,1.0,1.0,5.0,2017-03-24 21:45:17.780551,60,,"//FIND TAX BASED ON A PERSONS STATUS IN A BUSINESS
void personalTax(){
  
}"
378,1.0,1.0,1.0,5.0,2017-03-24 21:45:18.508418,60,,"//FIND TAX BASED ON A PERSONS STATUS IN A BUSINESS
void personalTax(){
  
}"
379,1.0,1.0,1.0,1.0,2017-03-24 21:45:18.844067,13,264,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""/**\n       * When the ERASE or SMUDGE tools are used and the mouse jumps\n       * from (x1,y1) to (x2,y2), the tool has to be applied to a\n       * line of pixel positions between the two points in order to\n       * cover the entire line that the mouse moves along.  The change\n       * is made to the off-screen canvas, and repaint() is called to\n       * copy the changes to the screen.\n       */\nvoid applyToolAlongLine(int x1, int y1, int x2, int y2) {\n    Graphics g = OSC.createGraphics();\n    Graphics2D g2 = (Graphics2D) g;\n    g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n    // (for ERASE only)\n    g.setColor(fillColor);\n    // (for SMUDGE only)\n    int w = OSC.getWidth();\n    // (for SMUDGE only)\n    int h = OSC.getHeight();\n    int dist = Math.max(Math.abs(x2 - x1), Math.abs(y2 - y1));\n    // dist is the number of points along the line from\n    // (x1,y1) to (x2,y2) at which the tool will be applied.\n    double dx = (double) (x2 - x1) / dist;\n    double dy = (double) (y2 - y1) / dist;\n    for (int d = 1; d <= dist; d++) {\n        // Apply the tool at one of the points (x,y) along the\n        // line from (x1,y1) to (x2,y2).\n        int x = (int) Math.round(x1 + dx * d);\n        int y = (int) Math.round(y1 + dy * d);\n        if (currentTool == Tool.ERASE) {\n            // Erase a 10-by-10 block of pixels around (x,y)\n            g.fillRect(x - 5, y - 5, 10, 10);\n            repaint(x - 5, y - 5, 10, 10);\n        } else {\n            // of pixels that are visited by the tool.\n            for (int i = 0; i < 7; i++) for (int j = 0; j < 7; j++) {\n                int r = y + j - 3;\n                int c = x + i - 3;\n                if (!(r < 0 || r >= h || c < 0 || c >= w || smudgeRed[i][j] == -1)) {\n                    int curCol = OSC.getRGB(c, r);\n                    int curRed = (curCol >> 16) & 0xFF;\n                    int curGreen = (curCol >> 8) & 0xFF;\n                    int curBlue = curCol & 0xFF;\n                    int newRed = (int) (curRed * 0.7 + smudgeRed[i][j] * 0.3);\n                    int newGreen = (int) (curGreen * 0.7 + smudgeGreen[i][j] * 0.3);\n                    int newBlue = (int) (curBlue * 0.7 + smudgeBlue[i][j] * 0.3);\n                    int newCol = newRed << 16 | newGreen << 8 | newBlue;\n                    OSC.setRGB(c, r, newCol);\n                    smudgeRed[i][j] = curRed * 0.3 + smudgeRed[i][j] * 0.7;\n                    smudgeGreen[i][j] = curGreen * 0.3 + smudgeGreen[i][j] * 0.7;\n                    smudgeBlue[i][j] = curBlue * 0.3 + smudgeBlue[i][j] * 0.7;\n                }\n            }\n            repaint(x - 3, y - 3, 7, 7);\n        }\n    }\n    g.dispose();\n}\n                   // For the SMUDGE tool, blend some of the color from\n\n                   // the smudgeRed, smudgeGreen, and smudgeBlue arrays\n\n                   // into the pixels in a 7-by-7 block around (x,y), and\n\n                   // vice versa.  The effect is to smear out the color\n\n"",""rating"":2},""code"":""void somethod() {\n  // some comments\n}""}"
380,1.0,1.0,1.0,1.0,2017-03-24 21:45:19.948887,15,265,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""/** The constructor.  See comment above for meanings of these arguments */\npublic ColumnLayout(int margin_height, int margin_width, int spacing, int alignment) {\n    this.margin_height = margin_height;\n    this.margin_width = margin_width;\n    this.spacing = spacing;\n    this.alignment = alignment;\n}\n"",""rating"":1},""code"":""void somethod(){\n  //some comments \n}""}"
381,1.0,1.0,1.0,1.0,2017-03-24 21:45:22.142925,54,266,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""/**\n    * Simulates rolling a pair of dice until a given total comes up.\n    * Precondition:  The desired total is between 2 and 12, inclusive.\n    * @param N the total that we want to get on the dice\n    * @return the number of times the dice are rolled before the\n    *    desired total occurs\n    * @throws IllegalArgumentException if the parameter, N, is not a number\n    *    that could possibly come up on a pair of dice\n    */\npublic static int rollFor(int N) {\n    if (N < 2 || N > 12)\n        throw new IllegalArgumentException(\""Impossible total for a pair of dice.\"");\n    // Numbers between 1 and 6 representing the dice.\n    int die1, die2;\n    // Total showing on dice.\n    int roll;\n    // Number of rolls made.\n    int rollCt;\n    rollCt = 0;\n    do {\n        die1 = (int) (Math.random() * 6) + 1;\n        die2 = (int) (Math.random() * 6) + 1;\n        roll = die1 + die2;\n        rollCt++;\n    } while (roll != N);\n    return rollCt;\n}\n"",""rating"":1},""code"":""\npublic static int minFunction(int n1, int n2) {\n   int min;\n   if (n1 > n2)\n      min = n2;\n   else\n      min = n1;\n\n   return min; \n}""}"
382,1.0,1.0,1.0,1.0,2017-03-24 21:45:23.222812,15,267,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""/**\n     * Output the specified DOM Node object, printing it using the specified\n     * indentation string\n     **/\npublic void write(Node node, String indent) {\n    // The output depends on the type of the node\n    switch(node.getNodeType()) {\n        case Node.DOCUMENT_NODE:\n            {\n                // If its a Document node\n                Document doc = (Document) node;\n                // Output header\n                out.println(indent + \""<?xml version='1.0'?>\"");\n                // Get the first node\n                Node child = doc.getFirstChild();\n                while (child != null) {\n                    // Loop 'till no more nodes\n                    // Output node\n                    write(child, indent);\n                    // Get next node\n                    child = child.getNextSibling();\n                }\n                break;\n            }\n        case Node.DOCUMENT_TYPE_NODE:\n            {\n                // It is a <!DOCTYPE> tag\n                DocumentType doctype = (DocumentType) node;\n                // Note that the DOM Level 1 does not give us information about\n                // the the public or system ids of the doctype, so we can't output\n                // a complete <!DOCTYPE> tag here.  We can do better with Level 2.\n                out.println(\""<!DOCTYPE \"" + doctype.getName() + \"">\"");\n                break;\n            }\n        case Node.ELEMENT_NODE:\n            {\n                // Most nodes are Elements\n                Element elt = (Element) node;\n                // Begin start tag\n                out.print(indent + \""<\"" + elt.getTagName());\n                // Get attributes\n                NamedNodeMap attrs = elt.getAttributes();\n                for (int i = 0; i < attrs.getLength(); i++) {\n                    // Loop through them\n                    Node a = attrs.item(i);\n                    out.print(// Print attr. name\n                    \"" \"" + a.getNodeName() + \""='\"" + fixup(a.getNodeValue()) + // Print attr. value\n                    \""'\"");\n                }\n                // Finish start tag\n                out.println(\"">\"");\n                // Increase indent\n                String newindent = indent + \""    \"";\n                // Get child\n                Node child = elt.getFirstChild();\n                while (child != null) {\n                    // Loop \n                    // Output child\n                    write(child, newindent);\n                    // Get next child\n                    child = child.getNextSibling();\n                }\n                out.println(// Output end tag\n                indent + \""</\"" + elt.getTagName() + \"">\"");\n                break;\n            }\n        case Node.TEXT_NODE:\n            {\n                // Plain text node\n                Text textNode = (Text) node;\n                // Strip off space\n                String text = textNode.getData().trim();\n                if (// If non-empty\n                (text != null) && text.length() > 0)\n                    // print text\n                    out.println(indent + fixup(text));\n                break;\n            }\n        case Node.PROCESSING_INSTRUCTION_NODE:\n            {\n                // Handle PI nodes\n                ProcessingInstruction pi = (ProcessingInstruction) node;\n                out.println(indent + \""<?\"" + pi.getTarget() + \"" \"" + pi.getData() + \""?>\"");\n                break;\n            }\n        case Node.ENTITY_REFERENCE_NODE:\n            {\n                // Handle entities\n                out.println(indent + \""&\"" + node.getNodeName() + \"";\"");\n                break;\n            }\n        case Node.CDATA_SECTION_NODE:\n            {\n                // Output CDATA sections\n                CDATASection cdata = (CDATASection) node;\n                // Careful! Don't put a CDATA section in the program itself!\n                out.println(indent + \""<\"" + \""![CDATA[\"" + cdata.getData() + \""]]\"" + \"">\"");\n                break;\n            }\n        case Node.COMMENT_NODE:\n            {\n                // Comments\n                Comment c = (Comment) node;\n                out.println(indent + \""<!--\"" + c.getData() + \""-->\"");\n                break;\n            }\n        default:\n            // Hopefully, this won't happen too much!\n            System.err.println(\""Ignoring node: \"" + node.getClass().getName());\n            break;\n    }\n}\n"",""rating"":1},""code"":""void somethod(){\n  //some comments \n}""}"
383,1.0,1.0,1.0,5.0,2017-03-24 21:45:24.893577,60,,"//FIND TAX BASED ON A PERSONS STATUS IN A BUSINESS
void personalTax(){
  
}"
384,1.0,1.0,1.0,5.0,2017-03-24 21:45:25.446697,60,,"//FIND TAX BASED ON A PERSONS STATUS IN A BUSINESS
void personalTax(){
  
}"
385,1.0,2.5,1.0,1.0,2017-03-24 21:45:26.996747,34,268,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""/**\n   * This method takes the current contents of the text field, creates a\n   * StringSelection object to represent that string, and puts the \n   * StringSelection onto the clipboard\n   **/\npublic void cut() {\n    // Get the currently displayed value\n    String s = field.getText();\n    // Create a StringSelection object to represent it.\n    // This is a big convenience, because StringSelection implements both\n    // the Transferable interface and the ClipboardOwner.  We don't have\n    // to deal with either of them.\n    StringSelection ss = new StringSelection(s);\n    // Now set the StringSelection object as the contents of the clipboard\n    // Also set it as the owner of the clipboard.\n    this.getToolkit().getSystemClipboard().setContents(ss, ss);\n}\n"",""rating"":1},""code"":""public void Person()\n{\n  //interface\n}""}"
386,1.0,1.0,1.0,5.0,2017-03-24 21:45:28.530529,60,,"//FIND TAX BASED ON A PERSONS STATUS IN A BUSINESS
void personalTax(){
  
}"
387,3.5,1.0,1.0,1.0,2017-03-24 21:45:28.837597,44,,"void tax(){
	
      
}



  
  "
388,1.0,1.0,1.0,5.0,2017-03-24 21:45:29.681489,60,,"//FIND TAX BASED ON A PERSONS STATUS IN A BUSINESS
void personalTax(){
  
}"
389,1.0,1.0,1.0,5.0,2017-03-24 21:45:30.488905,60,,"//FIND TAX BASED ON A PERSONS STATUS IN A BUSINESS
void personalTax(){
  
}"
390,1.0,1.0,1.0,5.0,2017-03-24 21:45:31.163908,60,,"//FIND TAX BASED ON A PERSONS STATUS IN A BUSINESS
void personalTax(){
  
}"
391,1.0,1.0,1.0,5.0,2017-03-24 21:45:31.755030,60,,"//FIND TAX BASED ON A PERSONS STATUS IN A BUSINESS
void personalTax(){
  
}"
392,1.0,2.5,1.0,1.0,2017-03-24 21:45:32.118043,34,269,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""/**\n      Constructs a Person object\n      @param aName the name of the person\n   */\npublic Person(String aName) {\n    name = aName;\n}\n"",""rating"":3},""code"":""public void Person()\n{\n  //interface\n}""}"
393,1.0,1.0,1.0,5.0,2017-03-24 21:45:32.275026,60,,"//FIND TAX BASED ON A PERSONS STATUS IN A BUSINESS
void personalTax(){
  
}"
394,1.0,1.0,1.0,1.0,2017-03-24 21:45:36.414867,37,270,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""public int compare(Object a, Object b) {\n    return ((Comparable) a).compareTo(b);\n}\n"",""rating"":3},""code"":""public int Compare(int[] test){\n  int diff = 0;\n  int min = 0;\n  int max = 0;\n  for(int i = 0; i < test.length; i++)\n  \tif(test[i] < min){\n      min = test[i];\n    }\n  \telse if(test[i] > max){\n      max = test[i];\n    }\n   diff = max - min;\n   return diff;\n}""}"
395,1.0,2.5,1.0,1.0,2017-03-24 21:45:37.699243,39,,"public int compare(){
  
}"
396,1.0,1.0,1.0,1.0,2017-03-24 21:45:37.749362,13,271,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""/**\n       * Called by the constructor, and called by actionPerformed() if  the \n       * user clicks the \""New Game\"" button.  Start a new game.  Deal two cards \n       * to each player.  The game might end right then  if one of the players \n       * had blackjack.  Otherwise, gameInProgress is set to true and the game \n       * begins.\n       */\nvoid doNewGame() {\n    if (gameInProgress) {\n        // If the current game is not over, it is an error to try\n        // to start a new game.\n        message = \""You still have to finish this game!\"";\n        repaint();\n        return;\n    }\n    // Create the deck and hands to use for this game.\n    deck = new Deck();\n    dealerHand = new BlackjackHand();\n    playerHand = new BlackjackHand();\n    deck.shuffle();\n    // Deal two cards to each player.\n    dealerHand.addCard(deck.dealCard());\n    dealerHand.addCard(deck.dealCard());\n    playerHand.addCard(deck.dealCard());\n    playerHand.addCard(deck.dealCard());\n    if (dealerHand.getBlackjackValue() == 21) {\n        message = \""Sorry, you lose.  Dealer has Blackjack.\"";\n        gameInProgress = false;\n    } else if (playerHand.getBlackjackValue() == 21) {\n        message = \""You win!  You have Blackjack.\"";\n        gameInProgress = false;\n    } else {\n        message = \""You have \"" + playerHand.getBlackjackValue() + \"".  Hit or stand?\"";\n        gameInProgress = true;\n    }\n    repaint();\n}\n"",""rating"":1},""code"":""void somethod() {\n  // show\n}""}"
397,2.5,2.5,1.0,1.0,2017-03-24 21:45:38.967678,39,,"public int compare(){
  
}"
398,1.0,1.0,1.0,2.0,2017-03-24 21:45:38.986051,46,272,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""void compute() {\n    iterationCounts = new int[count];\n    for (int i = 0; i < count; i++) {\n        double x0 = xmin + i * dx;\n        double y0 = y;\n        double a = x0;\n        double b = y0;\n        int ct = 0;\n        while (a * a + b * b < 4.1) {\n            ct++;\n            if (ct > maxIterations) {\n                ct = -1;\n                break;\n            }\n            double newa = a * a - b * b + x0;\n            b = 2 * a * b + y0;\n            a = newa;\n        }\n        iterationCounts[i] = ct;\n    }\n}\n"",""rating"":2},""code"":""void returnTax(){\n  double tax;\n  if(Employee.getSalary < 100000)\n  {\n     tax = .02*Employee.getSalary;\n  }\n}""}"
399,5.0,1.0,1.0,1.0,2017-03-24 21:45:43.000936,12,,"void somethod(){
  //some comments
}"
400,5.0,5.0,1.0,1.0,2017-03-24 21:45:43.752659,12,,"void somethod(){
  //some comments
}"
401,5.0,5.0,5.0,1.0,2017-03-24 21:45:44.442063,12,,"void somethod(){
  //some comments
}"
402,1.0,1.0,1.0,1.0,2017-03-24 21:45:45.547800,37,273,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""// pre: list != null\n// post: return sum of elements\n// use traditional for loop\npublic static int sumListOld(int[] list) {\n    int total = 0;\n    for (int i = 0; i < list.length; i++) {\n        total += list[i];\n        System.out.println(list[i]);\n    }\n    return total;\n}\n"",""rating"":3},""code"":""public int Compare(int[] test){\n  int diff = 0;\n  int min = 0;\n  int max = 0;\n  for(int i = 0; i < test.length; i++)\n  \tif(test[i] < min){\n      min = test[i];\n    }\n  \telse if(test[i] > max){\n      max = test[i];\n    }\n   diff = max - min;\n   return diff;\n}""}"
403,1.0,1.0,1.0,1.0,2017-03-24 21:45:45.674178,13,274,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""public static void main(String[] args) {\n    LinkedList staff = new LinkedList();\n    staff.addLast(\""Diana\"");\n    staff.addLast(\""Harry\"");\n    staff.addLast(\""Romeo\"");\n    staff.addLast(\""Tom\"");\n    // | in the comments indicates the iterator position\n    // |DHRT\n    ListIterator iterator = staff.listIterator();\n    // D|HRT\n    iterator.next();\n    // DH|RT\n    iterator.next();\n    // Add more elements after second element\n    // DHJ|RT\n    iterator.add(\""Juliet\"");\n    // DHJN|RT\n    iterator.add(\""Nina\"");\n    // DHJNR|T\n    System.out.println(iterator.next());\n    // DHJN|RT\n    System.out.println(iterator.previous());\n    // Remove last traversed element \n    // DHJN|T\n    iterator.remove();\n    // Print all elements\n    iterator = staff.listIterator();\n    while (iterator.hasNext()) {\n        System.out.print(iterator.next() + \"" \"");\n    }\n    System.out.println();\n}\n"",""rating"":3},""code"":""void somethod() {\n  // show\n}""}"
404,5.0,5.0,5.0,5.0,2017-03-24 21:45:45.892317,12,,"void somethod(){
  //some comments
}"
405,1.0,1.0,1.0,1.0,2017-03-24 21:45:48.569173,37,275,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""Task(int min, int max) {\n    this.min = min;\n    this.max = max;\n}\n"",""rating"":4},""code"":""public int Compare(int[] test){\n  int diff = 0;\n  int min = 0;\n  int max = 0;\n  for(int i = 0; i < test.length; i++)\n  \tif(test[i] < min){\n      min = test[i];\n    }\n  \telse if(test[i] > max){\n      max = test[i];\n    }\n   diff = max - min;\n   return diff;\n}""}"
406,1.0,1.0,1.0,1.0,2017-03-24 21:45:48.995236,13,276,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""/**\n       * When the ERASE or SMUDGE tools are used and the mouse jumps\n       * from (x1,y1) to (x2,y2), the tool has to be applied to a\n       * line of pixel positions between the two points in order to\n       * cover the entire line that the mouse moves along.  The change\n       * is made to the off-screen canvas, and repaint() is called to\n       * copy the changes to the screen.\n       */\nvoid applyToolAlongLine(int x1, int y1, int x2, int y2) {\n    Graphics g = OSC.createGraphics();\n    // (for ERASE only)\n    g.setColor(fillColor);\n    // (for SMUDGE only)\n    int w = OSC.getWidth();\n    // (for SMUDGE only)\n    int h = OSC.getHeight();\n    int dist = Math.max(Math.abs(x2 - x1), Math.abs(y2 - y1));\n    // dist is the number of points along the line from\n    // (x1,y1) to (x2,y2) at which the tool will be applied.\n    double dx = (double) (x2 - x1) / dist;\n    double dy = (double) (y2 - y1) / dist;\n    for (int d = 1; d <= dist; d++) {\n        // Apply the tool at one of the points (x,y) along the\n        // line from (x1,y1) to (x2,y2).\n        int x = (int) Math.round(x1 + dx * d);\n        int y = (int) Math.round(y1 + dy * d);\n        if (currentTool == Tool.ERASE) {\n            // Erase a 10-by-10 block of pixels around (x,y)\n            g.fillRect(x - 5, y - 5, 10, 10);\n            repaint(x - 5, y - 5, 10, 10);\n        } else {\n            // of pixels that are visited by the tool.\n            for (int i = 0; i < 7; i++) for (int j = 0; j < 7; j++) {\n                int r = y + j - 3;\n                int c = x + i - 3;\n                if (!(r < 0 || r >= h || c < 0 || c >= w || smudgeRed[i][j] == -1)) {\n                    int curCol = OSC.getRGB(c, r);\n                    int curRed = (curCol >> 16) & 0xFF;\n                    int curGreen = (curCol >> 8) & 0xFF;\n                    int curBlue = curCol & 0xFF;\n                    int newRed = (int) (curRed * 0.7 + smudgeRed[i][j] * 0.3);\n                    int newGreen = (int) (curGreen * 0.7 + smudgeGreen[i][j] * 0.3);\n                    int newBlue = (int) (curBlue * 0.7 + smudgeBlue[i][j] * 0.3);\n                    int newCol = newRed << 16 | newGreen << 8 | newBlue;\n                    OSC.setRGB(c, r, newCol);\n                    smudgeRed[i][j] = curRed * 0.3 + smudgeRed[i][j] * 0.7;\n                    smudgeGreen[i][j] = curGreen * 0.3 + smudgeGreen[i][j] * 0.7;\n                    smudgeBlue[i][j] = curBlue * 0.3 + smudgeBlue[i][j] * 0.7;\n                }\n            }\n            repaint(x - 3, y - 3, 7, 7);\n        }\n    }\n    g.dispose();\n}\n                   // For the SMUDGE tool, blend some of the color from\n\n                   // the smudgeRed, smudgeGreen, and smudgeBlue arrays\n\n                   // into the pixels in a 7-by-7 block around (x,y), and\n\n                   // vice versa.  The effect is to smear out the color\n\n"",""rating"":1},""code"":""void somethod() {\n  // show\n}""}"
407,1.0,1.0,1.0,1.0,2017-03-24 21:45:52.158445,37,277,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""public int getSize(Directory dir) {\n    int total = 0;\n    //check files\n    File[] files = dir.getFiles();\n    for (int i = 0; i < files.length; i++) total += files[i].getSize();\n    //get sub directories and check them\n    Directory[] subs = dir.getSubs();\n    for (int i = 0; i < subs.length; i++) total += getSize(subs[i]);\n    return total;\n}\n"",""rating"":2},""code"":""public int Compare(int[] test){\n  int diff = 0;\n  int min = 0;\n  int max = 0;\n  for(int i = 0; i < test.length; i++)\n  \tif(test[i] < min){\n      min = test[i];\n    }\n  \telse if(test[i] > max){\n      max = test[i];\n    }\n   diff = max - min;\n   return diff;\n}""}"
408,1.0,1.0,1.0,1.0,2017-03-24 21:45:52.625467,21,278,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent1(int[] a) {\n    int[] counts = new int[a.length];\n    for (// O(n*n)\n    int i = 0; // O(n*n)\n    i < a.length; // O(n*n)\n    i++) {\n        // O(n) in each iteration\n        counts[i] = count(a, a[i]);\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":3},""code"":""int[] Size = new int[7];\n\npublic int Array(int[] Num)\n{\n  Num = Size;\n  for(int x = 0; x < Num.size(); x++)\n  {\n    int Count = Num[0]-Num[7];\n  }\n}""}"
409,1.5,1.0,1.0,1.0,2017-03-24 21:45:52.927000,44,,"void tax(){
	
      
}



  
  "
410,1.0,1.0,1.0,1.0,2017-03-24 21:45:53.995412,15,279,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""/** Construct from an existing Reader */\npublic SimpleCalcStreamTok(Reader rdr) throws IOException {\n    tf = new StreamTokenizer(rdr);\n    // Control the input character set:\n    // treat \""//\"" as comments\n    tf.slashSlashComments(true);\n    // used for subtraction\n    tf.ordinaryChar('-');\n    // used for division\n    tf.ordinaryChar('/');\n    s = new Stack();\n}\n"",""rating"":2},""code"":""void somethod(){\n  //some comments \n}""}"
411,5.0,2.5,1.0,1.0,2017-03-24 21:45:54.362572,39,,"public int compare(){
  
}"
412,1.5,3.5,1.0,1.0,2017-03-24 21:45:55.565022,44,,"void tax(){
	
      
}



  
  "
413,1.0,1.0,1.0,1.0,2017-03-24 21:45:57.315483,54,280,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""public static void main(String[] args) {\n    // Initialize variables\n    int n0 = 1, n1 = 1, n2;\n    System.out.print(// Print first and second terms\n    n0 + \"" \"" + n1 + // of the series\n    \"" \"");\n    for (int i = 0; i < 18; i++) {\n        // Loop for the next 18 terms\n        // Next term is sum of previous two\n        n2 = n1 + n0;\n        // Print it out\n        System.out.print(n2 + \"" \"");\n        // First previous becomes 2nd previous\n        n0 = n1;\n        // And current number becomes previous\n        n1 = n2;\n    }\n    // Terminate the line\n    System.out.println();\n}\n"",""rating"":1},""code"":""\npublic static int minFunction(int n1, int n2) {\n   int min;\n   if (n1 > n2)\n      min = n2;\n   else\n      min = n1;\n\n   return min; \n}""}"
414,1.0,1.0,1.0,1.0,2017-03-24 21:46:00.125481,13,281,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""void addShape(Shape shape) {\n    // Add the shape to the canvas, and set its size/position and color.\n    // The shape is added at the top-left corner, with size 80-by-50.\n    // Then redraw the canvas to show the newly added shape.\n    shape.setColor(currentColor);\n    shape.reshape(3, 3, 80, 50);\n    shapes[shapeCount] = shape;\n    shapeCount++;\n    repaint();\n}\n"",""rating"":1},""code"":""void somethod() {\n  // show\n}""}"
415,3.0,2.5,1.5,1.0,2017-03-24 21:46:00.166718,8,,"//takes a person and returns their tax as below
Double tax(Person p)
{
  if(p.getSalary() < 10000)
  return p.getSalary()*.02;
    else
      return p.getSalary()*.02;
  
 if(p.getSalary() < 10000){
   return p.getProfit()*.10;
 }     
}"
416,1.0,1.0,1.0,1.0,2017-03-24 21:46:00.272354,37,282,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""public int compare(Song one, Song two) {\n    return one.getArtist().compareTo(two.getArtist());\n}\n"",""rating"":3},""code"":""public int Compare(int[] test){\n  int diff = 0;\n  int min = 0;\n  int max = 0;\n  for(int i = 0; i < test.length; i++)\n  \tif(test[i] < min){\n      min = test[i];\n    }\n  \telse if(test[i] > max){\n      max = test[i];\n    }\n   diff = max - min;\n   return diff;\n}""}"
417,3.0,1.0,1.5,1.0,2017-03-24 21:46:01.318495,8,,"//takes a person and returns their tax as below
Double tax(Person p)
{
  if(p.getSalary() < 10000)
  return p.getSalary()*.02;
    else
      return p.getSalary()*.02;
  
 if(p.getSalary() < 10000){
   return p.getProfit()*.10;
 }     
}"
418,1.0,3.0,5.0,3.5,2017-03-24 21:46:01.790676,11,,"int largeDifference(int[] array)
{
  int count=0; 
  
  if(array.length==0)
  {
    retun -1;
  }
  
  for(int i=0;i<=array.length;i++)
  {
    if(i==array.length)
    {
      count=Math.abs(array[i]-array[0]);
    }
    else
    {
      count=Math.abs(array[i]-array[i+1]); 
    }
  }
}"
419,5.0,2.5,1.0,1.0,2017-03-24 21:46:01.865193,39,283,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""public int compare(Object a, Object b) {\n    return ((CollationKey) a).compareTo((CollationKey) b);\n}\n"",""rating"":3},""code"":""public int compare(){\n  \n}""}"
420,1.0,1.0,1.0,1.0,2017-03-24 21:46:01.895846,13,284,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static void showList(int[] list) {\n    for (int i = 0; i < list.length; i++) System.out.print(list[i] + \"" \"");\n    System.out.println();\n}\n"",""rating"":1},""code"":""void somethod() {\n  // show\n}""}"
421,2.0,1.5,1.0,2.0,2017-03-24 21:46:02.399349,23,285,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""int getSize() {\n    // Return the number of items on the queue.\n    return size;\n}\n"",""rating"":3},""code"":""int method(){\n  \n}\n  \n""}"
422,5.0,2.5,1.0,1.0,2017-03-24 21:46:02.701172,39,286,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public int compare(Song one, Song two) {\n    return one.getArtist().compareTo(two.getArtist());\n}\n"",""rating"":2},""code"":""public int compare(){\n  \n}""}"
423,1.5,3.5,1.0,1.0,2017-03-24 21:46:03.127973,44,287,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""/** \n     * Break a page at the specified Y coordinate.  Store the necessary\n     * information into the pageLengths and pageOffsets lists\n     **/\nvoid breakPage(double y) {\n    double pageLength = y - pageStart - printY;\n    pageStart = y - printY;\n    pageLengths.add(new Double(pageLength));\n    pageOffsets.add(new Double(pageStart));\n}\n"",""rating"":4},""code"":""void tax(){\n\t\n      \n}\n\n\n\n  \n  ""}"
424,5.0,5.0,5.0,5.0,2017-03-24 21:46:03.828303,12,288,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""/** Construct from an existing Reader */\npublic SimpleCalcStreamTok(Reader rdr) throws IOException {\n    tf = new StreamTokenizer(rdr);\n    // Control the input character set:\n    // treat \""//\"" as comments\n    tf.slashSlashComments(true);\n    // used for subtraction\n    tf.ordinaryChar('-');\n    // used for division\n    tf.ordinaryChar('/');\n    s = new Stack();\n}\n"",""rating"":4},""code"":""void somethod(){\n  //some comments\n}""}"
425,1.0,1.0,1.0,1.0,2017-03-24 21:46:05.602281,13,289,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""/**\n       * This is called by mousePressed() when a player clicks on the\n       * square in the specified row and col.  It has already been checked\n       * that a game is, in fact, in progress.\n       */\nvoid doClickSquare(int row, int col) {\n    if (board[row][col] != EMPTY) {\n        if (currentPlayer == BLACK)\n            message.setText(\""BLACK:  Please click an empty square.\"");\n        else\n            message.setText(\""WHITE:  Please click an empty square.\"");\n        return;\n    }\n    /* Make the move.  Check if the board is full or if the move\n          is a winning move.  If so, the game ends.  If not, then it's\n          the other user's turn. */\n    // Make the move.\n    board[row][col] = currentPlayer;\n    repaint();\n    if (winner(row, col)) {\n        // First, check for a winner.\n        if (currentPlayer == WHITE)\n            gameOver(\""WHITE wins the game!\"");\n        else\n            gameOver(\""BLACK wins the game!\"");\n        return;\n    }\n    // Check if the board is full.\n    boolean emptySpace = false;\n    for (int i = 0; i < 13; i++) for (int j = 0; j < 13; j++) if (board[i][j] == EMPTY)\n        emptySpace = true;\n    if (emptySpace == false) {\n        gameOver(\""The game ends in a draw.\"");\n        return;\n    }\n    if (currentPlayer == BLACK) {\n        currentPlayer = WHITE;\n        message.setText(\""WHITE:  Make your move.\"");\n    } else {\n        currentPlayer = BLACK;\n        message.setText(\""BLACK:  Make your move.\"");\n    }\n}\n          /* Check that the user clicked an empty square.  If not, show an\n          error message and exit. */\n\n          /* Continue the game.  It's the other player's turn. */\n\n"",""rating"":1},""code"":""void somethod() {\n  // show\n}""}"
426,5.0,5.0,5.0,5.0,2017-03-24 21:46:05.649299,12,290,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""/**\n       * Called by the constructor, and called by actionPerformed() if  the \n       * user clicks the \""New Game\"" button.  Start a new game.  Deal two cards \n       * to each player.  The game might end right then  if one of the players \n       * had blackjack.  Otherwise, gameInProgress is set to true and the game \n       * begins.\n       */\nvoid doNewGame() {\n    if (gameInProgress) {\n        // If the current game is not over, it is an error to try\n        // to start a new game.\n        message = \""You still have to finish this game!\"";\n        repaint();\n        return;\n    }\n    // Create the deck and hands to use for this game.\n    deck = new Deck();\n    dealerHand = new BlackjackHand();\n    playerHand = new BlackjackHand();\n    deck.shuffle();\n    // Deal two cards to each player.\n    dealerHand.addCard(deck.dealCard());\n    dealerHand.addCard(deck.dealCard());\n    playerHand.addCard(deck.dealCard());\n    playerHand.addCard(deck.dealCard());\n    if (dealerHand.getBlackjackValue() == 21) {\n        message = \""Sorry, you lose.  Dealer has Blackjack.\"";\n        gameInProgress = false;\n    } else if (playerHand.getBlackjackValue() == 21) {\n        message = \""You win!  You have Blackjack.\"";\n        gameInProgress = false;\n    } else {\n        message = \""You have \"" + playerHand.getBlackjackValue() + \"".  Hit or stand?\"";\n        gameInProgress = true;\n    }\n    repaint();\n}\n"",""rating"":4},""code"":""void somethod(){\n  //some comments\n}""}"
427,5.0,2.5,1.0,1.0,2017-03-24 21:46:05.744531,39,291,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""/** \n   * This method computes a pseudo-random integer between 0 and specified\n   * maximum.  It uses randomFloat() above.\n   **/\npublic int randomInt(int max) {\n    return Math.round(max * randomFloat());\n}\n"",""rating"":1},""code"":""public int compare(){\n  \n}""}"
428,1.0,2.5,1.0,1.0,2017-03-24 21:46:06.357145,34,292,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""/**\n     * This method from the Externalizable interface is responsible for saving\n     * the complete state of the object to the specified stream.  It can write\n     * anything it wants as long as readExternal() can read it.\n     **/\npublic void writeExternal(ObjectOutput out) throws IOException {\n    // Compact the array.\n    if (data.length > size)\n        resize(size);\n    // Start with our version number.\n    out.writeByte(version);\n    // Output the number of array elements\n    out.writeInt(size);\n    for (int i = 0; i < size; i++) {\n        // Now loop through the array\n        // The array element to write\n        int n = data[i];\n        if ((n < Short.MAX_VALUE) && (n > Short.MIN_VALUE + 1)) {\n            // If n fits in a short and is not Short.MIN_VALUE, then write\n            // it out as a short, saving ourselves two bytes\n            out.writeShort(n);\n        } else {\n            // Otherwise write out the special value Short.MIN_VALUE to\n            // signal that the number does not fit in a short, and then\n            // output the number using a full 4 bytes, for 6 bytes total\n            out.writeShort(Short.MIN_VALUE);\n            out.writeInt(n);\n        }\n    }\n}\n"",""rating"":1},""code"":""public void Person()\n{\n  //interface\n}""}"
429,2.0,1.0,1.0,1.0,2017-03-24 21:46:09.426476,29,,"public double array(double a, double b, double c)
{
  double[] list = {a, b, c};
}"
430,5.0,5.0,5.0,5.0,2017-03-24 21:46:09.882303,12,293,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""/** The constructor.  See comment above for meanings of these arguments */\npublic ColumnLayout(int margin_height, int margin_width, int spacing, int alignment) {\n    this.margin_height = margin_height;\n    this.margin_width = margin_width;\n    this.spacing = spacing;\n    this.alignment = alignment;\n}\n"",""rating"":4},""code"":""void somethod(){\n  //some comments\n}""}"
431,1.0,1.0,1.0,1.0,2017-03-24 21:46:09.999260,13,294,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""public void show(Picture s) {\n    if (!pictures.contains(s)) {\n        pictures.add(s);\n    }\n    repaint();\n}\n"",""rating"":3},""code"":""void somethod() {\n  // show\n}""}"
432,1.0,1.0,1.0,1.0,2017-03-24 21:46:10.481903,37,295,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""public int compareTo(Object other) {\n    return sign(this.magnitude() - ((ComplexNumber) other).magnitude());\n}\n"",""rating"":3},""code"":""public int Compare(int[] test){\n  int diff = 0;\n  int min = 0;\n  int max = 0;\n  for(int i = 0; i < test.length; i++)\n  \tif(test[i] < min){\n      min = test[i];\n    }\n  \telse if(test[i] > max){\n      max = test[i];\n    }\n   diff = max - min;\n   return diff;\n}""}"
433,1.0,2.5,1.0,1.0,2017-03-24 21:46:10.595386,34,296,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""/** Return the person's name.  Not a remote method */\npublic String getName() {\n    return name;\n}\n"",""rating"":3},""code"":""public void Person()\n{\n  //interface\n}""}"
434,1.0,1.0,1.0,1.0,2017-03-24 21:46:10.668079,21,297,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""public int run() {\n    MutableInteger list[] = new MutableInteger[MAX];\n    for (int i = 0; i < list.length; i++) {\n        list[i] = new MutableInteger(i);\n    }\n    int sum = 0;\n    for (int i = 0; i < list.length; i++) {\n        sum += list[i].getValue();\n    }\n    return sum;\n}\n"",""rating"":3},""code"":""int[] Size = new int[7];\n\npublic int Array(int[] Num)\n{\n  Num = Size;\n  for(int x = 0; x < Num.size(); x++)\n  {\n    int Count = Num[0]-Num[7];\n  }\n}""}"
435,1.0,1.0,1.0,1.0,2017-03-24 21:46:10.679250,15,298,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String[] args) {\n    LinkedList staff = new LinkedList();\n    staff.addFirst(\""Tom\"");\n    staff.addFirst(\""Romeo\"");\n    staff.addFirst(\""Harry\"");\n    staff.addFirst(\""Diana\"");\n    // | in the comments indicates the iterator position\n    // |DHRT\n    ListIterator iterator = staff.listIterator();\n    // D|HRT\n    iterator.next();\n    // DH|RT\n    iterator.next();\n    // Add more elements after second element\n    // DHJ|RT\n    iterator.add(\""Juliet\"");\n    // DHJN|RT\n    iterator.add(\""Nina\"");\n    // DHJNR|T\n    iterator.next();\n    // Remove last traversed element \n    // DHJN|T\n    iterator.remove();\n    // Print all elements\n    iterator = staff.listIterator();\n    while (iterator.hasNext()) {\n        System.out.print(iterator.next() + \"" \"");\n    }\n    System.out.println();\n}\n"",""rating"":3},""code"":""void somethod(){\n  //some comments \n}""}"
436,5.0,5.0,5.0,5.0,2017-03-24 21:46:10.866028,12,299,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""/**\n       * Called by the constructor, and called by actionPerformed() if  the \n       * user clicks the \""New Game\"" button.  Start a new game.  Deal two cards \n       * to each player.  The game might end right then  if one of the players \n       * had blackjack.  Otherwise, gameInProgress is set to true and the game \n       * begins.\n       */\nvoid doNewGame() {\n    if (gameInProgress) {\n        // If the current game is not over, it is an error to try\n        // to start a new game.\n        message = \""You still have to finish this game!\"";\n        repaint();\n        return;\n    }\n    // Create the deck and hands to use for this game.\n    deck = new Deck();\n    dealerHand = new BlackjackHand();\n    playerHand = new BlackjackHand();\n    deck.shuffle();\n    // Deal two cards to each player.\n    dealerHand.addCard(deck.dealCard());\n    dealerHand.addCard(deck.dealCard());\n    playerHand.addCard(deck.dealCard());\n    playerHand.addCard(deck.dealCard());\n    if (dealerHand.getBlackjackValue() == 21) {\n        message = \""Sorry, you lose.  Dealer has Blackjack.\"";\n        gameInProgress = false;\n    } else if (playerHand.getBlackjackValue() == 21) {\n        message = \""You win!  You have Blackjack.\"";\n        gameInProgress = false;\n    } else {\n        message = \""You have \"" + playerHand.getBlackjackValue() + \"".  Hit or stand?\"";\n        gameInProgress = true;\n    }\n    repaint();\n}\n"",""rating"":4},""code"":""void somethod(){\n  //some comments\n}""}"
437,5.0,5.0,5.0,5.0,2017-03-24 21:46:13.370818,12,300,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""/** Construct from an existing Reader */\npublic SimpleCalcStreamTok(Reader rdr) throws IOException {\n    tf = new StreamTokenizer(rdr);\n    // Control the input character set:\n    // treat \""//\"" as comments\n    tf.slashSlashComments(true);\n    // used for subtraction\n    tf.ordinaryChar('-');\n    // used for division\n    tf.ordinaryChar('/');\n    s = new Stack();\n}\n"",""rating"":3},""code"":""void somethod(){\n  //some comments\n}""}"
438,1.0,1.0,1.0,1.0,2017-03-24 21:46:15.237165,13,301,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""public void showStatus(String message) {\n    System.out.println(message);\n}\n"",""rating"":1},""code"":""void somethod() {\n  // show\n}""}"
439,5.0,2.5,1.0,1.0,2017-03-24 21:46:16.312779,39,302,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""public int compare(Object a, Object b) {\n    return ((String) a).compareTo((String) b);\n}\n"",""rating"":3},""code"":""public int compare(){\n  \n}""}"
440,1.0,1.0,1.0,1.0,2017-03-24 21:46:16.827897,37,303,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""public int run() {\n    MutableInteger list[] = new MutableInteger[MAX];\n    for (int i = 0; i < list.length; i++) {\n        list[i] = new MutableInteger(i);\n    }\n    int sum = 0;\n    for (int i = 0; i < list.length; i++) {\n        sum += list[i].getValue();\n    }\n    return sum;\n}\n"",""rating"":2},""code"":""public int Compare(int[] test){\n  int diff = 0;\n  int min = 0;\n  int max = 0;\n  for(int i = 0; i < test.length; i++)\n  \tif(test[i] < min){\n      min = test[i];\n    }\n  \telse if(test[i] > max){\n      max = test[i];\n    }\n   diff = max - min;\n   return diff;\n}""}"
441,1.0,1.0,1.0,1.0,2017-03-24 21:46:18.840830,37,304,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""public int compare(Object a, Object b) {\n    return ((String) a).compareTo((String) b);\n}\n"",""rating"":3},""code"":""public int Compare(int[] test){\n  int diff = 0;\n  int min = 0;\n  int max = 0;\n  for(int i = 0; i < test.length; i++)\n  \tif(test[i] < min){\n      min = test[i];\n    }\n  \telse if(test[i] > max){\n      max = test[i];\n    }\n   diff = max - min;\n   return diff;\n}""}"
442,1.0,1.0,1.0,1.0,2017-03-24 21:46:22.753962,37,305,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent1(int[] a) {\n    int[] counts = new int[a.length];\n    for (// O(n*n)\n    int i = 0; // O(n*n)\n    i < a.length; // O(n*n)\n    i++) {\n        // O(n) in each iteration\n        counts[i] = count(a, a[i]);\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":4},""code"":""public int Compare(int[] test){\n  int diff = 0;\n  int min = 0;\n  int max = 0;\n  for(int i = 0; i < test.length; i++)\n  \tif(test[i] < min){\n      min = test[i];\n    }\n  \telse if(test[i] > max){\n      max = test[i];\n    }\n   diff = max - min;\n   return diff;\n}""}"
443,1.0,1.0,1.0,1.0,2017-03-24 21:46:25.755720,59,,"Array.method (){
  //
Return difference between elements}"
444,5.0,2.5,1.0,1.0,2017-03-24 21:46:27.670318,39,306,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""public int compareTo(Object other) {\n    return sign(this.magnitude() - ((ComplexNumber) other).magnitude());\n}\n"",""rating"":4},""code"":""public int compare(){\n  \n}""}"
445,1.0,1.0,1.0,1.0,2017-03-24 21:46:27.692991,13,307,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""/** Print out the scribble */\nvoid print() {\n    // Obtain a PrintJob and a Graphics object to use with it\n    Toolkit toolkit = this.getToolkit();\n    PrintJob job = toolkit.getPrintJob(this, \""PrintScribble\"", printprefs);\n    // If the user clicked Cancel in the print dialog\n    if (job == null)\n        return;\n    Graphics g = job.getGraphics();\n    // Give the output a larger top and left margin.  Otherwise it will\n    // be scrunched up in the upper-left corner of the page.\n    g.translate(100, 100);\n    // Draw a border around the output area.\n    Dimension size = this.getSize();\n    g.drawRect(-1, -1, size.width + 1, size.height + 1);\n    // Set a clipping region so our scribbles don't go outside the border\n    // On-screen this happens automatically, but not on paper.\n    g.setClip(0, 0, size.width, size.height);\n    // Print this component and all components it contains\n    // Use print() if you don't want the button to show\n    this.printAll(g);\n    // Finish up.\n    // End the page\n    g.dispose();\n    // End the job\n    job.end();\n}\n"",""rating"":1},""code"":""void somethod() {\n  // show\n}""}"
446,2.0,1.0,1.0,1.0,2017-03-24 21:46:28.753238,29,308,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""/**\n      Deposits money into the bank account.\n      @param amount the amount to deposit\n   */\npublic void deposit(double amount) {\n    double newBalance = balance + amount;\n    balance = newBalance;\n}\n"",""rating"":4},""code"":""public double array(double a, double b, double c)\n{\n  double[] list = {a, b, c};\n  double difference = list[0] - list[2];\n}""}"
447,1.0,1.0,1.0,2.5,2017-03-24 21:46:28.877098,46,,"void largesst(int array[])
{
  	
}"
448,1.5,3.5,1.0,1.0,2017-03-24 21:46:31.183604,44,309,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", targetDate = \""Jan 1, 2012\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":2},""code"":""void tax(){\n\t\n      \n}\n\n\n\n  \n  ""}"
449,2.0,1.0,1.0,1.0,2017-03-24 21:46:34.484972,29,310,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""/**\n     * Set the desired range of xy-values to be visible in the image.  The values\n     * might be adjusted to reflect the aspect ratio of the display.  When the\n     * limits change, a PropertyChangeEvent with property name MandelbrotDisplay.STATUS_LIMITS\n     * is generated; the values associated with the property change are arrays.  The\n     * array is an array of double of length four containing xmin, xmax, ymin, and ymax.\n     * Note that calling this method causes a new computation to begin, but only if the\n     * limits are actually changed. The default values for the limits are -2.5, 1.1, -1.35, 1.35.\n     */\npublic void setLimits(double xmin, double xmax, double ymin, double ymax) {\n    if (xmin == this.xmin && xmax == this.xmax && ymin == this.ymin && ymax == this.ymax)\n        return;\n    double[] oldLimits = { this.xmin, this.xmax, this.ymin, this.ymax };\n    stopComputing();\n    xmin_requested = xmin;\n    xmax_requested = xmax;\n    ymin_requested = ymin;\n    ymax_requested = ymax;\n    // Calls checkAspect, which sets new values for this.xmin, etc.\n    startComputing();\n    repaint();\n    double[] newLimits = { this.xmin, this.xmax, this.ymin, this.ymax };\n    firePropertyChange(LIMITS_PROPERTY, oldLimits, newLimits);\n}\n"",""rating"":4},""code"":""public double array(double a, double b, double c)\n{\n  double[] list = {a, b, c};\n  double difference = list[0] - list[2];\n}""}"
450,2.0,1.0,1.0,1.0,2017-03-24 21:46:36.920301,29,311,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""// END main\n// THE FOLLOWING METHODS ARE NOT YET IMPLEMENTED!\npublic Object[] toArray() {\n    return null;\n}\n"",""rating"":5},""code"":""public double array(double a, double b, double c)\n{\n  double[] list = {a, b, c};\n  double difference = list[0] - list[2];\n}""}"
451,3.0,1.0,1.5,1.0,2017-03-24 21:46:38.040632,8,312,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""boolean containsPoint(int x, int y) {\n    // appropriate for the subclass.\n    if (x >= left && x < left + width && y >= top && y < top + height)\n        return true;\n    else\n        return false;\n}\n                 // Check whether the shape contains the point (x,y).\n\n                 // By default, this just checks whether (x,y) is inside the\n\n                 // rectangle that bounds the shape.  This method should be\n\n                 // overridden by a subclass if the default behavior is not\n\n"",""rating"":1},""code"":""//takes a person and returns their tax as below\nDouble tax(Person p)\n{\n  if(p.getSalary() < 10000)\n  return p.getSalary()*.02;\n    else\n      return p.getSalary()*.02;\n  \n if(p.getSalary() < 10000){\n   return p.getProfit()*.10;\n }     \n}""}"
452,2.0,1.0,1.0,1.0,2017-03-24 21:46:40.242989,29,313,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""/**\n      Gets the size of this array list.\n      @return the size\n   */\npublic int size() {\n    return currentSize;\n}\n"",""rating"":1},""code"":""public double array(double a, double b, double c)\n{\n  double[] list = {a, b, c};\n  double difference = list[0] - list[2];\n}""}"
453,1.0,1.0,1.0,1.0,2017-03-24 21:46:40.502113,54,314,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""//pre: n >= 0\npublic static int fact(int n) {\n    int result = 0;\n    if (n == 0)\n        result = 1;\n    else\n        result = n * fact(n - 1);\n    return result;\n}\n"",""rating"":2},""code"":""\npublic static int minFunction(int n1, int n2) {\n   int min;\n   if (n1 > n2)\n      min = n2;\n   else\n      min = n1;\n\n   return min; \n}""}"
454,2.0,1.0,1.0,1.0,2017-03-24 21:46:44.778374,29,315,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""/**\n      Combines two values with an operator.\n      @param value1 the first value\n      @param value2 the second value\n      @param op an operator (+, -, *, /, or =)\n   */\npublic double calculate(double value1, double value2, String op) {\n    if (op.equals(\""+\"")) {\n        return value1 + value2;\n    } else if (op.equals(\""-\"")) {\n        return value1 - value2;\n    } else if (op.equals(\""*\"")) {\n        return value1 * value2;\n    } else if (op.equals(\""/\"")) {\n        return value1 / value2;\n    } else // \""=\""\n    {\n        return value2;\n    }\n}\n"",""rating"":3},""code"":""public double array(double a, double b, double c)\n{\n  double[] list = {a, b, c};\n  double difference = list[0] - list[2];\n}""}"
455,2.0,1.5,1.0,2.0,2017-03-24 21:46:45.125862,23,316,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""public static void go() {\n    int x = 3;\n    int y = 2;\n    System.out.println(\""In method go. x: \"" + x + \"" y: \"" + y);\n    falseSwap(x, y);\n    System.out.println(\""in method go. x: \"" + x + \"" y: \"" + y);\n    moreParameters(x, y);\n    System.out.println(\""in method go. x: \"" + x + \"" y: \"" + y);\n}\n"",""rating"":1},""code"":""int method(){\n  \n}\n  \n""}"
456,1.0,1.0,1.0,5.0,2017-03-24 21:46:45.322355,60,317,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    System.out.print(\""Please enter your income: \"");\n    double income = in.nextDouble();\n    System.out.print(\""Are you married? (Y/N) \"");\n    String input = in.next();\n    int status;\n    if (input.equals(\""Y\"")) {\n        status = TaxReturn.MARRIED;\n    } else {\n        status = TaxReturn.SINGLE;\n    }\n    TaxReturn aTaxReturn = new TaxReturn(income, status);\n    System.out.println(\""Tax: \"" + aTaxReturn.getTax());\n}\n"",""rating"":3},""code"":""//FIND TAX BASED ON A PERSONS STATUS IN A BUSINESS\nvoid personalTax(){\n  \n}""}"
457,1.0,4.0,1.0,1.0,2017-03-24 21:46:47.411851,52,,"Scanner scan= new Scanner(System.in)
"
458,2.0,1.0,1.0,1.0,2017-03-24 21:46:47.858936,29,318,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""/**\n      Deposits money into the bank account.\n      @param amount the amount to deposit\n   */\npublic void deposit(double amount) {\n    double newBalance = balance + amount;\n    balance = newBalance;\n}\n"",""rating"":3},""code"":""public double array(double a, double b, double c)\n{\n  double[] list = {a, b, c};\n  double difference = list[0] - list[2];\n}""}"
459,2.0,1.0,1.0,1.0,2017-03-24 21:46:49.206613,29,319,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""/** As above, but with a default value */\npublic double getDouble(String key, double defaultValue) {\n    try {\n        return getDouble(key);\n    } catch (MissingResourceException e) {\n        if (e instanceof MalformedResourceException)\n            System.err.println(\""WARNING: \"" + e.getMessage());\n        return defaultValue;\n    }\n}\n"",""rating"":1},""code"":""public double array(double a, double b, double c)\n{\n  double[] list = {a, b, c};\n  double difference = list[0] - list[2];\n}""}"
460,1.0,1.0,1.0,5.0,2017-03-24 21:46:49.348655,60,320,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""public Product(float price) {\n    this.price = price;\n    tax = (float) (price * 0.20);\n}\n"",""rating"":2},""code"":""//FIND TAX BASED ON A PERSONS STATUS IN A BUSINESS\nvoid personalTax(){\n  \n}""}"
461,3.0,1.0,1.5,1.0,2017-03-24 21:46:49.786315,8,321,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""void play(int row, int col) {\n    // the details of speed/pause/step are handled here.\n    for (int p = 0; p < pieces.length; p++) {\n        if (!aborted && (used[pieces[p][0]] == false)) {\n            if (!putPiece(p, row, col))\n                continue;\n            if (obviousBlockExists()) {\n                removePiece(p, row, col);\n                continue;\n            }\n            // stop this piece from being used again on the board\n            used[pieces[p][0]] = true;\n            numused++;\n            if (message == RESTART_RANDOM_MESSAGE) {\n                aborted = true;\n                return;\n            }\n            if (numused == 12) {\n                // puzzle is solved\n                setMessage(RESTART_RANDOM_MESSAGE);\n                doDelay(5000);\n                return;\n            }\n            doDelay(delay);\n            // find next empty space, going left-to-right then top-to-bottom\n            int nextRow = row;\n            int nextCol = col;\n            while (board.getColor(nextRow, nextCol) != null) {\n                // find next empty square\n                nextCol++;\n                if (nextCol == cols) {\n                    nextCol = 0;\n                    nextRow++;\n                    if (// We've gone beyond the end of the board!\n                    nextRow == row)\n                        throw new IllegalStateException(\""Internal Error -- moved beyond end of board!\"");\n                }\n            }\n            // and try to complete the solution\n            play(nextRow, nextCol);\n            if (aborted)\n                return;\n            // backtrack\n            removePiece(p, row, col);\n            numused--;\n            used[pieces[p][0]] = false;\n        }\n    }\n}\n                                         // recursive procedure that tries to solve the puzzle\n\n                                         // parameter \""square\"" is the number of the next empty\n\n                                         // to be filled.  This is only complicated because all\n\n"",""rating"":1},""code"":""//takes a person and returns their tax as below\nDouble tax(Person p)\n{\n  if(p.getSalary() < 10000)\n  return p.getSalary()*.02;\n    else\n      return p.getSalary()*.02;\n  \n if(p.getSalary() < 10000){\n   return p.getProfit()*.10;\n }     \n}""}"
462,2.0,1.0,1.0,1.0,2017-03-24 21:46:50.332876,29,322,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""public String toString() {\n    return Arrays.toString(queens);\n}\n"",""rating"":1},""code"":""public double array(double a, double b, double c)\n{\n  double[] list = {a, b, c};\n  double difference = list[0] - list[2];\n}""}"
463,2.0,1.5,1.0,3.0,2017-03-24 21:46:51.175502,23,,"int method(){
  
}
  
"
464,2.0,1.5,1.0,3.0,2017-03-24 21:46:52.988438,23,,"int method(){
  
}
  
"
465,2.0,1.0,1.0,1.0,2017-03-24 21:46:54.923859,29,323,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""/** Set to list to an ArrayList of Strings */\npublic void setToList(ArrayList<String> to) {\n    toList = to;\n}\n"",""rating"":2},""code"":""public double array(double a, double b, double c)\n{\n  double[] list = {a, b, c};\n  double difference = list[0] - list[2];\n}""}"
466,2.0,1.0,1.0,1.0,2017-03-24 21:46:57.745670,29,324,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""/**\n     * Computes the value of this expression, when the variable x\n     * has a specified value.  If the expression is undefined\n     * for the specified value of x, then Double.NaN is returned.\n     * @param x the value to be used for the variable x in the expression\n     * @return the computed value of the expression\n     */\npublic double value(double x) {\n    return eval(x);\n}\n"",""rating"":2},""code"":""public double array(double a, double b, double c)\n{\n  double[] list = {a, b, c};\n  double difference = list[0] - list[2];\n}""}"
467,1.0,1.0,1.0,4.5,2017-03-24 21:47:00.770744,16,,"void biggestmethod(){
  // find difference between values
}"
468,1.0,1.0,1.0,2.5,2017-03-24 21:47:04.060778,59,,"Array.method (){
  //
Array elements
}"
469,1.5,1.5,1.0,1.0,2017-03-24 21:47:04.192547,44,,"void tax(){
	//
      
}



  
  "
470,2.0,1.5,1.0,3.0,2017-03-24 21:47:05.025144,23,325,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public int iMethod() {\n    return 5;\n}\n"",""rating"":1},""code"":""int method(){\n  \n}\n  \n""}"
471,1.0,1.0,1.0,1.0,2017-03-24 21:47:05.444095,16,,"void biggestmethod(){
  // find difference between values
}"
472,3.0,1.0,3.0,1.0,2017-03-24 21:47:08.842129,8,,"//takes a person and returns their tax as below
Double tax(Person p)
{
  if(p.getSalary() < 10000)
  return p.getSalary()*.02;
    else
      return p.getSalary()*.02;
  
 if(p.getSalary() < 10000){
   return p.getProfit()*.10;
 }     
}"
473,2.0,1.5,1.0,3.0,2017-03-24 21:47:10.511695,23,,"int method(){
  
}
  
"
474,2.0,1.5,1.0,2.0,2017-03-24 21:47:11.543178,23,,"int method(){
  
}
  
"
475,2.5,3.0,5.0,3.5,2017-03-24 21:47:12.774032,11,,//difference between elements of array
476,2.0,4.5,1.0,1.0,2017-03-24 21:47:15.169663,29,,"public double array(double a, double b, double c)
{
  double[] list = {a, b, c};
  double difference = list[0] - list[2];
  return difference;
}"
477,2.0,1.5,1.0,1.5,2017-03-24 21:47:15.556302,23,,"int method(){
  
}
  
"
478,1.0,1.0,1.0,5.0,2017-03-24 21:47:16.263356,60,,"//FIND TAX BASED ON A PERSONS STATUS IN A BUSINESS
void personalTax(){
  
}"
479,1.5,4.0,1.0,1.0,2017-03-24 21:47:17.050803,44,,"void tax(){
	//
      
}



  
  "
480,2.0,2.5,1.0,1.5,2017-03-24 21:47:17.060741,23,,"int method(){
  
}
  
"
481,1.0,1.0,1.0,5.0,2017-03-24 21:47:20.274358,60,,"//FIND TAX BASED ON A PERSONS STATUS IN A BUSINESS
void personalTax(){
  
}"
482,1.0,1.0,1.0,5.0,2017-03-24 21:47:20.943107,60,,"//FIND TAX BASED ON A PERSONS STATUS IN A BUSINESS
void personalTax(){
  
}"
483,1.0,1.0,1.0,1.0,2017-03-24 21:47:23.115350,16,326,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""public Object[] getValues() {\n    return values;\n}\n"",""rating"":1},""code"":""void biggestmethod(){\n  // find difference between values\n}""}"
484,1.0,1.0,1.0,5.0,2017-03-24 21:47:23.285029,60,,"//FIND TAX BASED ON A PERSONS STATUS IN A BUSINESS
void personalTax(){
  
}"
485,1.0,3.5,1.0,1.0,2017-03-24 21:47:25.842016,15,,"if(x=0){
  //some comments 
}"
486,1.0,3.5,1.0,1.0,2017-03-24 21:47:26.012798,15,,"if(x=0){
  //some comments 
}"
487,2.0,4.5,1.0,1.0,2017-03-24 21:47:26.061277,29,327,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""/**\n      Computes the sum of the scores\n      @return the total score\n   */\npublic double sum() {\n    double total = 0;\n    for (double score : scores) {\n        total = total + score;\n    }\n    return total;\n}\n"",""rating"":1},""code"":""public double array(double a, double b, double c)\n{\n  double[] list = {a, b, c};\n  double difference = list[0] - list[2];\n  return difference;\n}""}"
488,1.0,1.0,1.0,5.0,2017-03-24 21:47:27.621826,60,,"//FIND TAX BASED ON A PERSONS STATUS IN A BUSINESS
void personalTax(){
  
}"
489,2.0,4.5,1.0,1.0,2017-03-24 21:47:28.055003,29,328,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""/**\n      Gets the size of this array list.\n      @return the size\n   */\npublic int size() {\n    return currentSize;\n}\n"",""rating"":1},""code"":""public double array(double a, double b, double c)\n{\n  double[] list = {a, b, c};\n  double difference = list[0] - list[2];\n  return difference;\n}""}"
490,4.0,4.0,1.0,1.0,2017-03-24 21:47:29.111099,44,,"void tax(){
	//
      
}



  
  "
491,3.0,4.0,1.0,1.0,2017-03-24 21:47:30.802412,44,,"void tax(){
	//
      
}



  
  "
492,2.0,4.5,1.0,1.0,2017-03-24 21:47:31.862350,29,329,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""/**\n      Computes the sum of the scores\n      @return the total score\n   */\npublic double sum() {\n    double total = 0;\n    for (double score : scores) {\n        total = total + score;\n    }\n    return total;\n}\n"",""rating"":1},""code"":""public double array(double a, double b, double c)\n{\n  double[] list = {a, b, c};\n  double difference = list[0] - list[2];\n  return difference;\n}""}"
493,2.0,4.5,1.0,1.0,2017-03-24 21:47:40.681219,29,330,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""/**\n      Gets the surface area of this pyramid.\n      @return the surface area, not including the base\n   */\npublic double getSurfaceArea() {\n    double sideLength = Math.sqrt(height * height + baseLength * baseLength / 4);\n    return 2 * baseLength * sideLength;\n}\n"",""rating"":1},""code"":""public double array(double a, double b, double c)\n{\n  double[] list = {a, b, c};\n  double difference = list[0] - list[2];\n  return difference;\n}""}"
494,2.0,4.5,1.0,1.0,2017-03-24 21:47:41.874569,29,331,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""/**\n      Gets the size of this array list.\n      @return the size\n   */\npublic int size() {\n    return currentSize;\n}\n"",""rating"":1},""code"":""public double array(double a, double b, double c)\n{\n  double[] list = {a, b, c};\n  double difference = list[0] - list[2];\n  return difference;\n}""}"
495,1.0,1.0,1.0,2.5,2017-03-24 21:47:42.743759,46,332,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""/**\n         * Return the largest item that has been entered.\n         * The return value will be -infinity if no numbers have been entered. \n         */\npublic double getMax() {\n    return max;\n}\n"",""rating"":2},""code"":""void largest(int array[])\n{\n  \t\n}""}"
496,3.0,1.0,3.0,1.0,2017-03-24 21:47:43.766260,8,333,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""boolean putPiece(int p, int row, int col) {\n    // try to place a piece on the board, return true if it fits\n    if (board.getColor(row, col) != null)\n        return false;\n    for (int i = 1; i < 8; i += 2) {\n        if (row + pieces[p][i] < 0 || row + pieces[p][i] >= rows || col + pieces[p][i + 1] < 0 || col + pieces[p][i + 1] >= cols)\n            return false;\n        else if (// one of the squares needed is already occupied\n        board.getColor(row + pieces[p][i], col + pieces[p][i + 1]) != null)\n            return false;\n    }\n    board.setColor(row, col, pieceColor[pieces[p][0]]);\n    for (int i = 1; i < 8; i += 2) board.setColor(row + pieces[p][i], col + pieces[p][i + 1], pieceColor[pieces[p][0]]);\n    return true;\n}\n"",""rating"":2},""code"":""//takes a person and returns their tax as below\nDouble tax(Person p)\n{\n  if(p.getSalary() < 10000)\n  return p.getSalary()*.02;\n    else\n      return p.getSalary()*.02;\n  \n if(p.getSalary() < 10000){\n   return p.getProfit()*.10;\n }     \n}""}"
497,1.5,1.0,1.0,1.0,2017-03-24 21:47:46.588346,21,,"int[] Size = new int[7];

public int Array(int[] Num)
{
  Num = Size;
  for(int x = 0; x < Num.size(); x++)
  {
    int Count = Num[0]-Num[7];
    
    return Count;
  }
}"
498,1.0,1.0,1.0,1.0,2017-03-24 21:47:48.094594,16,334,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Finds a value in an array, using the linear search \n      algorithm.\n      @param a the array to search\n      @param value the value to find\n      @return the index at which the value occurs, or -1\n      if it does not occur in the array\n   */\npublic static int search(int[] a, int value) {\n    for (int i = 0; i < a.length; i++) {\n        if (a[i] == value) {\n            return i;\n        }\n    }\n    return -1;\n}\n"",""rating"":1},""code"":""void biggestmethod(){\n  // find difference between values\n}""}"
499,1.0,2.5,1.0,1.0,2017-03-24 21:47:48.613671,34,,"public void Diff()
{int[] array;
 //compute difference
}"
500,1.5,1.0,1.0,1.0,2017-03-24 21:47:49.080175,21,,"int[] Size = new int[7];

public int Array(int[] Num)
{
  Num = Size;
  for(int x = 0; x < Num.size(); x++)
  {
    int Count = Num[0]-Num[7];
    
    return Count;
  }
}"
501,3.0,4.0,1.0,1.0,2017-03-24 21:47:50.463050,44,335,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""public static void main(String[] args) {\n    String input = JOptionPane.showInputDialog(\""Enter price:\"");\n    double price = Double.parseDouble(input);\n    final double TAX_RATE = 8.5;\n    price = price * (1 + TAX_RATE / 100);\n    JOptionPane.showMessageDialog(null, \""Price after tax: \"" + price);\n}\n"",""rating"":2},""code"":""void tax(){\n\t//\n      \n}\n\n\n\n  \n  ""}"
502,1.0,1.0,1.0,2.5,2017-03-24 21:47:52.046978,46,336,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""void doFile(Reader is) throws IOException {\n    int c;\n    while ((c = is.read()) != -1) {\n        System.out.print((char) c);\n    }\n}\n"",""rating"":1},""code"":""void largest(int array[])\n{\n  \t\n}""}"
503,3.0,4.0,1.0,1.0,2017-03-24 21:47:55.177204,44,337,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String[] args) {\n    double price = 9.95;\n    double taxRate = 8.25;\n    double tax = Financial.percentOf(price, taxRate);\n    System.out.printf(\""Tax: %.2f\\n\"", tax);\n}\n"",""rating"":1},""code"":""void tax(){\n\t//\n      \n}\n\n\n\n  \n  ""}"
504,1.0,1.0,1.0,1.0,2017-03-24 21:47:56.140491,15,,SUM
505,2.0,2.5,1.0,1.5,2017-03-24 21:47:59.657264,23,338,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""int getX() {\n    return x;\n}\n"",""rating"":3},""code"":""int method(){\n  \n}\n  \n""}"
506,1.0,1.0,1.0,3.5,2017-03-24 21:48:01.484060,61,,"int random(Person p){
  if(getSalary() < 10000.0){
    return getSalary()*.02;
  } else {
    return getSalary()*.05;
  }
  
  //getProfit*.1 returns 10% of profit
  //0 tax for veterans
  
  /* if(none of above){
  print message
  }*/
}"
507,1.0,3.0,1.0,3.5,2017-03-24 21:48:03.162798,61,,"int random(Person p){
  if(getSalary() < 10000.0){
    return getSalary()*.02;
  } else {
    return getSalary()*.05;
  }
  
  //getProfit*.1 returns 10% of profit
  //0 tax for veterans
  
  /* if(none of above){
  print message
  }*/
}"
508,3.0,4.0,1.0,1.0,2017-03-24 21:48:03.751072,44,339,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":3},""code"":""void tax(){\n\t//\n      \n}\n\n\n\n  \n  ""}"
509,3.0,1.0,3.0,1.0,2017-03-24 21:48:03.836459,8,340,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":3},""code"":""//takes a person and returns their tax as below\nDouble tax(Person p)\n{\n  if(p.getSalary() < 10000)\n  return p.getSalary()*.02;\n    else\n      return p.getSalary()*.02;\n  \n if(p.getSalary() < 10000){\n   return p.getProfit()*.10;\n }     \n}""}"
510,1.0,3.5,1.0,3.5,2017-03-24 21:48:04.102680,61,,"int random(Person p){
  if(getSalary() < 10000.0){
    return getSalary()*.02;
  } else {
    return getSalary()*.05;
  }
  
  //getProfit*.1 returns 10% of profit
  //0 tax for veterans
  
  /* if(none of above){
  print message
  }*/
}"
511,3.0,4.0,1.0,1.0,2017-03-24 21:48:04.701376,44,341,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""public Product(float price) {\n    this.price = price;\n    tax = (float) (price * 0.20);\n}\n"",""rating"":1},""code"":""void tax(){\n\t//\n      \n}\n\n\n\n  \n  ""}"
512,1.5,1.0,1.0,1.0,2017-03-24 21:48:04.834331,13,,"void somethod() {
  // show
}"
513,1.0,1.0,1.0,1.0,2017-03-24 21:48:07.446169,16,342,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""/** Compare two doubles within a given epsilon */\npublic static boolean equals(double a, double b, double eps) {\n    if (a == b)\n        return true;\n    // If the difference is less than epsilon, treat as equal.\n    return Math.abs(a - b) < eps;\n}\n"",""rating"":1},""code"":""void biggestmethod(){\n  // find difference between values\n}""}"
514,1.5,1.0,1.0,1.0,2017-03-24 21:48:09.608387,13,343,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""/**\n       * This is called by mousePressed() when a player clicks on the\n       * square in the specified row and col.  It has already been checked\n       * that a game is, in fact, in progress.\n       */\nvoid doClickSquare(int row, int col) {\n    if (board[row][col] != EMPTY) {\n        if (currentPlayer == BLACK)\n            message.setText(\""BLACK:  Please click an empty square.\"");\n        else\n            message.setText(\""WHITE:  Please click an empty square.\"");\n        return;\n    }\n    /* Make the move.  Check if the board is full or if the move\n          is a winning move.  If so, the game ends.  If not, then it's\n          the other user's turn. */\n    // Make the move.\n    board[row][col] = currentPlayer;\n    repaint();\n    if (winner(row, col)) {\n        // First, check for a winner.\n        if (currentPlayer == WHITE)\n            gameOver(\""WHITE wins the game!\"");\n        else\n            gameOver(\""BLACK wins the game!\"");\n        return;\n    }\n    // Check if the board is full.\n    boolean emptySpace = false;\n    for (int i = 0; i < 13; i++) for (int j = 0; j < 13; j++) if (board[i][j] == EMPTY)\n        emptySpace = true;\n    if (emptySpace == false) {\n        gameOver(\""The game ends in a draw.\"");\n        return;\n    }\n    if (currentPlayer == BLACK) {\n        currentPlayer = WHITE;\n        message.setText(\""WHITE:  Make your move.\"");\n    } else {\n        currentPlayer = BLACK;\n        message.setText(\""BLACK:  Make your move.\"");\n    }\n}\n          /* Check that the user clicked an empty square.  If not, show an\n          error message and exit. */\n\n          /* Continue the game.  It's the other player's turn. */\n\n"",""rating"":1},""code"":""void somethod() {\n  // show\n}""}"
515,1.0,2.5,1.0,1.0,2017-03-24 21:48:10.106381,34,344,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""public int compare(Object a, Object b) {\n    TimerTask t1 = (TimerTask) a;\n    TimerTask t2 = (TimerTask) b;\n    long diff = t1.nextTime - t2.nextTime;\n    if (diff < 0)\n        return -1;\n    else if (diff > 0)\n        return 1;\n    else\n        return 0;\n}\n"",""rating"":1},""code"":""public void Diff()\n{int[] array;\n //compute difference\n}""}"
516,1.0,2.5,1.0,1.0,2017-03-24 21:48:11.486670,34,345,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""private void computeTimeAtSelectedZone() {\n    // reset calendar to local timezone\n    calendar = new GregorianCalendar();\n    long currentTime = calendar.getTimeInMillis();\n    // get time offset of local timezone wrt GMT\n    int localOffset = calendar.getTimeZone().getOffset(Calendar.ZONE_OFFSET);\n    // get time offset of remote timezone wrt GMT\n    calendar.setTimeZone(TimeZone.getTimeZone(selectedZone));\n    int remoteOffset = calendar.getTimeZone().getOffset(Calendar.ZONE_OFFSET);\n    // difference in two timezones\n    int totalOffset = -remoteOffset + localOffset;\n    // add offset to current local time\n    currentTime -= totalOffset;\n    // set time in remote zone\n    calendar.setTimeInMillis(currentTime);\n}\n"",""rating"":1},""code"":""public void Diff()\n{int[] array;\n //compute difference\n}""}"
517,1.5,1.0,1.0,1.0,2017-03-24 21:48:13.070839,13,346,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""/**\n       * This is called by mousePressed() when a player clicks on the\n       * square in the specified row and col.  It has already been checked\n       * that a game is, in fact, in progress.\n       */\nvoid doClickSquare(int row, int col) {\n    if (board[row][col] != EMPTY) {\n        if (currentPlayer == BLACK)\n            message.setText(\""BLACK:  Please click an empty square.\"");\n        else\n            message.setText(\""WHITE:  Please click an empty square.\"");\n        return;\n    }\n    /* Make the move.  Check if the board is full or if the move\n          is a winning move.  If so, the game ends.  If not, then it's\n          the other user's turn. */\n    // Make the move.\n    board[row][col] = currentPlayer;\n    repaint();\n    if (winner(row, col)) {\n        // First, check for a winner.\n        if (currentPlayer == WHITE)\n            gameOver(\""WHITE wins the game!\"");\n        else\n            gameOver(\""BLACK wins the game!\"");\n        return;\n    }\n    // Check if the board is full.\n    boolean emptySpace = false;\n    for (int i = 0; i < 13; i++) for (int j = 0; j < 13; j++) if (board[i][j] == EMPTY)\n        emptySpace = true;\n    if (emptySpace == false) {\n        gameOver(\""The game ends in a draw.\"");\n        return;\n    }\n    if (currentPlayer == BLACK) {\n        currentPlayer = WHITE;\n        message.setText(\""WHITE:  Make your move.\"");\n    } else {\n        currentPlayer = BLACK;\n        message.setText(\""BLACK:  Make your move.\"");\n    }\n}\n          /* Check that the user clicked an empty square.  If not, show an\n          error message and exit. */\n\n          /* Continue the game.  It's the other player's turn. */\n\n"",""rating"":1},""code"":""void somethod() {\n  // show\n}""}"
518,1.5,1.0,1.0,1.0,2017-03-24 21:48:18.584168,13,347,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""/**\n       * This is called by mousePressed() when a player clicks on the\n       * square in the specified row and col.  It has already been checked\n       * that a game is, in fact, in progress.\n       */\nvoid doClickSquare(int row, int col) {\n    if (board[row][col] != EMPTY) {\n        if (currentPlayer == BLACK)\n            message.setText(\""BLACK:  Please click an empty square.\"");\n        else\n            message.setText(\""WHITE:  Please click an empty square.\"");\n        return;\n    }\n    /* Make the move.  Check if the board is full or if the move\n          is a winning move.  If so, the game ends.  If not, then it's\n          the other user's turn. */\n    // Make the move.\n    board[row][col] = currentPlayer;\n    repaint();\n    if (winner(row, col)) {\n        // First, check for a winner.\n        if (currentPlayer == WHITE)\n            gameOver(\""WHITE wins the game!\"");\n        else\n            gameOver(\""BLACK wins the game!\"");\n        return;\n    }\n    // Check if the board is full.\n    boolean emptySpace = false;\n    for (int i = 0; i < 13; i++) for (int j = 0; j < 13; j++) if (board[i][j] == EMPTY)\n        emptySpace = true;\n    if (emptySpace == false) {\n        gameOver(\""The game ends in a draw.\"");\n        return;\n    }\n    if (currentPlayer == BLACK) {\n        currentPlayer = WHITE;\n        message.setText(\""WHITE:  Make your move.\"");\n    } else {\n        currentPlayer = BLACK;\n        message.setText(\""BLACK:  Make your move.\"");\n    }\n}\n          /* Check that the user clicked an empty square.  If not, show an\n          error message and exit. */\n\n          /* Continue the game.  It's the other player's turn. */\n\n"",""rating"":1},""code"":""void somethod() {\n  // show\n}""}"
519,1.0,1.0,1.0,5.0,2017-03-24 21:48:20.364021,60,348,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""public Product(float price) {\n    this.price = price;\n    tax = (float) (price * 0.20);\n}\n"",""rating"":2},""code"":""//FIND TAX BASED ON A PERSONS STATUS IN A BUSINESS\nvoid personalTax(){\n  \n}""}"
520,2.0,2.5,1.0,1.5,2017-03-24 21:48:21.896597,23,349,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""public static void go() {\n    int x = 3;\n    int y = 2;\n    System.out.println(\""In method go. x: \"" + x + \"" y: \"" + y);\n    falseSwap(x, y);\n    System.out.println(\""in method go. x: \"" + x + \"" y: \"" + y);\n    moreParameters(x, y);\n    System.out.println(\""in method go. x: \"" + x + \"" y: \"" + y);\n}\n"",""rating"":1},""code"":""int method(){\n  \n}\n  \n""}"
521,1.0,2.5,1.0,1.0,2017-03-24 21:48:22.968443,34,350,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""public static void main(String[] args) {\n    int[] a = ArrayUtil.randomIntArray(20, 100);\n    System.out.println(Arrays.toString(a));\n    MergeSorter.sort(a);\n    System.out.println(Arrays.toString(a));\n}\n"",""rating"":2},""code"":""public void Diff()\n{int[] array;\n //compute difference\n}""}"
522,1.5,1.0,1.0,1.0,2017-03-24 21:48:24.788514,13,351,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""/** Print out the scribble */\nvoid print() {\n    // Obtain a PrintJob and a Graphics object to use with it\n    Toolkit toolkit = this.getToolkit();\n    PrintJob job = toolkit.getPrintJob(this, \""PrintScribble\"", printprefs);\n    // If the user clicked Cancel in the print dialog\n    if (job == null)\n        return;\n    Graphics g = job.getGraphics();\n    // Give the output a larger top and left margin.  Otherwise it will\n    // be scrunched up in the upper-left corner of the page.\n    g.translate(100, 100);\n    // Draw a border around the output area.\n    Dimension size = this.getSize();\n    g.drawRect(-1, -1, size.width + 1, size.height + 1);\n    // Set a clipping region so our scribbles don't go outside the border\n    // On-screen this happens automatically, but not on paper.\n    g.setClip(0, 0, size.width, size.height);\n    // Print this component and all components it contains\n    // Use print() if you don't want the button to show\n    this.printAll(g);\n    // Finish up.\n    // End the page\n    g.dispose();\n    // End the job\n    job.end();\n}\n"",""rating"":1},""code"":""void somethod() {\n  // show\n}""}"
523,1.0,1.0,1.0,5.0,2017-03-24 21:48:25.005697,16,,"void biggestmethod(){
  // find difference between values
}"
524,1.5,1.0,1.0,1.0,2017-03-24 21:48:27.249879,13,352,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""/**\n       * This is called by mousePressed() when a player clicks on the\n       * square in the specified row and col.  It has already been checked\n       * that a game is, in fact, in progress.\n       */\nvoid doClickSquare(int row, int col) {\n    if (board[row][col] != EMPTY) {\n        if (currentPlayer == BLACK)\n            message.setText(\""BLACK:  Please click an empty square.\"");\n        else\n            message.setText(\""WHITE:  Please click an empty square.\"");\n        return;\n    }\n    /* Make the move.  Check if the board is full or if the move\n          is a winning move.  If so, the game ends.  If not, then it's\n          the other user's turn. */\n    // Make the move.\n    board[row][col] = currentPlayer;\n    repaint();\n    if (winner(row, col)) {\n        // First, check for a winner.\n        if (currentPlayer == WHITE)\n            gameOver(\""WHITE wins the game!\"");\n        else\n            gameOver(\""BLACK wins the game!\"");\n        return;\n    }\n    // Check if the board is full.\n    boolean emptySpace = false;\n    for (int i = 0; i < 13; i++) for (int j = 0; j < 13; j++) if (board[i][j] == EMPTY)\n        emptySpace = true;\n    if (emptySpace == false) {\n        gameOver(\""The game ends in a draw.\"");\n        return;\n    }\n    if (currentPlayer == BLACK) {\n        currentPlayer = WHITE;\n        message.setText(\""WHITE:  Make your move.\"");\n    } else {\n        currentPlayer = BLACK;\n        message.setText(\""BLACK:  Make your move.\"");\n    }\n}\n          /* Check that the user clicked an empty square.  If not, show an\n          error message and exit. */\n\n          /* Continue the game.  It's the other player's turn. */\n\n"",""rating"":1},""code"":""void somethod() {\n  // show\n}""}"
525,1.0,3.5,1.0,3.5,2017-03-24 21:48:29.659298,61,353,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""int getSize() {\n    // Return the number of Locations on the stack. \n    return size;\n}\n"",""rating"":1},""code"":""int random(Person p){\n  if(getSalary() < 10000.0){\n    return getSalary()*.02;\n  } else {\n    return getSalary()*.05;\n  }\n  \n  //getProfit*.1 returns 10% of profit\n  //0 tax for veterans\n  \n  /* if(none of above){\n  print message\n  }*/\n}""}"
526,1.5,1.0,1.0,1.0,2017-03-24 21:48:30.335397,21,354,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""/**\n     * Remove an element from the list based on position.\n     * Elements with a position greater than pos\n     * are shifted to the left. (One subtracted from their\n     * position.)\n     * @param pos 0 <= pos < size()\n     * @return The element that is removed.\n     */\npublic int remove(int pos) {\n    assert 0 <= pos && pos < size() : \""Failed precondition remove. \"" + \""pos it out of bounds. Value of pos: \"" + pos;\n    int removedValue = iValues[pos];\n    for (int i = pos; i < iSize - 1; i++) iValues[i] = iValues[i + 1];\n    iSize--;\n    return removedValue;\n}\n"",""rating"":2},""code"":""int[] Size = new int[7];\n\npublic int Array(int[] Num)\n{\n  Num = Size;\n  for(int x = 0; x < Num.size(); x++)\n  {\n    int Count = Num[0]-Num[7];\n    \n    return Count;\n  }\n}""}"
527,1.0,1.0,1.0,5.0,2017-03-24 21:48:30.702489,60,355,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    System.out.print(\""Please enter your income: \"");\n    double income = in.nextDouble();\n    System.out.print(\""Are you married? (Y/N) \"");\n    String input = in.next();\n    int status;\n    if (input.equals(\""Y\"")) {\n        status = TaxReturn.MARRIED;\n    } else {\n        status = TaxReturn.SINGLE;\n    }\n    TaxReturn aTaxReturn = new TaxReturn(income, status);\n    System.out.println(\""Tax: \"" + aTaxReturn.getTax());\n}\n"",""rating"":3},""code"":""//FIND TAX BASED ON A PERSONS STATUS IN A BUSINESS\nvoid personalTax(){\n  \n}""}"
528,1.5,1.0,1.0,1.0,2017-03-24 21:48:31.077945,13,356,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""/**\n     * Roll the dice by randomizing their values.  Tell the\n     * system to repaint the panel, to show the new values.\n     */\nvoid roll() {\n    die1 = (int) (Math.random() * 6) + 1;\n    die2 = (int) (Math.random() * 6) + 1;\n    repaint();\n}\n"",""rating"":1},""code"":""void somethod() {\n  // show\n}""}"
529,1.0,3.5,1.0,3.5,2017-03-24 21:48:32.045396,61,357,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""int powerUse() {\n    if (\""Retention\"".equals(botType)) {\n        return 2;\n    } else {\n        return 4;\n    }\n}\n"",""rating"":1},""code"":""int random(Person p){\n  if(getSalary() < 10000.0){\n    return getSalary()*.02;\n  } else {\n    return getSalary()*.05;\n  }\n  \n  //getProfit*.1 returns 10% of profit\n  //0 tax for veterans\n  \n  /* if(none of above){\n  print message\n  }*/\n}""}"
530,1.5,1.0,1.0,1.0,2017-03-24 21:48:32.693016,13,358,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""void draw(Graphics g) {\n    // Draw the bomb.\n    if (!isFalling) {\n        // If not falling, set centerX and centerY\n        // to show the bomb on the bottom of the boat.\n        centerX = boat.centerX;\n        centerY = boat.centerY + 23;\n    }\n    g.setColor(Color.RED);\n    g.fillOval(centerX - 8, centerY - 8, 16, 16);\n}\n"",""rating"":1},""code"":""void somethod() {\n  // show\n}""}"
531,1.0,3.5,1.0,3.5,2017-03-24 21:48:34.224542,61,359,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""default String name() {\n    return \""(NONE)\"";\n}\n"",""rating"":3},""code"":""int random(Person p){\n  if(getSalary() < 10000.0){\n    return getSalary()*.02;\n  } else {\n    return getSalary()*.05;\n  }\n  \n  //getProfit*.1 returns 10% of profit\n  //0 tax for veterans\n  \n  /* if(none of above){\n  print message\n  }*/\n}""}"
532,1.0,2.5,1.0,1.0,2017-03-24 21:48:34.473267,34,360,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""/**\n      Constructs the component.\n   */\npublic SelectionSortComponent() {\n    int[] values = ArrayUtil.randomIntArray(30, 300);\n    sorter = new SelectionSorter(values, this);\n}\n"",""rating"":2},""code"":""public void Diff()\n{int[] array;\n //compute difference\n}""}"
533,1.0,1.0,1.0,1.0,2017-03-24 21:48:34.793487,39,361,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String[] args) {\n    String input = JOptionPane.showInputDialog(\""Enter price:\"");\n    double price = Double.parseDouble(input);\n    final double TAX_RATE = 8.5;\n    price = price * (1 + TAX_RATE / 100);\n    JOptionPane.showMessageDialog(null, \""Price after tax: \"" + price);\n}\n"",""rating"":3},""code"":""public int salaryTax(){\n  \n}""}"
534,1.5,1.0,1.0,1.0,2017-03-24 21:48:35.083346,13,362,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static void showList(int[] list) {\n    for (int i = 0; i < list.length; i++) System.out.print(list[i] + \"" \"");\n    System.out.println();\n}\n"",""rating"":1},""code"":""void somethod() {\n  // show\n}""}"
535,1.5,1.0,1.0,1.0,2017-03-24 21:48:36.443993,13,363,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""void addShape(Shape shape) {\n    // Add the shape to the canvas, and set its size/position and color.\n    // The shape is added at the top-left corner, with size 80-by-50.\n    // Then redraw the canvas to show the newly added shape.\n    shape.setColor(currentColor);\n    shape.reshape(3, 3, 80, 50);\n    shapes[shapeCount] = shape;\n    shapeCount++;\n    repaint();\n}\n"",""rating"":1},""code"":""void somethod() {\n  // show\n}""}"
536,3.0,1.0,1.0,1.0,2017-03-24 21:48:36.855742,12,,"var array_name - [3,1,8];"
537,3.0,4.0,1.0,1.0,2017-03-24 21:48:37.644655,44,364,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String[] args) {\n    Employee[] staff = new Employee[3];\n    staff[0] = new HourlyEmployee(\""Morgan, Harry\"", 30);\n    staff[1] = new SalariedEmployee(\""Lin, Sally\"", 52000);\n    staff[2] = new Manager(\""Smith, Mary\"", 104000, 50);\n    Scanner in = new Scanner(System.in);\n    for (Employee e : staff) {\n        System.out.print(\""Hours worked by \"" + e.getName() + \"": \"");\n        int hours = in.nextInt();\n        System.out.println(\""Salary: \"" + e.weeklyPay(hours));\n    }\n}\n"",""rating"":3},""code"":""void salary(){\n\t//\n      \n}\n\n\n\n  \n  ""}"
538,1.5,1.0,1.0,1.0,2017-03-24 21:48:38.116018,13,365,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""/** This shows everything */\npublic void show() {\n    frame.setVisible(true);\n}\n"",""rating"":1},""code"":""void somethod() {\n  // show\n}""}"
539,4.5,1.0,1.0,1.0,2017-03-24 21:48:38.344384,12,,"var array_name - [3,1,8];"
540,1.0,3.5,1.0,3.5,2017-03-24 21:48:39.011766,61,366,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""public int compareTo(Person other) {\n    return name.compareTo(other.name);\n}\n"",""rating"":2},""code"":""int random(Person p){\n  if(getSalary() < 10000.0){\n    return getSalary()*.02;\n  } else {\n    return getSalary()*.05;\n  }\n  \n  //getProfit*.1 returns 10% of profit\n  //0 tax for veterans\n  \n  /* if(none of above){\n  print message\n  }*/\n}""}"
541,4.5,4.0,1.0,1.0,2017-03-24 21:48:39.530124,12,,"var array_name - [3,1,8];"
542,1.5,1.0,1.0,1.0,2017-03-24 21:48:39.739970,13,367,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""public void showStatus(String message) {\n    System.out.println(message);\n}\n"",""rating"":1},""code"":""void somethod() {\n  // show\n}""}"
543,4.5,4.0,3.5,1.0,2017-03-24 21:48:40.159497,12,,"var array_name - [3,1,8];"
544,1.0,1.0,1.0,2.5,2017-03-24 21:48:40.528522,46,368,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""public void paintComponent(Graphics graph) {\n    int increment = samples.length / getWidth();\n    final int LARGEST = 32767;\n    int x = 0;\n    for (int i = 0; i < samples.length; i = i + increment) {\n        int value = samples[i];\n        value = Math.min(LARGEST, value);\n        value = Math.max(-LARGEST, value);\n        int height = getHeight() / 2;\n        int y = height - samples[i] * height / LARGEST;\n        graph.drawLine(x, y, x, height);\n        x++;\n    }\n}\n"",""rating"":3},""code"":""void largest(int array[])\n{\n  \tint largest;\n  \t\n  \treturn largest;\n}""}"
545,4.5,4.0,3.5,3.5,2017-03-24 21:48:40.752386,12,,"var array_name - [3,1,8];"
546,1.5,1.0,1.0,1.0,2017-03-24 21:48:41.475872,13,369,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""/** \""main program\"" method - construct and show */\npublic static void main(String[] av) {\n    testTwoCols();\n    testFiveCols();\n}\n"",""rating"":1},""code"":""void somethod() {\n  // show\n}""}"
547,1.5,1.0,1.0,1.0,2017-03-24 21:48:43.170304,13,370,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""public void show(Picture s) {\n    if (!pictures.contains(s)) {\n        pictures.add(s);\n    }\n    repaint();\n}\n"",""rating"":1},""code"":""void somethod() {\n  // show\n}""}"
548,2.0,2.5,1.0,1.5,2017-03-24 21:48:46.395352,23,371,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""/**\n         * Return the contents of the square in the specified row and column.\n         */\nint pieceAt(int row, int col) {\n    return board[row][col];\n}\n"",""rating"":1},""code"":""int method(){\n  \n}\n  \n""}"
549,1.0,1.0,1.0,1.0,2017-03-24 21:48:46.901168,18,372,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Constructs a salaried employee with a given name and annual salary.\n      @param name the name of this employee\n      @param salary the annual salary\n    */\npublic SalariedEmployee(String name, double salary) {\n    setName(name);\n    annualSalary = salary;\n}\n"",""rating"":3},""code"":""class Person{\n  String name;\n  int age;\n}\nclass Employee extends Person{\n  double getSalary();\n}\nclass BuisnessOwner extends Person {\n  double getProfit();\n}\nclass Veteran extends Person{\n  String veteran_id;\n}""}"
550,1.0,1.0,1.0,1.0,2017-03-24 21:48:48.132282,21,,"int[] Size = new int[7];

public int Array(int[] Num)
{
  Num = Size;
  for(int x = 0; x < Num.size(); x++)
  {
    int Count = Num[0]-Num[7];
    
    return Count;
  }
}"
551,1.0,1.5,1.0,1.0,2017-03-24 21:48:49.989404,21,,"int[] Size = new int[7];

public int Array(int[] Num)
{
  Num = Size;
  for(int x = 0; x < Num.size(); x++)
  {
    int Count = Num[0]-Num[7];
    
    return Count;
  }
}"
552,1.0,3.5,1.0,3.5,2017-03-24 21:48:51.711190,61,373,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":3},""code"":""int random(Person p){\n  if(getSalary() < 10000.0){\n    return getSalary()*.02;\n  } else {\n    return getSalary()*.05;\n  }\n  \n  //getProfit*.1 returns 10% of profit\n  //0 tax for veterans\n  \n  /* if(none of above){\n  print message\n  }*/\n}""}"
553,1.0,1.0,1.0,1.0,2017-03-24 21:48:51.773982,54,374,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""//slow fib\n//pre: n >= 1\npublic static int fib(int n) {\n    int result = 0;\n    if (n == 1 || n == 2)\n        result = 1;\n    else\n        result = fib(n - 1) + fib(n - 2);\n    return result;\n}\n"",""rating"":1},""code"":""\npublic static int tax()\n  {\n  //calculate tax}""}"
554,1.0,1.0,1.0,5.0,2017-03-24 21:48:51.931293,16,375,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Finds a value in an array, using the linear search \n      algorithm.\n      @param a the array to search\n      @param value the value to find\n      @return the index at which the value occurs, or -1\n      if it does not occur in the array\n   */\npublic static int search(int[] a, int value) {\n    for (int i = 0; i < a.length; i++) {\n        if (a[i] == value) {\n            return i;\n        }\n    }\n    return -1;\n}\n"",""rating"":1},""code"":""void biggestmethod(){\n  // find difference between values and return largest difference\n}""}"
555,1.0,1.0,1.0,2.5,2017-03-24 21:48:52.348320,46,376,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Computes the largest value of an array.\n      @param a the array\n      @return the largest value in a\n   */\npublic static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":5},""code"":""void largest(int array[])\n{\n  \tint largest;\n  \t\n  \treturn largest;\n}""}"
556,3.0,4.0,1.0,1.0,2017-03-24 21:48:53.451709,44,377,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""public static void main(String[] args) {\n    double sum = 0;\n    int count = 0;\n    double salary = 0;\n    System.out.print(\""Enter salaries, -1 to finish: \"");\n    Scanner in = new Scanner(System.in);\n    while (salary != -1) {\n        salary = in.nextDouble();\n        if (salary != -1) {\n            sum = sum + salary;\n            count++;\n        }\n    }\n    if (count > 0) {\n        double average = sum / count;\n        System.out.println(\""Average salary: \"" + average);\n       // Process data until the sentinel is entered \n\n    } else {\n        System.out.println(\""No data\"");\n    }\n}\n       // Compute and print the average\n\n"",""rating"":2},""code"":""void salary(){\n\t//\n      \n}\n\n\n\n  \n  ""}"
557,1.0,1.0,1.0,1.0,2017-03-24 21:48:54.678599,54,378,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""//slow fib\n//pre: n >= 1\npublic static int fib(int n) {\n    int result = 0;\n    if (n == 1 || n == 2)\n        result = 1;\n    else\n        result = fib(n - 1) + fib(n - 2);\n    return result;\n}\n"",""rating"":0},""code"":""\npublic static int tax()\n  {\n  //calculate tax}""}"
558,1.0,2.5,1.0,1.0,2017-03-24 21:48:57.108388,34,379,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String[] args) {\n    System.out.println(\""This program will compute union, intersection,\"");\n    System.out.println(\""and set difference of sets of integers.\"");\n    System.out.println(\""\"");\n    System.out.println(\""\"");\n    System.out.println(\""Enter set computations (press return to end):\"");\n    while (true) {\n        char ch;\n        System.out.print(\""\\n? \"");\n        TextIO.skipBlanks();\n        if (TextIO.peek() == '\\n') {\n            // Exit the loop and end the program.\n            break;\n        }\n        try {\n            // Reads and processes one line of input.\n            calc();\n        } catch (IllegalArgumentException e) {\n            System.out.println(\""Error in input: \"" + e.getMessage());\n            System.out.print(\""Discarding input: \"");\n        }\n        do {\n            // Copy extra characters on line to output.  If there \n            // was no error, then the only character that is copied\n            // is the end-of-line character.\n            ch = TextIO.getAnyChar();\n            System.out.print(ch);\n        } while (ch != '\\n');\n    }\n}\n                // The input line is empty.  \n\n                // An error was found in the input line.\n\n"",""rating"":2},""code"":""public void Diff()\n{int[] array;\n //compute difference\n}""}"
559,1.0,3.5,1.0,3.5,2017-03-24 21:48:59.130199,61,380,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String[] args) {\n    String input = JOptionPane.showInputDialog(\""Enter price:\"");\n    double price = Double.parseDouble(input);\n    final double TAX_RATE = 8.5;\n    price = price * (1 + TAX_RATE / 100);\n    JOptionPane.showMessageDialog(null, \""Price after tax: \"" + price);\n}\n"",""rating"":2},""code"":""int random(Person p){\n  if(getSalary() < 10000.0){\n    return getSalary()*.02;\n  } else {\n    return getSalary()*.05;\n  }\n  \n  //getProfit*.1 returns 10% of profit\n  //0 tax for veterans\n  \n  /* if(none of above){\n  print message\n  }*/\n}""}"
560,1.0,1.5,1.0,1.5,2017-03-24 21:48:59.285056,21,,"int[] Size = new int[7];

public int Array(int[] Num)
{
  Num = Size;
  for(int x = 0; x < Num.size(); x++)
  {
    int Count = Num[0]-Num[7];
    
    return Count;
  }
}"
561,1.0,2.5,1.0,1.0,2017-03-24 21:49:02.294593,34,381,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public int computeRed(double x, double y) {\n    return 128;\n}\n"",""rating"":1},""code"":""public void Diff()\n{int[] array;\n //compute difference\n}""}"
562,3.0,4.0,1.0,1.0,2017-03-24 21:49:03.173597,44,382,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Constructs a salaried employee with a given name and annual salary.\n      @param name the name of this employee\n      @param salary the annual salary\n    */\npublic SalariedEmployee(String name, double salary) {\n    setName(name);\n    annualSalary = salary;\n}\n"",""rating"":2},""code"":""void salary(){\n\t//\n      \n}\n\n\n\n  \n  ""}"
563,1.0,3.5,1.0,3.5,2017-03-24 21:49:03.278782,61,383,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""int getCount() {\n    return count;\n}\n"",""rating"":2},""code"":""int random(Person p){\n  if(getSalary() < 10000.0){\n    return getSalary()*.02;\n  } else {\n    return getSalary()*.05;\n  }\n  \n  //getProfit*.1 returns 10% of profit\n  //0 tax for veterans\n  \n  /* if(none of above){\n  print message\n  }*/\n}""}"
564,1.0,1.0,1.0,5.0,2017-03-24 21:49:03.516219,60,384,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    System.out.print(\""Please enter your income: \"");\n    double income = in.nextDouble();\n    System.out.print(\""Are you married? (Y/N) \"");\n    String input = in.next();\n    int status;\n    if (input.equals(\""Y\"")) {\n        status = TaxReturn.MARRIED;\n    } else {\n        status = TaxReturn.SINGLE;\n    }\n    TaxReturn aTaxReturn = new TaxReturn(income, status);\n    System.out.println(\""Tax: \"" + aTaxReturn.getTax());\n}\n"",""rating"":3},""code"":""//FIND TAX BASED ON A PERSONS STATUS IN A BUSINESS\nvoid personalTax(){\n  \n}""}"
565,2.0,2.5,1.0,1.5,2017-03-24 21:49:03.718201,23,385,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""int getPrice() {\n    return price;\n}\n"",""rating"":1},""code"":""int method(){\n  \n}\n  \n""}"
566,1.0,1.0,1.0,1.0,2017-03-24 21:49:04.731181,39,386,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""public static void main(String[] args) {\n    double sum = 0;\n    int count = 0;\n    double salary = 0;\n    System.out.print(\""Enter salaries, -1 to finish: \"");\n    Scanner in = new Scanner(System.in);\n    while (salary != -1) {\n        salary = in.nextDouble();\n        if (salary != -1) {\n            sum = sum + salary;\n            count++;\n        }\n    }\n    if (count > 0) {\n        double average = sum / count;\n        System.out.println(\""Average salary: \"" + average);\n       // Process data until the sentinel is entered \n\n    } else {\n        System.out.println(\""No data\"");\n    }\n}\n       // Compute and print the average\n\n"",""rating"":5},""code"":""public int salaryTax(){\n  \n}""}"
567,1.0,3.5,1.0,3.5,2017-03-24 21:49:05.323130,61,387,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""int getSize() {\n    // Return the number of items on the queue.\n    return size;\n}\n"",""rating"":2},""code"":""int random(Person p){\n  if(getSalary() < 10000.0){\n    return getSalary()*.02;\n  } else {\n    return getSalary()*.05;\n  }\n  \n  //getProfit*.1 returns 10% of profit\n  //0 tax for veterans\n  \n  /* if(none of above){\n  print message\n  }*/\n}""}"
568,1.0,1.0,2.5,1.0,2017-03-24 21:49:05.890022,18,,"class Person{
  String name;
  int age;
}
class Employee extends Person{
  double getSalary();
}
class BuisnessOwner extends Person {
  double getProfit();
}
class Veteran extends Person{
  String veteran_id;
}"
569,1.0,1.0,1.0,1.0,2017-03-24 21:49:07.509363,17,388,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""/**\n    * Returns the larger of the two roots of the quadratic equation\n    * A*x*x + B*x + C = 0, provided it has any roots.  If A == 0 or\n    * if the discriminant, B*B - 4*A*C, is negative, then an exception\n    * of type IllegalArgumentException is thrown.\n    */\npublic static double root(double A, double B, double C) throws IllegalArgumentException {\n    if (A == 0) {\n        throw new IllegalArgumentException(\""A can't be zero.\"");\n    } else {\n        double disc = B * B - 4 * A * C;\n        if (disc < 0)\n            throw new IllegalArgumentException(\""Discriminant < zero.\"");\n        return (-B + Math.sqrt(disc)) / (2 * A);\n    }\n}\n"",""rating"":3},""code"":""double taxReturn(double tax1){\n  double salary = 0;\n  if(salary > 2.0){\n    \n  }\n  \n}""}"
570,1.0,2.5,1.0,1.0,2017-03-24 21:49:08.201061,34,389,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""public static void main(String[] args) {\n    int[] a = ArrayUtil.randomIntArray(20, 100);\n    System.out.println(Arrays.toString(a));\n    QuickSorter.sort(a);\n    System.out.println(Arrays.toString(a));\n}\n"",""rating"":1},""code"":""public void Diff()\n{int[] array;\n //compute difference\n}""}"
571,1.0,3.5,1.0,3.5,2017-03-24 21:49:08.235741,61,390,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""public Product(float price) {\n    this.price = price;\n    tax = (float) (price * 0.20);\n}\n"",""rating"":1},""code"":""int random(Person p){\n  if(getSalary() < 10000.0){\n    return getSalary()*.02;\n  } else {\n    return getSalary()*.05;\n  }\n  \n  //getProfit*.1 returns 10% of profit\n  //0 tax for veterans\n  \n  /* if(none of above){\n  print message\n  }*/\n}""}"
572,1.0,3.5,1.0,3.5,2017-03-24 21:49:10.128828,61,391,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", targetDate = \""Jan 1, 2012\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""int random(Person p){\n  if(getSalary() < 10000.0){\n    return getSalary()*.02;\n  } else {\n    return getSalary()*.05;\n  }\n  \n  //getProfit*.1 returns 10% of profit\n  //0 tax for veterans\n  \n  /* if(none of above){\n  print message\n  }*/\n}""}"
573,1.0,2.5,1.0,1.0,2017-03-24 21:49:11.936931,34,392,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""public static void main(String[] args) {\n    int[] a = ArrayUtil.randomIntArray(20, 100);\n    System.out.println(Arrays.toString(a));\n    HeapSorter.sort(a);\n    System.out.println(Arrays.toString(a));\n}\n"",""rating"":2},""code"":""public void Diff()\n{int[] array;\n //compute difference\n}""}"
574,1.0,2.5,1.0,1.0,2017-03-24 21:49:17.186329,34,393,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""public static void main(String[] args) {\n    int[] a = ArrayUtil.randomIntArray(20, 100);\n    System.out.println(Arrays.toString(a));\n    SelectionSorter.sort(a);\n    System.out.println(Arrays.toString(a));\n}\n"",""rating"":2},""code"":""public void Diff()\n{int[] array;\n //compute difference\n}""}"
575,1.5,4.0,1.0,1.0,2017-03-24 21:49:17.502069,44,,"void salary(){
	//
      
}



  
  "
576,1.0,1.0,1.0,1.0,2017-03-24 21:49:17.885644,17,394,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""double value(double xValue) {\n    // The value is the negative of the value of the operand.\n    double neg = operand.value(xValue);\n    return -neg;\n}\n"",""rating"":2},""code"":""double taxReturn(double tax1){\n  double salary = 0;\n  if(salary > 2.0){\n    \n  }\n  \n}""}"
577,1.0,2.5,1.0,1.0,2017-03-24 21:49:19.134612,34,395,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""public int computeBlue(double x, double y) {\n    return ((int) (x * y)) % 256;\n}\n"",""rating"":1},""code"":""public void Diff()\n{int[] array;\n //compute difference\n}""}"
578,1.0,3.5,2.5,3.5,2017-03-24 21:49:20.003244,61,,"int random(Person p){
  if(getSalary() < 10000.0){
    return getSalary()*.02;
  } else {
    return getSalary()*.05;
  }
  
  //getProfit*.1 returns 10% of profit
  //0 tax for veterans
  
  /* if(none of above){
  print message
  }*/
}"
579,1.0,1.0,1.0,2.5,2017-03-24 21:49:20.376863,46,396,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static <E extends Comparable<E>> E max(E[] a) {\n    E largest = a[0];\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":3},""code"":""public static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n}""}"
580,2.5,3.5,2.5,3.5,2017-03-24 21:49:21.941340,61,,"int random(Person p){
  if(getSalary() < 10000.0){
    return getSalary()*.02;
  } else {
    return getSalary()*.05;
  }
  
  //getProfit*.1 returns 10% of profit
  //0 tax for veterans
  
  /* if(none of above){
  print message
  }*/
}"
581,1.0,1.0,1.0,1.0,2017-03-24 21:49:22.354839,47,397,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""@Override\npublic String getOutputStatement(String toDisplay) {\n    return toDisplay;\n}\n"",""rating"":1},""code"":""\nString iforgothowtocodejava (String myFeedback)\n{\n  return myFeedback;\n}\n""}"
582,1.5,1.0,1.0,1.0,2017-03-24 21:49:22.769101,13,398,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""/** This shows everything */\npublic void show() {\n    frame.setVisible(true);\n}\n"",""rating"":3},""code"":""void somethod() {\n  // show luck\n}""}"
583,1.0,1.0,1.0,2.5,2017-03-24 21:49:22.806559,46,399,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""void printList() {\n    Iterator listIterator = listOfFamousQuotes.iterator();\n    while (listIterator.hasNext()) {\n        String quote = (String) listIterator.next();\n        System.out.println(quote);\n    }\n}\n"",""rating"":2},""code"":""public static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n}""}"
584,2.5,2.0,2.5,3.5,2017-03-24 21:49:23.045488,61,,"int random(Person p){
  if(getSalary() < 10000.0){
    return getSalary()*.02;
  } else {
    return getSalary()*.05;
  }
  
  //getProfit*.1 returns 10% of profit
  //0 tax for veterans
  
  /* if(none of above){
  print message
  }*/
}"
585,1.0,1.0,1.0,1.0,2017-03-24 21:49:23.303400,47,400,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""default String filter(String s) {\n    return \""Filtered \"" + s;\n}\n"",""rating"":1},""code"":""\nString iforgothowtocodejava (String myFeedback)\n{\n  return myFeedback;\n}\n""}"
586,1.0,1.0,1.0,5.0,2017-03-24 21:49:23.889087,16,401,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Computes the largest value of an array.\n      @param a the array\n      @return the largest value in a\n   */\npublic static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":1},""code"":""void biggestmethod(){\n  // find difference between values and return largest difference\n}""}"
587,1.5,1.0,1.0,1.0,2017-03-24 21:49:24.115257,13,402,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""/**\n       * This is called by mousePressed() when a player clicks on the\n       * square in the specified row and col.  It has already been checked\n       * that a game is, in fact, in progress.\n       */\nvoid doClickSquare(int row, int col) {\n    if (board[row][col] != EMPTY) {\n        if (currentPlayer == BLACK)\n            message.setText(\""BLACK:  Please click an empty square.\"");\n        else\n            message.setText(\""WHITE:  Please click an empty square.\"");\n        return;\n    }\n    /* Make the move.  Check if the board is full or if the move\n          is a winning move.  If so, the game ends.  If not, then it's\n          the other user's turn. */\n    // Make the move.\n    board[row][col] = currentPlayer;\n    repaint();\n    if (winner(row, col)) {\n        // First, check for a winner.\n        if (currentPlayer == WHITE)\n            gameOver(\""WHITE wins the game!\"");\n        else\n            gameOver(\""BLACK wins the game!\"");\n        return;\n    }\n    // Check if the board is full.\n    boolean emptySpace = false;\n    for (int i = 0; i < 13; i++) for (int j = 0; j < 13; j++) if (board[i][j] == EMPTY)\n        emptySpace = true;\n    if (emptySpace == false) {\n        gameOver(\""The game ends in a draw.\"");\n        return;\n    }\n    if (currentPlayer == BLACK) {\n        currentPlayer = WHITE;\n        message.setText(\""WHITE:  Make your move.\"");\n    } else {\n        currentPlayer = BLACK;\n        message.setText(\""BLACK:  Make your move.\"");\n    }\n}\n          /* Check that the user clicked an empty square.  If not, show an\n          error message and exit. */\n\n          /* Continue the game.  It's the other player's turn. */\n\n"",""rating"":3},""code"":""void somethod() {\n  // show luck\n}""}"
588,1.0,1.0,1.0,1.0,2017-03-24 21:49:24.438696,47,403,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""public void run() {\n    System.out.println(\""Client receive thread started.\"");\n    try {\n        while (!closed) {\n            Object obj = in.readObject();\n            if (obj instanceof DisconnectMessage) {\n                close();\n                serverShutdown(((DisconnectMessage) obj).message);\n            } else if (obj instanceof StatusMessage) {\n                StatusMessage msg = (StatusMessage) obj;\n                connectedPlayerIDs = msg.players;\n                if (msg.connecting)\n                    playerConnected(msg.playerID);\n                else\n                    playerDisconnected(msg.playerID);\n            } else\n                messageReceived(obj);\n        }\n    } catch (IOException e) {\n        if (!closed) {\n            closedByError(\""IO error occurred while waiting to receive  message.\"");\n            System.out.println(\""Client receive thread terminated by IOException: \"" + e);\n        }\n    } catch (Exception e) {\n        if (!closed) {\n            closedByError(\""Unexpected internal error in receive thread: \"" + e);\n            System.out.println(\""\\nUnexpected error shuts down client receive thread:\"");\n            e.printStackTrace();\n        }\n    } finally {\n        System.out.println(\""Client receive thread terminated.\"");\n    }\n}\n"",""rating"":1},""code"":""\nString iforgothowtocodejava (String myFeedback)\n{\n  return myFeedback;\n}\n""}"
589,1.0,1.0,1.0,2.5,2017-03-24 21:49:24.826853,46,404,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""void loadService(Object serviceSelection) {\n    try {\n        Service svc = server.getService(serviceSelection);\n        mainPanel.removeAll();\n        mainPanel.add(svc.getGuiPanel());\n        mainPanel.validate();\n        mainPanel.repaint();\n    } catch (Exception ex) {\n        ex.printStackTrace();\n    }\n}\n"",""rating"":1},""code"":""public static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n}""}"
590,1.0,1.0,2.5,1.0,2017-03-24 21:49:25.460017,18,405,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""public double weeklyPay(int hoursWorked) {\n    final int WEEKS_PER_YEAR = 52;\n    return annualSalary / WEEKS_PER_YEAR;\n}\n"",""rating"":1},""code"":""class Person{\n  String name;\n  int age;\n}\nclass Employee extends Person{\n  double getSalary();\n}\nclass BuisnessOwner extends Person {\n  double getProfit();\n}\nclass Veteran extends Person{\n  String veteran_id;\n}""}"
591,2.5,2.0,2.5,5.0,2017-03-24 21:49:25.490936,61,,"int random(Person p){
  if(getSalary() < 10000.0){
    return getSalary()*.02;
  } else {
    return getSalary()*.05;
  }
  
  //getProfit*.1 returns 10% of profit
  //0 tax for veterans
  
  /* if(none of above){
  print message
  }*/
}"
592,1.0,1.0,1.0,1.0,2017-03-24 21:49:26.517357,47,406,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""/** Called from the browser to set up. We want to throw various\n     * kinds of exceptions but the API predefines that we don't, so we\n     * limit ourselves to the ubiquitous IllegalArgumentException.\n     */\npublic void init() {\n    // System.out.println(\""In LinkButton::init\"");\n    try {\n        if ((targetName = getParameter(TARGET1)) == null)\n            throw new IllegalArgumentException(\""TARGET parameter REQUIRED\"");\n        if ((targetHost = getParameter(TARGET2)) == null)\n            throw new IllegalArgumentException(\""TARGET parameter REQUIRED\"");\n        String theURL = \""mailto:\"" + targetName + \""@\"" + targetHost;\n        subject = getParameter(\""subject\"");\n        if (subject != null)\n            theURL += \""?subject=\"" + subject;\n        targetURL = new URL(theURL);\n    } catch (MalformedURLException rsi) {\n        throw new IllegalArgumentException(\""MalformedURLException \"" + rsi.getMessage());\n    }\n    // i.e., \""Send feedback\""\n    label = getParameter(\""label\"");\n    if (label == null)\n        throw new IllegalArgumentException(\""LABEL is REQUIRED\"");\n    // Now handle font stuff.\n    fontName = getParameter(\""font\"");\n    if (fontName == null)\n        fontName = DEFAULTFONTNAME;\n    String s;\n    if ((s = getParameter(\""fontsize\"")) != null)\n        fontSize = Integer.parseInt(s);\n    if (fontName != null || fontSize != 0) {\n        // System.out.println(\""Name \"" + fontName + \"", size \"" + fontSize);\n        theFont = new Font(fontName, Font.BOLD, fontSize);\n    }\n    Button b = new Button(label);\n    b.addActionListener(new ActionListener() {\n\n        public void actionPerformed(ActionEvent e) {\n            if (targetURL != null) {\n                // showStatus(\""Going to \"" + target);\n                getAppletContext().showDocument(targetURL);\n            }\n        }\n    });\n    if (theFont != null)\n        b.setFont(theFont);\n    add(b);\n}\n"",""rating"":1},""code"":""\nString iforgothowtocodejava (String myFeedback)\n{\n  return myFeedback;\n}\n""}"
593,2.0,2.5,1.0,1.5,2017-03-24 21:49:26.541710,23,407,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""public int iMethod() {\n    return 7;\n}\n"",""rating"":2},""code"":""int method(){\n  \n}\n  \n""}"
594,1.0,1.0,1.0,2.5,2017-03-24 21:49:27.180862,46,408,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""/**\n       * Begin a new game; this is called by the actionPerformed()\n       * method when a user clicks the New Game button.\n       */\nvoid doNewGame() {\n    if (gameInProgress == true) {\n        // This should not be possible because New Game button\n        // is enabled only when it is legal to use it, but it doesn't \n        // hurt to check.\n        message.setText(\""Finish the current game first!\"");\n        return;\n    }\n    for (// Fill the board with EMPTYs\n    int row = 0; // Fill the board with EMPTYs\n    row < 13; // Fill the board with EMPTYs\n    row++) for (int col = 0; col < 13; col++) board[row][col] = EMPTY;\n    // BLACK moves first.\n    currentPlayer = BLACK;\n    message.setText(\""BLACK:  Make your move.\"");\n    gameInProgress = true;\n    newGameButton.setEnabled(false);\n    resignButton.setEnabled(true);\n    // This value indicates that no red line is to be drawn.\n    win_r1 = -1;\n    repaint();\n}\n"",""rating"":1},""code"":""public static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n}""}"
595,2.5,2.5,1.0,1.0,2017-03-24 21:49:28.635869,34,,"public void Diff()
{int[] array;
 //compute difference
}"
596,1.0,1.0,1.0,5.0,2017-03-24 21:49:29.519526,60,409,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    System.out.print(\""Please enter your income: \"");\n    double income = in.nextDouble();\n    System.out.print(\""Are you married? (Y/N) \"");\n    String input = in.next();\n    int status;\n    if (input.equals(\""Y\"")) {\n        status = TaxReturn.MARRIED;\n    } else {\n        status = TaxReturn.SINGLE;\n    }\n    TaxReturn aTaxReturn = new TaxReturn(income, status);\n    System.out.println(\""Tax: \"" + aTaxReturn.getTax());\n}\n"",""rating"":3},""code"":""//FIND TAX BASED ON A PERSONS STATUS IN A BUSINESS\nvoid personalTax(){\n  \n}""}"
597,1.0,1.0,2.5,1.0,2017-03-24 21:49:29.617217,18,410,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""double value() {\n    // The value is the negative of the value of the operand.\n    double neg = operand.value();\n    return -neg;\n}\n"",""rating"":1},""code"":""class Person{\n  String name;\n  int age;\n}\nclass Employee extends Person{\n  double getSalary();\n}\nclass BuisnessOwner extends Person {\n  double getProfit();\n}\nclass Veteran extends Person{\n  String veteran_id;\n}""}"
598,1.0,1.0,1.0,1.0,2017-03-24 21:49:31.120252,47,411,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""public float getPreferredSpan(int axis) {\n    return 0.0f;\n}\n"",""rating"":1},""code"":""\nString iforgothowtocodejava (String myFeedback)\n{\n  return myFeedback;\n}\n""}"
599,1.0,1.0,1.0,1.0,2017-03-24 21:49:31.143533,17,412,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String[] args) {\n    String input = JOptionPane.showInputDialog(\""Enter price:\"");\n    double price = Double.parseDouble(input);\n    final double TAX_RATE = 8.5;\n    price = price * (1 + TAX_RATE / 100);\n    JOptionPane.showMessageDialog(null, \""Price after tax: \"" + price);\n}\n"",""rating"":1},""code"":""double taxReturn(double tax1){\n  double salary = 0;\n  if(salary > 2.0){\n    \n  }\n  \n}""}"
600,1.5,4.0,1.0,1.0,2017-03-24 21:49:31.447248,44,413,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""public static void main(String[] args) {\n    double sum = 0;\n    int count = 0;\n    double salary = 0;\n    System.out.print(\""Enter salaries, -1 to finish: \"");\n    Scanner in = new Scanner(System.in);\n    while (salary != -1) {\n        salary = in.nextDouble();\n        if (salary != -1) {\n            sum = sum + salary;\n            count++;\n        }\n    }\n    if (count > 0) {\n        double average = sum / count;\n        System.out.println(\""Average salary: \"" + average);\n       // Process data until the sentinel is entered \n\n    } else {\n        System.out.println(\""No data\"");\n    }\n}\n       // Compute and print the average\n\n"",""rating"":3},""code"":""void salary(){\n\t//\n      \n}\n\n\n\n  \n  ""}"
601,1.0,1.0,2.5,1.0,2017-03-24 21:49:31.483243,18,414,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""double performConversion(double f) {\n    return f *= 453.59237;\n}\n"",""rating"":1},""code"":""class Person{\n  String name;\n  int age;\n}\nclass Employee extends Person{\n  double getSalary();\n}\nclass BuisnessOwner extends Person {\n  double getProfit();\n}\nclass Veteran extends Person{\n  String veteran_id;\n}""}"
602,1.0,1.0,1.0,1.0,2017-03-24 21:49:31.999485,47,415,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""default String filter(String s) {\n    return \""Filtered \"" + s;\n}\n"",""rating"":1},""code"":""\nString iforgothowtocodejava (String myFeedback)\n{\n  return myFeedback;\n}\n""}"
603,1.0,1.0,1.0,2.5,2017-03-24 21:49:32.335034,46,416,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""public static <E extends Comparable<? super E>> E max(ArrayList<E> a) // public static <E extends Comparable<E>> E max(ArrayList<E> a) \n// doesn't work with Student array list\n{\n    E largest = a.get(0);\n    for (int i = 1; i < a.size(); i++) {\n        if (a.get(i).compareTo(largest) > 0) {\n            largest = a.get(i);\n        }\n    }\n    return largest;\n}\n"",""rating"":4},""code"":""public static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n}""}"
604,1.0,1.0,1.0,1.0,2017-03-24 21:49:32.983644,47,417,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""default String convolve(String s) {\n    return \""Convolved \"" + s;\n}\n"",""rating"":1},""code"":""\nString iforgothowtocodejava (String myFeedback)\n{\n  return myFeedback;\n}\n""}"
605,1.0,1.0,1.0,1.0,2017-03-24 21:49:35.227080,47,418,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""/** Called when the user clicks */\npublic void processMouseEvent(MouseEvent e) {\n    if (e.getID() == MouseEvent.MOUSE_PRESSED) {\n        // remember click position\n        last_x = (short) e.getX();\n        last_y = (short) e.getY();\n    } else\n        super.processMouseEvent(e);\n}\n"",""rating"":1},""code"":""\nString iforgothowtocodejava (String myFeedback)\n{\n  return myFeedback;\n}\n""}"
606,1.5,4.0,1.0,1.0,2017-03-24 21:49:35.238884,44,419,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""/**\n      Constructs a manager with a given name, annual salary and weekly bonus.\n      @param name the name of this employee\n      @param salary the annual salary\n      @param bonus the weekly bonus\n    */\npublic Manager(String name, double salary, double bonus) {\n    super(name, salary);\n    weeklyBonus = bonus;\n}\n"",""rating"":2},""code"":""void salary(){\n\t//\n      \n}\n\n\n\n  \n  ""}"
607,1.0,1.0,1.0,5.0,2017-03-24 21:49:35.505886,16,420,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""/**\n         * Return the largest item that has been entered.\n         * The return value will be -infinity if no numbers have been entered. \n         */\npublic double getMax() {\n    return max;\n}\n"",""rating"":2},""code"":""void biggestmethod(){\n  // find difference between values and return largest difference\n}""}"
608,1.0,1.0,1.0,2.0,2017-03-24 21:49:35.960193,22,,"class Employee extends Person
{
	// get money;
}"
609,1.0,1.0,1.0,1.0,2017-03-24 21:49:36.123242,47,421,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""// This method replaces reserved characters with entities.\nString fixup(String s) {\n    StringBuffer sb = new StringBuffer();\n    int len = s.length();\n    for (int i = 0; i < len; i++) {\n        char c = s.charAt(i);\n        switch(c) {\n            default:\n                sb.append(c);\n                break;\n            case '<':\n                sb.append(\""&lt;\"");\n                break;\n            case '>':\n                sb.append(\""&gt;\"");\n                break;\n            case '&':\n                sb.append(\""&amp;\"");\n                break;\n            case '\""':\n                sb.append(\""&quot;\"");\n                break;\n            case '\\'':\n                sb.append(\""&apos;\"");\n                break;\n        }\n    }\n    return sb.toString();\n}\n"",""rating"":1},""code"":""\nString iforgothowtocodejava (String myFeedback)\n{\n  return myFeedback;\n}\n""}"
610,1.0,1.0,1.0,5.0,2017-03-24 21:49:36.269332,60,422,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""public Product(float price) {\n    this.price = price;\n    tax = (float) (price * 0.20);\n}\n"",""rating"":2},""code"":""//FIND TAX BASED ON A PERSONS STATUS IN A BUSINESS\nvoid personalTax(){\n  \n}""}"
611,1.0,1.0,2.5,1.0,2017-03-24 21:49:36.942954,18,423,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""/**\n      Constructs a manager with a given name, annual salary and weekly bonus.\n      @param name the name of this employee\n      @param salary the annual salary\n      @param bonus the weekly bonus\n    */\npublic Manager(String name, double salary, double bonus) {\n    super(name, salary);\n    weeklyBonus = bonus;\n}\n"",""rating"":3},""code"":""class Person{\n  String name;\n  int age;\n}\nclass Employee extends Person{\n  double getSalary();\n}\nclass BuisnessOwner extends Person {\n  double getProfit();\n}\nclass Veteran extends Person{\n  String veteran_id;\n}""}"
612,2.0,2.0,1.0,1.5,2017-03-24 21:49:37.397994,23,,"int method(){
  
}
  
"
613,1.0,1.5,1.0,2.0,2017-03-24 21:49:37.987293,22,,"class Employee extends Person
{
	// get money;
}"
614,1.0,1.0,1.0,1.0,2017-03-24 21:49:38.279316,17,424,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""public Product(float price) {\n    this.price = price;\n    tax = (float) (price * 0.20);\n}\n"",""rating"":2},""code"":""double taxReturn(double tax1){\n  double salary = 0;\n  if(salary > 2.0){\n    \n  }\n  \n}""}"
615,1.0,1.0,1.0,1.0,2017-03-24 21:49:39.967540,47,425,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String[] unuxed) {\n    new ButtonDemo().setVisible(true);\n}\n"",""rating"":1},""code"":""\nString iforgothowtocodejava (String myFeedback)\n{\n  return myFeedback;\n}\n""}"
616,1.5,1.5,1.0,2.0,2017-03-24 21:49:40.204041,22,,"class Employee extends Person
{
	// get money;
}"
617,1.0,1.0,1.0,1.0,2017-03-24 21:49:40.849092,47,426,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""public void run() {\n    System.out.println(\""Client receive thread started.\"");\n    try {\n        while (!closed) {\n            Object obj = in.readObject();\n            if (obj instanceof DisconnectMessage) {\n                close();\n                serverShutdown(((DisconnectMessage) obj).message);\n            } else if (obj instanceof StatusMessage) {\n                StatusMessage msg = (StatusMessage) obj;\n                connectedPlayerIDs = msg.players;\n                if (msg.connecting)\n                    playerConnected(msg.playerID);\n                else\n                    playerDisconnected(msg.playerID);\n            } else\n                messageReceived(obj);\n        }\n    } catch (IOException e) {\n        if (!closed) {\n            closedByError(\""IO error occurred while waiting to receive  message.\"");\n            System.out.println(\""Client receive thread terminated by IOException: \"" + e);\n        }\n    } catch (Exception e) {\n        if (!closed) {\n            closedByError(\""Unexpected internal error in receive thread: \"" + e);\n            System.out.println(\""\\nUnexpected error shuts down client receive thread:\"");\n            e.printStackTrace();\n        }\n    } finally {\n        System.out.println(\""Client receive thread terminated.\"");\n    }\n}\n"",""rating"":1},""code"":""\nString iforgothowtocodejava (String myFeedback)\n{\n  return myFeedback;\n}\n""}"
618,1.0,1.0,1.0,1.0,2017-03-24 21:49:41.991182,47,427,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""/** Convenience Routine */\nString format(String s) {\n    return format(s, new StringBuffer(), null).toString();\n}\n"",""rating"":1},""code"":""\nString iforgothowtocodejava (String myFeedback)\n{\n  return myFeedback;\n}\n""}"
619,2.0,2.0,1.0,1.5,2017-03-24 21:49:42.538815,23,,"int method(){
  
}
  
"
620,1.5,2.0,1.0,1.5,2017-03-24 21:49:43.885655,23,,"int method(){
  
}
  
"
621,1.5,4.0,1.0,1.0,2017-03-24 21:49:44.350811,44,428,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Constructs a salaried employee with a given name and annual salary.\n      @param name the name of this employee\n      @param salary the annual salary\n    */\npublic SalariedEmployee(String name, double salary) {\n    setName(name);\n    annualSalary = salary;\n}\n"",""rating"":2},""code"":""void salary(){\n\t//\n      \n}\n\n\n\n  \n  ""}"
622,1.0,1.0,1.0,1.0,2017-03-24 21:49:44.769310,47,429,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""/** Called from the browser to set up. We want to throw various\n     * kinds of exceptions but the API predefines that we don't, so we\n     * limit ourselves to the ubiquitous IllegalArgumentException.\n     */\npublic void init() {\n    // System.out.println(\""In LinkButton::init\"");\n    try {\n        if ((targetName = getParameter(TARGET1)) == null)\n            throw new IllegalArgumentException(\""TARGET parameter REQUIRED\"");\n        if ((targetHost = getParameter(TARGET2)) == null)\n            throw new IllegalArgumentException(\""TARGET parameter REQUIRED\"");\n        String theURL = \""mailto:\"" + targetName + \""@\"" + targetHost;\n        subject = getParameter(\""subject\"");\n        if (subject != null)\n            theURL += \""?subject=\"" + subject;\n        targetURL = new URL(theURL);\n    } catch (MalformedURLException rsi) {\n        throw new IllegalArgumentException(\""MalformedURLException \"" + rsi.getMessage());\n    }\n    // i.e., \""Send feedback\""\n    label = getParameter(\""label\"");\n    if (label == null)\n        throw new IllegalArgumentException(\""LABEL is REQUIRED\"");\n    // Now handle font stuff.\n    fontName = getParameter(\""font\"");\n    if (fontName == null)\n        fontName = DEFAULTFONTNAME;\n    String s;\n    if ((s = getParameter(\""fontsize\"")) != null)\n        fontSize = Integer.parseInt(s);\n    if (fontName != null || fontSize != 0) {\n        // System.out.println(\""Name \"" + fontName + \"", size \"" + fontSize);\n        theFont = new Font(fontName, Font.BOLD, fontSize);\n    }\n    Button b = new Button(label);\n    b.addActionListener(new ActionListener() {\n\n        public void actionPerformed(ActionEvent e) {\n            if (targetURL != null) {\n                // showStatus(\""Going to \"" + target);\n                getAppletContext().showDocument(targetURL);\n            }\n        }\n    });\n    if (theFont != null)\n        b.setFont(theFont);\n    add(b);\n}\n"",""rating"":1},""code"":""\nString iforgothowtocodejava (String myFeedback)\n{\n  return myFeedback;\n}\n""}"
623,1.0,1.0,1.0,1.0,2017-03-24 21:49:46.422558,17,430,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""double value(double xValue) {\n    // The value is obtained by evaluating the left and right\n    // operands and combining the values with the operator.\n    double x = left.value(xValue);\n    double y = right.value(xValue);\n    switch(op) {\n        case '+':\n            return x + y;\n        case '-':\n            return x - y;\n        case '*':\n            return x * y;\n        case '/':\n            return x / y;\n        // Bad operator!\n        default:\n            return Double.NaN;\n    }\n}\n"",""rating"":3},""code"":""double taxReturn(double tax1){\n  double salary = 0;\n  if(salary > 2.0){\n    \n  }\n  \n}""}"
624,1.0,1.0,1.0,2.5,2017-03-24 21:49:47.154544,59,431,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""/** Return an element of the array */\npublic int get(int index) throws ArrayIndexOutOfBoundsException {\n    if (index >= size)\n        throw new ArrayIndexOutOfBoundsException(index);\n    else\n        return data[index];\n}\n"",""rating"":2},""code"":""void somethod(){\n  // Array elements\n}""}"
625,1.5,4.0,1.0,1.0,2017-03-24 21:49:47.854544,44,432,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""public static void main(String[] args) {\n    double sum = 0;\n    int count = 0;\n    double salary = 0;\n    System.out.print(\""Enter salaries, -1 to finish: \"");\n    Scanner in = new Scanner(System.in);\n    while (salary != -1) {\n        salary = in.nextDouble();\n        if (salary != -1) {\n            sum = sum + salary;\n            count++;\n        }\n    }\n    if (count > 0) {\n        double average = sum / count;\n        System.out.println(\""Average salary: \"" + average);\n       // Process data until the sentinel is entered \n\n    } else {\n        System.out.println(\""No data\"");\n    }\n}\n       // Compute and print the average\n\n"",""rating"":4},""code"":""void salary(){\n\t//\n      \n}\n\n\n\n  \n  ""}"
626,1.0,1.0,1.0,1.0,2017-03-24 21:49:48.896741,54,433,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String[] args) {\n    double price = 9.95;\n    double taxRate = 8.25;\n    double tax = Financial.percentOf(price, taxRate);\n    System.out.printf(\""Tax: %.2f\\n\"", tax);\n}\n"",""rating"":2},""code"":""\nvoid int tax()\n  {\n  //calculate tax}\n  }""}"
627,1.0,1.0,1.0,1.0,2017-03-24 21:49:51.857058,29,434,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""/**\n      Gets the minimum score of this student.\n      @return the minimum score, or 0 if there are no scores.\n   */\npublic double minimum() {\n    if (scoresSize == 0) {\n        return 0;\n    }\n    double smallest = scores[0];\n    for (int i = 1; i < scoresSize; i++) {\n        if (scores[i] < smallest) {\n            smallest = scores[i];\n        }\n    }\n    return smallest;\n}\n"",""rating"":1},""code"":""public double taxReturn()\n{\n  if(salary < 10000)\n  {\n    \n  }\n}""}"
628,1.0,1.0,1.0,1.0,2017-03-24 21:49:52.339445,50,435,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""public double weeklyPay(int hoursWorked) {\n    final int WEEKS_PER_YEAR = 52;\n    return annualSalary / WEEKS_PER_YEAR;\n}\n"",""rating"":1},""code"":""double getSalary(){\n  return salary;\n}\n\n\ndouble getTax(){\n  tax = (salary*2)/100;\n    return tax;\n}\n\n""}"
629,1.0,1.0,1.0,2.5,2017-03-24 21:49:52.873986,59,436,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""/** Returns the next element from the data */\n@Override\npublic T next() {\n    if (hasNext()) {\n        return data[index++];\n    }\n    throw new NoSuchElementException(\""only \"" + data.length + \"" elements\"");\n}\n"",""rating"":2},""code"":""void somethod(){\n  // Array elements\n}""}"
630,2.5,3.0,5.0,3.5,2017-03-24 21:49:52.986031,11,437,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""/** Compare two doubles within a given epsilon */\npublic static boolean equals(double a, double b, double eps) {\n    if (a == b)\n        return true;\n    // If the difference is less than epsilon, treat as equal.\n    return Math.abs(a - b) < eps;\n}\n"",""rating"":1},""code"":""int myarray = new array[]{8,3,1}; \n""}"
631,1.0,1.0,1.0,2.5,2017-03-24 21:49:53.407861,46,438,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent2(int[] a) {\n    // O(n log(n))\n    Arrays.sort(a);\n    int[] counts = new int[a.length];\n    int count = 0;\n    for (// O(n)\n    int i = 0; // O(n)\n    i < a.length; // O(n)\n    i++) {\n        count++;\n        if (i == a.length - 1 || a[i] != a[i + 1]) {\n            counts[i] = count;\n            count = 0;\n        }\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":4},""code"":""public static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n}""}"
632,2.5,3.0,5.0,3.5,2017-03-24 21:49:53.824471,11,439,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""/**\n         * Return the contents of the square in the specified row and column.\n         */\nint pieceAt(int row, int col) {\n    return board[row][col];\n}\n"",""rating"":0},""code"":""int myarray = new array[]{8,3,1}; \n""}"
633,1.5,2.0,1.0,1.5,2017-03-24 21:49:54.352754,23,440,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""int getPrice() {\n    return price;\n}\n"",""rating"":4},""code"":""int method(){\n  \n}\n  \n""}"
634,1.0,1.0,1.0,1.0,2017-03-24 21:49:54.551497,29,441,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""public double weeklyPay(int hoursWorked) {\n    double pay = hoursWorked * hourlyWage;\n    if (hoursWorked > 40) {\n        // Add overtime\n        pay = pay + ((hoursWorked - 40) * 0.5) * hourlyWage;\n    }\n    return pay;\n}\n"",""rating"":1},""code"":""public double taxReturn()\n{\n  if(salary < 10000)\n  {\n    \n  }\n}""}"
635,2.5,3.0,5.0,3.5,2017-03-24 21:49:55.960127,11,442,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""int intFieldValue(Object o, String name) throws NoSuchFieldException, IllegalAccessException {\n    Class<?> c = o.getClass();\n    Field fld = c.getField(name);\n    int value = fld.getInt(o);\n    return value;\n}\n"",""rating"":0},""code"":""int myarray = new array[]{8,3,1}; \n""}"
636,1.0,1.0,1.0,2.5,2017-03-24 21:49:56.008588,59,443,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Adds an element after the end of the array list\n      @param newElement the element to add\n   */\npublic boolean addLast(Object newElement) {\n    growIfNecessary();\n    currentSize++;\n    elements[currentSize - 1] = newElement;\n    return true;\n}\n"",""rating"":1},""code"":""void somethod(){\n  // Array elements\n}""}"
637,1.5,4.0,1.0,1.0,2017-03-24 21:49:56.107414,44,444,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String[] args) {\n    Employee[] staff = new Employee[3];\n    staff[0] = new HourlyEmployee(\""Morgan, Harry\"", 30);\n    staff[1] = new SalariedEmployee(\""Lin, Sally\"", 52000);\n    staff[2] = new Manager(\""Smith, Mary\"", 104000, 50);\n    Scanner in = new Scanner(System.in);\n    for (Employee e : staff) {\n        System.out.print(\""Hours worked by \"" + e.getName() + \"": \"");\n        int hours = in.nextInt();\n        System.out.println(\""Salary: \"" + e.weeklyPay(hours));\n    }\n}\n"",""rating"":2},""code"":""void salary(){\n\t//\n      \n}\n\n\n\n  \n  ""}"
638,1.0,1.0,1.0,1.0,2017-03-24 21:49:57.263815,17,445,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""public static void main(String[] args) {\n    double sum = 0;\n    int count = 0;\n    double salary = 0;\n    System.out.print(\""Enter salaries, -1 to finish: \"");\n    Scanner in = new Scanner(System.in);\n    while (salary != -1) {\n        salary = in.nextDouble();\n        if (salary != -1) {\n            sum = sum + salary;\n            count++;\n        }\n    }\n    if (count > 0) {\n        double average = sum / count;\n        System.out.println(\""Average salary: \"" + average);\n       // Process data until the sentinel is entered \n\n    } else {\n        System.out.println(\""No data\"");\n    }\n}\n       // Compute and print the average\n\n"",""rating"":4},""code"":""double taxReturn(double tax1){\n  double salary = 0;\n  if(salary > 2.0){\n    \n  }\n  \n}""}"
639,1.0,1.0,1.0,1.0,2017-03-24 21:49:57.282321,29,446,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String[] args) {\n    String input = JOptionPane.showInputDialog(\""Enter price:\"");\n    double price = Double.parseDouble(input);\n    final double TAX_RATE = 8.5;\n    price = price * (1 + TAX_RATE / 100);\n    JOptionPane.showMessageDialog(null, \""Price after tax: \"" + price);\n}\n"",""rating"":1},""code"":""public double taxReturn()\n{\n  if(salary < 10000)\n  {\n    \n  }\n}""}"
640,2.5,3.0,5.0,3.5,2017-03-24 21:49:57.533933,11,447,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""// pre: list != null\n// post: return sum of elements\n// use traditional for loop\npublic static int sumListOld(int[] list) {\n    int total = 0;\n    for (int i = 0; i < list.length; i++) {\n        total += list[i];\n        System.out.println(list[i]);\n    }\n    return total;\n}\n"",""rating"":0},""code"":""int myarray = new array[]{8,3,1}; \n""}"
641,1.0,1.0,2.5,1.0,2017-03-24 21:49:57.905006,18,448,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""double value() {\n    // The value is obtained by evaluating the left and right\n    // operands and combining the values with the operator.\n    double x = left.value();\n    double y = right.value();\n    switch(op) {\n        case '+':\n            return x + y;\n        case '-':\n            return x - y;\n        case '*':\n            return x * y;\n        case '/':\n            return x / y;\n        // Bad operator!\n        default:\n            return Double.NaN;\n    }\n}\n"",""rating"":3},""code"":""class Person{\n  String name;\n  int age;\n}\nclass Employee extends Person{\n  double getSalary();\n}\nclass BuisnessOwner extends Person {\n  double getProfit();\n}\nclass Veteran extends Person{\n  String veteran_id;\n}""}"
642,1.0,1.0,1.0,5.0,2017-03-24 21:49:58.244894,16,449,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""void reshape(int left, int top, int width, int height) {\n    // Set the position and size of this shape.\n    this.left = left;\n    this.top = top;\n    this.width = width;\n    this.height = height;\n}\n"",""rating"":1},""code"":""public biggestmethod(){\n  // find difference between values and return largest difference\n}""}"
643,2.5,2.5,1.0,1.0,2017-03-24 21:49:58.581528,34,450,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""// This method is called whenever the applet needs to be drawn or redrawn\npublic void paint(Graphics g) {\n    // Specify the font we'll be using throughout\n    g.setFont(font);\n    // Draw a background by tiling an image tile() is defined below\n    tile(g, this, background);\n    // Draw a line\n    // Specify the drawing color\n    g.setColor(outline);\n    // Draw a line from (25,10) to (150,80)\n    g.drawLine(25, 10, 150, 80);\n    // Draw some text.  See the centerText() method below.\n    centerText(\""drawLine()\"", null, g, textcolor, 25, 10, 150, 80);\n    // Draw and fill an arc\n    g.setColor(fill);\n    g.fillArc(225, 10, 150, 80, 90, 135);\n    g.setColor(outline);\n    g.drawArc(225, 10, 150, 80, 90, 135);\n    centerText(\""fillArc()\"", \""drawArc()\"", g, textcolor, 225, 10, 150, 80);\n    // Draw and fill a rectangle\n    g.setColor(fill);\n    g.fillRect(25, 110, 150, 80);\n    g.setColor(outline);\n    g.drawRect(25, 110, 150, 80);\n    centerText(\""fillRect()\"", \""drawRect()\"", g, textcolor, 25, 110, 150, 80);\n    // Draw and fill a rounded rectangle\n    g.setColor(fill);\n    g.fillRoundRect(225, 110, 150, 80, 20, 20);\n    g.setColor(outline);\n    g.drawRoundRect(225, 110, 150, 80, 20, 20);\n    centerText(\""fillRoundRect()\"", \""drawRoundRect()\"", g, textcolor, 225, 110, 150, 80);\n    // Draw and fill an oval\n    g.setColor(fill);\n    g.fillOval(25, 210, 150, 80);\n    g.setColor(outline);\n    g.drawOval(25, 210, 150, 80);\n    centerText(\""fillOval()\"", \""drawOval()\"", g, textcolor, 25, 210, 150, 80);\n    // Define an octagon using arrays of X and Y coordinates\n    int numpoints = 8;\n    int[] xpoints = new int[numpoints + 1];\n    int[] ypoints = new int[numpoints + 1];\n    for (int i = 0; i < numpoints; i++) {\n        double angle = 2 * Math.PI * i / numpoints;\n        xpoints[i] = (int) (300 + 75 * Math.cos(angle));\n        ypoints[i] = (int) (250 - 40 * Math.sin(angle));\n    }\n    // Draw and fill the polygon\n    g.setColor(fill);\n    g.fillPolygon(xpoints, ypoints, numpoints);\n    g.setColor(outline);\n    g.drawPolygon(xpoints, ypoints, numpoints);\n    centerText(\""fillPolygon()\"", \""drawPolygon()\"", g, textcolor, 225, 210, 150, 80);\n    // Draw a 3D rectangle (clear an area for it first)\n    g.setColor(fill);\n    g.fillRect(20, 305, 160, 90);\n    g.draw3DRect(25, 310, 150, 80, true);\n    g.draw3DRect(26, 311, 148, 78, true);\n    g.draw3DRect(27, 312, 146, 76, true);\n    centerText(\""draw3DRect()\"", \""x 3\"", g, textcolor, 25, 310, 150, 80);\n    // Draw an image (centered within an area)\n    int w = image.getWidth(this);\n    int h = image.getHeight(this);\n    g.drawImage(image, 225 + (150 - w) / 2, 310 + (80 - h) / 2, this);\n    centerText(\""drawImage()\"", null, g, textcolor, 225, 310, 150, 80);\n}\n"",""rating"":1},""code"":""public void Diff()\n{int[] array;\n //compute difference\n}""}"
644,3.5,1.0,1.0,1.0,2017-03-24 21:49:59.093954,47,,"
String iforgothowtocodejava (String myFeedback)
{
  return myFeedback;
}
"
645,1.0,1.0,1.0,1.0,2017-03-24 21:50:00.134627,29,451,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""/**\n      Combines two values with an operator.\n      @param value1 the first value\n      @param value2 the second value\n      @param op an operator (+, -, *, /, or =)\n   */\npublic double calculate(double value1, double value2, String op) {\n    if (op.equals(\""+\"")) {\n        return value1 + value2;\n    } else if (op.equals(\""-\"")) {\n        return value1 - value2;\n    } else if (op.equals(\""*\"")) {\n        return value1 * value2;\n    } else if (op.equals(\""/\"")) {\n        return value1 / value2;\n    } else // \""=\""\n    {\n        return value2;\n    }\n}\n"",""rating"":1},""code"":""public double taxReturn()\n{\n  if(salary < 10000)\n  {\n    \n  }\n}""}"
646,2.5,3.0,5.0,3.5,2017-03-24 21:50:00.243225,11,452,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""/**\n     * This constructor allows printing the contents of any JTextComponent\n     * using a default PageFormat and a default scale factor.  The default\n     * scale factor is .75 because the default fonts are overly large.\n     */\npublic PrintableDocument(JTextComponent textComponent) {\n    this(textComponent, new PageFormat(), .75);\n}\n"",""rating"":1},""code"":""int myarray = new array[]{8,3,1}; \n""}"
647,1.0,1.0,1.0,1.0,2017-03-24 21:50:00.572261,13,453,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""/**\n     * Roll the dice by randomizing their values.  Tell the\n     * system to repaint the panel, to show the new values.\n     */\nvoid roll() {\n    die1 = (int) (Math.random() * 6) + 1;\n    die2 = (int) (Math.random() * 6) + 1;\n    repaint();\n}\n"",""rating"":2},""code"":""void somethod() {\n  // show\n}""}"
648,1.0,1.0,1.0,3.5,2017-03-24 21:50:00.827850,59,,"void somethod(){
  // Array elements
}"
649,1.0,1.0,1.0,1.0,2017-03-24 21:50:01.883000,13,454,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""/** Print out the scribble */\nvoid print() {\n    // Obtain a PrintJob and a Graphics object to use with it\n    Toolkit toolkit = this.getToolkit();\n    PrintJob job = toolkit.getPrintJob(this, \""PrintScribble\"", printprefs);\n    // If the user clicked Cancel in the print dialog\n    if (job == null)\n        return;\n    Graphics g = job.getGraphics();\n    // Give the output a larger top and left margin.  Otherwise it will\n    // be scrunched up in the upper-left corner of the page.\n    g.translate(100, 100);\n    // Draw a border around the output area.\n    Dimension size = this.getSize();\n    g.drawRect(-1, -1, size.width + 1, size.height + 1);\n    // Set a clipping region so our scribbles don't go outside the border\n    // On-screen this happens automatically, but not on paper.\n    g.setClip(0, 0, size.width, size.height);\n    // Print this component and all components it contains\n    // Use print() if you don't want the button to show\n    this.printAll(g);\n    // Finish up.\n    // End the page\n    g.dispose();\n    // End the job\n    job.end();\n}\n"",""rating"":1},""code"":""void somethod() {\n  // show\n}""}"
650,2.5,3.0,5.0,3.5,2017-03-24 21:50:02.794024,11,455,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Creates the radio buttons to select the font size.\n      @return the panel containing the radio buttons\n   */\npublic JPanel createRadioButtons() {\n    smallButton = new JRadioButton(\""Small\"");\n    smallButton.addActionListener(listener);\n    mediumButton = new JRadioButton(\""Medium\"");\n    mediumButton.addActionListener(listener);\n    largeButton = new JRadioButton(\""Large\"");\n    largeButton.addActionListener(listener);\n    largeButton.setSelected(true);\n    // Add radio buttons to button group\n    ButtonGroup group = new ButtonGroup();\n    group.add(smallButton);\n    group.add(mediumButton);\n    group.add(largeButton);\n    JPanel panel = new JPanel();\n    panel.add(smallButton);\n    panel.add(mediumButton);\n    panel.add(largeButton);\n    panel.setBorder(new TitledBorder(new EtchedBorder(), \""Size\""));\n    return panel;\n}\n"",""rating"":1},""code"":""int myarray = new array[]{8,3,1}; \n""}"
651,1.0,1.0,2.5,1.0,2017-03-24 21:50:03.325120,18,456,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""double value() {\n    // The value of the node is the number that it contains.\n    return number;\n}\n"",""rating"":2},""code"":""class Person{\n  String name;\n  int age;\n}\nclass Employee extends Person{\n  double getSalary();\n}\nclass BuisnessOwner extends Person {\n  double getProfit();\n}\nclass Veteran extends Person{\n  String veteran_id;\n}""}"
652,1.0,1.0,1.0,1.0,2017-03-24 21:50:03.862251,17,457,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""double taxReturn(double tax1){\n  double salary = 0;\n  if(salary > 2.0){\n    \n  }\n  \n}""}"
653,1.0,1.0,1.0,1.0,2017-03-24 21:50:04.310678,29,458,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""public Product(float price) {\n    this.price = price;\n    tax = (float) (price * 0.20);\n}\n"",""rating"":5},""code"":""public double taxReturn()\n{\n  if(salary < 10000)\n  {\n    \n  }\n}""}"
654,1.0,1.0,1.0,1.0,2017-03-24 21:50:04.826544,13,459,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""/** \""main program\"" method - construct and show */\npublic static void main(String[] av) {\n    testTwoCols();\n    testFiveCols();\n}\n"",""rating"":1},""code"":""void somethod() {\n  // show\n}""}"
655,2.5,3.0,5.0,3.5,2017-03-24 21:50:04.980214,11,460,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""/**\n      Adds a disk to this tower.\n      @param size the size of the disk to add\n   */\npublic void add(int size) {\n    if (disks.size() > 0 && disks.get(disks.size() - 1) < size) {\n        throw new IllegalStateException(\""Disk is too large\"");\n    }\n    disks.add(size);\n}\n"",""rating"":1},""code"":""int myarray = new array[]{8,3,1}; \n""}"
656,1.0,1.0,1.0,1.0,2017-03-24 21:50:05.884328,29,461,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""public static void main(String[] args) {\n    double sum = 0;\n    int count = 0;\n    double salary = 0;\n    System.out.print(\""Enter salaries, -1 to finish: \"");\n    Scanner in = new Scanner(System.in);\n    while (salary != -1) {\n        salary = in.nextDouble();\n        if (salary != -1) {\n            sum = sum + salary;\n            count++;\n        }\n    }\n    if (count > 0) {\n        double average = sum / count;\n        System.out.println(\""Average salary: \"" + average);\n       // Process data until the sentinel is entered \n\n    } else {\n        System.out.println(\""No data\"");\n    }\n}\n       // Compute and print the average\n\n"",""rating"":1},""code"":""public double taxReturn()\n{\n  if(salary < 10000)\n  {\n    \n  }\n}""}"
657,1.0,1.0,2.5,1.0,2017-03-24 21:50:06.969219,18,462,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String[] args) {\n    Employee[] staff = new Employee[3];\n    staff[0] = new HourlyEmployee(\""Morgan, Harry\"", 30);\n    staff[1] = new SalariedEmployee(\""Lin, Sally\"", 52000);\n    staff[2] = new Manager(\""Smith, Mary\"", 104000, 50);\n    Scanner in = new Scanner(System.in);\n    for (Employee e : staff) {\n        System.out.print(\""Hours worked by \"" + e.getName() + \"": \"");\n        int hours = in.nextInt();\n        System.out.println(\""Salary: \"" + e.weeklyPay(hours));\n    }\n}\n"",""rating"":3},""code"":""class Person{\n  String name;\n  int age;\n}\nclass Employee extends Person{\n  double getSalary();\n}\nclass BuisnessOwner extends Person {\n  double getProfit();\n}\nclass Veteran extends Person{\n  String veteran_id;\n}""}"
658,1.0,1.0,1.0,2.5,2017-03-24 21:50:07.646210,46,463,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""/**\n      Finds a value in an array, using the linear search \n      algorithm.\n      @param a the array to search\n      @param value the value to find\n      @return the index at which the value occurs, or -1\n      if it does not occur in the array\n   */\npublic static int search(int[] a, int value) {\n    for (int i = 0; i < a.length; i++) {\n        if (a[i] == value) {\n            return i;\n        }\n    }\n    return -1;\n}\n"",""rating"":5},""code"":""public static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n}""}"
659,1.0,1.0,1.0,1.0,2017-03-24 21:50:07.928018,13,464,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""/**\n       * This is called by mousePressed() when a player clicks on the\n       * square in the specified row and col.  It has already been checked\n       * that a game is, in fact, in progress.\n       */\nvoid doClickSquare(int row, int col) {\n    if (board[row][col] != EMPTY) {\n        if (currentPlayer == BLACK)\n            message.setText(\""BLACK:  Please click an empty square.\"");\n        else\n            message.setText(\""WHITE:  Please click an empty square.\"");\n        return;\n    }\n    /* Make the move.  Check if the board is full or if the move\n          is a winning move.  If so, the game ends.  If not, then it's\n          the other user's turn. */\n    // Make the move.\n    board[row][col] = currentPlayer;\n    repaint();\n    if (winner(row, col)) {\n        // First, check for a winner.\n        if (currentPlayer == WHITE)\n            gameOver(\""WHITE wins the game!\"");\n        else\n            gameOver(\""BLACK wins the game!\"");\n        return;\n    }\n    // Check if the board is full.\n    boolean emptySpace = false;\n    for (int i = 0; i < 13; i++) for (int j = 0; j < 13; j++) if (board[i][j] == EMPTY)\n        emptySpace = true;\n    if (emptySpace == false) {\n        gameOver(\""The game ends in a draw.\"");\n        return;\n    }\n    if (currentPlayer == BLACK) {\n        currentPlayer = WHITE;\n        message.setText(\""WHITE:  Make your move.\"");\n    } else {\n        currentPlayer = BLACK;\n        message.setText(\""BLACK:  Make your move.\"");\n    }\n}\n          /* Check that the user clicked an empty square.  If not, show an\n          error message and exit. */\n\n          /* Continue the game.  It's the other player's turn. */\n\n"",""rating"":1},""code"":""void somethod() {\n  // show\n}""}"
660,1.0,1.0,1.0,1.0,2017-03-24 21:50:08.393876,29,465,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""public double taxReturn()\n{\n  if(salary < 10000)\n  {\n    \n  }\n}""}"
661,2.5,3.0,5.0,3.5,2017-03-24 21:50:08.545715,11,466,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""int getPlayer() {\n    return playerID;\n}\n"",""rating"":1},""code"":""int myarray = new array[]{8,3,1}; \n""}"
662,1.0,1.0,1.0,1.0,2017-03-24 21:50:09.487045,17,467,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", targetDate = \""Jan 1, 2012\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""double taxReturn(double tax1){\n  double salary = 0;\n  if(salary > 2.0){\n    \n  }\n  \n}""}"
663,1.0,1.0,1.0,1.0,2017-03-24 21:50:10.397121,13,468,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""/** \""main program\"" method - construct and show */\npublic static void main(String[] av) {\n    testTwoCols();\n    testFiveCols();\n}\n"",""rating"":1},""code"":""void somethod() {\n  // show\n}""}"
664,1.0,1.0,1.0,1.0,2017-03-24 21:50:11.764936,13,469,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""/**\n     * Roll the dice by randomizing their values.  Tell the\n     * system to repaint the panel, to show the new values.\n     */\nvoid roll() {\n    die1 = (int) (Math.random() * 6) + 1;\n    die2 = (int) (Math.random() * 6) + 1;\n    repaint();\n}\n"",""rating"":1},""code"":""void somethod() {\n  // show\n}""}"
665,1.0,1.0,1.0,1.0,2017-03-24 21:50:12.012984,29,470,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""/**\n      Gets the final score for this student.\n      @return the sum of the scores, with the lowest score dropped.\n   */\npublic double finalScore() {\n    if (scoresSize == 0) {\n        return 0;\n    } else {\n        return sum() - minimum();\n    }\n}\n"",""rating"":1},""code"":""public double taxReturn()\n{\n  if(salary < 10000)\n  {\n    \n  }\n}""}"
666,1.0,1.0,1.0,1.0,2017-03-24 21:50:13.191151,29,471,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""/**\n      Gets the final score for this student.\n      @return the sum of the scores, with the lowest score dropped if \n      there are at least two scores, or 0 if there are no scores.\n   */\npublic double finalScore() {\n    if (scoresSize == 0) {\n        return 0;\n    } else if (scoresSize == 1) {\n        return scores[0];\n    } else {\n        return sum() - minimum();\n    }\n}\n"",""rating"":1},""code"":""public double taxReturn()\n{\n  if(salary < 10000)\n  {\n    \n  }\n}""}"
667,2.5,2.5,1.0,1.0,2017-03-24 21:50:14.526180,34,472,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""private void computeTimeAtSelectedZone() {\n    // reset calendar to local timezone\n    calendar = new GregorianCalendar();\n    long currentTime = calendar.getTimeInMillis();\n    // get time offset of local timezone wrt GMT\n    int localOffset = calendar.getTimeZone().getOffset(Calendar.ZONE_OFFSET);\n    // get time offset of remote timezone wrt GMT\n    calendar.setTimeZone(TimeZone.getTimeZone(selectedZone));\n    int remoteOffset = calendar.getTimeZone().getOffset(Calendar.ZONE_OFFSET);\n    // difference in two timezones\n    int totalOffset = -remoteOffset + localOffset;\n    // add offset to current local time\n    currentTime -= totalOffset;\n    // set time in remote zone\n    calendar.setTimeInMillis(currentTime);\n}\n"",""rating"":1},""code"":""public void Diff()\n{int[] array;\n //compute difference\n}""}"
668,1.0,1.0,1.0,1.0,2017-03-24 21:50:15.336819,13,473,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""public void showStatus(String message) {\n    System.out.println(message);\n}\n"",""rating"":1},""code"":""void somethod() {\n  // show\n}""}"
669,1.0,1.0,1.0,5.0,2017-03-24 21:50:15.665357,60,474,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""public Product(float price) {\n    this.price = price;\n    tax = (float) (price * 0.20);\n}\n"",""rating"":2},""code"":""//FIND TAX BASED ON A PERSONS STATUS IN A BUSINESS\nvoid personalTax(){\n  \n}""}"
670,1.0,1.5,1.0,1.5,2017-03-24 21:50:15.736424,21,475,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""/**\n      Gets the position of the minimum score.\n      @return the position of the smallest element of values, or -1\n      if there are no scores.\n   */\npublic int minimumPosition() {\n    if (scores.size() == 0) {\n        return -1;\n    }\n    int smallestPosition = 0;\n    for (int i = 1; i < scores.size(); i++) {\n        if (scores.get(i) < scores.get(smallestPosition)) {\n            smallestPosition = i;\n        }\n    }\n    return smallestPosition;\n}\n"",""rating"":2},""code"":""int[] Size = new int[7];\n\npublic int Array(int[] Num)\n{\n  Num = Size;\n  for(int x = 0; x < Num.length(); x++)\n  {\n    int Count = Num[0]-Num[7];\n    \n    return Count;\n  }\n}""}"
671,3.5,1.0,1.0,1.0,2017-03-24 21:50:15.762049,47,476,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""/** Called when the user clicks */\npublic void processMouseEvent(MouseEvent e) {\n    if (e.getID() == MouseEvent.MOUSE_PRESSED) {\n        // remember click position\n        last_x = (short) e.getX();\n        last_y = (short) e.getY();\n    } else\n        super.processMouseEvent(e);\n}\n"",""rating"":1},""code"":""//help me\nString iforgothowtocodejava (String myFeedback)\n{\n  return myFeedback;\n}\n""}"
672,1.0,1.0,1.0,1.0,2017-03-24 21:50:16.412645,13,477,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""/** This shows everything */\npublic void show() {\n    frame.setVisible(true);\n}\n"",""rating"":1},""code"":""void somethod() {\n  // show\n}""}"
673,2.5,2.0,2.5,5.0,2017-03-24 21:50:16.975760,61,478,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""public Product(float price) {\n    this.price = price;\n    tax = (float) (price * 0.20);\n}\n"",""rating"":2},""code"":""int random(Person p){\n  if(getSalary() < 10000.0){\n    return getSalary()*.02;\n  } else {\n    return getSalary()*.05;\n  }\n  \n  //getProfit*.1 returns 10% of profit\n  //0 tax for veterans\n  \n  /* if(none of above){\n  print message\n  }*/\n}""}"
674,1.0,1.0,1.0,2.5,2017-03-24 21:50:17.005153,46,479,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""/**\n         * Return the largest item that has been entered.\n         * The return value will be -infinity if no numbers have been entered. \n         */\npublic double getMax() {\n    return max;\n}\n"",""rating"":3},""code"":""public static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n}""}"
675,1.0,1.0,1.0,1.0,2017-03-24 21:50:17.587188,13,480,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""void addShape(Shape shape) {\n    // Add the shape to the canvas, and set its size/position and color.\n    // The shape is added at the top-left corner, with size 80-by-50.\n    // Then redraw the canvas to show the newly added shape.\n    shape.setColor(currentColor);\n    shape.reshape(3, 3, 80, 50);\n    shapes[shapeCount] = shape;\n    shapeCount++;\n    repaint();\n}\n"",""rating"":1},""code"":""void somethod() {\n  // show\n}""}"
676,3.5,1.0,1.0,1.0,2017-03-24 21:50:17.873316,47,481,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""public float getPreferredSpan(int axis) {\n    return 0.0f;\n}\n"",""rating"":1},""code"":""//help me\nString iforgothowtocodejava (String myFeedback)\n{\n  return myFeedback;\n}\n""}"
677,2.5,2.0,2.5,5.0,2017-03-24 21:50:18.554579,61,482,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", targetDate = \""Jan 1, 2012\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":2},""code"":""int random(Person p){\n  if(getSalary() < 10000.0){\n    return getSalary()*.02;\n  } else {\n    return getSalary()*.05;\n  }\n  \n  //getProfit*.1 returns 10% of profit\n  //0 tax for veterans\n  \n  /* if(none of above){\n  print message\n  }*/\n}""}"
678,2.5,3.0,5.0,3.5,2017-03-24 21:50:18.806027,11,483,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""/**\n         * Return the contents of the square in the specified row and column.\n         */\nint pieceAt(int row, int col) {\n    return board[row][col];\n}\n"",""rating"":1},""code"":""int myarray = new array[]{8,3,1}; \n""}"
679,2.5,2.5,1.0,1.0,2017-03-24 21:50:19.378998,34,484,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""public int compare(Object a, Object b) {\n    TimerTask t1 = (TimerTask) a;\n    TimerTask t2 = (TimerTask) b;\n    long diff = t1.nextTime - t2.nextTime;\n    if (diff < 0)\n        return -1;\n    else if (diff > 0)\n        return 1;\n    else\n        return 0;\n}\n"",""rating"":2},""code"":""public void Diff()\n{int[] array;\n //compute difference\n}""}"
680,1.0,1.0,1.0,1.0,2017-03-24 21:50:19.604320,13,485,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""public void show(Picture s) {\n    if (!pictures.contains(s)) {\n        pictures.add(s);\n    }\n    repaint();\n}\n"",""rating"":1},""code"":""void somethod() {\n  // show\n}""}"
681,1.0,1.0,1.0,2.5,2017-03-24 21:50:20.395969,46,486,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""// pre: list != null\n// post: return sum of elements\n// use traditional for loop\npublic static int sumListOld(int[] list) {\n    int total = 0;\n    for (int i = 0; i < list.length; i++) {\n        total += list[i];\n        System.out.println(list[i]);\n    }\n    return total;\n}\n"",""rating"":3},""code"":""public static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n}""}"
682,2.5,3.0,5.0,3.5,2017-03-24 21:50:20.537160,11,487,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""/** Compare two doubles within a given epsilon */\npublic static boolean equals(double a, double b, double eps) {\n    if (a == b)\n        return true;\n    // If the difference is less than epsilon, treat as equal.\n    return Math.abs(a - b) < eps;\n}\n"",""rating"":0},""code"":""int myarray = new array[]{8,3,1}; \n""}"
683,1.0,1.0,1.0,1.0,2017-03-24 21:50:20.829565,13,488,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""/** Print out the scribble */\nvoid print() {\n    // Obtain a PrintJob and a Graphics object to use with it\n    Toolkit toolkit = this.getToolkit();\n    PrintJob job = toolkit.getPrintJob(this, \""PrintScribble\"", printprefs);\n    // If the user clicked Cancel in the print dialog\n    if (job == null)\n        return;\n    Graphics g = job.getGraphics();\n    // Give the output a larger top and left margin.  Otherwise it will\n    // be scrunched up in the upper-left corner of the page.\n    g.translate(100, 100);\n    // Draw a border around the output area.\n    Dimension size = this.getSize();\n    g.drawRect(-1, -1, size.width + 1, size.height + 1);\n    // Set a clipping region so our scribbles don't go outside the border\n    // On-screen this happens automatically, but not on paper.\n    g.setClip(0, 0, size.width, size.height);\n    // Print this component and all components it contains\n    // Use print() if you don't want the button to show\n    this.printAll(g);\n    // Finish up.\n    // End the page\n    g.dispose();\n    // End the job\n    job.end();\n}\n"",""rating"":1},""code"":""void somethod() {\n  // show\n}""}"
684,1.0,1.0,1.0,1.0,2017-03-24 21:50:20.860005,50,489,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""public static void main(String[] args) {\n    double sum = 0;\n    int count = 0;\n    double salary = 0;\n    System.out.print(\""Enter salaries, -1 to finish: \"");\n    Scanner in = new Scanner(System.in);\n    while (salary != -1) {\n        salary = in.nextDouble();\n        if (salary != -1) {\n            sum = sum + salary;\n            count++;\n        }\n    }\n    if (count > 0) {\n        double average = sum / count;\n        System.out.println(\""Average salary: \"" + average);\n       // Process data until the sentinel is entered \n\n    } else {\n        System.out.println(\""No data\"");\n    }\n}\n       // Compute and print the average\n\n"",""rating"":5},""code"":""double getSalary(){\n  return salary;\n}\n\n\ndouble getTax(){\n  tax = (salary*2)/100;\n    return tax;\n}\n\n""}"
685,2.5,2.0,2.5,5.0,2017-03-24 21:50:21.184410,61,490,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""int getSize() {\n    // Return the number of items on the queue.\n    return size;\n}\n"",""rating"":1},""code"":""int random(Person p){\n  if(getSalary() < 10000.0){\n    return getSalary()*.02;\n  } else {\n    return getSalary()*.05;\n  }\n  \n  //getProfit*.1 returns 10% of profit\n  //0 tax for veterans\n  \n  /* if(none of above){\n  print message\n  }*/\n}""}"
686,2.5,3.0,5.0,3.5,2017-03-24 21:50:22.385152,11,491,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""int intFieldValue(Object o, String name) throws NoSuchFieldException, IllegalAccessException {\n    Class<?> c = o.getClass();\n    Field fld = c.getField(name);\n    int value = fld.getInt(o);\n    return value;\n}\n"",""rating"":1},""code"":""int myarray = new array[]{8,3,1}; \n""}"
687,1.0,1.0,1.0,3.5,2017-03-24 21:50:22.571774,59,492,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""/** Return an element of the array */\npublic int get(int index) throws ArrayIndexOutOfBoundsException {\n    if (index >= size)\n        throw new ArrayIndexOutOfBoundsException(index);\n    else\n        return data[index];\n}\n"",""rating"":3},""code"":""void somethod(){\n  // Array elements\n}""}"
688,1.5,1.5,1.0,2.0,2017-03-24 21:50:22.683781,22,493,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""/**\n         * This is called by mousePressed() when a player clicks on the\n         * square in the specified row and col.  It has already been checked\n         * that a game is, in fact, in progress.\n         */\nvoid doClickSquare(int row, int col) {\n    for (int i = 0; i < legalMoves.length; i++) if (legalMoves[i].fromRow == row && legalMoves[i].fromCol == col) {\n        selectedRow = row;\n        selectedCol = col;\n        if (currentPlayer == CheckersData.RED)\n            message.setText(\""RED:  Make your move.\"");\n        else\n            message.setText(\""BLACK:  Make your move.\"");\n        repaint();\n        return;\n    }\n    if (selectedRow < 0) {\n        message.setText(\""Click the piece you want to move.\"");\n        return;\n    }\n    for (int i = 0; i < legalMoves.length; i++) if (legalMoves[i].fromRow == selectedRow && legalMoves[i].fromCol == selectedCol && legalMoves[i].toRow == row && legalMoves[i].toCol == col) {\n        doMakeMove(legalMoves[i]);\n        return;\n    }\n    /* If we get to this point, there is a piece selected, and the square where\n             the user just clicked is not one where that piece can be legally moved.\n             Show an error message. */\n    message.setText(\""Click the square you want to move to.\"");\n}\n             /* If the player clicked on one of the pieces that the player\n             can move, mark this row and col as selected and return.  (This\n             might change a previous selection.)  Reset the message, in\n             case it was previously displaying an error message. */\n\n             /* If no piece has been selected to be moved, the user must first\n             select a piece.  Show an error message and return. */\n\n             /* If the user clicked on a square where the selected piece can be\n             legally moved, then make the move and return. */\n\n"",""rating"":3},""code"":""void getSalary()\n{\n  // get money\n}""}"
689,2.5,2.0,2.5,5.0,2017-03-24 21:50:22.700797,61,494,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":2},""code"":""int random(Person p){\n  if(getSalary() < 10000.0){\n    return getSalary()*.02;\n  } else {\n    return getSalary()*.05;\n  }\n  \n  //getProfit*.1 returns 10% of profit\n  //0 tax for veterans\n  \n  /* if(none of above){\n  print message\n  }*/\n}""}"
690,1.0,1.0,1.0,1.0,2017-03-24 21:50:23.593126,54,495,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""/**\n      Computes the precedence level of an operator.\n      @param s the operator\n      @return the precedence level (1 = lowest, 3 = highest)\n   */\npublic static int precedence(char ch) {\n    if (ch == '+' || ch == '-') {\n        return 1;\n    } else if (ch == '*' || ch == '/') {\n        return 2;\n    } else {\n        return 0;\n    }\n}\n"",""rating"":1},""code"":""\nvoid int tax()\n  {\n  //calculate tax}\n  }""}"
691,1.0,1.0,1.0,1.0,2017-03-24 21:50:24.580478,54,496,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""/** Run the command given as a String, print its output to \""out\"" */\npublic static int run(String cmd, Writer out) throws IOException {\n    Process p = r.exec(cmd);\n    FileIO.copyFile(new InputStreamReader(p.getInputStream()), out, true);\n    try {\n        // wait for process to complete\n        p.waitFor();\n    } catch (InterruptedException e) {\n        return -1;\n    }\n    return p.exitValue();\n}\n"",""rating"":1},""code"":""\nvoid int tax()\n  {\n  //calculate tax}\n  }""}"
692,2.5,2.0,2.5,5.0,2017-03-24 21:50:25.212198,61,497,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""int powerUse() {\n    if (\""Retention\"".equals(botType)) {\n        return 2;\n    } else {\n        return 4;\n    }\n}\n"",""rating"":1},""code"":""int random(Person p){\n  if(getSalary() < 10000.0){\n    return getSalary()*.02;\n  } else {\n    return getSalary()*.05;\n  }\n  \n  //getProfit*.1 returns 10% of profit\n  //0 tax for veterans\n  \n  /* if(none of above){\n  print message\n  }*/\n}""}"
693,1.0,1.0,3.0,1.0,2017-03-24 21:50:25.547912,8,,"int largDiff(int[] array)
{
  int largest = 0;
  int smallest = 0;
  for(int i = 0; i < array.size(); i++)
  {
    if()
  }
}"
694,1.0,5.0,1.0,1.0,2017-03-24 21:50:26.084993,29,,"public double taxReturn()
{
  if(salary < 10000)
  {
    
  }
  else
  {
    
  }
}"
695,3.5,1.0,1.0,1.0,2017-03-24 21:50:26.382626,17,,"double taxReturn(double tax1){
  double salary = 0;
  if(salary > 2.0){
    
  }
  
}"
696,1.0,1.0,1.0,3.5,2017-03-24 21:50:26.484107,59,498,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""/** Returns the next element from the data */\n@Override\npublic T next() {\n    if (hasNext()) {\n        return data[index++];\n    }\n    throw new NoSuchElementException(\""only \"" + data.length + \"" elements\"");\n}\n"",""rating"":2},""code"":""void somethod(){\n  // Array elements\n}""}"
697,1.0,1.0,1.0,1.0,2017-03-24 21:50:27.345538,54,499,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""public static void main(String[] args) {\n    String input = JOptionPane.showInputDialog(\""Enter price:\"");\n    double price = Double.parseDouble(input);\n    final double TAX_RATE = 8.5;\n    price = price * (1 + TAX_RATE / 100);\n    JOptionPane.showMessageDialog(null, \""Price after tax: \"" + price);\n}\n"",""rating"":1},""code"":""\nvoid int tax()\n  {\n  //calculate tax}\n  }""}"
698,1.5,1.5,1.0,2.0,2017-03-24 21:50:27.860230,22,500,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""public void setMoney(float money) {\n    this.money = money;\n}\n"",""rating"":4},""code"":""void getSalary()\n{\n  // get money\n}""}"
699,1.0,1.0,1.0,3.5,2017-03-24 21:50:28.601637,59,501,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Adds an element after the end of the array list\n      @param newElement the element to add\n   */\npublic boolean addLast(Object newElement) {\n    growIfNecessary();\n    currentSize++;\n    elements[currentSize - 1] = newElement;\n    return true;\n}\n"",""rating"":2},""code"":""void somethod(){\n  // Array elements\n}""}"
700,2.5,1.0,3.0,1.0,2017-03-24 21:50:29.739084,8,,"int largDiff(int[] array)
{
  int largest = 0;
  int smallest = 0;
  for(int i = 0; i < array.size(); i++)
  {
    if()
  }
}"
701,1.0,1.0,1.0,1.0,2017-03-24 21:50:29.868941,54,502,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""public static int parseInt(String str) {\n    return Integer.parseInt(str);\n}\n"",""rating"":1},""code"":""\nvoid int tax()\n  {\n  //calculate tax}\n  }""}"
702,2.5,2.5,1.0,1.0,2017-03-24 21:50:30.999080,34,503,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""public void go() {\n    //added initialization after verified that it doesn't compile\n    int x = 0;\n    // without it -Tyler Boone\n    int z = x + 3;\n}\n"",""rating"":1},""code"":""public void Diff()\n{int[] array;\n //compute difference\n}""}"
703,1.5,1.5,1.0,2.0,2017-03-24 21:50:31.011085,22,504,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""/**\n      Constructs a manager with a given name, annual salary and weekly bonus.\n      @param name the name of this employee\n      @param salary the annual salary\n      @param bonus the weekly bonus\n    */\npublic Manager(String name, double salary, double bonus) {\n    super(name, salary);\n    weeklyBonus = bonus;\n}\n"",""rating"":4},""code"":""void getSalary()\n{\n  // get money\n}""}"
704,1.5,1.5,1.0,2.0,2017-03-24 21:50:32.224411,22,505,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""public double weeklyPay(int hoursWorked) {\n    final int WEEKS_PER_YEAR = 52;\n    return annualSalary / WEEKS_PER_YEAR;\n}\n"",""rating"":3},""code"":""void getSalary()\n{\n  // get money\n}""}"
705,1.5,1.5,1.0,2.0,2017-03-24 21:50:33.246448,22,506,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""/**\n       * This is called by mousePressed() when a player clicks on the\n       * square in the specified row and col.  It has already been checked\n       * that a game is, in fact, in progress.\n       */\nvoid doClickSquare(int row, int col) {\n    for (int i = 0; i < legalMoves.length; i++) if (legalMoves[i].fromRow == row && legalMoves[i].fromCol == col) {\n        selectedRow = row;\n        selectedCol = col;\n        if (currentPlayer == CheckersData.RED)\n            message.setText(\""RED:  Make your move.\"");\n        else\n            message.setText(\""BLACK:  Make your move.\"");\n        repaint();\n        return;\n    }\n    if (selectedRow < 0) {\n        message.setText(\""Click the piece you want to move.\"");\n        return;\n    }\n    for (int i = 0; i < legalMoves.length; i++) if (legalMoves[i].fromRow == selectedRow && legalMoves[i].fromCol == selectedCol && legalMoves[i].toRow == row && legalMoves[i].toCol == col) {\n        doMakeMove(legalMoves[i]);\n        return;\n    }\n    /* If we get to this point, there is a piece selected, and the square where\n          the user just clicked is not one where that piece can be legally moved.\n          Show an error message. */\n    message.setText(\""Click the square you want to move to.\"");\n}\n          /* If the player clicked on one of the pieces that the player\n          can move, mark this row and col as selected and return.  (This\n          might change a previous selection.)  Reset the message, in\n          case it was previously displaying an error message. */\n\n          /* If no piece has been selected to be moved, the user must first\n          select a piece.  Show an error message and return. */\n\n          /* If the user clicked on a square where the selected piece can be\n          legally moved, then make the move and return. */\n\n"",""rating"":3},""code"":""void getSalary()\n{\n  // get money\n}""}"
706,1.0,5.0,1.0,1.0,2017-03-24 21:50:33.670992,29,507,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String[] args) {\n    String input = JOptionPane.showInputDialog(\""Enter price:\"");\n    double price = Double.parseDouble(input);\n    final double TAX_RATE = 8.5;\n    price = price * (1 + TAX_RATE / 100);\n    JOptionPane.showMessageDialog(null, \""Price after tax: \"" + price);\n}\n"",""rating"":2},""code"":""public double taxReturn()\n{\n  if(salary < 10000)\n  {\n    \n  }\n  else\n  {\n    \n  }\n}""}"
707,1.0,1.0,1.0,1.0,2017-03-24 21:50:34.314291,54,508,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""public Product(float price) {\n    this.price = price;\n    tax = (float) (price * 0.20);\n}\n"",""rating"":4},""code"":""\nvoid int tax()\n  {\n  //calculate tax}\n  }""}"
708,3.5,1.0,1.0,1.0,2017-03-24 21:50:36.416704,17,509,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""public static void main(String[] args) {\n    double sum = 0;\n    int count = 0;\n    double salary = 0;\n    System.out.print(\""Enter salaries, -1 to finish: \"");\n    Scanner in = new Scanner(System.in);\n    while (salary != -1) {\n        salary = in.nextDouble();\n        if (salary != -1) {\n            sum = sum + salary;\n            count++;\n        }\n    }\n    if (count > 0) {\n        double average = sum / count;\n        System.out.println(\""Average salary: \"" + average);\n       // Process data until the sentinel is entered \n\n    } else {\n        System.out.println(\""No data\"");\n    }\n}\n       // Compute and print the average\n\n"",""rating"":4},""code"":""double taxReturn(double tax1){\n  double salary = 0;\n  if(salary > 2.0){\n    \n  }\n  \n}""}"
709,1.0,1.0,1.0,1.0,2017-03-24 21:50:37.320677,54,510,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""\nvoid int tax()\n  {\n  //calculate tax}\n  }""}"
710,1.0,1.0,1.0,1.0,2017-03-24 21:50:37.504667,50,511,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""double value() {\n    // The value of the node is the number that it contains.\n    return number;\n}\n"",""rating"":1},""code"":""double getSalary(){\n  return salary;\n}\n\n\ndouble getTax(){\n  tax = (salary*2)/100;\n    return tax;\n}\n\n""}"
711,2.5,2.5,1.0,1.0,2017-03-24 21:50:37.635460,34,512,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""public int computeBlue(double x, double y) {\n    return ((int) (x * y)) % 256;\n}\n"",""rating"":1},""code"":""public void Diff()\n{int[] array;\n //compute difference\n}""}"
712,1.0,1.0,1.0,1.0,2017-03-24 21:50:37.888562,13,513,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""/** This shows everything */\npublic void show() {\n    frame.setVisible(true);\n}\n"",""rating"":1},""code"":""void somethod() {\n  // show comm\n}""}"
713,1.0,1.0,1.0,1.0,2017-03-24 21:50:38.196621,44,514,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""public T[] toArray(Object[] data) {\n    return null;\n}\n"",""rating"":2},""code"":""void array(){\n  \n}\n  ""}"
714,1.5,2.0,1.0,1.5,2017-03-24 21:50:38.978977,23,515,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public int iMethod() {\n    return 5;\n}\n"",""rating"":1},""code"":""int method(){\n  \n}\n  \n""}"
715,1.0,1.5,1.0,1.5,2017-03-24 21:50:39.543476,21,516,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""/**\n     * Remove an element from the list based on position.\n     * Elements with a position greater than pos\n     * are shifted to the left. (One subtracted from their\n     * position.)\n     * @param pos 0 <= pos < size()\n     * @return The element that is removed.\n     */\npublic int remove(int pos) {\n    assert 0 <= pos && pos < size() : \""Failed precondition remove. \"" + \""pos it out of bounds. Value of pos: \"" + pos;\n    int removedValue = iValues[pos];\n    for (int i = pos; i < iSize - 1; i++) iValues[i] = iValues[i + 1];\n    iSize--;\n    return removedValue;\n}\n"",""rating"":3},""code"":""int[] Size = new int[7];\n\npublic int Array(int[] Num)\n{\n  Num = Size;\n  for(int x = 0; x < Num.length(); x++)\n  {\n    int Count = Num[0]-Num[7];\n    \n    return Count;\n  }\n}""}"
716,1.0,1.0,1.0,1.0,2017-03-24 21:50:40.454618,44,517,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""/** Set to list to an ArrayList of Strings */\npublic void setToList(ArrayList<String> to) {\n    toList = to;\n}\n"",""rating"":3},""code"":""void array(){\n  \n}\n  ""}"
717,2.0,1.0,1.0,1.0,2017-03-24 21:50:40.687411,4,,"double salary;
double tax;
double final_salary;
if (salary < 10000){
  salary * 2/100 = tax;
  final_salary = tax + salary;
}
else{
  salary * 5/100 = tax;
  final_salary = tax + salary;
}

system.out.println("""");"
718,1.5,1.5,1.0,2.0,2017-03-24 21:50:41.415743,22,518,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""/**\n      Transfers money from this account and tries to add it\n      @param amount the amount of money to transfer\n      @param otherBalance balance to add the amount to\n   */\nvoid transfer(double amount, double otherBalance) {\n    balance = balance - amount;\n    otherBalance = otherBalance + amount;\n// Won’t update the argument\n}\n"",""rating"":2},""code"":""void getSalary()\n{\n  // get money\n}""}"
719,2.5,1.0,1.0,1.0,2017-03-24 21:50:41.595642,4,,"double salary;
double tax;
double final_salary;
if (salary < 10000){
  salary * 2/100 = tax;
  final_salary = tax + salary;
}
else{
  salary * 5/100 = tax;
  final_salary = tax + salary;
}

system.out.println("""");"
720,3.5,1.0,1.0,1.0,2017-03-24 21:50:42.161214,17,519,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""double value(double xValue) {\n    // The value is the negative of the value of the operand.\n    double neg = operand.value(xValue);\n    return -neg;\n}\n"",""rating"":1},""code"":""double taxReturn(double tax1){\n  double salary = 0;\n  if(salary > 2.0){\n    \n  }\n  \n}""}"
721,1.0,1.0,1.0,1.0,2017-03-24 21:50:42.336918,13,520,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""/**\n     * Roll the dice by randomizing their values.  Tell the\n     * system to repaint the panel, to show the new values.\n     */\nvoid roll() {\n    die1 = (int) (Math.random() * 6) + 1;\n    die2 = (int) (Math.random() * 6) + 1;\n    repaint();\n}\n"",""rating"":1},""code"":""void somethod() {\n  // show comm\n}""}"
722,1.0,5.0,1.0,1.0,2017-03-24 21:50:42.796961,29,521,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""/**\n      Combines two values with an operator.\n      @param value1 the first value\n      @param value2 the second value\n      @param op an operator (+, -, *, /, or =)\n   */\npublic double calculate(double value1, double value2, String op) {\n    if (op.equals(\""+\"")) {\n        return value1 + value2;\n    } else if (op.equals(\""-\"")) {\n        return value1 - value2;\n    } else if (op.equals(\""*\"")) {\n        return value1 * value2;\n    } else if (op.equals(\""/\"")) {\n        return value1 / value2;\n    } else // \""=\""\n    {\n        return value2;\n    }\n}\n"",""rating"":1},""code"":""public double taxReturn()\n{\n  if(salary < 10000)\n  {\n    \n  }\n  else\n  {\n    \n  }\n}""}"
723,1.0,1.0,1.0,1.0,2017-03-24 21:50:43.069842,54,522,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""/**\n      Finds a value in a range of a sorted array, using the binary\n      search algorithm.\n      @param a the array in which to search\n      @param low the low index of the range\n      @param high the high index of the range\n      @param value the value to find\n      @return the index at which the value occurs, or -1\n      if it does not occur in the array\n   */\npublic static int search(int[] a, int low, int high, int value) {\n    if (low <= high) {\n        int mid = (low + high) / 2;\n        if (a[mid] == value) {\n            return mid;\n        } else if (a[mid] < value) {\n            return search(a, mid + 1, high, value);\n        } else {\n            return search(a, low, mid - 1, value);\n        }\n    } else {\n        return -1;\n    }\n}\n"",""rating"":1},""code"":""\nvoid int tax()\n  {\n  //calculate tax}\n  }""}"
724,1.0,1.0,1.0,1.0,2017-03-24 21:50:43.771260,13,523,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""void addShape(Shape shape) {\n    // Add the shape to the canvas, and set its size/position and color.\n    // The shape is added at the top-left corner, with size 80-by-50.\n    // Then redraw the canvas to show the newly added shape.\n    shape.setColor(currentColor);\n    shape.reshape(3, 3, 80, 50);\n    shapes[shapeCount] = shape;\n    shapeCount++;\n    repaint();\n}\n"",""rating"":1},""code"":""void somethod() {\n  // show comm\n}""}"
725,1.0,5.0,1.0,1.0,2017-03-24 21:50:44.270165,29,524,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String[] args) {\n    String input = JOptionPane.showInputDialog(\""Enter price:\"");\n    double price = Double.parseDouble(input);\n    final double TAX_RATE = 8.5;\n    price = price * (1 + TAX_RATE / 100);\n    JOptionPane.showMessageDialog(null, \""Price after tax: \"" + price);\n}\n"",""rating"":1},""code"":""public double taxReturn()\n{\n  if(salary < 10000)\n  {\n    \n  }\n  else\n  {\n    \n  }\n}""}"
726,1.5,1.5,1.0,2.0,2017-03-24 21:50:45.011040,22,525,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""/*\n     * Load the Applet into memory. Should do caching.\n     */\nvoid loadApplet(String appletName, int w, int h) {\n    // height =         ditto\n    try {\n        // get a Class object for the Applet subclass\n        ac = Class.forName(appletName);\n        // Construct an instance (as if using no-argument constructor)\n        ai = (Applet) ac.newInstance();\n    } catch (ClassNotFoundException e) {\n        showStatus(\""Applet subclass \"" + appletName + \"" did not load\"");\n        return;\n    } catch (Exception e) {\n        showStatus(\""Applet \"" + appletName + \"" did not instantiate\"");\n        return;\n    }\n    ai.setSize(w, h);\n}\n         // appletName = ... extract from the HTML CODE= somehow ...;\n\n         // width =         ditto\n\n"",""rating"":1},""code"":""void getSalary()\n{\n  // get money\n}""}"
727,1.0,1.0,1.0,1.0,2017-03-24 21:50:45.298939,13,526,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""public static void showList(int[] list) {\n    for (int i = 0; i < list.length; i++) System.out.print(list[i] + \"" \"");\n    System.out.println();\n}\n"",""rating"":1},""code"":""void somethod() {\n  // show comm\n}""}"
728,3.5,1.0,1.0,1.0,2017-03-24 21:50:46.655263,17,527,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""double performConversion(double f) {\n    return f *= 2267.96185;\n}\n"",""rating"":2},""code"":""double taxReturn(double tax1){\n  double salary = 0;\n  if(salary > 2.0){\n    \n  }\n  \n}""}"
729,1.0,1.0,1.0,3.5,2017-03-24 21:50:46.761001,59,528,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Adds an element after the end of the array list\n      @param newElement the element to add\n   */\npublic boolean addLast(Object newElement) {\n    growIfNecessary();\n    currentSize++;\n    elements[currentSize - 1] = newElement;\n    return true;\n}\n"",""rating"":2},""code"":""void somethod(){\n  // Array elements difference\n}""}"
730,1.0,5.0,1.0,1.0,2017-03-24 21:50:47.419524,29,529,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""public Product(float price) {\n    this.price = price;\n    tax = (float) (price * 0.20);\n}\n"",""rating"":4},""code"":""public double taxReturn()\n{\n  if(salary < 10000)\n  {\n    \n  }\n  else\n  {\n    \n  }\n}""}"
731,2.5,2.0,1.0,1.0,2017-03-24 21:50:47.427834,4,,"double salary;
double tax;
double final_salary;
if (salary < 10000){
  salary * 2/100 = tax;
  final_salary = tax + salary;
}
else{
  salary * 5/100 = tax;
  final_salary = tax + salary;
}

system.out.println("""");"
732,2.5,2.0,2.0,1.0,2017-03-24 21:50:48.915722,4,,"double salary;
double tax;
double final_salary;
if (salary < 10000){
  salary * 2/100 = tax;
  final_salary = tax + salary;
}
else{
  salary * 5/100 = tax;
  final_salary = tax + salary;
}

system.out.println("""");"
733,3.5,1.0,1.0,1.0,2017-03-24 21:50:49.629039,17,530,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":4},""code"":""double taxReturn(double tax1){\n  double salary = 0;\n  if(salary > 2.0){\n    \n  }\n  \n}""}"
734,1.0,5.0,1.0,1.0,2017-03-24 21:50:50.229145,29,531,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""public static void main(String[] args) {\n    double sum = 0;\n    int count = 0;\n    double salary = 0;\n    System.out.print(\""Enter salaries, -1 to finish: \"");\n    Scanner in = new Scanner(System.in);\n    while (salary != -1) {\n        salary = in.nextDouble();\n        if (salary != -1) {\n            sum = sum + salary;\n            count++;\n        }\n    }\n    if (count > 0) {\n        double average = sum / count;\n        System.out.println(\""Average salary: \"" + average);\n       // Process data until the sentinel is entered \n\n    } else {\n        System.out.println(\""No data\"");\n    }\n}\n       // Compute and print the average\n\n"",""rating"":5},""code"":""public double taxReturn()\n{\n  if(salary < 10000)\n  {\n    \n  }\n  else\n  {\n    \n  }\n}""}"
735,2.5,2.0,1.0,1.0,2017-03-24 21:50:51.162080,4,,"double salary;
double tax;
double final_salary;
if (salary < 10000){
  salary * 2/100 = tax;
  final_salary = tax + salary;
}
else{
  salary * 5/100 = tax;
  final_salary = tax + salary;
}

system.out.println("""");"
736,1.5,1.5,1.0,2.0,2017-03-24 21:50:51.396395,22,532,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""public static void main(String[] args) {\n    double sum = 0;\n    int count = 0;\n    double salary = 0;\n    System.out.print(\""Enter salaries, -1 to finish: \"");\n    Scanner in = new Scanner(System.in);\n    while (salary != -1) {\n        salary = in.nextDouble();\n        if (salary != -1) {\n            sum = sum + salary;\n            count++;\n        }\n    }\n    if (count > 0) {\n        double average = sum / count;\n        System.out.println(\""Average salary: \"" + average);\n       // Process data until the sentinel is entered \n\n    } else {\n        System.out.println(\""No data\"");\n    }\n}\n       // Compute and print the average\n\n"",""rating"":2},""code"":""void getSalary()\n{\n  // get money\n}""}"
737,1.0,1.0,1.0,3.5,2017-03-24 21:50:51.535391,59,533,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""/** Returns the next element from the data */\n@Override\npublic T next() {\n    if (hasNext()) {\n        return data[index++];\n    }\n    throw new NoSuchElementException(\""only \"" + data.length + \"" elements\"");\n}\n"",""rating"":2},""code"":""void somethod(){\n  // Array elements difference\n}""}"
738,2.5,1.5,1.0,1.0,2017-03-24 21:50:52.150193,4,,"double salary;
double tax;
double final_salary;
if (salary < 10000){
  salary * 2/100 = tax;
  final_salary = tax + salary;
}
else{
  salary * 5/100 = tax;
  final_salary = tax + salary;
}

system.out.println("""");"
739,1.0,1.0,1.0,1.0,2017-03-24 21:50:52.404565,54,534,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", targetDate = \""Jan 1, 2012\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""\nvoid int tax()\n  {\n  //calculate tax}\n  }""}"
740,1.0,1.0,1.0,1.0,2017-03-24 21:50:53.182510,54,535,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""public static int getCount() {\n    return count;\n}\n"",""rating"":1},""code"":""\nvoid int tax()\n  {\n  //calculate tax}\n  }""}"
741,2.5,0.5,1.0,1.0,2017-03-24 21:50:53.277598,4,,"double salary;
double tax;
double final_salary;
if (salary < 10000){
  salary * 2/100 = tax;
  final_salary = tax + salary;
}
else{
  salary * 5/100 = tax;
  final_salary = tax + salary;
}

system.out.println("""");"
742,1.0,1.0,1.0,3.5,2017-03-24 21:50:55.024363,59,536,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""/** Return an element of the array */\npublic int get(int index) throws ArrayIndexOutOfBoundsException {\n    if (index >= size)\n        throw new ArrayIndexOutOfBoundsException(index);\n    else\n        return data[index];\n}\n"",""rating"":3},""code"":""void somethod(){\n  // Array elements difference\n}""}"
743,1.0,5.0,1.0,1.0,2017-03-24 21:50:55.359570,29,537,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", targetDate = \""Jan 1, 2012\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":5},""code"":""public double taxReturn()\n{\n  if(salary < 10000)\n  {\n    \n  }\n  else\n  {\n    \n  }\n}""}"
744,2.5,1.0,1.0,1.0,2017-03-24 21:50:55.558852,4,,"double salary;
double tax;
double final_salary;
if (salary < 10000){
  salary * 2/100 = tax;
  final_salary = tax + salary;
}
else{
  salary * 5/100 = tax;
  final_salary = tax + salary;
}

system.out.println("""");"
745,1.5,1.5,1.0,2.0,2017-03-24 21:50:56.417659,22,538,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""// end drawFunction()\nvoid putLine(Graphics g, double x1, double y1, double x2, double y2) {\n    // Draw a line segment from the point (x1,y1) to (x2,y2).\n    // These real values must be scaled to get the integer \n    // coordinates of the corresponding pixels.\n    // Pixel coordinates corresponding to (x1,y1).\n    int a1, b1;\n    // Pixel coordinates corresponding to (x2,y2).\n    int a2, b2;\n    // Width of the canvas.\n    int width = getWidth();\n    // Height of the canvas. \n    int height = getHeight();\n    a1 = (int) ((x1 + 5) / 10 * width);\n    b1 = (int) ((5 - y1) / 10 * height);\n    a2 = (int) ((x2 + 5) / 10 * width);\n    b2 = (int) ((5 - y2) / 10 * height);\n    if (Math.abs(y1) < 30000 && Math.abs(y2) < 30000) {\n        // Only draw lines for reasonable y-values.\n        // This should not be necessary, I think,\n        // but I got a problem when y was very large.)\n        g.drawLine(a1, b1, a2, b2);\n    }\n}\n"",""rating"":1},""code"":""void getSalary()\n{\n  // get money\n}""}"
746,1.0,1.0,1.0,1.0,2017-03-24 21:50:56.774947,4,,"double salary;
double tax;
double final_salary;
if (salary < 10000){
  salary * 2/100 = tax;
  final_salary = tax + salary;
}
else{
  salary * 5/100 = tax;
  final_salary = tax + salary;
}

system.out.println("""");"
747,1.0,1.0,1.0,1.0,2017-03-24 21:50:58.935763,13,539,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""public static void main(String[] argv) throws Exception {\n    if (argv.length != 1) {\n        System.err.println(\""Usage: CommPortSimple deviceName\"");\n        System.exit(1);\n    }\n    new CommPortSimple(argv[0]).holdConversation();\n    System.exit(0);\n}\n"",""rating"":1},""code"":""void somethod() {\n  // show comm\n}""}"
748,3.5,1.0,1.0,1.0,2017-03-24 21:50:59.185921,17,540,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""double value(double xValue) {\n    // The value is obtained by evaluating the left and right\n    // operands and combining the values with the operator.\n    double x = left.value(xValue);\n    double y = right.value(xValue);\n    switch(op) {\n        case '+':\n            return x + y;\n        case '-':\n            return x - y;\n        case '*':\n            return x * y;\n        case '/':\n            return x / y;\n        // Bad operator!\n        default:\n            return Double.NaN;\n    }\n}\n"",""rating"":4},""code"":""double taxReturn(double tax1){\n  double salary = 0;\n  if(salary > 2.0){\n    \n  }\n  \n}""}"
749,3.5,1.0,1.0,1.0,2017-03-24 21:51:06.835455,17,541,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""public Product(float price) {\n    this.price = price;\n    tax = (float) (price * 0.20);\n}\n"",""rating"":2},""code"":""double taxReturn(double tax1){\n  double salary = 0;\n  if(salary > 2.0){\n    \n  }\n  \n}""}"
750,1.0,1.5,1.0,1.5,2017-03-24 21:51:07.024674,21,542,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""public int run() {\n    MutableInteger list[] = new MutableInteger[MAX];\n    for (int i = 0; i < list.length; i++) {\n        list[i] = new MutableInteger(i);\n    }\n    int sum = 0;\n    for (int i = 0; i < list.length; i++) {\n        sum += list[i].getValue();\n    }\n    return sum;\n}\n"",""rating"":3},""code"":""int[] Size = new int[7];\n\npublic int Array(int[] Num)\n{\n  Num = Size;\n  for(int x = 0; x < Num.length(); x++)\n  {\n    int Count = Num[0]-Num[7];\n    \n    return Count;\n  }\n}""}"
751,3.5,1.0,1.0,1.0,2017-03-24 21:51:09.698970,17,543,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""double performConversion(double f) {\n    return f *= 453.59237;\n}\n"",""rating"":2},""code"":""double taxReturn(double tax1){\n  double salary = 0;\n  if(salary > 2.0){\n    \n  }\n  \n}""}"
752,1.5,1.5,1.0,2.0,2017-03-24 21:51:33.976949,22,544,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""public static void main(String[] args) {\n    double sum = 0;\n    int count = 0;\n    double salary = 0;\n    System.out.print(\""Enter salaries, -1 to finish: \"");\n    Scanner in = new Scanner(System.in);\n    while (salary != -1) {\n        salary = in.nextDouble();\n        if (salary != -1) {\n            sum = sum + salary;\n            count++;\n        }\n    }\n    if (count > 0) {\n        double average = sum / count;\n        System.out.println(\""Average salary: \"" + average);\n       // Process data until the sentinel is entered \n\n    } else {\n        System.out.println(\""No data\"");\n    }\n}\n       // Compute and print the average\n\n"",""rating"":3},""code"":""void getSalary()\n{\n  \n}""}"
753,1.5,1.5,1.0,2.0,2017-03-24 21:51:36.490608,22,545,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""/** Display the next frame. Called by the animator timer */\nvoid animate() {\n    // Get next frame\n    String frame = animationFrames[animationFrame++];\n    // Update msgline\n    messageLine.setText(animationMessage + \"" \"" + frame);\n    animationFrame = animationFrame % animationFrames.length;\n}\n"",""rating"":1},""code"":""void getSalary()\n{\n  \n}""}"
754,1.5,1.5,1.0,2.0,2017-03-24 21:51:40.679805,22,546,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""/**\n      Constructs a manager with a given name, annual salary and weekly bonus.\n      @param name the name of this employee\n      @param salary the annual salary\n      @param bonus the weekly bonus\n    */\npublic Manager(String name, double salary, double bonus) {\n    super(name, salary);\n    weeklyBonus = bonus;\n}\n"",""rating"":4},""code"":""void getSalary()\n{\n  \n}""}"
755,1.5,1.5,1.0,2.0,2017-03-24 21:51:43.063392,22,547,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""public double weeklyPay(int hoursWorked) {\n    final int WEEKS_PER_YEAR = 52;\n    return annualSalary / WEEKS_PER_YEAR;\n}\n"",""rating"":2},""code"":""void getSalary()\n{\n  \n}""}"
756,1.5,1.5,1.0,2.0,2017-03-24 21:51:51.642598,22,548,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String[] args) {\n    Employee[] staff = new Employee[3];\n    staff[0] = new HourlyEmployee(\""Morgan, Harry\"", 30);\n    staff[1] = new SalariedEmployee(\""Lin, Sally\"", 52000);\n    staff[2] = new Manager(\""Smith, Mary\"", 104000, 50);\n    Scanner in = new Scanner(System.in);\n    for (Employee e : staff) {\n        System.out.print(\""Hours worked by \"" + e.getName() + \"": \"");\n        int hours = in.nextInt();\n        System.out.println(\""Salary: \"" + e.weeklyPay(hours));\n    }\n}\n"",""rating"":2},""code"":""void getSalary()\n{\n  \n}""}"
757,1.5,1.5,1.0,2.0,2017-03-24 21:51:53.548209,22,549,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""/**\n     * Stop the computation, if one is running.  This is called\n     * when the user clicks the Abort button.\n     */\nvoid doAbort() {\n    if (timer != null) {\n        timer.stop();\n        timer = null;\n        methodChoice.setEnabled(true);\n        abortButton.setEnabled(false);\n        message.setText(\""Click any square to begin.\"");\n        queue = null;\n        stack = null;\n        randomList = null;\n    }\n}\n"",""rating"":1},""code"":""void getSalary()\n{\n  \n}""}"
758,2.5,1.0,3.0,1.0,2017-03-24 21:51:57.684432,8,550,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent2(int[] a) {\n    // O(n log(n))\n    Arrays.sort(a);\n    int[] counts = new int[a.length];\n    int count = 0;\n    for (// O(n)\n    int i = 0; // O(n)\n    i < a.length; // O(n)\n    i++) {\n        count++;\n        if (i == a.length - 1 || a[i] != a[i + 1]) {\n            counts[i] = count;\n            count = 0;\n        }\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":1},""code"":""int largDiff(int[] array)\n{\n  int largest = array[0];\n  int smallest = arra[0];\n  for(int i = 0; i < array.size(); i++)\n  {\n    //if()\n  }\n}""}"
759,1.5,1.5,1.0,2.0,2017-03-24 21:51:59.148402,22,551,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Constructs a salaried employee with a given name and annual salary.\n      @param name the name of this employee\n      @param salary the annual salary\n    */\npublic SalariedEmployee(String name, double salary) {\n    setName(name);\n    annualSalary = salary;\n}\n"",""rating"":1},""code"":""void getSalary()\n{\n  \n}""}"
760,2.5,1.0,3.0,1.0,2017-03-24 21:51:59.687258,8,552,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""public int compare(Object a, Object b) {\n    TimerTask t1 = (TimerTask) a;\n    TimerTask t2 = (TimerTask) b;\n    long diff = t1.nextTime - t2.nextTime;\n    if (diff < 0)\n        return -1;\n    else if (diff > 0)\n        return 1;\n    else\n        return 0;\n}\n"",""rating"":2},""code"":""int largDiff(int[] array)\n{\n  int largest = array[0];\n  int smallest = arra[0];\n  for(int i = 0; i < array.size(); i++)\n  {\n    //if()\n  }\n}""}"
761,2.5,1.0,3.0,1.0,2017-03-24 21:52:03.944894,8,553,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""public static void main(String[] args) {\n    int n = 10;\n    int[] squares = IntStream.range(0, n).map( i -> i * i).toArray();\n    System.out.println(Arrays.toString(squares));\n    double[] values = { 32, 54, 67.5, 29, 35, 80, 115, 44.5, 100, 65 };\n    double total = DoubleStream.of(values).sum();\n    double average = DoubleStream.of(values).average().orElse(0);\n    double largest = DoubleStream.of(values).max().orElse(Double.MIN_VALUE);\n    double smallest = DoubleStream.of(values).min().orElse(Double.MAX_VALUE);\n    System.out.println(\""total: \"" + total);\n    System.out.println(\""average: \"" + average);\n    System.out.println(\""largest: \"" + largest);\n    System.out.println(\""smallest: \"" + smallest);\n    String str = \""How much wood could a woodchuck chuck?\"";\n    long spaces = str.codePoints().filter( ch -> ch == ' ').count();\n    System.out.println(\""spaces: \"" + spaces);\n    String result = DoubleStream.of(values).mapToObj( v -> \""\"" + v).collect(Collectors.joining(\"" | \""));\n    System.out.println(result);\n    OptionalDouble result2 = DoubleStream.of(values).filter( v -> v > 100).findFirst();\n    System.out.println(result2);\n    n = values.length;\n    int pos = IntStream.range(0, n).filter( i -> values[i] == 100).findFirst().orElse(-1);\n    System.out.println(\""pos: \"" + pos);\n}\n"",""rating"":1},""code"":""int largDiff(int[] array)\n{\n  int largest = array[0];\n  int smallest = arra[0];\n  for(int i = 0; i < array.size(); i++)\n  {\n    //if()\n  }\n}""}"
762,2.5,1.0,3.0,1.0,2017-03-24 21:52:11.377443,8,554,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static <E extends Comparable<E>> E max(E[] a) {\n    E largest = a[0];\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":4},""code"":""int largDiff(int[] array)\n{\n  int largest = array[0];\n  int smallest = arra[0];\n  for(int i = 0; i < array.size(); i++)\n  {\n    //if()\n  }\n}""}"
763,2.5,1.0,3.0,1.0,2017-03-24 21:52:18.952174,8,555,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""// pre: list != null, list.length > 0\n// post: return index of minimum element of array\npublic static int findMin(int[] list) {\n    assert list != null && list.length > 0 : \""failed precondition\"";\n    int indexOfMin = 0;\n    for (int i = 1; i < list.length; i++) {\n        if (list[i] < list[indexOfMin]) {\n            indexOfMin = i;\n        }\n    }\n    return indexOfMin;\n}\n"",""rating"":3},""code"":""int largDiff(int[] array)\n{\n  int largest = array[0];\n  int smallest = arra[0];\n  for(int i = 0; i < array.size(); i++)\n  {\n    //if()\n  }\n}""}"
764,2.5,1.0,3.0,1.0,2017-03-24 21:52:38.255263,8,556,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""public static <E extends Comparable<? super E>> E max(ArrayList<E> a) // public static <E extends Comparable<E>> E max(ArrayList<E> a) \n// doesn't work with Student array list\n{\n    E largest = a.get(0);\n    for (int i = 1; i < a.size(); i++) {\n        if (a.get(i).compareTo(largest) > 0) {\n            largest = a.get(i);\n        }\n    }\n    return largest;\n}\n"",""rating"":4},""code"":""int largDiff(int[] array)\n{\n  int largest = array[0];\n  int smallest = arra[0];\n  for(int i = 0; i < array.size(); i++)\n  {\n    //if()\n  }\n}""}"
765,2.5,1.0,3.0,1.0,2017-03-24 21:52:52.619641,8,557,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""// pre: list != null\n// post: return sum of elements\n// use traditional for loop\npublic static int sumListOld(int[] list) {\n    int total = 0;\n    for (int i = 0; i < list.length; i++) {\n        total += list[i];\n        System.out.println(list[i]);\n    }\n    return total;\n}\n"",""rating"":1},""code"":""int largDiff(int[] array)\n{\n  int largest = array[0];\n  int smallest = arra[0];\n  for(int i = 0; i < array.size(); i++)\n  {\n    //if()\n  }\n}""}"
766,2.5,1.0,3.0,1.0,2017-03-24 21:53:02.182439,8,558,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent1(int[] a) {\n    int[] counts = new int[a.length];\n    for (// O(n*n)\n    int i = 0; // O(n*n)\n    i < a.length; // O(n*n)\n    i++) {\n        // O(n) in each iteration\n        counts[i] = count(a, a[i]);\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":1},""code"":""int largDiff(int[] array)\n{\n  int largest = array[0];\n  int smallest = arra[0];\n  for(int i = 0; i < array.size(); i++)\n  {\n    //if()\n  }\n}""}"
767,1.0,1.0,1.0,1.0,2017-03-24 21:53:21.907476,22,559,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""private static void printList(ArrayList<Integer> numbers) {\n    System.out.print(\""    [ \"");\n    for (int i = 0; i < numbers.size(); i++) {\n        if (i > 0)\n            System.out.print(\"", \"");\n        System.out.print(numbers.get(i));\n    }\n    System.out.println(\"" ]\"");\n}\n"",""rating"":1},""code"":""void numbers()\n{\n  int array[];\n}\n""}"
768,1.0,1.0,1.0,1.0,2017-03-24 21:53:24.655588,22,560,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""void drawAxes(Graphics g) {\n    // Draw horizontal and vertical axes in the middle of the\n    // canvas.  A 5-pixel border is left at the ends of the axes.\n    int width = getWidth();\n    int height = getHeight();\n    g.setColor(Color.BLUE);\n    g.drawLine(5, height / 2, width - 5, height / 2);\n    g.drawLine(width / 2, 5, width / 2, height - 5);\n}\n"",""rating"":1},""code"":""void numbers()\n{\n  int array[];\n}\n""}"
769,1.0,1.0,1.0,1.0,2017-03-24 21:53:27.462993,22,561,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""/** Set to list to an ArrayList of Strings */\npublic void setToList(ArrayList<String> to) {\n    toList = to;\n}\n"",""rating"":1},""code"":""void numbers()\n{\n  int array[];\n}\n""}"
770,1.0,1.0,1.0,1.0,2017-03-24 21:53:36.384970,22,562,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public String toString() {\n    return Arrays.toString(queens);\n}\n"",""rating"":3},""code"":""void numbers()\n{\n  int array[];\n}\n""}"
771,1.0,1.0,1.0,1.0,2017-03-24 21:53:45.381567,22,563,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""/**\n         * When the ERASE or SMUDGE tools are used and the mouse jumps\n         * from (x1,y1) to (x2,y2), the tool has to be applied to a\n         * line of pixel positions between the two points in order to\n         * cover the entire line that the mouse moves along.  The change\n         * is made to the off-screen canvas, and repaint() is called to\n         * copy the changes to the screen.\n         */\nvoid applyToolAlongLine(int x1, int y1, int x2, int y2) {\n    Graphics g = OSC.createGraphics();\n    // (for ERASE only)\n    g.setColor(fillColor);\n    // (for SMUDGE only)\n    int w = OSC.getWidth();\n    // (for SMUDGE only)\n    int h = OSC.getHeight();\n    int dist = Math.max(Math.abs(x2 - x1), Math.abs(y2 - y1));\n    // dist is the number of points along the line from\n    // (x1,y1) to (x2,y2) at which the tool will be applied.\n    double dx = (double) (x2 - x1) / dist;\n    double dy = (double) (y2 - y1) / dist;\n    for (int d = 1; d <= dist; d++) {\n        // Apply the tool at one of the points (x,y) along the\n        // line from (x1,y1) to (x2,y2).\n        int x = (int) Math.round(x1 + dx * d);\n        int y = (int) Math.round(y1 + dy * d);\n        if (currentTool == Tool.ERASE) {\n            // Erase a 10-by-10 block of pixels around (x,y)\n            g.fillRect(x - 5, y - 5, 10, 10);\n            repaint(x - 5, y - 5, 10, 10);\n        } else {\n            // of pixels that are visited by the tool.\n            for (int i = 0; i < 7; i++) for (int j = 0; j < 7; j++) {\n                int r = y + j - 3;\n                int c = x + i - 3;\n                if (!(r < 0 || r >= h || c < 0 || c >= w || smudgeRed[i][j] == -1)) {\n                    int curCol = OSC.getRGB(c, r);\n                    int curRed = (curCol >> 16) & 0xFF;\n                    int curGreen = (curCol >> 8) & 0xFF;\n                    int curBlue = curCol & 0xFF;\n                    int newRed = (int) (curRed * 0.7 + smudgeRed[i][j] * 0.3);\n                    int newGreen = (int) (curGreen * 0.7 + smudgeGreen[i][j] * 0.3);\n                    int newBlue = (int) (curBlue * 0.7 + smudgeBlue[i][j] * 0.3);\n                    int newCol = newRed << 16 | newGreen << 8 | newBlue;\n                    OSC.setRGB(c, r, newCol);\n                    smudgeRed[i][j] = curRed * 0.3 + smudgeRed[i][j] * 0.7;\n                    smudgeGreen[i][j] = curGreen * 0.3 + smudgeGreen[i][j] * 0.7;\n                    smudgeBlue[i][j] = curBlue * 0.3 + smudgeBlue[i][j] * 0.7;\n                }\n            }\n            repaint(x - 3, y - 3, 7, 7);\n        }\n    }\n    g.dispose();\n}\n                         // For the SMUDGE tool, blend some of the color from\n\n                         // the smudgeRed, smudgeGreen, and smudgeBlue arrays\n\n                         // into the pixels in a 7-by-7 block around (x,y), and\n\n                         // vice versa.  The effect is to smear out the color\n\n"",""rating"":1},""code"":""void numbers()\n{\n  int array[];\n}\n""}"
772,1.0,1.0,1.0,1.0,2017-03-24 21:53:50.616572,22,564,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""// END main\n// THE FOLLOWING METHODS ARE NOT YET IMPLEMENTED!\npublic Object[] toArray() {\n    return null;\n}\n"",""rating"":1},""code"":""void numbers()\n{\n  int array[];\n}\n""}"
773,1.0,1.0,1.0,1.0,2017-03-24 21:53:54.152627,22,565,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""// end drawFunction()\nvoid putLine(Graphics g, double x1, double y1, double x2, double y2) {\n    // Draw a line segment from the point (x1,y1) to (x2,y2).\n    // These real values must be scaled to get the integer \n    // coordinates of the corresponding pixels.\n    // Pixel coordinates corresponding to (x1,y1).\n    int a1, b1;\n    // Pixel coordinates corresponding to (x2,y2).\n    int a2, b2;\n    // Width of the canvas.\n    int width = getWidth();\n    // Height of the canvas. \n    int height = getHeight();\n    a1 = (int) ((x1 + 5) / 10 * width);\n    b1 = (int) ((5 - y1) / 10 * height);\n    a2 = (int) ((x2 + 5) / 10 * width);\n    b2 = (int) ((5 - y2) / 10 * height);\n    if (Math.abs(y1) < 30000 && Math.abs(y2) < 30000) {\n        // Only draw lines for reasonable y-values.\n        // This should not be necessary, I think,\n        // but I got a problem when y was very large.)\n        g.drawLine(a1, b1, a2, b2);\n    }\n}\n"",""rating"":2},""code"":""void numbers()\n{\n  int array[];\n}\n""}"
774,1.0,1.0,1.0,1.0,2017-03-24 21:54:02.378583,22,566,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""public T[] toArray(Object[] data) {\n    return null;\n}\n"",""rating"":1},""code"":""void numbers()\n{\n  int array[];\n}\n""}"
775,1.0,1.0,1.0,1.0,2017-03-24 21:54:04.635851,22,567,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""/**\n       * When the ERASE or SMUDGE tools are used and the mouse jumps\n       * from (x1,y1) to (x2,y2), the tool has to be applied to a\n       * line of pixel positions between the two points in order to\n       * cover the entire line that the mouse moves along.  The change\n       * is made to the off-screen canvas, and repaint() is called to\n       * copy the changes to the screen.\n       */\nvoid applyToolAlongLine(int x1, int y1, int x2, int y2) {\n    Graphics g = OSC.createGraphics();\n    // (for ERASE only)\n    g.setColor(fillColor);\n    // (for SMUDGE only)\n    int w = OSC.getWidth();\n    // (for SMUDGE only)\n    int h = OSC.getHeight();\n    int dist = Math.max(Math.abs(x2 - x1), Math.abs(y2 - y1));\n    // dist is the number of points along the line from\n    // (x1,y1) to (x2,y2) at which the tool will be applied.\n    double dx = (double) (x2 - x1) / dist;\n    double dy = (double) (y2 - y1) / dist;\n    for (int d = 1; d <= dist; d++) {\n        // Apply the tool at one of the points (x,y) along the\n        // line from (x1,y1) to (x2,y2).\n        int x = (int) Math.round(x1 + dx * d);\n        int y = (int) Math.round(y1 + dy * d);\n        if (currentTool == Tool.ERASE) {\n            // Erase a 10-by-10 block of pixels around (x,y)\n            g.fillRect(x - 5, y - 5, 10, 10);\n            repaint(x - 5, y - 5, 10, 10);\n        } else {\n            // of pixels that are visited by the tool.\n            for (int i = 0; i < 7; i++) for (int j = 0; j < 7; j++) {\n                int r = y + j - 3;\n                int c = x + i - 3;\n                if (!(r < 0 || r >= h || c < 0 || c >= w || smudgeRed[i][j] == -1)) {\n                    int curCol = OSC.getRGB(c, r);\n                    int curRed = (curCol >> 16) & 0xFF;\n                    int curGreen = (curCol >> 8) & 0xFF;\n                    int curBlue = curCol & 0xFF;\n                    int newRed = (int) (curRed * 0.7 + smudgeRed[i][j] * 0.3);\n                    int newGreen = (int) (curGreen * 0.7 + smudgeGreen[i][j] * 0.3);\n                    int newBlue = (int) (curBlue * 0.7 + smudgeBlue[i][j] * 0.3);\n                    int newCol = newRed << 16 | newGreen << 8 | newBlue;\n                    OSC.setRGB(c, r, newCol);\n                    smudgeRed[i][j] = curRed * 0.3 + smudgeRed[i][j] * 0.7;\n                    smudgeGreen[i][j] = curGreen * 0.3 + smudgeGreen[i][j] * 0.7;\n                    smudgeBlue[i][j] = curBlue * 0.3 + smudgeBlue[i][j] * 0.7;\n                }\n            }\n            repaint(x - 3, y - 3, 7, 7);\n        }\n    }\n    g.dispose();\n}\n                   // For the SMUDGE tool, blend some of the color from\n\n                   // the smudgeRed, smudgeGreen, and smudgeBlue arrays\n\n                   // into the pixels in a 7-by-7 block around (x,y), and\n\n                   // vice versa.  The effect is to smear out the color\n\n"",""rating"":3},""code"":""void numbers()\n{\n  int array[];\n}\n""}"
776,1.0,1.0,1.0,1.0,2017-03-24 21:54:09.332776,22,568,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""/**\n       * When the ERASE or SMUDGE tools are used and the mouse jumps\n       * from (x1,y1) to (x2,y2), the tool has to be applied to a\n       * line of pixel positions between the two points in order to\n       * cover the entire line that the mouse moves along.  The change\n       * is made to the off-screen canvas, and repaint() is called to\n       * copy the changes to the screen.\n       */\nvoid applyToolAlongLine(int x1, int y1, int x2, int y2) {\n    Graphics g = OSC.createGraphics();\n    Graphics2D g2 = (Graphics2D) g;\n    g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n    // (for ERASE only)\n    g.setColor(fillColor);\n    // (for SMUDGE only)\n    int w = OSC.getWidth();\n    // (for SMUDGE only)\n    int h = OSC.getHeight();\n    int dist = Math.max(Math.abs(x2 - x1), Math.abs(y2 - y1));\n    // dist is the number of points along the line from\n    // (x1,y1) to (x2,y2) at which the tool will be applied.\n    double dx = (double) (x2 - x1) / dist;\n    double dy = (double) (y2 - y1) / dist;\n    for (int d = 1; d <= dist; d++) {\n        // Apply the tool at one of the points (x,y) along the\n        // line from (x1,y1) to (x2,y2).\n        int x = (int) Math.round(x1 + dx * d);\n        int y = (int) Math.round(y1 + dy * d);\n        if (currentTool == Tool.ERASE) {\n            // Erase a 10-by-10 block of pixels around (x,y)\n            g.fillRect(x - 5, y - 5, 10, 10);\n            repaint(x - 5, y - 5, 10, 10);\n        } else {\n            // of pixels that are visited by the tool.\n            for (int i = 0; i < 7; i++) for (int j = 0; j < 7; j++) {\n                int r = y + j - 3;\n                int c = x + i - 3;\n                if (!(r < 0 || r >= h || c < 0 || c >= w || smudgeRed[i][j] == -1)) {\n                    int curCol = OSC.getRGB(c, r);\n                    int curRed = (curCol >> 16) & 0xFF;\n                    int curGreen = (curCol >> 8) & 0xFF;\n                    int curBlue = curCol & 0xFF;\n                    int newRed = (int) (curRed * 0.7 + smudgeRed[i][j] * 0.3);\n                    int newGreen = (int) (curGreen * 0.7 + smudgeGreen[i][j] * 0.3);\n                    int newBlue = (int) (curBlue * 0.7 + smudgeBlue[i][j] * 0.3);\n                    int newCol = newRed << 16 | newGreen << 8 | newBlue;\n                    OSC.setRGB(c, r, newCol);\n                    smudgeRed[i][j] = curRed * 0.3 + smudgeRed[i][j] * 0.7;\n                    smudgeGreen[i][j] = curGreen * 0.3 + smudgeGreen[i][j] * 0.7;\n                    smudgeBlue[i][j] = curBlue * 0.3 + smudgeBlue[i][j] * 0.7;\n                }\n            }\n            repaint(x - 3, y - 3, 7, 7);\n        }\n    }\n    g.dispose();\n}\n                   // For the SMUDGE tool, blend some of the color from\n\n                   // the smudgeRed, smudgeGreen, and smudgeBlue arrays\n\n                   // into the pixels in a 7-by-7 block around (x,y), and\n\n                   // vice versa.  The effect is to smear out the color\n\n"",""rating"":1},""code"":""void numbers()\n{\n  int array[];\n}\n""}"
777,1.0,1.0,1.0,2.5,2017-03-24 21:54:23.939410,22,,"void numbers()
{
  int array[]; // get numbers
  
}
"
778,1.0,1.0,1.0,2.5,2017-03-24 21:54:29.517650,22,569,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""public T[] toArray(Object[] data) {\n    return null;\n}\n"",""rating"":1},""code"":""void numbers()\n{\n  int array[]; // get numbers\n  \n}\n""}"
779,1.0,1.0,1.0,2.5,2017-03-24 21:54:32.254100,22,570,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""// END main\n// THE FOLLOWING METHODS ARE NOT YET IMPLEMENTED!\npublic Object[] toArray() {\n    return null;\n}\n"",""rating"":3},""code"":""void numbers()\n{\n  int array[]; // get numbers\n  \n}\n""}"
780,1.0,1.0,1.0,2.5,2017-03-24 21:54:34.489536,22,571,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""void doFile(Reader is) throws IOException {\n    int c;\n    while ((c = is.read()) != -1) {\n        System.out.print((char) c);\n    }\n}\n"",""rating"":1},""code"":""void numbers()\n{\n  int array[]; // get numbers\n  \n}\n""}"
781,1.0,1.0,1.0,2.5,2017-03-24 21:54:36.635074,22,572,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""void dump(String title) {\n    System.out.println(\""***** \"" + title + \"" *****\"");\n    for (int i = 0; i < v.size(); i++) System.out.println(\""v[\"" + i + \""]=\"" + v.get(i));\n}\n"",""rating"":1},""code"":""void numbers()\n{\n  int array[]; // get numbers\n  \n}\n""}"
782,1.0,1.0,1.0,2.5,2017-03-24 21:54:41.643010,22,573,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public String toString() {\n    return Arrays.toString(queens);\n}\n"",""rating"":5},""code"":""void numbers()\n{\n  int array[]; // get numbers\n  \n}\n""}"
783,1.0,1.0,1.0,1.0,2017-03-24 21:56:49.798055,4,574,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Constructs a salaried employee with a given name and annual salary.\n      @param name the name of this employee\n      @param salary the annual salary\n    */\npublic SalariedEmployee(String name, double salary) {\n    setName(name);\n    annualSalary = salary;\n}\n"",""rating"":4},""code"":""class Person{\n        String name;\n        int age;\n    }\n    class Employee extends Person{\n        double getSalary();\n    }""}"
784,1.0,1.0,1.0,1.0,2017-03-24 21:56:59.058804,4,575,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""double value() {\n    // The value of the node is the number that it contains.\n    return number;\n}\n"",""rating"":3},""code"":""class Person{\n        String name;\n        int age;\n    }\n    class Employee extends Person{\n        double getSalary();\n    }""}"
785,1.0,1.0,1.0,1.0,2017-03-24 21:57:00.770663,4,576,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""double performConversion(double f) {\n    return f *= 453.59237;\n}\n"",""rating"":4},""code"":""class Person{\n        String name;\n        int age;\n    }\n    class Employee extends Person{\n        double getSalary();\n    }""}"
786,1.0,1.0,1.0,1.0,2017-03-24 21:57:02.750122,4,577,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""public static void main(String[] args) {\n    double sum = 0;\n    int count = 0;\n    double salary = 0;\n    System.out.print(\""Enter salaries, -1 to finish: \"");\n    Scanner in = new Scanner(System.in);\n    while (salary != -1) {\n        salary = in.nextDouble();\n        if (salary != -1) {\n            sum = sum + salary;\n            count++;\n        }\n    }\n    if (count > 0) {\n        double average = sum / count;\n        System.out.println(\""Average salary: \"" + average);\n       // Process data until the sentinel is entered \n\n    } else {\n        System.out.println(\""No data\"");\n    }\n}\n       // Compute and print the average\n\n"",""rating"":4},""code"":""class Person{\n        String name;\n        int age;\n    }\n    class Employee extends Person{\n        double getSalary();\n    }""}"
787,1.0,1.0,1.0,1.0,2017-03-24 21:57:05.426117,4,578,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""/**\n      Constructs a manager with a given name, annual salary and weekly bonus.\n      @param name the name of this employee\n      @param salary the annual salary\n      @param bonus the weekly bonus\n    */\npublic Manager(String name, double salary, double bonus) {\n    super(name, salary);\n    weeklyBonus = bonus;\n}\n"",""rating"":3},""code"":""class Person{\n        String name;\n        int age;\n    }\n    class Employee extends Person{\n        double getSalary();\n    }""}"
788,1.0,1.0,1.0,1.0,2017-03-24 21:57:07.435966,4,579,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""double value() {\n    // The value is obtained by evaluating the left and right\n    // operands and combining the values with the operator.\n    double x = left.value();\n    double y = right.value();\n    switch(op) {\n        case '+':\n            return x + y;\n        case '-':\n            return x - y;\n        case '*':\n            return x * y;\n        case '/':\n            return x / y;\n        // Bad operator!\n        default:\n            return Double.NaN;\n    }\n}\n"",""rating"":2},""code"":""class Person{\n        String name;\n        int age;\n    }\n    class Employee extends Person{\n        double getSalary();\n    }""}"
789,1.0,1.0,1.0,1.0,2017-03-24 21:57:09.461632,4,580,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""double performConversion(double f) {\n    return f *= 0.45359237;\n}\n"",""rating"":2},""code"":""class Person{\n        String name;\n        int age;\n    }\n    class Employee extends Person{\n        double getSalary();\n    }""}"
790,1.0,1.0,1.0,1.0,2017-03-24 21:57:11.031910,4,581,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""double value() {\n    // The value is the negative of the value of the operand.\n    double neg = operand.value();\n    return -neg;\n}\n"",""rating"":2},""code"":""class Person{\n        String name;\n        int age;\n    }\n    class Employee extends Person{\n        double getSalary();\n    }""}"
791,1.0,1.0,1.0,1.0,2017-03-24 21:57:12.400148,4,582,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""public double weeklyPay(int hoursWorked) {\n    final int WEEKS_PER_YEAR = 52;\n    return annualSalary / WEEKS_PER_YEAR;\n}\n"",""rating"":1},""code"":""class Person{\n        String name;\n        int age;\n    }\n    class Employee extends Person{\n        double getSalary();\n    }""}"
792,1.0,1.0,1.0,1.0,2017-03-24 21:57:14.061407,4,583,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String[] args) {\n    Employee[] staff = new Employee[3];\n    staff[0] = new HourlyEmployee(\""Morgan, Harry\"", 30);\n    staff[1] = new SalariedEmployee(\""Lin, Sally\"", 52000);\n    staff[2] = new Manager(\""Smith, Mary\"", 104000, 50);\n    Scanner in = new Scanner(System.in);\n    for (Employee e : staff) {\n        System.out.print(\""Hours worked by \"" + e.getName() + \"": \"");\n        int hours = in.nextInt();\n        System.out.println(\""Salary: \"" + e.weeklyPay(hours));\n    }\n}\n"",""rating"":1},""code"":""class Person{\n        String name;\n        int age;\n    }\n    class Employee extends Person{\n        double getSalary();\n    }""}"
793,1.0,1.0,1.0,1.0,2017-03-24 21:57:25.646109,4,584,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""double performConversion(double f) {\n    return f *= 453.59237;\n}\n"",""rating"":2},""code"":""class Person{\n        String name;\n        int age;\n    }\n    class Employee extends Person{\n        double getSalary();\n    }""}"
794,1.0,1.0,1.0,1.0,2017-03-24 21:57:27.666949,4,585,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""double value() {\n    // The value is obtained by evaluating the left and right\n    // operands and combining the values with the operator.\n    double x = left.value();\n    double y = right.value();\n    switch(op) {\n        case '+':\n            return x + y;\n        case '-':\n            return x - y;\n        case '*':\n            return x * y;\n        case '/':\n            return x / y;\n        // Bad operator!\n        default:\n            return Double.NaN;\n    }\n}\n"",""rating"":2},""code"":""class Person{\n        String name;\n        int age;\n    }\n    class Employee extends Person{\n        double getSalary();\n    }""}"
795,1.0,1.0,1.0,1.0,2017-03-24 21:57:30.733166,4,586,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Constructs a salaried employee with a given name and annual salary.\n      @param name the name of this employee\n      @param salary the annual salary\n    */\npublic SalariedEmployee(String name, double salary) {\n    setName(name);\n    annualSalary = salary;\n}\n"",""rating"":4},""code"":""class Person{\n        String name;\n        int age;\n    }\n    class Employee extends Person{\n        double getSalary();\n    }""}"
796,1.0,1.0,1.0,1.0,2017-03-24 21:57:33.712997,4,587,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""double value() {\n    // The value is the negative of the value of the operand.\n    double neg = operand.value();\n    return -neg;\n}\n"",""rating"":3},""code"":""class Person{\n        String name;\n        int age;\n    }\n    class Employee extends Person{\n        double getSalary();\n    }""}"
797,1.0,1.0,1.0,1.0,2017-03-24 21:57:34.834875,4,588,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""double value() {\n    // The value of the node is the number that it contains.\n    return number;\n}\n"",""rating"":2},""code"":""class Person{\n        String name;\n        int age;\n    }\n    class Employee extends Person{\n        double getSalary();\n    }""}"
798,1.5,1.0,1.0,1.0,2017-03-24 21:57:48.513130,4,,"class Person{
        String name;
        int age;
    }
    class Employee extends Person{
        double getSalary();
    }"
799,2.0,1.0,1.0,1.0,2017-03-24 21:57:49.696613,4,,"class Person{
        String name;
        int age;
    }
    class Employee extends Person{
        double getSalary();
    }"
800,1.0,1.0,1.0,1.0,2017-03-24 22:45:48.086624,25,589,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String[] args) {\n    System.out.println(\""About to hashCode \"" + data.length + \"" objects.\"");\n    for (int i = 0; i < data.length; i++) {\n        System.out.println(data[i].toString() + \"" --> \"" + data[i].hashCode());\n    }\n    System.out.println(\""All done.\"");\n}\n"",""rating"":2},""code"":""void somethod () {\n  //some code\n \n}""}"
801,1.0,1.0,1.0,1.0,2017-03-24 22:45:56.633181,25,590,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""public int hashCode() {\n    return Objects.hash(name, area);\n}\n"",""rating"":2},""code"":""void somethod () {\n  //some code\n \n}""}"
802,1.0,1.0,1.0,1.0,2017-03-24 22:46:16.801710,25,591,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""public int hashCode() {\n    return title.hashCode();\n}\n"",""rating"":3},""code"":""void somethod () {\n  //some code\n \n}""}"
803,1.0,1.0,1.0,1.0,2017-03-24 22:52:08.861379,25,592,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""/**\n       * When the ERASE or SMUDGE tools are used and the mouse jumps\n       * from (x1,y1) to (x2,y2), the tool has to be applied to a\n       * line of pixel positions between the two points in order to\n       * cover the entire line that the mouse moves along.  The change\n       * is made to the off-screen canvas, and repaint() is called to\n       * copy the changes to the screen.\n       */\nvoid applyToolAlongLine(int x1, int y1, int x2, int y2) {\n    Graphics g = OSC.createGraphics();\n    Graphics2D g2 = (Graphics2D) g;\n    g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n    // (for ERASE only)\n    g.setColor(fillColor);\n    // (for SMUDGE only)\n    int w = OSC.getWidth();\n    // (for SMUDGE only)\n    int h = OSC.getHeight();\n    int dist = Math.max(Math.abs(x2 - x1), Math.abs(y2 - y1));\n    // dist is the number of points along the line from\n    // (x1,y1) to (x2,y2) at which the tool will be applied.\n    double dx = (double) (x2 - x1) / dist;\n    double dy = (double) (y2 - y1) / dist;\n    for (int d = 1; d <= dist; d++) {\n        // Apply the tool at one of the points (x,y) along the\n        // line from (x1,y1) to (x2,y2).\n        int x = (int) Math.round(x1 + dx * d);\n        int y = (int) Math.round(y1 + dy * d);\n        if (currentTool == Tool.ERASE) {\n            // Erase a 10-by-10 block of pixels around (x,y)\n            g.fillRect(x - 5, y - 5, 10, 10);\n            repaint(x - 5, y - 5, 10, 10);\n        } else {\n            // of pixels that are visited by the tool.\n            for (int i = 0; i < 7; i++) for (int j = 0; j < 7; j++) {\n                int r = y + j - 3;\n                int c = x + i - 3;\n                if (!(r < 0 || r >= h || c < 0 || c >= w || smudgeRed[i][j] == -1)) {\n                    int curCol = OSC.getRGB(c, r);\n                    int curRed = (curCol >> 16) & 0xFF;\n                    int curGreen = (curCol >> 8) & 0xFF;\n                    int curBlue = curCol & 0xFF;\n                    int newRed = (int) (curRed * 0.7 + smudgeRed[i][j] * 0.3);\n                    int newGreen = (int) (curGreen * 0.7 + smudgeGreen[i][j] * 0.3);\n                    int newBlue = (int) (curBlue * 0.7 + smudgeBlue[i][j] * 0.3);\n                    int newCol = newRed << 16 | newGreen << 8 | newBlue;\n                    OSC.setRGB(c, r, newCol);\n                    smudgeRed[i][j] = curRed * 0.3 + smudgeRed[i][j] * 0.7;\n                    smudgeGreen[i][j] = curGreen * 0.3 + smudgeGreen[i][j] * 0.7;\n                    smudgeBlue[i][j] = curBlue * 0.3 + smudgeBlue[i][j] * 0.7;\n                }\n            }\n            repaint(x - 3, y - 3, 7, 7);\n        }\n    }\n    g.dispose();\n}\n                   // For the SMUDGE tool, blend some of the color from\n\n                   // the smudgeRed, smudgeGreen, and smudgeBlue arrays\n\n                   // into the pixels in a 7-by-7 block around (x,y), and\n\n                   // vice versa.  The effect is to smear out the color\n\n"",""rating"":3},""code"":""function arr_diff (a1, a2) {\n\n    var a = [], diff = [];\n\n    for (var i = 0; i < a1.length; i++) {\n        a[a1[i]] = true;\n    }\n\n    for (var i = 0; i < a2.length; i++) {\n        if (a[a2[i]]) {\n            delete a[a2[i]];\n        } else {\n            a[a2[i]] = true;\n        }\n    }\n\n    for (var k in a) {\n        diff.push(k);\n    }\n\n    return diff;\n};""}"
804,1.0,1.0,1.0,1.0,2017-03-24 22:52:21.198746,25,593,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""protected void doPre(Element p) {\n    doParagraph(\""Code\"", p);\n}\n"",""rating"":2},""code"":""function arr_diff (a1, a2) {\n\n    var a = [], diff = [];\n\n    for (var i = 0; i < a1.length; i++) {\n        a[a1[i]] = true;\n    }\n\n    for (var i = 0; i < a2.length; i++) {\n        if (a[a2[i]]) {\n            delete a[a2[i]];\n        } else {\n            a[a2[i]] = true;\n        }\n    }\n\n    for (var k in a) {\n        diff.push(k);\n    }\n\n    return diff;\n};""}"
805,1.0,1.0,1.0,1.0,2017-03-24 22:52:22.369278,25,594,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""/** Gets the base URL.  */\npublic URL getCodeBase() {\n    return getClass().getResource(\"".\"");\n}\n"",""rating"":2},""code"":""function arr_diff (a1, a2) {\n\n    var a = [], diff = [];\n\n    for (var i = 0; i < a1.length; i++) {\n        a[a1[i]] = true;\n    }\n\n    for (var i = 0; i < a2.length; i++) {\n        if (a[a2[i]]) {\n            delete a[a2[i]];\n        } else {\n            a[a2[i]] = true;\n        }\n    }\n\n    for (var k in a) {\n        diff.push(k);\n    }\n\n    return diff;\n};""}"
806,1.0,1.0,1.0,1.0,2017-03-24 22:52:23.584396,25,595,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""/**\n       * When the ERASE or SMUDGE tools are used and the mouse jumps\n       * from (x1,y1) to (x2,y2), the tool has to be applied to a\n       * line of pixel positions between the two points in order to\n       * cover the entire line that the mouse moves along.  The change\n       * is made to the off-screen canvas, and repaint() is called to\n       * copy the changes to the screen.\n       */\nvoid applyToolAlongLine(int x1, int y1, int x2, int y2) {\n    Graphics g = OSC.createGraphics();\n    // (for ERASE only)\n    g.setColor(fillColor);\n    // (for SMUDGE only)\n    int w = OSC.getWidth();\n    // (for SMUDGE only)\n    int h = OSC.getHeight();\n    int dist = Math.max(Math.abs(x2 - x1), Math.abs(y2 - y1));\n    // dist is the number of points along the line from\n    // (x1,y1) to (x2,y2) at which the tool will be applied.\n    double dx = (double) (x2 - x1) / dist;\n    double dy = (double) (y2 - y1) / dist;\n    for (int d = 1; d <= dist; d++) {\n        // Apply the tool at one of the points (x,y) along the\n        // line from (x1,y1) to (x2,y2).\n        int x = (int) Math.round(x1 + dx * d);\n        int y = (int) Math.round(y1 + dy * d);\n        if (currentTool == Tool.ERASE) {\n            // Erase a 10-by-10 block of pixels around (x,y)\n            g.fillRect(x - 5, y - 5, 10, 10);\n            repaint(x - 5, y - 5, 10, 10);\n        } else {\n            // of pixels that are visited by the tool.\n            for (int i = 0; i < 7; i++) for (int j = 0; j < 7; j++) {\n                int r = y + j - 3;\n                int c = x + i - 3;\n                if (!(r < 0 || r >= h || c < 0 || c >= w || smudgeRed[i][j] == -1)) {\n                    int curCol = OSC.getRGB(c, r);\n                    int curRed = (curCol >> 16) & 0xFF;\n                    int curGreen = (curCol >> 8) & 0xFF;\n                    int curBlue = curCol & 0xFF;\n                    int newRed = (int) (curRed * 0.7 + smudgeRed[i][j] * 0.3);\n                    int newGreen = (int) (curGreen * 0.7 + smudgeGreen[i][j] * 0.3);\n                    int newBlue = (int) (curBlue * 0.7 + smudgeBlue[i][j] * 0.3);\n                    int newCol = newRed << 16 | newGreen << 8 | newBlue;\n                    OSC.setRGB(c, r, newCol);\n                    smudgeRed[i][j] = curRed * 0.3 + smudgeRed[i][j] * 0.7;\n                    smudgeGreen[i][j] = curGreen * 0.3 + smudgeGreen[i][j] * 0.7;\n                    smudgeBlue[i][j] = curBlue * 0.3 + smudgeBlue[i][j] * 0.7;\n                }\n            }\n            repaint(x - 3, y - 3, 7, 7);\n        }\n    }\n    g.dispose();\n}\n                   // For the SMUDGE tool, blend some of the color from\n\n                   // the smudgeRed, smudgeGreen, and smudgeBlue arrays\n\n                   // into the pixels in a 7-by-7 block around (x,y), and\n\n                   // vice versa.  The effect is to smear out the color\n\n"",""rating"":2},""code"":""function arr_diff (a1, a2) {\n\n    var a = [], diff = [];\n\n    for (var i = 0; i < a1.length; i++) {\n        a[a1[i]] = true;\n    }\n\n    for (var i = 0; i < a2.length; i++) {\n        if (a[a2[i]]) {\n            delete a[a2[i]];\n        } else {\n            a[a2[i]] = true;\n        }\n    }\n\n    for (var k in a) {\n        diff.push(k);\n    }\n\n    return diff;\n};""}"
807,1.0,1.0,1.0,1.0,2017-03-24 22:52:23.782557,25,596,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""/**\n       * When the ERASE or SMUDGE tools are used and the mouse jumps\n       * from (x1,y1) to (x2,y2), the tool has to be applied to a\n       * line of pixel positions between the two points in order to\n       * cover the entire line that the mouse moves along.  The change\n       * is made to the off-screen canvas, and repaint() is called to\n       * copy the changes to the screen.\n       */\nvoid applyToolAlongLine(int x1, int y1, int x2, int y2) {\n    Graphics g = OSC.createGraphics();\n    // (for ERASE only)\n    g.setColor(fillColor);\n    // (for SMUDGE only)\n    int w = OSC.getWidth();\n    // (for SMUDGE only)\n    int h = OSC.getHeight();\n    int dist = Math.max(Math.abs(x2 - x1), Math.abs(y2 - y1));\n    // dist is the number of points along the line from\n    // (x1,y1) to (x2,y2) at which the tool will be applied.\n    double dx = (double) (x2 - x1) / dist;\n    double dy = (double) (y2 - y1) / dist;\n    for (int d = 1; d <= dist; d++) {\n        // Apply the tool at one of the points (x,y) along the\n        // line from (x1,y1) to (x2,y2).\n        int x = (int) Math.round(x1 + dx * d);\n        int y = (int) Math.round(y1 + dy * d);\n        if (currentTool == Tool.ERASE) {\n            // Erase a 10-by-10 block of pixels around (x,y)\n            g.fillRect(x - 5, y - 5, 10, 10);\n            repaint(x - 5, y - 5, 10, 10);\n        } else {\n            // of pixels that are visited by the tool.\n            for (int i = 0; i < 7; i++) for (int j = 0; j < 7; j++) {\n                int r = y + j - 3;\n                int c = x + i - 3;\n                if (!(r < 0 || r >= h || c < 0 || c >= w || smudgeRed[i][j] == -1)) {\n                    int curCol = OSC.getRGB(c, r);\n                    int curRed = (curCol >> 16) & 0xFF;\n                    int curGreen = (curCol >> 8) & 0xFF;\n                    int curBlue = curCol & 0xFF;\n                    int newRed = (int) (curRed * 0.7 + smudgeRed[i][j] * 0.3);\n                    int newGreen = (int) (curGreen * 0.7 + smudgeGreen[i][j] * 0.3);\n                    int newBlue = (int) (curBlue * 0.7 + smudgeBlue[i][j] * 0.3);\n                    int newCol = newRed << 16 | newGreen << 8 | newBlue;\n                    OSC.setRGB(c, r, newCol);\n                    smudgeRed[i][j] = curRed * 0.3 + smudgeRed[i][j] * 0.7;\n                    smudgeGreen[i][j] = curGreen * 0.3 + smudgeGreen[i][j] * 0.7;\n                    smudgeBlue[i][j] = curBlue * 0.3 + smudgeBlue[i][j] * 0.7;\n                }\n            }\n            repaint(x - 3, y - 3, 7, 7);\n        }\n    }\n    g.dispose();\n}\n                   // For the SMUDGE tool, blend some of the color from\n\n                   // the smudgeRed, smudgeGreen, and smudgeBlue arrays\n\n                   // into the pixels in a 7-by-7 block around (x,y), and\n\n                   // vice versa.  The effect is to smear out the color\n\n"",""rating"":2},""code"":""function arr_diff (a1, a2) {\n\n    var a = [], diff = [];\n\n    for (var i = 0; i < a1.length; i++) {\n        a[a1[i]] = true;\n    }\n\n    for (var i = 0; i < a2.length; i++) {\n        if (a[a2[i]]) {\n            delete a[a2[i]];\n        } else {\n            a[a2[i]] = true;\n        }\n    }\n\n    for (var k in a) {\n        diff.push(k);\n    }\n\n    return diff;\n};""}"
808,1.0,1.0,1.0,1.0,2017-03-24 22:53:31.907252,25,597,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""void expurgateCheckedList(Collection<String> c, String strAuthor) {\n    for (Iterator<String> i = c.iterator(); i.hasNext(); ) {\n        if (i.next().contains(strAuthor)) {\n            i.remove();\n        }\n    }\n}\n"",""rating"":3},""code"":""function arr_diff (a1, a2) {\n\n    var a = [], diff = [];\n\n    for (var i = 0; i < a1.length; i++) {\n        a[a1[i]] = true;\n    }\n\n    for (var i = 0; i < a2.length; i++) {\n        if (a[a2[i]]) {\n            delete a[a2[i]];\n        } else {\n            a[a2[i]] = true;\n        }\n    }\n\n    for (var k in a) {\n        diff.push(k);\n    }\n\n    return diff;\n};""}"
809,1.0,1.0,1.0,1.0,2017-03-24 22:53:38.224353,25,598,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""/**\n         * When the ERASE or SMUDGE tools are used and the mouse jumps\n         * from (x1,y1) to (x2,y2), the tool has to be applied to a\n         * line of pixel positions between the two points in order to\n         * cover the entire line that the mouse moves along.  The change\n         * is made to the off-screen canvas, and repaint() is called to\n         * copy the changes to the screen.\n         */\nvoid applyToolAlongLine(int x1, int y1, int x2, int y2) {\n    Graphics g = OSC.createGraphics();\n    // (for ERASE only)\n    g.setColor(fillColor);\n    // (for SMUDGE only)\n    int w = OSC.getWidth();\n    // (for SMUDGE only)\n    int h = OSC.getHeight();\n    int dist = Math.max(Math.abs(x2 - x1), Math.abs(y2 - y1));\n    // dist is the number of points along the line from\n    // (x1,y1) to (x2,y2) at which the tool will be applied.\n    double dx = (double) (x2 - x1) / dist;\n    double dy = (double) (y2 - y1) / dist;\n    for (int d = 1; d <= dist; d++) {\n        // Apply the tool at one of the points (x,y) along the\n        // line from (x1,y1) to (x2,y2).\n        int x = (int) Math.round(x1 + dx * d);\n        int y = (int) Math.round(y1 + dy * d);\n        if (currentTool == Tool.ERASE) {\n            // Erase a 10-by-10 block of pixels around (x,y)\n            g.fillRect(x - 5, y - 5, 10, 10);\n            repaint(x - 5, y - 5, 10, 10);\n        } else {\n            // of pixels that are visited by the tool.\n            for (int i = 0; i < 7; i++) for (int j = 0; j < 7; j++) {\n                int r = y + j - 3;\n                int c = x + i - 3;\n                if (!(r < 0 || r >= h || c < 0 || c >= w || smudgeRed[i][j] == -1)) {\n                    int curCol = OSC.getRGB(c, r);\n                    int curRed = (curCol >> 16) & 0xFF;\n                    int curGreen = (curCol >> 8) & 0xFF;\n                    int curBlue = curCol & 0xFF;\n                    int newRed = (int) (curRed * 0.7 + smudgeRed[i][j] * 0.3);\n                    int newGreen = (int) (curGreen * 0.7 + smudgeGreen[i][j] * 0.3);\n                    int newBlue = (int) (curBlue * 0.7 + smudgeBlue[i][j] * 0.3);\n                    int newCol = newRed << 16 | newGreen << 8 | newBlue;\n                    OSC.setRGB(c, r, newCol);\n                    smudgeRed[i][j] = curRed * 0.3 + smudgeRed[i][j] * 0.7;\n                    smudgeGreen[i][j] = curGreen * 0.3 + smudgeGreen[i][j] * 0.7;\n                    smudgeBlue[i][j] = curBlue * 0.3 + smudgeBlue[i][j] * 0.7;\n                }\n            }\n            repaint(x - 3, y - 3, 7, 7);\n        }\n    }\n    g.dispose();\n}\n                         // For the SMUDGE tool, blend some of the color from\n\n                         // the smudgeRed, smudgeGreen, and smudgeBlue arrays\n\n                         // into the pixels in a 7-by-7 block around (x,y), and\n\n                         // vice versa.  The effect is to smear out the color\n\n"",""rating"":2},""code"":""function arr_diff (a1, a2) {\n\n    var a = [], diff = [];\n\n    for (var i = 0; i < a1.length; i++) {\n        a[a1[i]] = true;\n    }\n\n    for (var i = 0; i < a2.length; i++) {\n        if (a[a2[i]]) {\n            delete a[a2[i]];\n        } else {\n            a[a2[i]] = true;\n        }\n    }\n\n    for (var k in a) {\n        diff.push(k);\n    }\n\n    return diff;\n};""}"
810,1.0,1.0,1.0,1.0,2017-03-24 22:53:56.780892,25,599,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""/**\n     * Stop the computation, if one is running.  This is called\n     * when the user clicks the Abort button.\n     */\nvoid doAbort() {\n    if (timer != null) {\n        timer.stop();\n        timer = null;\n        methodChoice.setEnabled(true);\n        abortButton.setEnabled(false);\n        message.setText(\""Click any square to begin.\"");\n        queue = null;\n        stack = null;\n        randomList = null;\n    }\n}\n"",""rating"":2},""code"":""function arr_diff (a1, a2) {\n\n    var a = [], diff = [];\n\n    for (var i = 0; i < a1.length; i++) {\n        a[a1[i]] = true;\n    }\n\n    for (var i = 0; i < a2.length; i++) {\n        if (a[a2[i]]) {\n            delete a[a2[i]];\n        } else {\n            a[a2[i]] = true;\n        }\n    }\n\n    for (var k in a) {\n        diff.push(k);\n    }\n\n    return diff;\n};""}"
