weightid,signature,structure,concepts,language,time,user_id,vote_id,code
1,1.0,1.0,1.0,1.0,2017-04-05 20:09:29.889632,17,,
2,2.0,1.0,1.0,1.0,2017-04-05 20:09:50.441911,1,,
3,0.5,1.0,1.0,1.0,2017-04-05 20:09:53.515205,1,,
4,1.0,1.0,1.0,1.0,2017-04-05 20:09:56.178805,1,,
5,1.0,1.0,3.5,1.0,2017-04-05 20:11:43.298345,1,,"public static void main(String[] args)
{
  
}"
6,1.0,1.0,1.0,1.0,2017-04-05 20:12:34.632379,1,,"public static void main(String[] args)
{
	
}"
7,5.0,1.0,1.0,1.0,2017-04-05 20:12:41.344935,17,,"int largestDiff(int[] x)
{
  int largest = int[0],smallest = int[0];
  for(int y = 1, y < x[].length,y++)
  {
    if(x[y] > largest)
    {
      largest = x[y];
    }
  }
  for(int y = 1, y < x[].length,y++)
  {
    if(x[y] < smallest)
    {
      smallest = x[y];
    }
  }
  return largest - smallest;
}"
8,1.0,1.0,1.0,1.0,2017-04-05 20:13:00.153744,17,,"int largestDiff(int[] x)
{
  int largest = int[0],smallest = int[0];
  for(int y = 1, y < x[].length,y++)
  {
    if(x[y] > largest)
    {
      largest = x[y];
    }
  }
  for(int y = 1, y < x[].length,y++)
  {
    if(x[y] < smallest)
    {
      smallest = x[y];
    }
  }
  return largest - smallest;
}"
9,2.5,1.0,1.0,1.0,2017-04-05 20:13:03.461372,17,,"int largestDiff(int[] x)
{
  int largest = int[0],smallest = int[0];
  for(int y = 1, y < x[].length,y++)
  {
    if(x[y] > largest)
    {
      largest = x[y];
    }
  }
  for(int y = 1, y < x[].length,y++)
  {
    if(x[y] < smallest)
    {
      smallest = x[y];
    }
  }
  return largest - smallest;
}"
10,5.0,1.0,1.0,1.0,2017-04-05 20:13:07.468903,17,,"int largestDiff(int[] x)
{
  int largest = int[0],smallest = int[0];
  for(int y = 1, y < x[].length,y++)
  {
    if(x[y] > largest)
    {
      largest = x[y];
    }
  }
  for(int y = 1, y < x[].length,y++)
  {
    if(x[y] < smallest)
    {
      smallest = x[y];
    }
  }
  return largest - smallest;
}"
11,5.0,0.0,1.0,1.0,2017-04-05 20:13:09.521045,17,,"int largestDiff(int[] x)
{
  int largest = int[0],smallest = int[0];
  for(int y = 1, y < x[].length,y++)
  {
    if(x[y] > largest)
    {
      largest = x[y];
    }
  }
  for(int y = 1, y < x[].length,y++)
  {
    if(x[y] < smallest)
    {
      smallest = x[y];
    }
  }
  return largest - smallest;
}"
12,5.0,0.0,5.0,1.0,2017-04-05 20:13:13.216472,17,,"int largestDiff(int[] x)
{
  int largest = int[0],smallest = int[0];
  for(int y = 1, y < x[].length,y++)
  {
    if(x[y] > largest)
    {
      largest = x[y];
    }
  }
  for(int y = 1, y < x[].length,y++)
  {
    if(x[y] < smallest)
    {
      smallest = x[y];
    }
  }
  return largest - smallest;
}"
13,5.0,5.0,5.0,1.0,2017-04-05 20:14:00.353915,17,,"int largestDiff(int[] x)
{
  int largest = int[0],smallest = int[0];
  for(int y = 1, y < x[].length,y++)
  {
    if(x[y] > largest)
    {
      largest = x[y];
    }
  }
  for(int y = 1, y < x[].length,y++)
  {
    if(x[y] < smallest)
    {
      smallest = x[y];
    }
  }
  return largest - smallest;
}"
14,5.0,5.0,5.0,5.0,2017-04-05 20:14:01.588069,17,,"int largestDiff(int[] x)
{
  int largest = int[0],smallest = int[0];
  for(int y = 1, y < x[].length,y++)
  {
    if(x[y] > largest)
    {
      largest = x[y];
    }
  }
  for(int y = 1, y < x[].length,y++)
  {
    if(x[y] < smallest)
    {
      smallest = x[y];
    }
  }
  return largest - smallest;
}"
15,0.0,5.0,5.0,5.0,2017-04-05 20:14:04.541755,17,,"int largestDiff(int[] x)
{
  int largest = int[0],smallest = int[0];
  for(int y = 1, y < x[].length,y++)
  {
    if(x[y] > largest)
    {
      largest = x[y];
    }
  }
  for(int y = 1, y < x[].length,y++)
  {
    if(x[y] < smallest)
    {
      smallest = x[y];
    }
  }
  return largest - smallest;
}"
16,1.0,1.0,1.0,1.0,2017-04-05 20:14:06.240473,12,1,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""/** Return the current balance in the named account */\npublic int getBalance(String name, String password) throws RemoteException, BankingException {\n    Account acct = verify(name, password);\n    synchronized (acct) {\n        return acct.balance;\n    }\n}\n"",""rating"":1},""code"":""public int getTax(String persType){\n  \n}""}"
17,0.0,0.5,5.0,5.0,2017-04-05 20:14:06.592211,17,,"int largestDiff(int[] x)
{
  int largest = int[0],smallest = int[0];
  for(int y = 1, y < x[].length,y++)
  {
    if(x[y] > largest)
    {
      largest = x[y];
    }
  }
  for(int y = 1, y < x[].length,y++)
  {
    if(x[y] < smallest)
    {
      smallest = x[y];
    }
  }
  return largest - smallest;
}"
18,0.0,0.0,5.0,5.0,2017-04-05 20:14:07.736684,17,,"int largestDiff(int[] x)
{
  int largest = int[0],smallest = int[0];
  for(int y = 1, y < x[].length,y++)
  {
    if(x[y] > largest)
    {
      largest = x[y];
    }
  }
  for(int y = 1, y < x[].length,y++)
  {
    if(x[y] < smallest)
    {
      smallest = x[y];
    }
  }
  return largest - smallest;
}"
19,0.0,0.0,5.0,0.5,2017-04-05 20:14:08.731297,17,,"int largestDiff(int[] x)
{
  int largest = int[0],smallest = int[0];
  for(int y = 1, y < x[].length,y++)
  {
    if(x[y] > largest)
    {
      largest = x[y];
    }
  }
  for(int y = 1, y < x[].length,y++)
  {
    if(x[y] < smallest)
    {
      smallest = x[y];
    }
  }
  return largest - smallest;
}"
20,0.0,0.0,5.0,0.0,2017-04-05 20:14:10.877952,17,,"int largestDiff(int[] x)
{
  int largest = int[0],smallest = int[0];
  for(int y = 1, y < x[].length,y++)
  {
    if(x[y] > largest)
    {
      largest = x[y];
    }
  }
  for(int y = 1, y < x[].length,y++)
  {
    if(x[y] < smallest)
    {
      smallest = x[y];
    }
  }
  return largest - smallest;
}"
21,1.5,1.0,1.0,1.0,2017-04-05 20:14:48.811200,1,,"public static void main(String[] args)
{
	
}"
22,0.0,5.0,5.0,0.0,2017-04-05 20:14:54.801680,17,,"int largestDiff(int[] x)
{
  int largest = int[0],smallest = int[0];
  for(int y = 1, y < x.length,y++)
  {
    if(x[y] > largest)
    {
      largest = x[y];
    }
  }
  for(int y = 1, y < x.length,y++)
  {
    if(x[y] < smallest)
    {
      smallest = x[y];
    }
  }
  return largest - smallest;
}"
23,1.0,1.0,1.0,1.0,2017-04-05 20:15:27.927255,12,2,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""public Product(float price) {\n    this.price = price;\n    tax = (float) (price * 0.20);\n}\n"",""rating"":1},""code"":""public int getTax(String persType){\n  if(persType.equals(\""emp\"")){\n    \n  }\n}""}"
24,1.0,1.0,1.0,2.5,2017-04-05 20:17:21.633367,18,,"public int getTax (String type)
{
  // returns different percentage of tax based on type of person
}"
25,2.5,1.0,1.0,2.5,2017-04-05 20:17:23.373851,18,,"public int getTax (String type)
{
  // returns different percentage of tax based on type of person
}"
26,1.0,1.0,1.0,1.0,2017-04-05 20:17:29.549574,12,3,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""public static void main(String[] args) {\n    String input = JOptionPane.showInputDialog(\""Enter price:\"");\n    double price = Double.parseDouble(input);\n    final double TAX_RATE = 8.5;\n    price = price * (1 + TAX_RATE / 100);\n    JOptionPane.showMessageDialog(null, \""Price after tax: \"" + price);\n}\n"",""rating"":2},""code"":""public int getTax(String persType){\n  if(persType.equals(\""emp\"")){\n    if(salary < 10000){\n      return salary*(.02);\n    }else{\n      return salary*(.05);\n    }\n  }elseif(persT)\n}""}"
27,1.0,1.0,1.0,1.0,2017-04-05 20:18:07.814192,19,4,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""public static <E extends Comparable<? super E>> E max(ArrayList<E> a) // public static <E extends Comparable<E>> E max(ArrayList<E> a) \n// doesn't work with Student array list\n{\n    E largest = a.get(0);\n    for (int i = 1; i < a.size(); i++) {\n        if (a.get(i).compareTo(largest) > 0) {\n            largest = a.get(i);\n        }\n    }\n    return largest;\n}\n"",""rating"":1},""code"":""int largestDifference(int[] array)\n{\n  \n}""}"
28,1.0,1.0,1.0,1.0,2017-04-05 20:18:15.088377,19,5,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""/**\n         * Return the contents of the square in the specified row and column.\n         */\nint pieceAt(int row, int col) {\n    return board[row][col];\n}\n"",""rating"":2},""code"":""int largestDifference(int[] array)\n{\n  \n}""}"
29,1.0,1.0,1.0,1.0,2017-04-05 20:18:16.283019,19,6,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""public void paintComponent(Graphics graph) {\n    int increment = samples.length / getWidth();\n    final int LARGEST = 32767;\n    int x = 0;\n    for (int i = 0; i < samples.length; i = i + increment) {\n        int value = samples[i];\n        value = Math.min(LARGEST, value);\n        value = Math.max(-LARGEST, value);\n        int height = getHeight() / 2;\n        int y = height - samples[i] * height / LARGEST;\n        graph.drawLine(x, y, x, height);\n        x++;\n    }\n}\n"",""rating"":1},""code"":""int largestDifference(int[] array)\n{\n  \n}""}"
30,1.0,1.0,1.0,1.0,2017-04-05 20:18:17.775883,19,7,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""int getCount() {\n    return count;\n}\n"",""rating"":1},""code"":""int largestDifference(int[] array)\n{\n  \n}""}"
31,1.0,1.0,1.0,1.0,2017-04-05 20:18:20.343748,19,8,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""int intFieldValue(Object o, String name) throws NoSuchFieldException, IllegalAccessException {\n    Class<?> c = o.getClass();\n    Field fld = c.getField(name);\n    int value = fld.getInt(o);\n    return value;\n}\n"",""rating"":1},""code"":""int largestDifference(int[] array)\n{\n  \n}""}"
32,1.0,1.0,1.0,1.0,2017-04-05 20:18:21.567969,19,9,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""int getPlayer() {\n    return playerID;\n}\n"",""rating"":1},""code"":""int largestDifference(int[] array)\n{\n  \n}""}"
33,2.5,1.0,1.0,2.5,2017-04-05 20:18:23.827276,18,10,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""/** Return the person's name.  Not a remote method */\npublic String getName() {\n    return name;\n}\n"",""rating"":1},""code"":""public int getTax (String type)\n{\n  // returns different percentage of tax based on type of person\n}""}"
34,1.0,1.0,1.0,1.0,2017-04-05 20:18:25.207088,19,11,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""// pre: list != null\n// post: return sum of elements\n// use traditional for loop\npublic static int sumListOld(int[] list) {\n    int total = 0;\n    for (int i = 0; i < list.length; i++) {\n        total += list[i];\n        System.out.println(list[i]);\n    }\n    return total;\n}\n"",""rating"":1},""code"":""int largestDifference(int[] array)\n{\n  \n}""}"
35,0.0,5.0,5.0,0.0,2017-04-05 20:18:25.590982,17,12,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static <E extends Comparable<E>> E max(E[] a) {\n    E largest = a[0];\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":1},""code"":""public int largestDiff(int[] x)\n{\n int largest = int[0]\n int smallest = int[0];\n for(int y = 1; y < x.length; y++)\n  {\n   if(x[y] > largest)\n    {\n     largest = x[y];\n    }\n  }\n for(int z = 1; z < x.length; z++)\n  {\n   if(x[z] < smallest)\n    {\n     smallest = x[z];\n    }\n  }\n return largest - smallest;\n} ""}"
36,1.0,1.0,1.0,1.0,2017-04-05 20:18:30.583635,19,13,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Computes the largest value of an array.\n      @param a the array\n      @return the largest value in a\n   */\npublic static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":4},""code"":""int largestDifference(int[] array)\n{\n  \n}""}"
37,2.5,1.0,1.0,2.5,2017-04-05 20:18:46.226679,18,14,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""@Override\npublic int compare(String s1, String s2) {\n    s1 = s1.substring(1);\n    s2 = s2.substring(1);\n    return s1.compareTo(s2);\n// or, more concisely:\n// return s1.substring(1).compareTo(s2.substring(1));\n}\n"",""rating"":3},""code"":""public int getTax (String type)\n{\n  // returns different percentage of tax based on type of person\n}""}"
38,1.0,1.0,1.0,1.0,2017-04-05 20:18:47.043553,5,15,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent2(int[] a) {\n    // O(n log(n))\n    Arrays.sort(a);\n    int[] counts = new int[a.length];\n    int count = 0;\n    for (// O(n)\n    int i = 0; // O(n)\n    i < a.length; // O(n)\n    i++) {\n        count++;\n        if (i == a.length - 1 || a[i] != a[i + 1]) {\n            counts[i] = count;\n            count = 0;\n        }\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":5},""code"":""public static int nu(int array[]){\n  int largest=0,current=0,smallest=0;\n    for(int i=0;i<array.size();i++){\n      current=array[i];\n      if(current>=largest){\n        largest=current;\n      }\n      if(current<=smallest){\n        smallest=current;\n      }\n    }\n  return largest-smallest;\n}""}"
39,0.0,5.0,5.0,0.0,2017-04-05 20:18:50.021899,17,16,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""@Override\npublic void run() {\n    try {\n        if (semaphore.tryAcquire(10, TimeUnit.MILLISECONDS)) {\n            try {\n                Teller.getService(count);\n            } finally {\n                semaphore.release();\n            }\n        }\n    } catch (InterruptedException ex) {\n    }\n}\n"",""rating"":1},""code"":""public int largestDiff(int[] x)\n{\n int largest = int[0]\n int smallest = int[0];\n for(int y = 1; y < x.length; y++)\n  {\n   if(x[y] > largest)\n    {\n     largest = x[y];\n    }\n  }\n for(int z = 1; z < x.length; z++)\n  {\n   if(x[z] < smallest)\n    {\n     smallest = x[z];\n    }\n  }\n return largest - smallest;\n} ""}"
40,0.0,5.0,5.0,5.0,2017-04-05 20:19:04.962498,17,,"public int largestDiff(int[] x)
{
 int largest = int[0]
 int smallest = int[0];
 for(int y = 1; y < x.length; y++)
  {
   if(x[y] > largest)
    {
     largest = x[y];
    }
  }
 for(int z = 1; z < x.length; z++)
  {
   if(x[z] < smallest)
    {
     smallest = x[z];
    }
  }
 return largest - smallest;
} "
41,1.5,5.0,5.0,5.0,2017-04-05 20:19:05.856387,17,,"public int largestDiff(int[] x)
{
 int largest = int[0]
 int smallest = int[0];
 for(int y = 1; y < x.length; y++)
  {
   if(x[y] > largest)
    {
     largest = x[y];
    }
  }
 for(int z = 1; z < x.length; z++)
  {
   if(x[z] < smallest)
    {
     smallest = x[z];
    }
  }
 return largest - smallest;
} "
42,5.0,5.0,5.0,5.0,2017-04-05 20:19:06.447224,17,,"public int largestDiff(int[] x)
{
 int largest = int[0]
 int smallest = int[0];
 for(int y = 1; y < x.length; y++)
  {
   if(x[y] > largest)
    {
     largest = x[y];
    }
  }
 for(int z = 1; z < x.length; z++)
  {
   if(x[z] < smallest)
    {
     smallest = x[z];
    }
  }
 return largest - smallest;
} "
43,2.5,1.0,1.0,1.0,2017-04-05 20:19:19.214525,5,,"public static int nu(int array[]){
  int largest=0,current=0,smallest=0;
    for(int i=0;i<array.size();i++){
      current=array[i];
      if(current>=largest){
        largest=current;
      }
      if(current<=smallest){
        smallest=current;
      }
    }
  return largest-smallest;
}"
44,2.5,1.0,1.0,1.0,2017-04-05 20:19:24.056298,5,17,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""public static <E extends Comparable<? super E>> E max(ArrayList<E> a) // public static <E extends Comparable<E>> E max(ArrayList<E> a) \n// doesn't work with Student array list\n{\n    E largest = a.get(0);\n    for (int i = 1; i < a.size(); i++) {\n        if (a.get(i).compareTo(largest) > 0) {\n            largest = a.get(i);\n        }\n    }\n    return largest;\n}\n"",""rating"":5},""code"":""public static int nu(int array[]){\n  int largest=0,current=0,smallest=0;\n    for(int i=0;i<array.size();i++){\n      current=array[i];\n      if(current>=largest){\n        largest=current;\n      }\n      if(current<=smallest){\n        smallest=current;\n      }\n    }\n  return largest-smallest;\n}""}"
45,1.0,1.0,1.0,1.0,2017-04-05 20:19:27.366095,19,18,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static <E extends Comparable<E>> E max(E[] a) {\n    E largest = a[0];\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":1},""code"":""int largestDifference(int[] values)\n{\n  int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n}""}"
46,2.5,1.0,1.0,1.0,2017-04-05 20:19:27.378346,5,19,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent2(int[] a) {\n    // O(n log(n))\n    Arrays.sort(a);\n    int[] counts = new int[a.length];\n    int count = 0;\n    for (// O(n)\n    int i = 0; // O(n)\n    i < a.length; // O(n)\n    i++) {\n        count++;\n        if (i == a.length - 1 || a[i] != a[i + 1]) {\n            counts[i] = count;\n            count = 0;\n        }\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":5},""code"":""public static int nu(int array[]){\n  int largest=0,current=0,smallest=0;\n    for(int i=0;i<array.size();i++){\n      current=array[i];\n      if(current>=largest){\n        largest=current;\n      }\n      if(current<=smallest){\n        smallest=current;\n      }\n    }\n  return largest-smallest;\n}""}"
47,1.0,1.0,1.0,1.0,2017-04-05 20:19:32.957938,12,20,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""/** \""main program\"" method - construct and show */\npublic static void main(String[] av) {\n    // create a BusCard object, tell it to show up\n    new BusCard().setVisible(true);\n}\n"",""rating"":1},""code"":""public int getTax(String persType){\n  if(persType.equals(\""emp\"")){\n    if(salary < 10000){\n      return salary*(.02);\n    }else{\n      return salary*(.05);\n    }\n  }else if(persType.equals(\""busOwn\"")){\n    return profit*(.10);\n  }else if(persType.equals(vet)){\n    return 0;\n  }\n}""}"
48,1.0,1.0,1.0,1.0,2017-04-05 20:19:39.533365,19,21,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""/**\n         * Return the largest item that has been entered.\n         * The return value will be -infinity if no numbers have been entered. \n         */\npublic double getMax() {\n    return max;\n}\n"",""rating"":1},""code"":""int largestDifference(int[] values)\n{\n  int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n}""}"
49,2.5,1.0,1.0,1.0,2017-04-05 20:19:43.495410,12,,"public int getTax(String persType){
  if(persType.equals(""emp"")){
    if(salary < 10000){
      return salary*(.02);
    }else{
      return salary*(.05);
    }
  }else if(persType.equals(""busOwn"")){
    return profit*(.10);
  }else if(persType.equals(vet)){
    return 0;
  }
}"
50,1.0,1.0,2.0,1.0,2017-04-05 20:19:46.261070,19,,"int largestDifference(int[] values)
{
  int largest = values[0];
    for (int i = 1; i < values.length; i++) {
        if (values[i] > largest) {
            largest = values[i];
        }
    }
}"
51,2.5,1.0,1.0,1.0,2017-04-05 20:19:50.797335,5,22,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""// pre: list != null\n// post: return sum of elements\n// use traditional for loop\npublic static int sumListOld(int[] list) {\n    int total = 0;\n    for (int i = 0; i < list.length; i++) {\n        total += list[i];\n        System.out.println(list[i]);\n    }\n    return total;\n}\n"",""rating"":5},""code"":""public static int nu(int array[]){\n  int largest=0,current=0,smallest=0;\n    for(int i=0;i<array.size();i++){\n      current=array[i];\n      if(current>=largest){\n        largest=current;\n      }\n      if(current<=smallest){\n        smallest=current;\n      }\n    }\n  return largest-smallest;\n}""}"
52,2.5,1.0,0.0,2.5,2017-04-05 20:19:52.599366,18,,"public int getTax (String type)
{
  // returns different percentage of tax based on type of person
	type.compareTo(s2);
}"
53,2.5,2.0,0.0,2.5,2017-04-05 20:19:53.381483,18,,"public int getTax (String type)
{
  // returns different percentage of tax based on type of person
	type.compareTo(s2);
}"
54,2.5,1.0,1.0,1.0,2017-04-05 20:20:05.003946,12,23,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""public static void main(String[] args) {\n    double sum = 0;\n    int count = 0;\n    double salary = 0;\n    System.out.print(\""Enter salaries, -1 to finish: \"");\n    Scanner in = new Scanner(System.in);\n    while (salary != -1) {\n        salary = in.nextDouble();\n        if (salary != -1) {\n            sum = sum + salary;\n            count++;\n        }\n    }\n    if (count > 0) {\n        double average = sum / count;\n        System.out.println(\""Average salary: \"" + average);\n       // Process data until the sentinel is entered \n\n    } else {\n        System.out.println(\""No data\"");\n    }\n}\n       // Compute and print the average\n\n"",""rating"":3},""code"":""public int getTax(String persType){\n  if(persType.equals(\""emp\"")){\n    if(salary < 10000){\n      return salary*(.02);\n    }else{\n      return salary*(.05);\n    }\n  }else if(persType.equals(\""busOwn\"")){\n    return profit*(.10);\n  }else if(persType.equals(vet)){\n    return 0;\n  }\n}""}"
55,2.5,1.0,1.0,1.0,2017-04-05 20:20:11.255520,12,24,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""/** The central interface function to Perl. */\npublic int match(String s0, String s1) {\n    try {\n        String str = (String) CallPerl(\""Text::Levenshtein\"", \""distance\"", new Object[] { s0, s1 });\n        return Integer.parseInt(str);\n    } catch (InlineJavaPerlException e) {\n        System.err.println(\""Inline Java Perl Exception: \"" + e);\n    } catch (InlineJavaException e) {\n        System.err.println(\""Inline Java Exception: \"" + e);\n    }\n    return 0;\n}\n"",""rating"":1},""code"":""public int getTax(String persType){\n  if(persType.equals(\""emp\"")){\n    if(salary < 10000){\n      return salary*(.02);\n    }else{\n      return salary*(.05);\n    }\n  }else if(persType.equals(\""busOwn\"")){\n    return profit*(.10);\n  }else if(persType.equals(vet)){\n    return 0;\n  }\n}""}"
56,2.5,1.0,1.0,1.0,2017-04-05 20:20:16.142816,12,25,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""/** Return the current balance in the named account */\npublic int getBalance(String name, String password) throws RemoteException, BankingException {\n    Account acct = verify(name, password);\n    synchronized (acct) {\n        return acct.balance;\n    }\n}\n"",""rating"":1},""code"":""public int getTax(String persType){\n  if(persType.equals(\""emp\"")){\n    if(salary < 10000){\n      return salary*(.02);\n    }else{\n      return salary*(.05);\n    }\n  }else if(persType.equals(\""busOwn\"")){\n    return profit*(.10);\n  }else if(persType.equals(vet)){\n    return 0;\n  }\n}""}"
57,2.5,1.0,1.0,1.0,2017-04-05 20:20:22.301378,12,26,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""/** \n   * This convenience method checks whether the name and password match\n   * an existing account.  If so, it returns the balance in that account.\n   * If not, it throws an exception.  Note that this method does not call\n   * commit() or rollback(), so its query is part of a larger transaction.\n   **/\npublic int verify(String name, String password) throws BankingException, SQLException {\n    Statement s = null;\n    try {\n        s = db.createStatement();\n        s.executeQuery(\""SELECT balance FROM accounts \"" + \""WHERE name='\"" + name + \""' \"" + \""  AND password = '\"" + password + \""'\"");\n        ResultSet r = s.getResultSet();\n        if (!r.next())\n            throw new BankingException(\""No such account or invalid password\"");\n        return r.getInt(1);\n    } finally {\n        try {\n            s.close();\n        } catch (Exception e) {\n        }\n    }\n}\n"",""rating"":2},""code"":""public int getTax(String persType){\n  if(persType.equals(\""emp\"")){\n    if(salary < 10000){\n      return salary*(.02);\n    }else{\n      return salary*(.05);\n    }\n  }else if(persType.equals(\""busOwn\"")){\n    return profit*(.10);\n  }else if(persType.equals(vet)){\n    return 0;\n  }\n}""}"
58,1.0,1.0,1.0,1.0,2017-04-05 20:20:23.782520,11,27,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""int getX() {\n    return x;\n}\n"",""rating"":1},""code"":""int arraylargest(){\n}""}"
59,1.0,1.0,1.0,1.0,2017-04-05 20:20:25.677107,11,28,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String[] unuxed) {\n    new ButtonDemo().setVisible(true);\n}\n"",""rating"":1},""code"":""int arraylargest(){\n}""}"
60,1.0,1.0,1.0,1.0,2017-04-05 20:20:27.140970,11,29,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""int getSize() {\n    // Return the number of Locations on the stack. \n    return size;\n}\n"",""rating"":1},""code"":""int arraylargest(){\n}""}"
61,1.0,1.0,2.0,1.0,2017-04-05 20:20:27.556457,19,30,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""public void paintComponent(Graphics graph) {\n    int increment = samples.length / getWidth();\n    final int LARGEST = 32767;\n    int x = 0;\n    for (int i = 0; i < samples.length; i = i + increment) {\n        int value = samples[i];\n        value = Math.min(LARGEST, value);\n        value = Math.max(-LARGEST, value);\n        int height = getHeight() / 2;\n        int y = height - samples[i] * height / LARGEST;\n        graph.drawLine(x, y, x, height);\n        x++;\n    }\n}\n"",""rating"":1},""code"":""int largestDifference(int[] values)\n{\n  int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n  \n  int smallest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] < smallest) {\n            smallest = values[i];\n        }\n    }\n  \n  return largest-smallest;\n}""}"
62,1.0,1.0,1.0,1.0,2017-04-05 20:20:29.493010,11,31,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""int getPrice() {\n    return price;\n}\n"",""rating"":1},""code"":""int arraylargest(){\n}""}"
63,1.0,1.0,1.0,1.0,2017-04-05 20:20:30.814770,11,32,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""/**\n         * Return the contents of the square in the specified row and column.\n         */\nint pieceAt(int row, int col) {\n    return board[row][col];\n}\n"",""rating"":1},""code"":""int arraylargest(){\n}""}"
64,1.0,1.0,2.0,1.0,2017-04-05 20:20:31.395852,19,33,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""// pre: list != null\n// post: return sum of elements\n// use traditional for loop\npublic static int sumListOld(int[] list) {\n    int total = 0;\n    for (int i = 0; i < list.length; i++) {\n        total += list[i];\n        System.out.println(list[i]);\n    }\n    return total;\n}\n"",""rating"":2},""code"":""int largestDifference(int[] values)\n{\n  int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n  \n  int smallest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] < smallest) {\n            smallest = values[i];\n        }\n    }\n  \n  return largest-smallest;\n}""}"
65,1.0,1.0,2.0,1.0,2017-04-05 20:20:33.966927,19,34,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""/**\n         * Return the largest item that has been entered.\n         * The return value will be -infinity if no numbers have been entered. \n         */\npublic double getMax() {\n    return max;\n}\n"",""rating"":1},""code"":""int largestDifference(int[] values)\n{\n  int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n  \n  int smallest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] < smallest) {\n            smallest = values[i];\n        }\n    }\n  \n  return largest-smallest;\n}""}"
66,2.5,2.0,0.0,2.5,2017-04-05 20:20:35.322532,18,35,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""/** Return the current balance in the named account */\npublic int getBalance(String name, String password) throws RemoteException, BankingException {\n    Account acct = verify(name, password);\n    synchronized (acct) {\n        return acct.balance;\n    }\n}\n"",""rating"":1},""code"":""public int getTax (String type)\n{\n  // returns different percentage of tax based on type of person\n\ttype.compareTo(s2);\n}""}"
67,1.0,1.0,1.0,1.0,2017-04-05 20:20:58.692665,11,36,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""/**\n         * Return the contents of the square in the specified row and column.\n         */\nint pieceAt(int row, int col) {\n    return board[row][col];\n}\n"",""rating"":1},""code"":""int arraylargest(){\n  //return largest int in array\n}""}"
68,1.0,1.0,1.0,1.0,2017-04-05 20:21:00.132277,11,37,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""int powerUse() {\n    if (\""Retention\"".equals(botType)) {\n        return 2;\n    } else {\n        return 4;\n    }\n}\n"",""rating"":1},""code"":""int arraylargest(){\n  //return largest int in array\n}""}"
69,1.0,1.0,1.0,1.0,2017-04-05 20:21:15.540183,11,38,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Computes the largest value of an array.\n      @param a the array\n      @return the largest value in a\n   */\npublic static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":5},""code"":""int arraylargest(){\n  //return largest int in array\n}""}"
70,1.0,1.0,1.0,1.0,2017-04-05 20:21:29.956275,11,39,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""public void paintComponent(Graphics graph) {\n    int increment = samples.length / getWidth();\n    final int LARGEST = 32767;\n    int x = 0;\n    for (int i = 0; i < samples.length; i = i + increment) {\n        int value = samples[i];\n        value = Math.min(LARGEST, value);\n        value = Math.max(-LARGEST, value);\n        int height = getHeight() / 2;\n        int y = height - samples[i] * height / LARGEST;\n        graph.drawLine(x, y, x, height);\n        x++;\n    }\n}\n"",""rating"":1},""code"":""int arraylargest(){\n  //return largest int in array\n}""}"
71,1.0,1.0,1.0,1.0,2017-04-05 20:21:30.908072,11,40,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""int getX() {\n    return x;\n}\n"",""rating"":1},""code"":""int arraylargest(){\n  //return largest int in array\n}""}"
72,1.0,1.0,1.0,1.0,2017-04-05 20:21:32.668085,11,41,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""int countEmptyBlock(int r, int c) {\n    // Find the size of one empty region on the board; recursive routine called by obviousBlockExists.\n    if (blockCheck[r][c] == blockCheckCt || board.getColor(r, c) != null)\n        return 0;\n    int c1 = c, c2 = c;\n    while (c1 > 0 && blockCheck[r][c1 - 1] < blockCheckCt && board.getColor(r, c1 - 1) == null) c1--;\n    while (c2 < cols - 1 && blockCheck[r][c2 + 1] < blockCheckCt && board.getColor(r, c2 + 1) == null) c2++;\n    for (int i = c1; i <= c2; i++) blockCheck[r][i] = blockCheckCt;\n    int ct = c2 - c1 + 1;\n    if (r > 0)\n        for (int i = c1; i <= c2; i++) ct += countEmptyBlock(r - 1, i);\n    if (r < rows - 1)\n        for (int i = c1; i <= c2; i++) ct += countEmptyBlock(r + 1, i);\n    return ct;\n}\n"",""rating"":1},""code"":""int arraylargest(){\n  //return largest int in array\n}""}"
73,1.0,1.0,1.0,1.0,2017-04-05 20:21:43.435519,11,42,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static <E extends Comparable<E>> E max(E[] a) {\n    E largest = a[0];\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":2},""code"":""int arraylargest(){\n  //return largest int in array\n}""}"
74,1.0,1.0,1.0,1.0,2017-04-05 20:21:47.227013,11,43,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""/**\n       * Return the contents of the square in the specified row and column.\n       */\nint pieceAt(int row, int col) {\n    return board[row][col];\n}\n"",""rating"":1},""code"":""int arraylargest(){\n  //return largest int in array\n}""}"
75,2.5,1.0,1.0,1.0,2017-04-05 20:22:04.492023,12,44,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""/** \n     * This convenience method checks whether the name and password match\n     * an existing account.  If so, it returns the balance in that account.\n     * If not, it throws an exception.  Note that this method does not call\n     * commit() or rollback(), so its query is part of a larger transaction.\n     **/\npublic int verify(String name, String password) throws BankingException, SQLException {\n    Statement s = null;\n    try {\n        s = db.createStatement();\n        s.executeQuery(\""SELECT balance FROM accounts \"" + \""WHERE name='\"" + name + \""' \"" + \""  AND password = '\"" + password + \""'\"");\n        ResultSet r = s.getResultSet();\n        if (!r.next())\n            throw new BankingException(\""Bad account name or password\"");\n        return r.getInt(1);\n    } finally {\n        try {\n            s.close();\n        } catch (Exception e) {\n        }\n    }\n}\n"",""rating"":1},""code"":""public int getTax(String persType) throws BankingException{\n  if(persType.equals(\""emp\"")){\n    if(salary < 10000){\n      return salary*(.02);\n    }else{\n      return salary*(.05);\n    }\n  }else if(persType.equals(\""busOwn\"")){\n    return profit*(.10);\n  }else if(persType.equals(vet)){\n    return 0;\n  }else{\n    throw new BankingException(\""No such account or invalid password\"");\n  }\n}""}"
76,2.5,2.5,1.0,1.0,2017-04-05 20:22:34.798461,12,,"public int getTax(String persType) throws BankingException{
  if(persType.equals(""emp"")){
    if(salary < 10000){
      return salary*(.02);
    }else{
      return salary*(.05);
    }
  }else if(persType.equals(""busOwn"")){
    return profit*(.10);
  }else if(persType.equals(vet)){
    return 0;
  }else{
    throw new BankingException(""Incorrect Person Type"");
  }
}"
77,1.5,2.5,1.0,1.0,2017-04-05 20:22:36.066323,12,,"public int getTax(String persType) throws BankingException{
  if(persType.equals(""emp"")){
    if(salary < 10000){
      return salary*(.02);
    }else{
      return salary*(.05);
    }
  }else if(persType.equals(""busOwn"")){
    return profit*(.10);
  }else if(persType.equals(vet)){
    return 0;
  }else{
    throw new BankingException(""Incorrect Person Type"");
  }
}"
78,2.5,2.0,0.5,2.5,2017-04-05 20:22:42.495077,18,,"public int getTax (String type)
{
  int x;
  System.out.println(""Enter 1 for employees, 2 for business owners, 3 for veterans or 0 for none of these"")
  
  // returns different percentage of tax based on type of person
  type.compareTo(s2);
}"
79,1.5,2.5,1.0,1.0,2017-04-05 20:22:46.787199,12,45,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""/** \n   * This convenience method checks whether the name and password match\n   * an existing account.  If so, it returns the balance in that account.\n   * If not, it throws an exception.  Note that this method does not call\n   * commit() or rollback(), so its query is part of a larger transaction.\n   **/\npublic int verify(String name, String password) throws BankingException, SQLException {\n    Statement s = null;\n    try {\n        s = db.createStatement();\n        s.executeQuery(\""SELECT balance FROM accounts \"" + \""WHERE name='\"" + name + \""' \"" + \""  AND password = '\"" + password + \""'\"");\n        ResultSet r = s.getResultSet();\n        if (!r.next())\n            throw new BankingException(\""No such account or invalid password\"");\n        return r.getInt(1);\n    } finally {\n        try {\n            s.close();\n        } catch (Exception e) {\n        }\n    }\n}\n"",""rating"":3},""code"":""public int getTax(String persType) throws BankingException{\n  if(persType.equals(\""emp\"")){\n    if(salary < 10000){\n      return salary*(.02);\n    }else{\n      return salary*(.05);\n    }\n  }else if(persType.equals(\""busOwn\"")){\n    return profit*(.10);\n  }else if(persType.equals(vet)){\n    return 0;\n  }else{\n    throw new BankingException(\""Incorrect Person Type\"");\n  }\n}""}"
80,2.5,1.5,0.5,2.5,2017-04-05 20:22:48.030203,18,,"public int getTax (String type)
{
  int x;
  System.out.println(""Enter 1 for employees, 2 for business owners, 3 for veterans or 0 for none of these"")
  
  // returns different percentage of tax based on type of person
  type.compareTo(s2);
}"
81,2.5,1.0,0.5,2.5,2017-04-05 20:22:49.658499,18,,"public int getTax (String type)
{
  int x;
  System.out.println(""Enter 1 for employees, 2 for business owners, 3 for veterans or 0 for none of these"")
  
  // returns different percentage of tax based on type of person
  type.compareTo(s2);
}"
82,1.5,2.5,1.0,1.0,2017-04-05 20:22:49.888311,12,46,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", targetDate = \""Jan 1, 2012\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""public int getTax(String persType) throws BankingException{\n  if(persType.equals(\""emp\"")){\n    if(salary < 10000){\n      return salary*(.02);\n    }else{\n      return salary*(.05);\n    }\n  }else if(persType.equals(\""busOwn\"")){\n    return profit*(.10);\n  }else if(persType.equals(vet)){\n    return 0;\n  }else{\n    throw new BankingException(\""Incorrect Person Type\"");\n  }\n}""}"
83,2.5,1.0,0.5,3.0,2017-04-05 20:22:50.789963,18,,"public int getTax (String type)
{
  int x;
  System.out.println(""Enter 1 for employees, 2 for business owners, 3 for veterans or 0 for none of these"")
  
  // returns different percentage of tax based on type of person
  type.compareTo(s2);
}"
84,1.5,2.5,1.0,1.0,2017-04-05 20:22:55.738435,12,47,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""/** \n     * This convenience method checks whether the name and password match\n     * an existing account.  If so, it returns the balance in that account.\n     * If not, it throws an exception.  Note that this method does not call\n     * commit() or rollback(), so its query is part of a larger transaction.\n     **/\npublic int verify(String name, String password) throws BankingException, SQLException {\n    Statement s = null;\n    try {\n        s = db.createStatement();\n        s.executeQuery(\""SELECT balance FROM accounts \"" + \""WHERE name='\"" + name + \""' \"" + \""  AND password = '\"" + password + \""'\"");\n        ResultSet r = s.getResultSet();\n        if (!r.next())\n            throw new BankingException(\""Bad account name or password\"");\n        return r.getInt(1);\n    } finally {\n        try {\n            s.close();\n        } catch (Exception e) {\n        }\n    }\n}\n"",""rating"":3},""code"":""public int getTax(String persType) throws BankingException{\n  if(persType.equals(\""emp\"")){\n    if(salary < 10000){\n      return salary*(.02);\n    }else{\n      return salary*(.05);\n    }\n  }else if(persType.equals(\""busOwn\"")){\n    return profit*(.10);\n  }else if(persType.equals(vet)){\n    return 0;\n  }else{\n    throw new BankingException(\""Incorrect Person Type\"");\n  }\n}""}"
85,1.0,1.0,1.0,1.0,2017-04-05 20:22:58.357232,11,48,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static <E extends Comparable<E>> E max(E[] a) {\n    E largest = a[0];\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":5},""code"":""int arraylargest(){\n\n    //largest difference in array\n      \n}""}"
86,1.5,2.5,1.0,1.0,2017-04-05 20:23:02.039400,12,49,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""public static void main(String[] args) {\n    double sum = 0;\n    int count = 0;\n    double salary = 0;\n    System.out.print(\""Enter salaries, -1 to finish: \"");\n    Scanner in = new Scanner(System.in);\n    while (salary != -1) {\n        salary = in.nextDouble();\n        if (salary != -1) {\n            sum = sum + salary;\n            count++;\n        }\n    }\n    if (count > 0) {\n        double average = sum / count;\n        System.out.println(\""Average salary: \"" + average);\n       // Process data until the sentinel is entered \n\n    } else {\n        System.out.println(\""No data\"");\n    }\n}\n       // Compute and print the average\n\n"",""rating"":1},""code"":""public int getTax(String persType) throws BankingException{\n  if(persType.equals(\""emp\"")){\n    if(salary < 10000){\n      return salary*(.02);\n    }else{\n      return salary*(.05);\n    }\n  }else if(persType.equals(\""busOwn\"")){\n    return profit*(.10);\n  }else if(persType.equals(vet)){\n    return 0;\n  }else{\n    throw new BankingException(\""Incorrect Person Type\"");\n  }\n}""}"
87,1.0,1.0,1.0,1.0,2017-04-05 20:23:03.610240,11,50,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""public void paintComponent(Graphics graph) {\n    int increment = samples.length / getWidth();\n    final int LARGEST = 32767;\n    int x = 0;\n    for (int i = 0; i < samples.length; i = i + increment) {\n        int value = samples[i];\n        value = Math.min(LARGEST, value);\n        value = Math.max(-LARGEST, value);\n        int height = getHeight() / 2;\n        int y = height - samples[i] * height / LARGEST;\n        graph.drawLine(x, y, x, height);\n        x++;\n    }\n}\n"",""rating"":1},""code"":""int arraylargest(){\n\n    //largest difference in array\n      \n}""}"
88,1.5,2.5,1.0,1.0,2017-04-05 20:23:03.648655,12,51,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""/** Return the current balance in the named account */\npublic int getBalance(String name, String password) throws RemoteException, BankingException {\n    Account acct = verify(name, password);\n    synchronized (acct) {\n        return acct.balance;\n    }\n}\n"",""rating"":1},""code"":""public int getTax(String persType) throws BankingException{\n  if(persType.equals(\""emp\"")){\n    if(salary < 10000){\n      return salary*(.02);\n    }else{\n      return salary*(.05);\n    }\n  }else if(persType.equals(\""busOwn\"")){\n    return profit*(.10);\n  }else if(persType.equals(vet)){\n    return 0;\n  }else{\n    throw new BankingException(\""Incorrect Person Type\"");\n  }\n}""}"
89,1.5,2.5,1.0,1.0,2017-04-05 20:23:05.172308,12,52,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""/**\n   * This convenience method is not a remote method.  Given a name and password\n   * it checks to see if an account with that name and password exists.  If\n   * so, it returns the Account object.  Otherwise, it throws an exception.\n   **/\npublic Account verify(String name, String password) throws BankingException {\n    synchronized (accounts) {\n        Account acct = (Account) accounts.get(name);\n        if (acct == null)\n            throw new BankingException(\""No such account\"");\n        if (!password.equals(acct.password))\n            throw new BankingException(\""Invalid password\"");\n        return acct;\n    }\n}\n"",""rating"":2},""code"":""public int getTax(String persType) throws BankingException{\n  if(persType.equals(\""emp\"")){\n    if(salary < 10000){\n      return salary*(.02);\n    }else{\n      return salary*(.05);\n    }\n  }else if(persType.equals(\""busOwn\"")){\n    return profit*(.10);\n  }else if(persType.equals(vet)){\n    return 0;\n  }else{\n    throw new BankingException(\""Incorrect Person Type\"");\n  }\n}""}"
90,2.5,1.0,1.0,1.0,2017-04-05 20:23:06.606663,5,53,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""// pre: list != null, list.length > 0\n// post: return index of minimum element of array\npublic static int findMin(int[] list) {\n    assert list != null && list.length > 0 : \""failed precondition\"";\n    int indexOfMin = 0;\n    for (int i = 1; i < list.length; i++) {\n        if (list[i] < list[indexOfMin]) {\n            indexOfMin = i;\n        }\n    }\n    return indexOfMin;\n}\n"",""rating"":5},""code"":""/*\nreturn the largest difference between the elements\n*/\npublic static int nu(int[] array){\n  int largest=0,current=0,smallest=0;\n    for(int i=0;i<array.size();i++){\n      current=array[i];\n      if(current>=largest){\n        largest=current;\n      }\n      if(current<=smallest){\n        smallest=current;\n      }\n    }\n  return largest-smallest;\n}""}"
91,2.5,1.0,1.0,1.0,2017-04-05 20:23:22.867382,5,54,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent1(int[] a) {\n    int[] counts = new int[a.length];\n    for (// O(n*n)\n    int i = 0; // O(n*n)\n    i < a.length; // O(n*n)\n    i++) {\n        // O(n) in each iteration\n        counts[i] = count(a, a[i]);\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":5},""code"":""/*\nreturn the largest difference between the elements\n*/\npublic static int nu(int[] array){\n  int largest=0,current=0,smallest=0;\n    for(int i=0;i<array.size();i++){\n      current=array[i];\n      if(current>=largest){\n        largest=current;\n      }\n      if(current<=smallest){\n        smallest=current;\n      }\n    }\n  return largest-smallest;\n}""}"
92,1.0,1.0,1.0,1.0,2017-04-05 20:23:24.888852,11,55,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""int getX() {\n    return x;\n}\n"",""rating"":1},""code"":""int arraylargest(){\n\n    //largest difference in array\n      \n}""}"
93,1.0,1.0,1.0,1.0,2017-04-05 20:23:26.513495,11,56,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""/**\n         * Return the contents of the square in the specified row and column.\n         */\nint pieceAt(int row, int col) {\n    return board[row][col];\n}\n"",""rating"":1},""code"":""int arraylargest(){\n\n    //largest difference in array\n      \n}""}"
94,2.5,1.0,1.0,1.0,2017-04-05 20:23:29.503546,5,57,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""// pre: list != null\n// post: return sum of elements\n// use traditional for loop\npublic static int sumListOld(int[] list) {\n    int total = 0;\n    for (int i = 0; i < list.length; i++) {\n        total += list[i];\n        System.out.println(list[i]);\n    }\n    return total;\n}\n"",""rating"":5},""code"":""/*\nreturn the largest difference between the elements\n*/\npublic static int nu(int[] array){\n  int largest=0,current=0,smallest=0;\n    for(int i=0;i<array.size();i++){\n      current=array[i];\n      if(current>=largest){\n        largest=current;\n      }\n      if(current<=smallest){\n        smallest=current;\n      }\n    }\n  return largest-smallest;\n}""}"
95,1.0,1.0,1.0,1.0,2017-04-05 20:23:33.314005,17,58,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""/**\n      Finds the position of a bank account with a given number.\n      @param accountNumber the number to find\n      @return the position of the account with the given number, \n      or -1 if there is no such account\n   */\npublic int find(int accountNumber) throws IOException {\n    for (int i = 0; i < size(); i++) {\n        file.seek(i * RECORD_SIZE);\n        int a = file.readInt();\n        if (a == accountNumber) {\n            return i;\n        }\n    // Found a match            \n    }\n    // No match in the entire file\n    return -1;\n}\n"",""rating"":1},""code"":""public int largestDiff(int[] x)\n{\n  int largest = x[0];\n  int smallest = x[0];\n for(int y = 1; y < x.length; y++)\n  {\n if(x[y] > largest)\n    {\n   largest = x[y];\n    }\n  }\n for(int z = 1; z < x.length; z++)\n  {\n  if(x[z] < smallest)\n    {\n     smallest = x[z];\n    }\n  }\n return largest - smallest;\n} ""}"
96,2.5,1.0,1.0,1.0,2017-04-05 20:23:41.021395,5,59,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""/**\n      Gets the position of the minimum score.\n      @return the position of the smallest element of values, or -1\n      if there are no scores.\n   */\npublic int minimumPosition() {\n    if (scores.size() == 0) {\n        return -1;\n    }\n    int smallestPosition = 0;\n    for (int i = 1; i < scores.size(); i++) {\n        if (scores.get(i) < scores.get(smallestPosition)) {\n            smallestPosition = i;\n        }\n    }\n    return smallestPosition;\n}\n"",""rating"":5},""code"":""/*\nreturn the largest difference between the elements\n*/\npublic static int nu(int[] array){\n  int largest=0,current=0,smallest=0;\n    for(int i=0;i<array.size();i++){\n      current=array[i];\n      if(current>=largest){\n        largest=current;\n      }\n      if(current<=smallest){\n        smallest=current;\n      }\n    }\n  return largest-smallest;\n}""}"
97,2.5,4.0,1.0,1.0,2017-04-05 20:23:47.760442,5,,"/*
return the largest difference between the elements
*/
public static int nu(int[] array){
  int largest=0,current=0,smallest=0;
    for(int i=0;i<array.size();i++){
      current=array[i];
      if(current>=largest){
        largest=current;
      }
      if(current<=smallest){
        smallest=current;
      }
    }
  return largest-smallest;
}"
98,2.5,4.0,1.0,1.0,2017-04-05 20:23:49.949741,5,60,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""/**\n      Gets the position of the minimum score.\n      @return the position of the smallest element of values, or -1\n      if there are no scores.\n   */\npublic int minimumPosition() {\n    if (scores.size() == 0) {\n        return -1;\n    }\n    int smallestPosition = 0;\n    for (int i = 1; i < scores.size(); i++) {\n        if (scores.get(i) < scores.get(smallestPosition)) {\n            smallestPosition = i;\n        }\n    }\n    return smallestPosition;\n}\n"",""rating"":5},""code"":""/*\nreturn the largest difference between the elements\n*/\npublic static int nu(int[] array){\n  int largest=0,current=0,smallest=0;\n    for(int i=0;i<array.size();i++){\n      current=array[i];\n      if(current>=largest){\n        largest=current;\n      }\n      if(current<=smallest){\n        smallest=current;\n      }\n    }\n  return largest-smallest;\n}""}"
99,2.5,4.0,1.0,1.0,2017-04-05 20:23:52.430964,5,61,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent1(int[] a) {\n    int[] counts = new int[a.length];\n    for (// O(n*n)\n    int i = 0; // O(n*n)\n    i < a.length; // O(n*n)\n    i++) {\n        // O(n) in each iteration\n        counts[i] = count(a, a[i]);\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":5},""code"":""/*\nreturn the largest difference between the elements\n*/\npublic static int nu(int[] array){\n  int largest=0,current=0,smallest=0;\n    for(int i=0;i<array.size();i++){\n      current=array[i];\n      if(current>=largest){\n        largest=current;\n      }\n      if(current<=smallest){\n        smallest=current;\n      }\n    }\n  return largest-smallest;\n}""}"
100,2.5,4.0,1.0,1.0,2017-04-05 20:24:00.063094,5,62,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Finds the smallest element in a tail range of the array.\n      @param a the array to sort\n      @param from the first position in a to compare\n      @return the position of the smallest element in the\n      range a[from] . . . a[a.length - 1]\n   */\nprivate static int minimumPosition(int[] a, int from) {\n    int minPos = from;\n    for (int i = from + 1; i < a.length; i++) {\n        if (a[i] < a[minPos]) {\n            minPos = i;\n        }\n    }\n    return minPos;\n}\n"",""rating"":5},""code"":""/*\nreturn the largest difference between the elements\n*/\npublic static int nu(int[] array){\n  int largest=0,current=0,smallest=0;\n    for(int i=0;i<array.size();i++){\n      current=array[i];\n      if(current>=largest){\n        largest=current;\n      }\n      if(current<=smallest){\n        smallest=current;\n      }\n    }\n  return largest-smallest;\n}""}"
101,1.0,1.0,1.0,1.0,2017-04-05 20:24:08.015309,3,63,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent2(int[] a) {\n    // O(n log(n))\n    Arrays.sort(a);\n    int[] counts = new int[a.length];\n    int count = 0;\n    for (// O(n)\n    int i = 0; // O(n)\n    i < a.length; // O(n)\n    i++) {\n        count++;\n        if (i == a.length - 1 || a[i] != a[i + 1]) {\n            counts[i] = count;\n            count = 0;\n        }\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":1},""code"":""int arrayDifference(int array[]){\n  \n  /* takes an array and return the difference between its largest element \n    and its smallest element*/ \n}\n  ""}"
102,2.5,4.0,1.0,1.0,2017-04-05 20:24:08.383355,5,64,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static <E extends Comparable<E>> E max(E[] a) {\n    E largest = a[0];\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":5},""code"":""/*\nreturn the largest difference between the elements\n*/\npublic static int nu(int[] array){\n  int largest=0,current=0,smallest=0;\n    for(int i=0;i<array.size();i++){\n      current=array[i];\n      if(current>=largest){\n        largest=current;\n      }\n      if(current<=smallest){\n        smallest=current;\n      }\n    }\n  return largest-smallest;\n}""}"
103,1.0,2.0,1.0,1.0,2017-04-05 20:24:09.859811,11,,"int arraylargest(){

    //largest difference in array
      //subtract int
}"
104,2.5,4.0,1.0,1.0,2017-04-05 20:24:10.873125,5,65,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""public static void main(String[] args) {\n    ArrayList<Double> values = new ArrayList<Double>();\n    // Read inputs\n    System.out.println(\""Please enter values, Q to quit:\"");\n    Scanner in = new Scanner(System.in);\n    while (in.hasNextDouble()) {\n        values.add(in.nextDouble());\n    }\n    // Find the largest value\n    double largest = values.get(0);\n    for (int i = 1; i < values.size(); i++) {\n        if (values.get(i) > largest) {\n            largest = values.get(i);\n        }\n    }\n    for (double element : values) {\n        System.out.print(element);\n        if (element == largest) {\n            System.out.print(\"" <== largest value\"");\n        }\n        System.out.println();\n    }\n}\n       // Print all values, marking the largest\n\n"",""rating"":5},""code"":""/*\nreturn the largest difference between the elements\n*/\npublic static int nu(int[] array){\n  int largest=0,current=0,smallest=0;\n    for(int i=0;i<array.size();i++){\n      current=array[i];\n      if(current>=largest){\n        largest=current;\n      }\n      if(current<=smallest){\n        smallest=current;\n      }\n    }\n  return largest-smallest;\n}""}"
105,1.0,1.0,1.0,1.0,2017-04-05 20:24:21.923856,3,66,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""/**\n       * Return the contents of the square in the specified row and column.\n       */\nint pieceAt(int row, int col) {\n    return board[row][col];\n}\n"",""rating"":1},""code"":""int arrayDifference(int array[]){\n  \n  /* takes an array and return the difference between its largest element \n    and its smallest element*/ \n}\n  ""}"
106,1.0,2.0,1.0,1.0,2017-04-05 20:24:40.359313,11,67,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""/**\n       * Return the contents of the square in the specified row and column.\n       */\nint pieceAt(int row, int col) {\n    return board[row][col];\n}\n"",""rating"":1},""code"":""int [] arraylargest(){\n\n    //largest difference in array\n      //subtract int\n}""}"
107,1.0,2.0,1.0,1.0,2017-04-05 20:24:41.454811,11,68,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""void printInfix() {\n    // Print the expression, in parentheses.\n    System.out.print(\""(-\"");\n    operand.printInfix();\n    System.out.print(')');\n}\n"",""rating"":1},""code"":""int [] arraylargest(){\n\n    //largest difference in array\n      //subtract int\n}""}"
108,1.0,2.0,1.0,1.0,2017-04-05 20:25:02.079112,11,69,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""/** Subtract another Complex from this one\n     */\npublic Complex subtract(Complex other) {\n    return subtract(this, other);\n}\n"",""rating"":1},""code"":""int [] arraylargestdiffernce(){\n\n    //largest difference in array\n      //subtract int\n}""}"
109,1.0,2.0,1.0,1.0,2017-04-05 20:25:02.622854,11,70,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""void printInfix() {\n    // Print the expression, in parentheses.\n    System.out.print(\""(-\"");\n    operand.printInfix();\n    System.out.print(')');\n}\n"",""rating"":1},""code"":""int [] arraylargestdiffernce(){\n\n    //largest difference in array\n      //subtract int\n}""}"
110,1.0,1.0,1.0,1.0,2017-04-05 20:25:06.425853,17,71,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""/** \n\t * Get the coordinates of the current moveto or lineto as doubles\n\t **/\npublic int currentSegment(double[] coords) {\n    int retval;\n    if (Double.isNaN(points[i])) {\n        coords[0] = points[i + 1];\n        coords[1] = points[i + 2];\n        retval = SEG_MOVETO;\n    } else {\n        coords[0] = points[i];\n        coords[1] = points[i + 1];\n        retval = SEG_LINETO;\n    }\n    if (transform != null)\n        transform.transform(coords, 0, coords, 0, 1);\n    return retval;\n}\n"",""rating"":1},""code"":""public int largestDiff(int[] x)\n{\n  int largest = x[0];\n  int smallest = x[0];\n for(int y = 1; y < x.length; y++)\n  {\n if(x[y] > largest)\n    {\n   largest = x[y];\n    }\n  }\n for(int z = 1; z < x.length; z++)\n  {\n  if(x[z] < smallest)\n    {\n     smallest = x[z];\n    }\n  }\n return largest - smallest;\n} ""}"
111,1.0,1.0,1.0,1.0,2017-04-05 20:25:13.221002,17,72,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""/**\n      Gets the position of the minimum score.\n      @return the position of the smallest element of values, or -1\n      if there are no scores.\n   */\npublic int minimumPosition() {\n    if (scoresSize == 0) {\n        return -1;\n    }\n    int smallestPosition = 0;\n    for (int i = 1; i < scoresSize; i++) {\n        if (scores[i] < scores[smallestPosition]) {\n            smallestPosition = i;\n        }\n    }\n    return smallestPosition;\n}\n"",""rating"":3},""code"":""public int largestDiff(int[] x)\n{\n  int largest = x[0];\n  int smallest = x[0];\n for(int y = 1; y < x.length; y++)\n  {\n if(x[y] > largest)\n    {\n   largest = x[y];\n    }\n  }\n for(int z = 1; z < x.length; z++)\n  {\n  if(x[z] < smallest)\n    {\n     smallest = x[z];\n    }\n  }\n return largest - smallest;\n} ""}"
112,1.0,2.0,1.0,1.0,2017-04-05 20:25:16.263346,11,73,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""/**\n      Computes the largest value of an array.\n      @param a the array\n      @return the largest value in a\n   */\npublic static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":5},""code"":""int [] arraylargestdiffernce(){\n\n    //largest difference in array\n      //subtract int\n}""}"
113,1.0,1.0,1.0,1.0,2017-04-05 20:25:16.722914,17,74,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static <E extends Comparable<E>> E max(E[] a) {\n    E largest = a[0];\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":3},""code"":""public int largestDiff(int[] x)\n{\n  int largest = x[0];\n  int smallest = x[0];\n for(int y = 1; y < x.length; y++)\n  {\n if(x[y] > largest)\n    {\n   largest = x[y];\n    }\n  }\n for(int z = 1; z < x.length; z++)\n  {\n  if(x[z] < smallest)\n    {\n     smallest = x[z];\n    }\n  }\n return largest - smallest;\n} ""}"
114,1.0,1.0,1.0,1.0,2017-04-05 20:25:23.486074,1,,"public static void main (String[] args)
{
    Scanner input = new Scanner(System.in);
    int[] numbers = new int[5];

    for (int i = 0; i < numbers.length; i++)
    {
        System.out.println(""Please enter number"");
        numbers[i] = input.nextInt();
    }
  	int max = numbers[0];
    int min = numbers[0];
  	for(int i = 1; i < numbers.length; i++)
    {
      if(numbers[i] < min)
      {
        min = numbers[i];
      }
      if(numbers[i] > max)
      {
        max = numbers[i];
      }
    }
  	int delta = (max - min);
  	return delta;
}"
115,2.0,1.0,1.0,1.0,2017-04-05 20:25:26.307276,12,,"public int largestDif(int[] array){
  
}"
116,2.5,1.0,1.0,1.0,2017-04-05 20:25:27.000753,12,,"public int largestDif(int[] array){
  
}"
117,1.0,1.0,1.0,2.5,2017-04-05 20:25:30.976673,1,,"public static void main (String[] args)
{
    Scanner input = new Scanner(System.in);
    int[] numbers = new int[5];

    for (int i = 0; i < numbers.length; i++)
    {
        System.out.println(""Please enter number"");
        numbers[i] = input.nextInt();
    }
  	int max = numbers[0];
    int min = numbers[0];
  	for(int i = 1; i < numbers.length; i++)
    {
      if(numbers[i] < min)
      {
        min = numbers[i];
      }
      if(numbers[i] > max)
      {
        max = numbers[i];
      }
    }
  	int delta = (max - min);
  	return delta;
}"
118,2.5,1.0,1.0,1.0,2017-04-05 20:25:40.303590,12,75,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""/**\n         * Return the largest item that has been entered.\n         * The return value will be -infinity if no numbers have been entered. \n         */\npublic double getMax() {\n    return max;\n}\n"",""rating"":1},""code"":""public int largestDif(int[] array){\n  \n}""}"
119,1.0,1.0,1.0,1.0,2017-04-05 20:25:41.225030,17,76,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""public int compare(Object a, Object b) {\n    TimerTask t1 = (TimerTask) a;\n    TimerTask t2 = (TimerTask) b;\n    long diff = t1.nextTime - t2.nextTime;\n    if (diff < 0)\n        return -1;\n    else if (diff > 0)\n        return 1;\n    else\n        return 0;\n}\n"",""rating"":1},""code"":""public int largestDiff(int[] x)\n{\n  int largest = x[0];\n  int smallest = x[0];\n for(int y = 1; y < x.length; y++)\n  {\n if(x[y] > largest)\n    {\n   largest = x[y];\n    }\n  }\n for(int z = 1; z < x.length; z++)\n  {\n  if(x[z] < smallest)\n    {\n     smallest = x[z];\n    }\n  }\n return largest - smallest;\n} ""}"
120,1.0,2.0,1.0,1.0,2017-04-05 20:25:42.806517,11,77,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""/**\n      Computes the largest value of an array.\n      @param a the array\n      @return the largest value in a\n   */\npublic static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":5},""code"":""int [] arraylargestdiffernce(){\n\n    //largest difference in array\n      //subtract int\n}""}"
121,1.0,1.0,1.0,1.0,2017-04-05 20:25:43.400437,3,78,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""public static void main(String[] args) {\n    ArrayList<Double> values = new ArrayList<Double>();\n    // Read inputs\n    System.out.println(\""Please enter values, Q to quit:\"");\n    Scanner in = new Scanner(System.in);\n    while (in.hasNextDouble()) {\n        values.add(in.nextDouble());\n    }\n    // Find the largest value\n    double largest = values.get(0);\n    for (int i = 1; i < values.size(); i++) {\n        if (values.get(i) > largest) {\n            largest = values.get(i);\n        }\n    }\n    for (double element : values) {\n        System.out.print(element);\n        if (element == largest) {\n            System.out.print(\"" <== largest value\"");\n        }\n        System.out.println();\n    }\n}\n       // Print all values, marking the largest\n\n"",""rating"":1},""code"":""int arrayDifference(int array[]){\n  \n  /* takes an array and return the difference between its largest element \n    and its smallest element*/ \n}\n  ""}"
122,2.5,1.0,1.0,1.0,2017-04-05 20:25:46.273024,12,79,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Computes the largest value of an array.\n      @param a the array\n      @return the largest value in a\n   */\npublic static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":4},""code"":""public int largestDif(int[] array){\n  \n}""}"
123,1.0,1.0,1.0,1.0,2017-04-05 20:25:51.894309,17,80,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""/**\n         * Return the largest item that has been entered.\n         * The return value will be -infinity if no numbers have been entered. \n         */\npublic double getMax() {\n    return max;\n}\n"",""rating"":2},""code"":""public int largestDiff(int[] x)\n{\n  int largest = x[0];\n  int smallest = x[0];\n for(int y = 1; y < x.length; y++)\n  {\n if(x[y] > largest)\n    {\n   largest = x[y];\n    }\n  }\n for(int z = 1; z < x.length; z++)\n  {\n  if(x[z] < smallest)\n    {\n     smallest = x[z];\n    }\n  }\n return largest - smallest;\n} ""}"
124,1.0,1.0,1.0,1.0,2017-04-05 20:25:54.956239,17,81,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""/**\n      Finds the position of a bank account with a given number.\n      @param accountNumber the number to find\n      @return the position of the account with the given number, \n      or -1 if there is no such account\n   */\npublic int find(int accountNumber) throws IOException {\n    for (int i = 0; i < size(); i++) {\n        file.seek(i * RECORD_SIZE);\n        int a = file.readInt();\n        if (a == accountNumber) {\n            return i;\n        }\n    // Found a match            \n    }\n    // No match in the entire file\n    return -1;\n}\n"",""rating"":1},""code"":""public int largestDiff(int[] x)\n{\n  int largest = x[0];\n  int smallest = x[0];\n for(int y = 1; y < x.length; y++)\n  {\n if(x[y] > largest)\n    {\n   largest = x[y];\n    }\n  }\n for(int z = 1; z < x.length; z++)\n  {\n  if(x[z] < smallest)\n    {\n     smallest = x[z];\n    }\n  }\n return largest - smallest;\n} ""}"
125,2.5,1.0,0.5,3.0,2017-04-05 20:25:56.580493,18,82,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""/** \n\t * Get the coordinates of the current moveto or lineto as floats\n\t **/\npublic int currentSegment(float[] coords) {\n    int retval;\n    if (Double.isNaN(points[i])) {\n        // If its a moveto\n        coords[0] = (float) points[i + 1];\n        coords[1] = (float) points[i + 2];\n        retval = SEG_MOVETO;\n    } else {\n        coords[0] = (float) points[i];\n        coords[1] = (float) points[i + 1];\n        retval = SEG_LINETO;\n    }\n    // If a transform was specified, use it on the coordinates\n    if (transform != null)\n        transform.transform(coords, 0, coords, 0, 1);\n    return retval;\n}\n"",""rating"":2},""code"":""public int getTax (String type)\n{\n  int x;\n  System.out.println(\""Enter 1 for employees, 2 for business owners, 3 for veterans or 0 for none of these\"");\n  x=scan.nextInt();\n  switch (x)\n  {\n    case 1:\n      {\n        \n      }\n    case 2:\n      {\n        \n      }\n    case 3:\n      {\n        \n      }\n    case 0:\n      {\n        \n      }\n    default:\n      {\n        \n      }\n  }\n  // returns different percentage of tax based on type of person\n  type.compareTo(s2);\n}""}"
126,1.0,1.0,1.0,2.5,2017-04-05 20:25:59.503053,1,83,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    double value;\n    do {\n        System.out.print(\""Enter a number >= 0: \"");\n        value = in.nextDouble();\n    } while (value < 0);\n    double root = Math.sqrt(value);\n    System.out.println(\""The square root of the number is \"" + root);\n}\n"",""rating"":2},""code"":""public static void main (String[] args)\n{\n    Scanner input = new Scanner(System.in);\n    int[] numbers = new int[5];\n\n    for (int i = 0; i < numbers.length; i++)\n    {\n        System.out.println(\""Please enter number\"");\n        numbers[i] = input.nextInt();\n    }\n  \tint max = numbers[0];\n    int min = numbers[0];\n  \tfor(int i = 1; i < numbers.length; i++)\n    {\n      if(numbers[i] < min)\n      {\n        min = numbers[i];\n      }\n      if(numbers[i] > max)\n      {\n        max = numbers[i];\n      }\n    }\n  \tint delta = (max - min);\n  \treturn delta;\n}""}"
127,1.0,1.0,1.0,1.0,2017-04-05 20:26:12.010305,3,84,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""// pre: list != null, list.length > 0\n// post: return index of minimum element of array\npublic static int findMin(int[] list) {\n    assert list != null && list.length > 0 : \""failed precondition\"";\n    int indexOfMin = 0;\n    for (int i = 1; i < list.length; i++) {\n        if (list[i] < list[indexOfMin]) {\n            indexOfMin = i;\n        }\n    }\n    return indexOfMin;\n}\n"",""rating"":2},""code"":""int arrayDifference(int array[]){\n  \n  /* takes an array and return the difference between its largest element \n    and its smallest element*/ \n}\n  ""}"
128,2.5,1.0,0.5,3.0,2017-04-05 20:26:14.540768,18,85,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""public int getNext() {\n    int retValue = arrayOfInts[next++];\n    if (retValue % 2 == 1) {\n        return retValue;\n    }\n    return -1;\n}\n"",""rating"":1},""code"":""public int getTax (String type)\n{\n  int x;\n  System.out.println(\""Enter 1 for employees, 2 for business owners, 3 for veterans or 0 for none of these\"");\n  x=scan.nextInt();\n  switch (x)\n  {\n    case 1:\n      {\n        \n      }\n    case 2:\n      {\n        \n      }\n    case 3:\n      {\n        \n      }\n    case 0:\n      {\n        \n      }\n    default:\n      {\n        \n      }\n  }\n  // returns different percentage of tax based on type of person\n  type.compareTo(s2);\n}""}"
129,1.0,1.0,1.0,2.5,2017-04-05 20:26:15.373604,1,86,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""public static void main(String[] args) {\n    Scanner s = new Scanner(System.in);\n    System.out.print(\""Enter your name: \"");\n    String name = s.nextLine();\n    System.out.println(\""Hello \"" + name + \""!\"");\n}\n"",""rating"":4},""code"":""public static void main (String[] args)\n{\n    Scanner input = new Scanner(System.in);\n    int[] numbers = new int[5];\n\n    for (int i = 0; i < numbers.length; i++)\n    {\n        System.out.println(\""Please enter number\"");\n        numbers[i] = input.nextInt();\n    }\n  \tint max = numbers[0];\n    int min = numbers[0];\n  \tfor(int i = 1; i < numbers.length; i++)\n    {\n      if(numbers[i] < min)\n      {\n        min = numbers[i];\n      }\n      if(numbers[i] > max)\n      {\n        max = numbers[i];\n      }\n    }\n  \tint delta = (max - min);\n  \treturn delta;\n}""}"
130,2.5,1.0,1.0,1.0,2017-04-05 20:26:16.062672,12,87,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""/**\n      Encrypts a value.\n      @param b the value to encrypt (between 0 and 255)\n      @return the encrypted value\n   */\npublic int encrypt(int b) {\n    return (b + key) % 256;\n}\n"",""rating"":1},""code"":""public int largestDif(int[] array){\n\tint largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }  \n}""}"
131,1.0,1.0,1.0,1.0,2017-04-05 20:26:22.169377,3,88,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""/**\n      Gets the position of the minimum score.\n      @return the position of the smallest element of values, or -1\n      if there are no scores.\n   */\npublic int minimumPosition() {\n    if (scores.size() == 0) {\n        return -1;\n    }\n    int smallestPosition = 0;\n    for (int i = 1; i < scores.size(); i++) {\n        if (scores.get(i) < scores.get(smallestPosition)) {\n            smallestPosition = i;\n        }\n    }\n    return smallestPosition;\n}\n"",""rating"":1},""code"":""int arrayDifference(int array[]){\n  \n  /* takes an array and return the difference between its largest element \n    and its smallest element*/ \n}\n  ""}"
132,2.5,1.0,1.0,1.0,2017-04-05 20:26:24.229306,12,89,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""public int getSize() {\n    return size;\n}\n"",""rating"":1},""code"":""public int largestDif(int[] array){\n\tint largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }  \n}""}"
133,1.0,1.0,1.0,2.5,2017-04-05 20:26:26.941035,1,90,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""Task(int min, int max) {\n    this.min = min;\n    this.max = max;\n}\n"",""rating"":3},""code"":""public static void main (String[] args)\n{\n    Scanner input = new Scanner(System.in);\n    int[] numbers = new int[5];\n\n    for (int i = 0; i < numbers.length; i++)\n    {\n        System.out.println(\""Please enter number\"");\n        numbers[i] = input.nextInt();\n    }\n  \tint max = numbers[0];\n    int min = numbers[0];\n  \tfor(int i = 1; i < numbers.length; i++)\n    {\n      if(numbers[i] < min)\n      {\n        min = numbers[i];\n      }\n      if(numbers[i] > max)\n      {\n        max = numbers[i];\n      }\n    }\n  \tint delta = (max - min);\n  \treturn delta;\n}""}"
134,1.0,2.0,1.0,1.0,2017-04-05 20:26:30.939829,11,91,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""public static int parseInt(String str) {\n    return Integer.parseInt(str);\n}\n"",""rating"":1},""code"":""int [] arraylargestdiffernce(){\n\n    //subtracts integers in array\n      //returns largest integer in array\n}""}"
135,1.0,1.0,1.0,1.0,2017-04-05 20:26:33.607922,1,,"public static void main (String[] args)
{
    Scanner input = new Scanner(System.in);
    int[] numbers = new int[5];

    for (int i = 0; i < numbers.length; i++)
    {
        System.out.println(""Please enter number"");
        numbers[i] = input.nextInt();
    }
  	int max = numbers[0];
    int min = numbers[0];
  	for(int i = 1; i < numbers.length; i++)
    {
      if(numbers[i] < min)
      {
        min = numbers[i];
      }
      if(numbers[i] > max)
      {
        max = numbers[i];
      }
    }
  	int delta = (max - min);
  	return delta;
}"
136,1.0,1.0,2.5,1.0,2017-04-05 20:26:35.007620,1,,"public static void main (String[] args)
{
    Scanner input = new Scanner(System.in);
    int[] numbers = new int[5];

    for (int i = 0; i < numbers.length; i++)
    {
        System.out.println(""Please enter number"");
        numbers[i] = input.nextInt();
    }
  	int max = numbers[0];
    int min = numbers[0];
  	for(int i = 1; i < numbers.length; i++)
    {
      if(numbers[i] < min)
      {
        min = numbers[i];
      }
      if(numbers[i] > max)
      {
        max = numbers[i];
      }
    }
  	int delta = (max - min);
  	return delta;
}"
137,1.0,2.0,1.0,1.0,2017-04-05 20:26:39.604356,11,92,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""/**\n      Computes the largest value of an array.\n      @param a the array\n      @return the largest value in a\n   */\npublic static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":5},""code"":""int [] arraylargestdiffernce(){\n\n    //subtracts integers in array\n      //returns largest integer in array\n}""}"
138,1.0,2.0,1.0,1.0,2017-04-05 20:26:41.570969,11,93,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""void printInfix() {\n    // Print the expression, in parentheses.\n    System.out.print(\""(-\"");\n    operand.printInfix();\n    System.out.print(')');\n}\n"",""rating"":1},""code"":""int [] arraylargestdiffernce(){\n\n    //subtracts integers in array\n      //returns largest integer in array\n}""}"
139,1.0,2.0,1.0,1.0,2017-04-05 20:26:42.523722,11,94,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""public String toString() {\n    return Integer.toString(value);\n}\n"",""rating"":1},""code"":""int [] arraylargestdiffernce(){\n\n    //subtracts integers in array\n      //returns largest integer in array\n}""}"
140,1.0,1.0,1.0,1.0,2017-04-05 20:26:45.551854,1,,"public static void main (String[] args)
{
    Scanner input = new Scanner(System.in);
    int[] numbers = new int[5];

    for (int i = 0; i < numbers.length; i++)
    {
        System.out.println(""Please enter number"");
        numbers[i] = input.nextInt();
    }
  	int max = numbers[0];
    int min = numbers[0];
  	for(int i = 1; i < numbers.length; i++)
    {
      if(numbers[i] < min)
      {
        min = numbers[i];
      }
      if(numbers[i] > max)
      {
        max = numbers[i];
      }
    }
  	int delta = (max - min);
  	return delta;
}"
141,2.5,1.0,1.0,1.0,2017-04-05 20:26:46.543555,1,,"public static void main (String[] args)
{
    Scanner input = new Scanner(System.in);
    int[] numbers = new int[5];

    for (int i = 0; i < numbers.length; i++)
    {
        System.out.println(""Please enter number"");
        numbers[i] = input.nextInt();
    }
  	int max = numbers[0];
    int min = numbers[0];
  	for(int i = 1; i < numbers.length; i++)
    {
      if(numbers[i] < min)
      {
        min = numbers[i];
      }
      if(numbers[i] > max)
      {
        max = numbers[i];
      }
    }
  	int delta = (max - min);
  	return delta;
}"
142,1.0,1.0,1.0,1.0,2017-04-05 20:26:50.221357,3,95,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static <E extends Comparable<E>> E max(E[] a) {\n    E largest = a[0];\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":1},""code"":""int arrayDifference(int array[]){\n  \n  /* takes an array and return the difference between its largest element \n    and its smallest element*/ \n}\n  ""}"
143,1.0,1.0,1.0,1.0,2017-04-05 20:27:04.619808,17,96,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""/**\n      Gets the position of the minimum score.\n      @return the position of the smallest element of values, or -1\n      if there are no scores.\n   */\npublic int minimumPosition() {\n    if (scores.size() == 0) {\n        return -1;\n    }\n    int smallestPosition = 0;\n    for (int i = 1; i < scores.size(); i++) {\n        if (scores.get(i) < scores.get(smallestPosition)) {\n            smallestPosition = i;\n        }\n    }\n    return smallestPosition;\n}\n"",""rating"":3},""code"":""public int largestDiff(int[] x)\n{\n  int largest = x[0];\n  int smallest = x[0];\n for(int y = 1; y < x.length; y++)\n  {\n if(x[y] > largest)\n    {\n   largest = x[y];\n    }\n  }\n for(int z = 1; z < x.length; z++)\n  {\n  if(x[z] < smallest)\n    {\n     smallest = x[z];\n    }\n  }\n return largest - smallest;\n} ""}"
144,1.0,1.0,1.0,1.0,2017-04-05 20:27:05.731431,17,97,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""public static void main(String[] args) {\n    int n = 10;\n    int[] squares = IntStream.range(0, n).map( i -> i * i).toArray();\n    System.out.println(Arrays.toString(squares));\n    double[] values = { 32, 54, 67.5, 29, 35, 80, 115, 44.5, 100, 65 };\n    double total = DoubleStream.of(values).sum();\n    double average = DoubleStream.of(values).average().orElse(0);\n    double largest = DoubleStream.of(values).max().orElse(Double.MIN_VALUE);\n    double smallest = DoubleStream.of(values).min().orElse(Double.MAX_VALUE);\n    System.out.println(\""total: \"" + total);\n    System.out.println(\""average: \"" + average);\n    System.out.println(\""largest: \"" + largest);\n    System.out.println(\""smallest: \"" + smallest);\n    String str = \""How much wood could a woodchuck chuck?\"";\n    long spaces = str.codePoints().filter( ch -> ch == ' ').count();\n    System.out.println(\""spaces: \"" + spaces);\n    String result = DoubleStream.of(values).mapToObj( v -> \""\"" + v).collect(Collectors.joining(\"" | \""));\n    System.out.println(result);\n    OptionalDouble result2 = DoubleStream.of(values).filter( v -> v > 100).findFirst();\n    System.out.println(result2);\n    n = values.length;\n    int pos = IntStream.range(0, n).filter( i -> values[i] == 100).findFirst().orElse(-1);\n    System.out.println(\""pos: \"" + pos);\n}\n"",""rating"":3},""code"":""public int largestDiff(int[] x)\n{\n  int largest = x[0];\n  int smallest = x[0];\n for(int y = 1; y < x.length; y++)\n  {\n if(x[y] > largest)\n    {\n   largest = x[y];\n    }\n  }\n for(int z = 1; z < x.length; z++)\n  {\n  if(x[z] < smallest)\n    {\n     smallest = x[z];\n    }\n  }\n return largest - smallest;\n} ""}"
145,1.0,1.0,1.0,1.0,2017-04-05 20:27:08.874234,3,98,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Finds the smallest element in a tail range of the array.\n      @param a the array to sort\n      @param from the first position in a to compare\n      @return the position of the smallest element in the\n      range a[from] . . . a[a.length - 1]\n   */\nprivate static int minimumPosition(int[] a, int from) {\n    int minPos = from;\n    for (int i = from + 1; i < a.length; i++) {\n        if (a[i] < a[minPos]) {\n            minPos = i;\n        }\n    }\n    return minPos;\n}\n"",""rating"":1},""code"":""int arrayDifference(int array[]){\n  \n  /* takes an array and return the difference between its largest element \n    and its smallest element*/ \n}\n  ""}"
146,1.0,1.0,1.0,1.0,2017-04-05 20:27:09.953738,3,99,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent1(int[] a) {\n    int[] counts = new int[a.length];\n    for (// O(n*n)\n    int i = 0; // O(n*n)\n    i < a.length; // O(n*n)\n    i++) {\n        // O(n) in each iteration\n        counts[i] = count(a, a[i]);\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":1},""code"":""int arrayDifference(int array[]){\n  \n  /* takes an array and return the difference between its largest element \n    and its smallest element*/ \n}\n  ""}"
147,5.0,1.0,1.0,1.0,2017-04-05 20:27:11.074341,17,,"public int largestDiff(int[] x)
{
  int largest = x[0];
  int smallest = x[0];
 for(int y = 1; y < x.length; y++)
  {
 if(x[y] > largest)
    {
   largest = x[y];
    }
  }
 for(int z = 1; z < x.length; z++)
  {
  if(x[z] < smallest)
    {
     smallest = x[z];
    }
  }
 return largest - smallest;
} "
148,2.0,1.0,1.0,1.0,2017-04-05 20:27:20.039273,1,,"public static void main (String[] args)
{
    Scanner input = new Scanner(System.in);
    int[] numbers = new int[5];

    for (int i = 0; i < numbers.length; i++)
    {
        System.out.println(""Please enter number"");
        numbers[i] = input.nextInt();
    }
  	int max = numbers[0];
    int min = numbers[0];
  	for(int i = 1; i < numbers.length; i++)
    {
      if(numbers[i] < min)
      {
        min = numbers[i];
      }
      if(numbers[i] > max)
      {
        max = numbers[i];
      }
    }
  	public static void main (String[] args)
{
    Scanner input = new Scanner(System.in);
    double[] numbers = new double[5];

    for (int i = 0; i < numbers.length; i++)
    {
        System.out.println(""Please enter number"");
        numbers[i] = input.nextDouble();
    }
}
}"
149,5.0,1.0,1.0,1.0,2017-04-05 20:27:20.751171,17,100,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static <E extends Comparable<E>> E max(E[] a) {\n    E largest = a[0];\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":2},""code"":""public int largestDiff(int[] x)\n{\n  int largest = x[0];\n  int smallest = x[0];\n for(int y = 1; y < x.length; y++)\n  {\n if(x[y] > largest)\n    {\n   largest = x[y];\n    }\n  }\n for(int z = 1; z < x.length; z++)\n  {\n  if(x[z] < smallest)\n    {\n     smallest = x[z];\n    }\n  }\n return largest - smallest;\n} ""}"
150,5.0,1.0,1.0,1.0,2017-04-05 20:27:25.658377,17,101,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""/**\n      Gets the position of the minimum score.\n      @return the position of the smallest element of values, or -1\n      if there are no scores.\n   */\npublic int minimumPosition() {\n    if (scoresSize == 0) {\n        return -1;\n    }\n    int smallestPosition = 0;\n    for (int i = 1; i < scoresSize; i++) {\n        if (scores[i] < scores[smallestPosition]) {\n            smallestPosition = i;\n        }\n    }\n    return smallestPosition;\n}\n"",""rating"":3},""code"":""public int largestDiff(int[] x)\n{\n  int largest = x[0];\n  int smallest = x[0];\n for(int y = 1; y < x.length; y++)\n  {\n if(x[y] > largest)\n    {\n   largest = x[y];\n    }\n  }\n for(int z = 1; z < x.length; z++)\n  {\n  if(x[z] < smallest)\n    {\n     smallest = x[z];\n    }\n  }\n return largest - smallest;\n} ""}"
151,5.0,1.0,1.0,1.0,2017-04-05 20:27:30.234884,17,102,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static <E extends Comparable<E>> E max(E[] a) {\n    E largest = a[0];\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":2},""code"":""public int largestDiff(int[] x)\n{\n  int largest = x[0];\n  int smallest = x[0];\n for(int y = 1; y < x.length; y++)\n  {\n if(x[y] > largest)\n    {\n   largest = x[y];\n    }\n  }\n for(int z = 1; z < x.length; z++)\n  {\n  if(x[z] < smallest)\n    {\n     smallest = x[z];\n    }\n  }\n return largest - smallest;\n} ""}"
152,2.5,1.0,0.5,3.0,2017-04-05 20:27:32.372651,18,103,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""/**\n      Constructs a manager with a given name, annual salary and weekly bonus.\n      @param name the name of this employee\n      @param salary the annual salary\n      @param bonus the weekly bonus\n    */\npublic Manager(String name, double salary, double bonus) {\n    super(name, salary);\n    weeklyBonus = bonus;\n}\n"",""rating"":1},""code"":""public int getTax (String type)\n{\n  int x;\n  System.out.println(\""Enter 1 for employees, 2 for business owners, 3 for veterans or 0 for none of these\"");\n  x=scan.nextInt();\n  switch (x)\n  {\n    case 1:\n      {\n        if(salary<10000)\n        {\n          return 0.02;\n        }\n        else\n        {\n          return 0.05;\n        }\n      }\n    case 2:\n      {\n        \n      }\n    case 3:\n      {\n        \n      }\n    case 0:\n      {\n        \n      }\n    default:\n      {\n        \n      }\n  }\n  // returns different percentage of tax based on type of person\n  type.compareTo(s2);\n}""}"
153,5.0,1.0,1.0,1.0,2017-04-05 20:27:36.274129,17,104,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""public int compare(Object a, Object b) {\n    TimerTask t1 = (TimerTask) a;\n    TimerTask t2 = (TimerTask) b;\n    long diff = t1.nextTime - t2.nextTime;\n    if (diff < 0)\n        return -1;\n    else if (diff > 0)\n        return 1;\n    else\n        return 0;\n}\n"",""rating"":1},""code"":""public int largestDiff(int[] x)\n{\n  int largest = x[0];\n  int smallest = x[0];\n for(int y = 1; y < x.length; y++)\n  {\n if(x[y] > largest)\n    {\n   largest = x[y];\n    }\n  }\n for(int z = 1; z < x.length; z++)\n  {\n  if(x[z] < smallest)\n    {\n     smallest = x[z];\n    }\n  }\n return largest - smallest;\n} ""}"
154,5.0,1.0,1.0,1.0,2017-04-05 20:27:37.411499,17,105,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""/**\n      Finds the position of a bank account with a given number.\n      @param accountNumber the number to find\n      @return the position of the account with the given number, \n      or -1 if there is no such account\n   */\npublic int find(int accountNumber) throws IOException {\n    for (int i = 0; i < size(); i++) {\n        file.seek(i * RECORD_SIZE);\n        int a = file.readInt();\n        if (a == accountNumber) {\n            return i;\n        }\n    // Found a match            \n    }\n    // No match in the entire file\n    return -1;\n}\n"",""rating"":1},""code"":""public int largestDiff(int[] x)\n{\n  int largest = x[0];\n  int smallest = x[0];\n for(int y = 1; y < x.length; y++)\n  {\n if(x[y] > largest)\n    {\n   largest = x[y];\n    }\n  }\n for(int z = 1; z < x.length; z++)\n  {\n  if(x[z] < smallest)\n    {\n     smallest = x[z];\n    }\n  }\n return largest - smallest;\n} ""}"
155,5.0,1.0,1.0,1.0,2017-04-05 20:27:41.059080,17,106,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""/**\n         * Return the largest item that has been entered.\n         * The return value will be -infinity if no numbers have been entered. \n         */\npublic double getMax() {\n    return max;\n}\n"",""rating"":1},""code"":""public int largestDiff(int[] x)\n{\n  int largest = x[0];\n  int smallest = x[0];\n for(int y = 1; y < x.length; y++)\n  {\n if(x[y] > largest)\n    {\n   largest = x[y];\n    }\n  }\n for(int z = 1; z < x.length; z++)\n  {\n  if(x[z] < smallest)\n    {\n     smallest = x[z];\n    }\n  }\n return largest - smallest;\n} ""}"
156,2.5,1.0,0.5,3.0,2017-04-05 20:27:43.155475,18,107,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Constructs a salaried employee with a given name and annual salary.\n      @param name the name of this employee\n      @param salary the annual salary\n    */\npublic SalariedEmployee(String name, double salary) {\n    setName(name);\n    annualSalary = salary;\n}\n"",""rating"":3},""code"":""public int getTax (String type)\n{\n  int x;\n  System.out.println(\""Enter 1 for employees, 2 for business owners, 3 for veterans or 0 for none of these\"");\n  x=scan.nextInt();\n  switch (x)\n  {\n    case 1:\n      {\n        if(salary<10000)\n        {\n          return 0.02;\n        }\n        else\n        {\n          return 0.05;\n        }\n      }\n    case 2:\n      {\n        \n      }\n    case 3:\n      {\n        \n      }\n    case 0:\n      {\n        \n      }\n    default:\n      {\n        \n      }\n  }\n  // returns different percentage of tax based on type of person\n  type.compareTo(s2);\n}""}"
157,2.0,1.0,1.0,1.0,2017-04-05 20:27:50.869552,1,108,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""/**\n     * The main program runs in a loop until the user wants to exit.\n     * Each time through the loop, it runs one experiment.  It gets\n     * the number of threads and the number of increments per thread\n     * from the user.  It creates and starts the threads, and then\n     * waits for them all to finish.  It prints the final value of\n     * the counter, as well as the expected value.  The program ends\n     * when the user enters a number less than or equal to zero as\n     * the number of threads.\n     */\npublic static void main(String[] args) {\n    // For reading the user's inputs.\n    Scanner in = new Scanner(System.in);\n    while (true) {\n        /* Get number of threads and number of increments per thread\n             * from the user.  Exit if number of threads is <= 0. */\n        System.out.println();\n        System.out.print(\""How many threads do you want to run (Enter 0 to end)? \"");\n        int numberOfThreads = in.nextInt();\n        if (numberOfThreads <= 0)\n            break;\n        do {\n            System.out.println();\n            System.out.println(\""How many times should each thread increment the counter? \"");\n            numberOfIncrements = in.nextInt();\n            if (numberOfIncrements < 1) {\n                System.out.println(\""Number of increments must be positive.\"");\n                numberOfIncrements = 1;\n            }\n        } while (numberOfIncrements <= 0);\n        System.out.println();\n        System.out.println(\""Using \"" + numberOfThreads + \"" threads.\"");\n        System.out.println(\""Each thread increments the counter \"" + numberOfIncrements + \"" times.\"");\n        /* Create the threads and start them. */\n        System.out.println();\n        System.out.println(\""Working...\"");\n        System.out.println();\n        IncrementerThread[] workers = new IncrementerThread[numberOfThreads];\n        counter = new Counter();\n        for (int i = 0; i < numberOfThreads; i++) workers[i] = new IncrementerThread();\n        for (int i = 0; i < numberOfThreads; i++) workers[i].start();\n        for (int i = 0; i < numberOfThreads; i++) {\n            try {\n                workers[i].join();\n            } catch (InterruptedException e) {\n            }\n        }\n        /* Display the results. */\n        System.out.println(\""The final value of the counter should be \"" + (numberOfIncrements * numberOfThreads));\n        System.out.println(\""Actual final value of counter is: \"" + counter.getCount());\n        System.out.println();\n        System.out.println();\n    }\n// end while\n}\n             /* Wait for all threads to terminate. */\n\n"",""rating"":3},""code"":""public static void main (String[] args)\n{\n    Scanner input = new Scanner(System.in);\n    int[] numbers = new int[5];\n\n    for (int i = 0; i < numbers.length; i++)\n    {\n        System.out.println(\""Please enter number\"");\n        numbers[i] = input.nextInt();\n    }\n  \tint max = numbers[0];\n    int min = numbers[0];\n  \tfor(int i = 1; i < numbers.length; i++)\n    {\n      if(numbers[i] < min)\n      {\n        min = numbers[i];\n      }\n      if(numbers[i] > max)\n      {\n        max = numbers[i];\n      }\n    }\n  \t\n}""}"
158,2.0,1.0,1.0,1.0,2017-04-05 20:27:53.126719,1,109,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""public static void main(String[] args) {\n    // Every program must have main()\n    for (int i = 1; i <= 100; i++) {\n        // count from 1 to 100\n        if (// A multiple of both?\n        ((i % 5) == 0) && ((i % 7) == 0))\n            System.out.print(\""fizzbuzz\"");\n        else if (// else a multiple of 5?\n        (i % 5) == 0)\n            // else a multiple of 5?\n            System.out.print(\""fizz\"");\n        else if (// else a multiple of 7?\n        (i % 7) == 0)\n            // else a multiple of 7?\n            System.out.print(\""buzz\"");\n        else\n            // else just print it\n            System.out.print(i);\n        System.out.print(\"" \"");\n    }\n    System.out.println();\n}\n"",""rating"":2},""code"":""public static void main (String[] args)\n{\n    Scanner input = new Scanner(System.in);\n    int[] numbers = new int[5];\n\n    for (int i = 0; i < numbers.length; i++)\n    {\n        System.out.println(\""Please enter number\"");\n        numbers[i] = input.nextInt();\n    }\n  \tint max = numbers[0];\n    int min = numbers[0];\n  \tfor(int i = 1; i < numbers.length; i++)\n    {\n      if(numbers[i] < min)\n      {\n        min = numbers[i];\n      }\n      if(numbers[i] > max)\n      {\n        max = numbers[i];\n      }\n    }\n  \t\n}""}"
159,1.0,1.0,1.0,1.0,2017-04-05 20:28:00.200739,19,110,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""int getCount() {\n    return count;\n}\n"",""rating"":1},""code"":""int tax(Person p)\n{\n  \n}""}"
160,2.0,1.0,1.0,1.0,2017-04-05 20:28:05.202089,1,111,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""public static void main(String[] args) {\n    Scanner s = new Scanner(System.in);\n    System.out.print(\""Enter your name: \"");\n    String name = s.nextLine();\n    System.out.println(\""Hello \"" + name + \""!\"");\n}\n"",""rating"":4},""code"":""public static void main (String[] args)\n{\n    Scanner input = new Scanner(System.in);\n    int[] numbers = new int[5];\n\n    for (int i = 0; i < numbers.length; i++)\n    {\n        System.out.println(\""Please enter number\"");\n        numbers[i] = input.nextInt();\n    }\n  \tint max = numbers[0];\n    int min = numbers[0];\n  \tfor(int i = 1; i < numbers.length; i++)\n    {\n      if(numbers[i] < min)\n      {\n        min = numbers[i];\n      }\n      if(numbers[i] > max)\n      {\n        max = numbers[i];\n      }\n    }\n  \t\n}""}"
161,1.0,1.0,1.0,1.0,2017-04-05 20:28:05.382310,19,112,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", targetDate = \""Jan 1, 2012\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":3},""code"":""int tax(Person p)\n{\n  \n}""}"
162,2.0,1.0,1.0,1.0,2017-04-05 20:28:07.394780,1,113,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String args[]) {\n    int m = 10, n = 20, max;\n    max = (m > n) ? m : n;\n    System.out.println(\""max of \"" + m + \"" and \"" + n + \"": \"" + max);\n    n = 5;\n    max = (m > n) ? m : n;\n    System.out.println(\""max of \"" + m + \"" and \"" + n + \"": \"" + max);\n}\n"",""rating"":3},""code"":""public static void main (String[] args)\n{\n    Scanner input = new Scanner(System.in);\n    int[] numbers = new int[5];\n\n    for (int i = 0; i < numbers.length; i++)\n    {\n        System.out.println(\""Please enter number\"");\n        numbers[i] = input.nextInt();\n    }\n  \tint max = numbers[0];\n    int min = numbers[0];\n  \tfor(int i = 1; i < numbers.length; i++)\n    {\n      if(numbers[i] < min)\n      {\n        min = numbers[i];\n      }\n      if(numbers[i] > max)\n      {\n        max = numbers[i];\n      }\n    }\n  \t\n}""}"
163,2.0,1.0,1.0,1.0,2017-04-05 20:28:15.315073,1,114,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""public static void main(String[] args) {\n    int[] values = new int[10];\n    for (int i = 0; i < values.length; i++) {\n        values[i] = i * i;\n    }\n    // In this loop, we don't need the index value. \n    // The enhanced for loop simplifies the code.\n       // In this loop, we need the index value, so we can't use\n\n       // an enhanced for loop.\n\n    int total = 0;\n    for (int element : values) {\n        System.out.println(element);\n        total = total + element;\n    }\n    System.out.println(\""Sum: \"" + total);\n}\n"",""rating"":5},""code"":""public static void main (String[] args)\n{\n    Scanner input = new Scanner(System.in);\n    int[] numbers = new int[5];\n\n    for (int i = 0; i < numbers.length; i++)\n    {\n        System.out.println(\""Please enter number\"");\n        numbers[i] = input.nextInt();\n    }\n  \tint max = numbers[0];\n    int min = numbers[0];\n  \tfor(int i = 1; i < numbers.length; i++)\n    {\n      if(numbers[i] < min)\n      {\n        min = numbers[i];\n      }\n      if(numbers[i] > max)\n      {\n        max = numbers[i];\n      }\n    }\n  \t\n}""}"
164,3.5,1.0,1.0,1.0,2017-04-05 20:28:22.237422,1,,"public static void main (String[] args)
{
    Scanner input = new Scanner(System.in);
    int[] numbers = new int[5];

    for (int i = 0; i < numbers.length; i++)
    {
        System.out.println(""Please enter number"");
        numbers[i] = input.nextInt();
    }
  	int max = numbers[0];
    int min = numbers[0];
  	for(int i = 1; i < numbers.length; i++)
    {
      if(numbers[i] < min)
      {
        min = numbers[i];
      }
      if(numbers[i] > max)
      {
        max = numbers[i];
      }
    }
  	
}"
165,2.5,1.0,1.0,1.0,2017-04-05 20:28:23.221705,12,115,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent2(int[] a) {\n    // O(n log(n))\n    Arrays.sort(a);\n    int[] counts = new int[a.length];\n    int count = 0;\n    for (// O(n)\n    int i = 0; // O(n)\n    i < a.length; // O(n)\n    i++) {\n        count++;\n        if (i == a.length - 1 || a[i] != a[i + 1]) {\n            counts[i] = count;\n            count = 0;\n        }\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":2},""code"":""public int largestDif(int[] values){\n\tint largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n  \tint smallest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] < largest) {\n            smallest = values[i];\n        }\n    }\n  \treturn (largest-smallest);\n}""}"
166,2.5,1.0,1.0,1.0,2017-04-05 20:28:26.977416,12,116,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""/**\n      Finds the position of a bank account with a given number.\n      @param accountNumber the number to find\n      @return the position of the account with the given number, \n      or -1 if there is no such account\n   */\npublic int find(int accountNumber) throws IOException {\n    for (int i = 0; i < size(); i++) {\n        file.seek(i * RECORD_SIZE);\n        int a = file.readInt();\n        if (a == accountNumber) {\n            return i;\n        }\n    // Found a match            \n    }\n    // No match in the entire file\n    return -1;\n}\n"",""rating"":1},""code"":""public int largestDif(int[] values){\n\tint largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n  \tint smallest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] < largest) {\n            smallest = values[i];\n        }\n    }\n  \treturn (largest-smallest);\n}""}"
167,2.5,1.0,1.0,1.0,2017-04-05 20:28:31.981374,12,117,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""/**\n         * Return the smallest item that has been entered.\n         * The return value will be infinity if no numbers have been entered. \n         */\npublic double getMin() {\n    return min;\n}\n"",""rating"":3},""code"":""public int largestDif(int[] values){\n\tint largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n  \tint smallest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] < largest) {\n            smallest = values[i];\n        }\n    }\n  \treturn (largest-smallest);\n}""}"
168,3.5,1.0,1.0,1.0,2017-04-05 20:28:38.628822,1,118,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""public static void main(String[] args) {\n    // An array of five values, initialized in a loop\n    int[] values = new int[5];\n    for (int i = 0; i < values.length; i++) {\n        values[i] = 2 * i;\n    }\n    // An array of four strings, with initial values specified\n    String[] names = { \""Fred\"", \""Amy\"", \""Cindy\"", \""Henry\"" };\n    for (int i = 0; i < values.length; i++) {\n        System.out.print(values[i] + \"" \"");\n    }\n    System.out.println();\n    for (int i = 0; i < names.length; i++) {\n        System.out.print(names[i] + \"" \"");\n    }\n    System.out.println();\n    // When you copy an array variable, you get another reference \n    // to the same array. (See Section 7.1.2.)\n    int[] copy = values;\n       // These loops print the elements in both arrays\n\n    values[0] = 42;\n    for (int i = 0; i < copy.length; i++) {\n        System.out.print(copy[i] + \"" \"");\n    }\n    System.out.println();\n    // Here, we read numbers into a partially filled array.\n    // (See Section 7.1.4.)\n    System.out.println(\""Enter scores, -1 to quit: \"");\n    Scanner in = new Scanner(System.in);\n    boolean done = false;\n    int currentSize = 0;\n    final int LENGTH = 100;\n    int[] scores = new int[LENGTH];\n    while (!done && currentSize < LENGTH) {\n        int score = in.nextInt();\n        if (score == -1) {\n            done = true;\n        } else {\n          // We change values[0], which is the same as copy[0]\n\n            scores[currentSize] = score;\n            currentSize++;\n        }\n    }\n    System.out.println(\""You entered the following scores:\"");\n    for (int i = 0; i < currentSize; i++) {\n        System.out.print(scores[i] + \"" \"");\n    }\n    System.out.println();\n}\n"",""rating"":3},""code"":""public static void main (String[] args)\n{\n    Scanner input = new Scanner(System.in);\n    int[] numbers = new int[5];\n\n    for (int i = 0; i < numbers.length; i++)\n    {\n        System.out.println(\""Please enter number\"");\n        numbers[i] = input.nextInt();\n    }\n  \tint max = numbers[0];\n    int min = numbers[0];\n  \tfor(int i = 1; i < numbers.length; i++)\n    {\n      if(numbers[i] < min)\n      {\n        min = numbers[i];\n      }\n      if(numbers[i] > max)\n      {\n        max = numbers[i];\n      }\n    }\n  \t\n}""}"
169,1.0,1.0,1.0,1.0,2017-04-05 20:28:43.404547,19,119,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String[] args) {\n    double price = 9.95;\n    double taxRate = 8.25;\n    double tax = Financial.percentOf(price, taxRate);\n    System.out.printf(\""Tax: %.2f\\n\"", tax);\n}\n"",""rating"":1},""code"":""double tax(Person p)\n{\n  \n}""}"
170,2.5,1.0,1.0,1.0,2017-04-05 20:28:44.974873,12,120,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static <E extends Comparable<E>> E max(E[] a) {\n    E largest = a[0];\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":2},""code"":""public int largestDif(int[] values){\n\tint largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n  \tint smallest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] < largest) {\n            smallest = values[i];\n        }\n    }\n  \treturn (largest-smallest);\n}""}"
171,3.5,1.0,1.0,1.0,2017-04-05 20:28:46.289990,1,121,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""public static void main(String[] args) throws IOException {\n    JFileChooser chooser = new JFileChooser();\n    Scanner in = null;\n    if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {\n        File selectedFile = chooser.getSelectedFile();\n        in = new Scanner(selectedFile);\n        int lineNumber = 1;\n        final int MAX_LINES = 9;\n        while (in.hasNextLine() && lineNumber <= MAX_LINES) {\n            String line = in.nextLine();\n            System.out.println(lineNumber + \"": \"" + line);\n            lineNumber++;\n        }\n        if (in.hasNextLine()) {\n            System.out.println(\""...\"");\n        }\n    }\n}\n"",""rating"":1},""code"":""public static void main (String[] args)\n{\n    Scanner input = new Scanner(System.in);\n    int[] numbers = new int[5];\n\n    for (int i = 0; i < numbers.length; i++)\n    {\n        System.out.println(\""Please enter number\"");\n        numbers[i] = input.nextInt();\n    }\n  \tint max = numbers[0];\n    int min = numbers[0];\n  \tfor(int i = 1; i < numbers.length; i++)\n    {\n      if(numbers[i] < min)\n      {\n        min = numbers[i];\n      }\n      if(numbers[i] > max)\n      {\n        max = numbers[i];\n      }\n    }\n  \t\n}""}"
172,2.5,1.0,1.0,1.0,2017-04-05 20:28:47.460330,12,122,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""/**\n      Gets the position of the minimum score.\n      @return the position of the smallest element of values, or -1\n      if there are no scores.\n   */\npublic int minimumPosition() {\n    if (scores.size() == 0) {\n        return -1;\n    }\n    int smallestPosition = 0;\n    for (int i = 1; i < scores.size(); i++) {\n        if (scores.get(i) < scores.get(smallestPosition)) {\n            smallestPosition = i;\n        }\n    }\n    return smallestPosition;\n}\n"",""rating"":4},""code"":""public int largestDif(int[] values){\n\tint largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n  \tint smallest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] < largest) {\n            smallest = values[i];\n        }\n    }\n  \treturn (largest-smallest);\n}""}"
173,1.0,1.0,1.0,1.0,2017-04-05 20:28:48.303022,19,123,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""/**\n         * Return the contents of the square in the specified row and column.\n         */\nint pieceAt(int row, int col) {\n    return board[row][col];\n}\n"",""rating"":1},""code"":""double tax(Person p)\n{\n  \n}""}"
174,3.5,1.0,1.0,1.0,2017-04-05 20:28:53.138787,1,124,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""/**\n     * The main program runs in a loop until the user wants to exit.\n     * Each time through the loop, it runs one experiment.  It gets\n     * the number of threads and the number of increments per thread\n     * from the user.  It creates and starts the threads, and then\n     * waits for them all to finish.  It prints the final value of\n     * the counter, as well as the expected value.  The program ends\n     * when the user enters a number less than or equal to zero as\n     * the number of threads.\n     */\npublic static void main(String[] args) {\n    // For reading the user's inputs.\n    Scanner in = new Scanner(System.in);\n    while (true) {\n        /* Get number of threads and number of increments per thread\n             * from the user.  Exit if number of threads is <= 0. */\n        System.out.println();\n        System.out.print(\""How many threads do you want to run (Enter 0 to end)? \"");\n        int numberOfThreads = in.nextInt();\n        if (numberOfThreads <= 0)\n            break;\n        do {\n            System.out.println();\n            System.out.println(\""How many times should each thread increment the counter? \"");\n            numberOfIncrements = in.nextInt();\n            if (numberOfIncrements < 1) {\n                System.out.println(\""Number of increments must be positive.\"");\n                numberOfIncrements = 1;\n            }\n        } while (numberOfIncrements <= 0);\n        System.out.println();\n        System.out.println(\""Using \"" + numberOfThreads + \"" threads.\"");\n        System.out.println(\""Each thread increments the counter \"" + numberOfIncrements + \"" times.\"");\n        /* Create the threads and start them. */\n        System.out.println();\n        System.out.println(\""Working...\"");\n        System.out.println();\n        IncrementerThread[] workers = new IncrementerThread[numberOfThreads];\n        counter = new Counter();\n        for (int i = 0; i < numberOfThreads; i++) workers[i] = new IncrementerThread();\n        for (int i = 0; i < numberOfThreads; i++) workers[i].start();\n        for (int i = 0; i < numberOfThreads; i++) {\n            try {\n                workers[i].join();\n            } catch (InterruptedException e) {\n            }\n        }\n        /* Display the results. */\n        System.out.println(\""The final value of the counter should be \"" + (numberOfIncrements * numberOfThreads));\n        System.out.println(\""Actual final value of counter is: \"" + counter.getCount());\n        System.out.println();\n        System.out.println();\n    }\n// end while\n}\n             /* Wait for all threads to terminate. */\n\n"",""rating"":1},""code"":""public static void main (String[] args)\n{\n    Scanner input = new Scanner(System.in);\n    int[] numbers = new int[5];\n\n    for (int i = 0; i < numbers.length; i++)\n    {\n        System.out.println(\""Please enter number\"");\n        numbers[i] = input.nextInt();\n    }\n  \tint max = numbers[0];\n    int min = numbers[0];\n  \tfor(int i = 1; i < numbers.length; i++)\n    {\n      if(numbers[i] < min)\n      {\n        min = numbers[i];\n      }\n      if(numbers[i] > max)\n      {\n        max = numbers[i];\n      }\n    }\n  \t\n}""}"
175,1.0,1.0,1.0,1.0,2017-04-05 20:28:54.997603,19,125,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""public Product(float price) {\n    this.price = price;\n    tax = (float) (price * 0.20);\n}\n"",""rating"":1},""code"":""double tax(Person p)\n{\n  \n}""}"
176,1.5,1.0,1.0,1.0,2017-04-05 20:28:55.806087,3,,"int arrayDifference(int array[]){
  
  /*takes an array and return difference between its largest element 
    and its smallest element 
}
  "
177,3.5,1.0,1.0,1.0,2017-04-05 20:28:56.834297,1,126,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""Task(int min, int max) {\n    this.min = min;\n    this.max = max;\n}\n"",""rating"":4},""code"":""public static void main (String[] args)\n{\n    Scanner input = new Scanner(System.in);\n    int[] numbers = new int[5];\n\n    for (int i = 0; i < numbers.length; i++)\n    {\n        System.out.println(\""Please enter number\"");\n        numbers[i] = input.nextInt();\n    }\n  \tint max = numbers[0];\n    int min = numbers[0];\n  \tfor(int i = 1; i < numbers.length; i++)\n    {\n      if(numbers[i] < min)\n      {\n        min = numbers[i];\n      }\n      if(numbers[i] > max)\n      {\n        max = numbers[i];\n      }\n    }\n  \t\n}""}"
178,2.5,1.0,1.0,1.0,2017-04-05 20:28:58.011980,12,127,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""public static void main(String[] args) {\n    int n = 10;\n    int[] squares = IntStream.range(0, n).map( i -> i * i).toArray();\n    System.out.println(Arrays.toString(squares));\n    double[] values = { 32, 54, 67.5, 29, 35, 80, 115, 44.5, 100, 65 };\n    double total = DoubleStream.of(values).sum();\n    double average = DoubleStream.of(values).average().orElse(0);\n    double largest = DoubleStream.of(values).max().orElse(Double.MIN_VALUE);\n    double smallest = DoubleStream.of(values).min().orElse(Double.MAX_VALUE);\n    System.out.println(\""total: \"" + total);\n    System.out.println(\""average: \"" + average);\n    System.out.println(\""largest: \"" + largest);\n    System.out.println(\""smallest: \"" + smallest);\n    String str = \""How much wood could a woodchuck chuck?\"";\n    long spaces = str.codePoints().filter( ch -> ch == ' ').count();\n    System.out.println(\""spaces: \"" + spaces);\n    String result = DoubleStream.of(values).mapToObj( v -> \""\"" + v).collect(Collectors.joining(\"" | \""));\n    System.out.println(result);\n    OptionalDouble result2 = DoubleStream.of(values).filter( v -> v > 100).findFirst();\n    System.out.println(result2);\n    n = values.length;\n    int pos = IntStream.range(0, n).filter( i -> values[i] == 100).findFirst().orElse(-1);\n    System.out.println(\""pos: \"" + pos);\n}\n"",""rating"":2},""code"":""public int largestDif(int[] values){\n\tint largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n  \tint smallest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] < largest) {\n            smallest = values[i];\n        }\n    }\n  \treturn (largest-smallest);\n}""}"
179,3.0,1.0,1.0,1.0,2017-04-05 20:29:00.155848,3,,"int arrayDifference(int array[]){
  
  /*takes an array and return difference between its largest element 
    and its smallest element 
}
  "
180,2.5,1.0,1.0,1.0,2017-04-05 20:29:01.019874,3,,"int arrayDifference(int array[]){
  
  /*takes an array and return difference between its largest element 
    and its smallest element 
}
  "
181,2.5,1.0,1.0,1.0,2017-04-05 20:29:04.762492,12,,"public int largestDif(int[] values){
	int largest = values[0];
    for (int i = 1; i < values.length; i++) {
        if (values[i] > largest) {
            largest = values[i];
        }
    }
  	int smallest = values[0];
    for (int i = 1; i < values.length; i++) {
        if (values[i] < largest) {
            smallest = values[i];
        }
    }
  	return (largest-smallest);
}"
182,2.5,2.5,1.0,1.0,2017-04-05 20:29:06.632013,12,,"public int largestDif(int[] values){
	int largest = values[0];
    for (int i = 1; i < values.length; i++) {
        if (values[i] > largest) {
            largest = values[i];
        }
    }
  	int smallest = values[0];
    for (int i = 1; i < values.length; i++) {
        if (values[i] < largest) {
            smallest = values[i];
        }
    }
  	return (largest-smallest);
}"
183,2.5,1.0,1.0,3.0,2017-04-05 20:29:06.756343,3,,"int arrayDifference(int array[]){
  
  /*takes an array and return difference between its largest element 
    and its smallest element 
}
  "
184,3.5,1.0,1.0,1.0,2017-04-05 20:29:07.402275,1,128,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""public static void main(String[] args) {\n    Scanner s = new Scanner(System.in);\n    System.out.print(\""Enter your name: \"");\n    String name = s.nextLine();\n    System.out.println(\""Hello \"" + name + \""!\"");\n}\n"",""rating"":4},""code"":""public static void main (String[] args)\n{\n    Scanner input = new Scanner(System.in);\n    int[] numbers = new int[5];\n\n    for (int i = 0; i < numbers.length; i++)\n    {\n        System.out.println(\""Please enter number\"");\n        numbers[i] = input.nextInt();\n    }\n  \tint max = numbers[0];\n    int min = numbers[0];\n  \tfor(int i = 1; i < numbers.length; i++)\n    {\n      if(numbers[i] < min)\n      {\n        min = numbers[i];\n      }\n      if(numbers[i] > max)\n      {\n        max = numbers[i];\n      }\n    }\n  \t\n}""}"
185,2.5,2.5,1.0,3.0,2017-04-05 20:29:08.399358,3,,"int arrayDifference(int array[]){
  
  /*takes an array and return difference between its largest element 
    and its smallest element 
}
  "
186,1.0,1.0,1.0,1.0,2017-04-05 20:29:10.831314,19,129,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""public int compareTo(Person other) {\n    return name.compareTo(other.name);\n}\n"",""rating"":1},""code"":""double tax(Person p)\n{\n  \n}""}"
187,3.5,1.0,1.0,1.0,2017-04-05 20:29:11.362683,1,130,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    double value;\n    do {\n        System.out.print(\""Enter a number >= 0: \"");\n        value = in.nextDouble();\n    } while (value < 0);\n    double root = Math.sqrt(value);\n    System.out.println(\""The square root of the number is \"" + root);\n}\n"",""rating"":2},""code"":""public static void main (String[] args)\n{\n    Scanner input = new Scanner(System.in);\n    int[] numbers = new int[5];\n\n    for (int i = 0; i < numbers.length; i++)\n    {\n        System.out.println(\""Please enter number\"");\n        numbers[i] = input.nextInt();\n    }\n  \tint max = numbers[0];\n    int min = numbers[0];\n  \tfor(int i = 1; i < numbers.length; i++)\n    {\n      if(numbers[i] < min)\n      {\n        min = numbers[i];\n      }\n      if(numbers[i] > max)\n      {\n        max = numbers[i];\n      }\n    }\n  \t\n}""}"
188,1.0,1.0,1.0,1.0,2017-04-05 20:29:21.359640,19,131,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""int getSize() {\n    // Return the number of items on the queue.\n    return size;\n}\n"",""rating"":1},""code"":""double tax(Person p)\n{\n  \n}""}"
189,1.0,1.0,1.0,1.0,2017-04-05 20:29:24.022371,19,132,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""public static void main(String[] args) {\n    String input = JOptionPane.showInputDialog(\""Enter price:\"");\n    double price = Double.parseDouble(input);\n    final double TAX_RATE = 8.5;\n    price = price * (1 + TAX_RATE / 100);\n    JOptionPane.showMessageDialog(null, \""Price after tax: \"" + price);\n}\n"",""rating"":1},""code"":""double tax(Person p)\n{\n  \n}""}"
190,2.5,1.0,0.5,3.0,2017-04-05 20:29:35.285243,18,133,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""/**\n      Sets the name of this employee.\n      @param employeeName the new name \n   */\npublic void setName(String employeeName) {\n    name = employeeName;\n}\n"",""rating"":1},""code"":""public int getTax (String type)\n{\n  int x;\n  System.out.println(\""Enter 1 for employees, 2 for business owners, 3 for veterans or 0 for none of these\"");\n  x=scan.nextInt();\n  switch (x)\n  {\n    case 1:\n      {\n        if(salary<10000)\n        {\n          return 0.02;\n        }\n        else\n        {\n          return 0.05;\n        }\n        break;\n      }\n    case 2:\n      {\n        return 0.1;\n        break;\n      }\n    case 3:\n      {\n        return 0;\n        break;\n      }\n    case 0:\n      {\n        return 0.5;\n        break;\n      }\n  }\n  // returns different percentage of tax based on type of person\n  \n}""}"
191,1.0,1.0,1.0,1.0,2017-04-05 20:29:36.712875,4,134,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""public double getTax() {\n    double tax1 = 0;\n    double tax2 = 0;\n    if (status == SINGLE) {\n        if (income <= RATE1_SINGLE_LIMIT) {\n            tax1 = RATE1 * income;\n        } else {\n            tax1 = RATE1 * RATE1_SINGLE_LIMIT;\n            tax2 = RATE2 * (income - RATE1_SINGLE_LIMIT);\n        }\n    } else {\n        if (income <= RATE1_MARRIED_LIMIT) {\n            tax1 = RATE1 * income;\n        } else {\n            tax1 = RATE1 * RATE1_MARRIED_LIMIT;\n            tax2 = RATE2 * (income - RATE1_MARRIED_LIMIT);\n        }\n    }\n    return tax1 + tax2;\n}\n"",""rating"":3},""code"":""double tax(Person p){\n  //For employees salary\n  // extends person\n  // 2% of salary\n  \n  double s =p.getSalary();\n  double s = \n  if (s < 10000)\n  {\n    s=0.2*s;\n  }\n  \n}""}"
192,2.5,2.5,1.0,1.0,2017-04-05 20:29:38.261539,12,135,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""// pre: list != null, list.length > 0\n// post: return index of minimum element of array\npublic static int findMin(int[] list) {\n    assert list != null && list.length > 0 : \""failed precondition\"";\n    int indexOfMin = 0;\n    for (int i = 1; i < list.length; i++) {\n        if (list[i] < list[indexOfMin]) {\n            indexOfMin = i;\n        }\n    }\n    return indexOfMin;\n}\n"",""rating"":3},""code"":""public int largestDif(int[] values){\n\tint largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n  \tint smallest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] < largest) {\n            smallest = values[i];\n        }\n    }\n  \treturn (largest-smallest);\n}""}"
193,2.5,2.5,0.5,3.0,2017-04-05 20:29:44.191018,18,,"public int getTax (String type)
{
  int x;
  System.out.println(""Enter 1 for employees, 2 for business owners, 3 for veterans or 0 for none of these"");
  x=scan.nextInt();
  switch (x)
  {
    case 1:
      {
        if(salary<10000)
        {
          return 0.02;
        }
        else
        {
          return 0.05;
        }
        break;
      }
    case 2:
      {
        return 0.1;
        break;
      }
    case 3:
      {
        return 0;
        break;
      }
    case 0:
      {
        return 0.5;
        break;
      }
  }
  // returns different percentage of tax based on type of person
  
}"
194,2.0,2.5,0.5,3.0,2017-04-05 20:29:45.105611,18,,"public int getTax (String type)
{
  int x;
  System.out.println(""Enter 1 for employees, 2 for business owners, 3 for veterans or 0 for none of these"");
  x=scan.nextInt();
  switch (x)
  {
    case 1:
      {
        if(salary<10000)
        {
          return 0.02;
        }
        else
        {
          return 0.05;
        }
        break;
      }
    case 2:
      {
        return 0.1;
        break;
      }
    case 3:
      {
        return 0;
        break;
      }
    case 0:
      {
        return 0.5;
        break;
      }
  }
  // returns different percentage of tax based on type of person
  
}"
195,2.0,2.5,0.5,2.0,2017-04-05 20:29:46.850763,18,,"public int getTax (String type)
{
  int x;
  System.out.println(""Enter 1 for employees, 2 for business owners, 3 for veterans or 0 for none of these"");
  x=scan.nextInt();
  switch (x)
  {
    case 1:
      {
        if(salary<10000)
        {
          return 0.02;
        }
        else
        {
          return 0.05;
        }
        break;
      }
    case 2:
      {
        return 0.1;
        break;
      }
    case 3:
      {
        return 0;
        break;
      }
    case 0:
      {
        return 0.5;
        break;
      }
  }
  // returns different percentage of tax based on type of person
  
}"
196,2.5,2.5,1.0,3.0,2017-04-05 20:29:46.919551,3,136,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""// pre: list != null, list.length > 0\n// post: return index of minimum element of array\npublic static int findMin(int[] list) {\n    assert list != null && list.length > 0 : \""failed precondition\"";\n    int indexOfMin = 0;\n    for (int i = 1; i < list.length; i++) {\n        if (list[i] < list[indexOfMin]) {\n            indexOfMin = i;\n        }\n    }\n    return indexOfMin;\n}\n"",""rating"":2},""code"":""int arrayDifference(int array[]){\n  \n  /*takes an array and return difference between its largest element \n    and its smallest element */\n}\n  ""}"
197,2.5,2.5,1.0,1.0,2017-04-05 20:29:47.148290,12,137,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""/**\n      Finds the position of a bank account with a given number.\n      @param accountNumber the number to find\n      @return the position of the account with the given number, \n      or -1 if there is no such account\n   */\npublic int find(int accountNumber) throws IOException {\n    for (int i = 0; i < size(); i++) {\n        file.seek(i * RECORD_SIZE);\n        int a = file.readInt();\n        if (a == accountNumber) {\n            return i;\n        }\n    // Found a match            \n    }\n    // No match in the entire file\n    return -1;\n}\n"",""rating"":1},""code"":""public int largestDif(int[] values){\n\tint largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n  \tint smallest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] < largest) {\n            smallest = values[i];\n        }\n    }\n  \treturn (largest-smallest);\n}""}"
198,2.0,2.5,0.5,1.5,2017-04-05 20:29:48.927084,18,,"public int getTax (String type)
{
  int x;
  System.out.println(""Enter 1 for employees, 2 for business owners, 3 for veterans or 0 for none of these"");
  x=scan.nextInt();
  switch (x)
  {
    case 1:
      {
        if(salary<10000)
        {
          return 0.02;
        }
        else
        {
          return 0.05;
        }
        break;
      }
    case 2:
      {
        return 0.1;
        break;
      }
    case 3:
      {
        return 0;
        break;
      }
    case 0:
      {
        return 0.5;
        break;
      }
  }
  // returns different percentage of tax based on type of person
  
}"
199,1.0,1.0,1.0,1.0,2017-04-05 20:29:51.010287,14,138,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""boolean solveMaze(int row, int col) {\n    // considered to be solved if the path reaches the lower right cell.\n    if (maze[row][col] == emptyCode) {\n        // add this cell to the path\n        maze[row][col] = pathCode;\n        repaint();\n        if (row == rows - 2 && col == columns - 2)\n            // path has reached goal\n            return true;\n        try {\n            Thread.sleep(speedSleep);\n        } catch (InterruptedException e) {\n        }\n        if (// try to solve maze by extending path\n        solveMaze(row - 1, col) || //    in each possible direction\n        solveMaze(row, col - 1) || solveMaze(row + 1, col) || solveMaze(row, col + 1))\n            return true;\n        // maze can't be solved from this cell, so backtrack out of the cell\n        // mark cell as having been visited\n        maze[row][col] = visitedCode;\n        repaint();\n        synchronized (this) {\n            try {\n                wait(speedSleep);\n            } catch (InterruptedException e) {\n            }\n        }\n    }\n    return false;\n}\n             // Try to solve the maze by continuing current path from position\n\n             // (row,col).  Return true if a solution is found.  The maze is\n\n"",""rating"":5},""code"":""tax()\n{\n  if(Person == 1)\n  {\n    \n  }\n}""}"
200,2.5,2.5,1.0,3.0,2017-04-05 20:29:54.448378,3,139,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent2(int[] a) {\n    // O(n log(n))\n    Arrays.sort(a);\n    int[] counts = new int[a.length];\n    int count = 0;\n    for (// O(n)\n    int i = 0; // O(n)\n    i < a.length; // O(n)\n    i++) {\n        count++;\n        if (i == a.length - 1 || a[i] != a[i + 1]) {\n            counts[i] = count;\n            count = 0;\n        }\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":1},""code"":""int arrayDifference(int array[]){\n  \n  /*takes an array and return difference between its largest element \n    and its smallest element */\n}\n  ""}"
201,1.0,1.0,1.0,1.0,2017-04-05 20:29:57.579335,19,140,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""public int compare(Object a, Object b) {\n    return ((Comparable) a).compareTo(b);\n}\n"",""rating"":1},""code"":""double tax(Person p)\n{\n  //compare classes\n}""}"
202,2.5,2.5,1.0,3.0,2017-04-05 20:29:59.111741,3,141,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""/**\n       * Return the contents of the square in the specified row and column.\n       */\nint pieceAt(int row, int col) {\n    return board[row][col];\n}\n"",""rating"":1},""code"":""int arrayDifference(int array[]){\n  \n  /*takes an array and return difference between its largest element \n    and its smallest element */\n}\n  ""}"
203,1.0,1.0,1.0,1.0,2017-04-05 20:30:08.457893,19,142,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""double value(double xValue) {\n    // The value of the node is the number that it contains.\n    return number;\n}\n"",""rating"":1},""code"":""double tax(Person p)\n{\n  //compare classes\n}""}"
204,1.0,1.0,1.0,1.0,2017-04-05 20:30:08.986243,19,143,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""double performConversion(double f) {\n    return f *= 0.071428571429;\n}\n"",""rating"":1},""code"":""double tax(Person p)\n{\n  //compare classes\n}""}"
205,1.0,1.0,1.0,1.0,2017-04-05 20:30:10.970704,14,144,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""void doFile(Reader is) throws IOException {\n    int c;\n    while ((c = is.read()) != -1) {\n        System.out.print((char) c);\n    }\n}\n"",""rating"":4},""code"":""tax()\n{\n  if(Person == 1)\n  {\n    \n  }\n}""}"
206,1.0,1.0,1.0,1.0,2017-04-05 20:30:11.978700,19,145,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""double value() {\n    // The value of the node is the number that it contains.\n    return number;\n}\n"",""rating"":1},""code"":""double tax(Person p)\n{\n  //compare classes\n}""}"
207,1.0,1.0,1.0,1.0,2017-04-05 20:30:13.127870,19,146,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""public int compare(Object a, Object b) {\n    return ((CollationKey) a).compareTo((CollationKey) b);\n}\n"",""rating"":1},""code"":""double tax(Person p)\n{\n  //compare classes\n}""}"
208,1.0,1.0,1.0,1.0,2017-04-05 20:30:13.140198,14,147,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""public Person(String firstName, String lastName) {\n    this.firstName = firstName;\n    this.lastName = lastName;\n}\n"",""rating"":3},""code"":""tax()\n{\n  if(Person == 1)\n  {\n    \n  }\n}""}"
209,1.0,1.0,1.0,1.0,2017-04-05 20:30:15.631003,19,148,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""double tax(Person p)\n{\n  //compare classes\n}""}"
210,1.0,1.0,1.0,1.0,2017-04-05 20:30:17.386419,19,149,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""public int compare(Object a, Object b) {\n    return ((String) a).compareTo((String) b);\n}\n"",""rating"":1},""code"":""double tax(Person p)\n{\n  //compare classes\n}""}"
211,1.0,1.0,1.0,1.0,2017-04-05 20:30:21.122512,14,150,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", targetDate = \""Jan 1, 2012\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":5},""code"":""tax()\n{\n  if(Person == 1)\n  {\n    \n  }\n}""}"
212,1.0,1.0,1.0,1.0,2017-04-05 20:30:22.095681,14,151,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""/**\n         * Return an array containing all the legal CheckersMoves\n         * for the specified player on the current board.  If the player\n         * has no legal moves, null is returned.  The value of player\n         * should be one of the constants RED or BLACK; if not, null\n         * is returned.  If the returned value is non-null, it consists\n         * entirely of jump moves or entirely of regular moves, since\n         * if the player can jump, only jumps are legal moves.\n         */\nCheckersMove[] getLegalMoves(int player) {\n    if (player != RED && player != BLACK)\n        return null;\n    // The constant representing a King belonging to player.\n    int playerKing;\n    if (player == RED)\n        playerKing = RED_KING;\n    else\n        playerKing = BLACK_KING;\n    // Moves will be stored in this list.\n    ArrayList<CheckersMove> moves = new ArrayList<CheckersMove>();\n    for (int row = 0; row < 8; row++) {\n        for (int col = 0; col < 8; col++) {\n            if (board[row][col] == player || board[row][col] == playerKing) {\n                if (canJump(player, row, col, row + 1, col + 1, row + 2, col + 2))\n                    moves.add(new CheckersMove(row, col, row + 2, col + 2));\n                if (canJump(player, row, col, row - 1, col + 1, row - 2, col + 2))\n                    moves.add(new CheckersMove(row, col, row - 2, col + 2));\n                if (canJump(player, row, col, row + 1, col - 1, row + 2, col - 2))\n                    moves.add(new CheckersMove(row, col, row + 2, col - 2));\n                if (canJump(player, row, col, row - 1, col - 1, row - 2, col - 2))\n                    moves.add(new CheckersMove(row, col, row - 2, col - 2));\n            }\n        }\n    }\n    if (moves.size() == 0) {\n        for (int row = 0; row < 8; row++) {\n            for (int col = 0; col < 8; col++) {\n                if (board[row][col] == player || board[row][col] == playerKing) {\n                    if (canMove(player, row, col, row + 1, col + 1))\n                        moves.add(new CheckersMove(row, col, row + 1, col + 1));\n                    if (canMove(player, row, col, row - 1, col + 1))\n                        moves.add(new CheckersMove(row, col, row - 1, col + 1));\n                    if (canMove(player, row, col, row + 1, col - 1))\n                        moves.add(new CheckersMove(row, col, row + 1, col - 1));\n                    if (canMove(player, row, col, row - 1, col - 1))\n                        moves.add(new CheckersMove(row, col, row - 1, col - 1));\n                }\n            }\n        }\n    }\n    if (moves.size() == 0)\n        return null;\n    else {\n        CheckersMove[] moveArray = new CheckersMove[moves.size()];\n        for (int i = 0; i < moves.size(); i++) moveArray[i] = moves.get(i);\n        return moveArray;\n    }\n}\n             /*  First, check for any possible jumps.  Look at each square on the board.\n             If that square contains one of the player's pieces, look at a possible\n             jump in each of the four directions from that square.  If there is \n             a legal jump in that direction, put it in the moves ArrayList.\n             */\n\n             /*  If any jump moves were found, then the user must jump, so we don't \n             add any regular moves.  However, if no jumps were found, check for\n             any legal regular moves.  Look at each square on the board.\n             If that square contains one of the player's pieces, look at a possible\n             move in each of the four directions from that square.  If there is \n             a legal move in that direction, put it in the moves ArrayList.\n             */\n\n             /* If no legal moves have been found, return null.  Otherwise, create\n             an array just big enough to hold all the legal moves, copy the\n             legal moves from the ArrayList into the array, and return the array. */\n\n"",""rating"":5},""code"":""tax()\n{\n  if(Person == 1)\n  {\n    \n  }\n}""}"
213,2.5,2.5,1.0,3.0,2017-04-05 20:30:24.784999,3,152,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""public static void main(String[] args) {\n    ArrayList<Double> values = new ArrayList<Double>();\n    // Read inputs\n    System.out.println(\""Please enter values, Q to quit:\"");\n    Scanner in = new Scanner(System.in);\n    while (in.hasNextDouble()) {\n        values.add(in.nextDouble());\n    }\n    // Find the largest value\n    double largest = values.get(0);\n    for (int i = 1; i < values.size(); i++) {\n        if (values.get(i) > largest) {\n            largest = values.get(i);\n        }\n    }\n    for (double element : values) {\n        System.out.print(element);\n        if (element == largest) {\n            System.out.print(\"" <== largest value\"");\n        }\n        System.out.println();\n    }\n}\n       // Print all values, marking the largest\n\n"",""rating"":1},""code"":""int arrayDifference(int array[]){\n  \n  /*takes an array and return difference between its largest element \n    and its smallest element */\n}\n  ""}"
214,1.0,1.0,1.0,1.0,2017-04-05 20:30:26.729772,14,153,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":2},""code"":""tax()\n{\n  if(Person == 1)\n  {\n    \n  }\n}""}"
215,2.5,2.5,1.0,3.0,2017-04-05 20:30:28.279022,3,154,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static <E extends Comparable<E>> E max(E[] a) {\n    E largest = a[0];\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":1},""code"":""int arrayDifference(int array[]){\n  \n  /*takes an array and return difference between its largest element \n    and its smallest element */\n}\n  ""}"
216,2.0,2.5,0.5,1.5,2017-04-05 20:30:28.962078,18,155,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""/**\n      Gets the position of the minimum score.\n      @return the position of the smallest element of values, or -1\n      if there are no scores.\n   */\npublic int minimumPosition() {\n    if (scores.size() == 0) {\n        return -1;\n    }\n    int smallestPosition = 0;\n    for (int i = 1; i < scores.size(); i++) {\n        if (scores.get(i) < scores.get(smallestPosition)) {\n            smallestPosition = i;\n        }\n    }\n    return smallestPosition;\n}\n"",""rating"":1},""code"":""public int getTax (String type)\n{\n  int x;\n  System.out.println(\""Enter 1 for employees, 2 for business owners, 3 for veterans or 0 for none of these\"");\n  x=scan.nextInt();\n  switch (x)\n  {\n    case 1:\n      {\n        if(salary<10000)\n        {\n          return 0.02;\n        }\n        else\n        {\n          return 0.05;\n        }\n        break;\n      }\n    case 2:\n      {\n        return 0.1;\n        break;\n      }\n    case 3:\n      {\n        return 0;\n        break;\n      }\n    case 0:\n      {\n        return 0.5;\n        break;\n      }\n  }\n  // returns different percentage of tax based on type of person\n  \n}""}"
217,1.0,1.0,1.0,1.0,2017-04-05 20:30:33.738337,14,156,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""/**\n       * Return an array containing all the legal CheckersMoves\n       * for the specified player on the current board.  If the player\n       * has no legal moves, null is returned.  The value of player\n       * should be one of the constants RED or BLACK; if not, null\n       * is returned.  If the returned value is non-null, it consists\n       * entirely of jump moves or entirely of regular moves, since\n       * if the player can jump, only jumps are legal moves.\n       */\nCheckersMove[] getLegalMoves(int player) {\n    if (player != RED && player != BLACK)\n        return null;\n    // The constant representing a King belonging to player.\n    int playerKing;\n    if (player == RED)\n        playerKing = RED_KING;\n    else\n        playerKing = BLACK_KING;\n    // Moves will be stored in this list.\n    ArrayList<CheckersMove> moves = new ArrayList<CheckersMove>();\n    for (int row = 0; row < 8; row++) {\n        for (int col = 0; col < 8; col++) {\n            if (board[row][col] == player || board[row][col] == playerKing) {\n                if (canJump(player, row, col, row + 1, col + 1, row + 2, col + 2))\n                    moves.add(new CheckersMove(row, col, row + 2, col + 2));\n                if (canJump(player, row, col, row - 1, col + 1, row - 2, col + 2))\n                    moves.add(new CheckersMove(row, col, row - 2, col + 2));\n                if (canJump(player, row, col, row + 1, col - 1, row + 2, col - 2))\n                    moves.add(new CheckersMove(row, col, row + 2, col - 2));\n                if (canJump(player, row, col, row - 1, col - 1, row - 2, col - 2))\n                    moves.add(new CheckersMove(row, col, row - 2, col - 2));\n            }\n        }\n    }\n    if (moves.size() == 0) {\n        for (int row = 0; row < 8; row++) {\n            for (int col = 0; col < 8; col++) {\n                if (board[row][col] == player || board[row][col] == playerKing) {\n                    if (canMove(player, row, col, row + 1, col + 1))\n                        moves.add(new CheckersMove(row, col, row + 1, col + 1));\n                    if (canMove(player, row, col, row - 1, col + 1))\n                        moves.add(new CheckersMove(row, col, row - 1, col + 1));\n                    if (canMove(player, row, col, row + 1, col - 1))\n                        moves.add(new CheckersMove(row, col, row + 1, col - 1));\n                    if (canMove(player, row, col, row - 1, col - 1))\n                        moves.add(new CheckersMove(row, col, row - 1, col - 1));\n                }\n            }\n        }\n    }\n    if (moves.size() == 0)\n        return null;\n    else {\n        CheckersMove[] moveArray = new CheckersMove[moves.size()];\n        for (int i = 0; i < moves.size(); i++) moveArray[i] = moves.get(i);\n        return moveArray;\n    }\n}\n          /*  First, check for any possible jumps.  Look at each square on the board.\n          If that square contains one of the player's pieces, look at a possible\n          jump in each of the four directions from that square.  If there is \n          a legal jump in that direction, put it in the moves ArrayList.\n          */\n\n          /*  If any jump moves were found, then the user must jump, so we don't \n          add any regular moves.  However, if no jumps were found, check for\n          any legal regular moves.  Look at each square on the board.\n          If that square contains one of the player's pieces, look at a possible\n          move in each of the four directions from that square.  If there is \n          a legal move in that direction, put it in the moves ArrayList.\n          */\n\n          /* If no legal moves have been found, return null.  Otherwise, create\n          an array just big enough to hold all the legal moves, copy the\n          legal moves from the ArrayList into the array, and return the array. */\n\n"",""rating"":5},""code"":""tax()\n{\n  if(Person == 1)\n  {\n    \n  }\n}""}"
218,2.5,2.5,1.0,3.0,2017-04-05 20:30:33.766983,3,157,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""/**\n      Gets the position of the minimum score.\n      @return the position of the smallest element of values, or -1\n      if there are no scores.\n   */\npublic int minimumPosition() {\n    if (scores.size() == 0) {\n        return -1;\n    }\n    int smallestPosition = 0;\n    for (int i = 1; i < scores.size(); i++) {\n        if (scores.get(i) < scores.get(smallestPosition)) {\n            smallestPosition = i;\n        }\n    }\n    return smallestPosition;\n}\n"",""rating"":3},""code"":""int arrayDifference(int array[]){\n  \n  /*takes an array and return difference between its largest element \n    and its smallest element */\n}\n  ""}"
219,1.0,1.0,1.0,1.0,2017-04-05 20:30:35.493973,14,158,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""void fill(int row, int col, int replace, int replaceWith) {\n    // called by tearDown() to change \""room codes\"".\n    if (maze[row][col] == replace) {\n        maze[row][col] = replaceWith;\n        fill(row + 1, col, replace, replaceWith);\n        fill(row - 1, col, replace, replaceWith);\n        fill(row, col + 1, replace, replaceWith);\n        fill(row, col - 1, replace, replaceWith);\n    }\n}\n"",""rating"":4},""code"":""tax()\n{\n  if(Person == 1)\n  {\n    \n  }\n}""}"
220,1.0,1.0,1.0,0.0,2017-04-05 20:30:36.181331,17,,"public int returnTax(Person p);
{
  if 
}
"
221,1.0,1.0,0.0,0.0,2017-04-05 20:30:36.914823,17,,"public int returnTax(Person p);
{
  if 
}
"
222,1.0,2.5,0.5,1.5,2017-04-05 20:30:37.262229,18,,"public int getTax (String type)
{
  int x;
  System.out.println(""Enter 1 for employees, 2 for business owners, 3 for veterans or 0 for none of these"");
  x=scan.nextInt();
  switch (x)
  {
    case 1:
      {
        if(salary<10000)
        {
          return 0.02;
        }
        else
        {
          return 0.05;
        }
        break;
      }
    case 2:
      {
        return 0.1;
        break;
      }
    case 3:
      {
        return 0;
        break;
      }
    case 0:
      {
        return 0.5;
        break;
      }
  }
  // returns different percentage of tax based on type of person
  
}"
223,1.0,2.5,0.5,0.0,2017-04-05 20:30:38.224604,18,,"public int getTax (String type)
{
  int x;
  System.out.println(""Enter 1 for employees, 2 for business owners, 3 for veterans or 0 for none of these"");
  x=scan.nextInt();
  switch (x)
  {
    case 1:
      {
        if(salary<10000)
        {
          return 0.02;
        }
        else
        {
          return 0.05;
        }
        break;
      }
    case 2:
      {
        return 0.1;
        break;
      }
    case 3:
      {
        return 0;
        break;
      }
    case 0:
      {
        return 0.5;
        break;
      }
  }
  // returns different percentage of tax based on type of person
  
}"
224,2.5,2.5,1.0,3.0,2017-04-05 20:30:38.352714,3,159,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Finds the smallest element in a tail range of the array.\n      @param a the array to sort\n      @param from the first position in a to compare\n      @return the position of the smallest element in the\n      range a[from] . . . a[a.length - 1]\n   */\nprivate static int minimumPosition(int[] a, int from) {\n    int minPos = from;\n    for (int i = from + 1; i < a.length; i++) {\n        if (a[i] < a[minPos]) {\n            minPos = i;\n        }\n    }\n    return minPos;\n}\n"",""rating"":2},""code"":""int arrayDifference(int array[]){\n  \n  /*takes an array and return difference between its largest element \n    and its smallest element */\n}\n  ""}"
225,1.0,1.0,1.0,1.0,2017-04-05 20:30:38.380285,14,160,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""public static void main(String[] args) {\n    String input = JOptionPane.showInputDialog(\""Enter price:\"");\n    double price = Double.parseDouble(input);\n    final double TAX_RATE = 8.5;\n    price = price * (1 + TAX_RATE / 100);\n    JOptionPane.showMessageDialog(null, \""Price after tax: \"" + price);\n}\n"",""rating"":5},""code"":""tax()\n{\n  if(Person == 1)\n  {\n    \n  }\n}""}"
226,5.0,1.0,0.0,0.0,2017-04-05 20:30:38.426720,17,,"public int returnTax(Person p);
{
  if 
}
"
227,5.0,0.0,0.0,0.0,2017-04-05 20:30:39.322634,17,,"public int returnTax(Person p);
{
  if 
}
"
228,1.0,2.5,1.0,0.0,2017-04-05 20:30:39.400983,18,,"public int getTax (String type)
{
  int x;
  System.out.println(""Enter 1 for employees, 2 for business owners, 3 for veterans or 0 for none of these"");
  x=scan.nextInt();
  switch (x)
  {
    case 1:
      {
        if(salary<10000)
        {
          return 0.02;
        }
        else
        {
          return 0.05;
        }
        break;
      }
    case 2:
      {
        return 0.1;
        break;
      }
    case 3:
      {
        return 0;
        break;
      }
    case 0:
      {
        return 0.5;
        break;
      }
  }
  // returns different percentage of tax based on type of person
  
}"
229,1.0,1.0,1.0,1.0,2017-04-05 20:30:42.248059,11,161,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""/**\n      Constructs a manager with a given name, annual salary and weekly bonus.\n      @param name the name of this employee\n      @param salary the annual salary\n      @param bonus the weekly bonus\n    */\npublic Manager(String name, double salary, double bonus) {\n    super(name, salary);\n    weeklyBonus = bonus;\n}\n"",""rating"":5},""code"":"" class Person{\n        String name;\n        int age;\n    }\n    class Employee extends Person{\n        double getSalary();\n    }\n    class BusinessOwner extends Person {\n        double getProfit();\n    }\n    class Veteran extends Person{\n        String veteran_id;\n    }\n""}"
230,1.0,1.0,1.0,2.0,2017-04-05 20:30:46.357881,14,,"tax()
{
  if(Person == 1)
  {
    
  }
}"
231,1.0,1.0,1.0,1.0,2017-04-05 20:30:49.348703,14,,"tax()
{
  if(Person == 1)
  {
    
  }
}"
232,1.0,2.5,1.0,0.0,2017-04-05 20:30:57.961033,18,162,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""public String checkYourself(String stringGuess) {\n    int guess = Integer.parseInt(stringGuess);\n    String result = \""miss\"";\n    for (int cell : locationCells) {\n        if (guess == cell) {\n            result = \""hit\"";\n            numOfHits++;\n            break;\n        }\n    }\n    if (numOfHits == locationCells.length) {\n        result = \""kill\"";\n    }\n    System.out.println(result);\n    return result;\n}\n"",""rating"":2},""code"":""public int getTax (String type)\n{\n  int x;\n  System.out.println(\""Enter 1 for employees, 2 for business owners, 3 for veterans or 0 for none of these\"");\n  x=scan.nextInt();\n  switch (x)\n  {\n    case 1:\n      {\n        if(salary<10000)\n        {\n          return 0.02;\n        }\n        else\n        {\n          return 0.05;\n        }\n        break;\n      }\n    case 2:\n      {\n        return 0.1;\n        break;\n      }\n    case 3:\n      {\n        return 0;\n        break;\n      }\n    case 0:\n      {\n        return 0.5;\n        break;\n      }\n  }\n  // returns different percentage of tax based on type of person\n  \n}""}"
233,2.5,2.5,1.0,3.0,2017-04-05 20:31:06.287244,3,163,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent1(int[] a) {\n    int[] counts = new int[a.length];\n    for (// O(n*n)\n    int i = 0; // O(n*n)\n    i < a.length; // O(n*n)\n    i++) {\n        // O(n) in each iteration\n        counts[i] = count(a, a[i]);\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":2},""code"":""int arrayDifference(int array[]){\n  \n  /*takes an array and return difference between its largest element \n    and its smallest element */\n}\n  ""}"
234,1.0,2.5,1.0,0.0,2017-04-05 20:31:08.104255,18,164,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""/**\n      Finds the position of a bank account with a given number.\n      @param accountNumber the number to find\n      @return the position of the account with the given number, \n      or -1 if there is no such account\n   */\npublic int find(int accountNumber) throws IOException {\n    for (int i = 0; i < size(); i++) {\n        file.seek(i * RECORD_SIZE);\n        int a = file.readInt();\n        if (a == accountNumber) {\n            return i;\n        }\n    // Found a match            \n    }\n    // No match in the entire file\n    return -1;\n}\n"",""rating"":2},""code"":""public int getTax (String type)\n{\n  int x;\n  System.out.println(\""Enter 1 for employees, 2 for business owners, 3 for veterans or 0 for none of these\"");\n  x=scan.nextInt();\n  switch (x)\n  {\n    case 1:\n      {\n        if(salary<10000)\n        {\n          return 0.02;\n        }\n        else\n        {\n          return 0.05;\n        }\n        break;\n      }\n    case 2:\n      {\n        return 0.1;\n        break;\n      }\n    case 3:\n      {\n        return 0;\n        break;\n      }\n    case 0:\n      {\n        return 0.5;\n        break;\n      }\n  }\n  // returns different percentage of tax based on type of person\n  \n}""}"
235,1.0,2.5,1.0,5.0,2017-04-05 20:31:14.451447,18,,"public int getTax (String type)
{
  int x;
  System.out.println(""Enter 1 for employees, 2 for business owners, 3 for veterans or 0 for none of these"");
  x=scan.nextInt();
  switch (x)
  {
    case 1:
      {
        if(salary<10000)
        {
          return 0.02;
        }
        else
        {
          return 0.05;
        }
        break;
      }
    case 2:
      {
        return 0.1;
        break;
      }
    case 3:
      {
        return 0;
        break;
      }
    case 0:
      {
        return 0.5;
        break;
      }
  }
  // returns different percentage of tax based on type of person
  
}"
236,1.0,2.5,1.0,0.0,2017-04-05 20:31:42.815128,18,,"public int getTax (String type)
{
  int x;
  System.out.println(""Enter 1 for employees, 2 for business owners, 3 for veterans or 0 for none of these"");
  x=scan.nextInt();
  switch (x)
  {
    case 1:
      {
        if(salary<10000)
        {
          return 0.02;
        }
        else
        {
          return 0.05;
        }
        break;
      }
    case 2:
      {
        return 0.1;
        break;
      }
    case 3:
      {
        return 0;
        break;
      }
    case 0:
      {
        return 0.5;
        break;
      }
  }
  // returns different percentage of tax based on type of person
  
}"
237,1.0,4.5,1.0,0.0,2017-04-05 20:31:43.568171,18,,"public int getTax (String type)
{
  int x;
  System.out.println(""Enter 1 for employees, 2 for business owners, 3 for veterans or 0 for none of these"");
  x=scan.nextInt();
  switch (x)
  {
    case 1:
      {
        if(salary<10000)
        {
          return 0.02;
        }
        else
        {
          return 0.05;
        }
        break;
      }
    case 2:
      {
        return 0.1;
        break;
      }
    case 3:
      {
        return 0;
        break;
      }
    case 0:
      {
        return 0.5;
        break;
      }
  }
  // returns different percentage of tax based on type of person
  
}"
238,5.0,0.0,0.0,0.0,2017-04-05 20:31:54.950782,17,165,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""public int computeAlpha(double x, double y) {\n    return ((int) x % 25 * 8 + 50) + ((int) y % 25 * 8 + 50);\n}\n"",""rating"":1},""code"":""public int returnTax(Person p)\n{\n  \n}\n""}"
239,5.0,0.0,0.0,0.0,2017-04-05 20:31:58.707325,17,166,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String[] args) {\n    double price = 9.95;\n    double taxRate = 8.25;\n    double tax = Financial.percentOf(price, taxRate);\n    System.out.printf(\""Tax: %.2f\\n\"", tax);\n}\n"",""rating"":1},""code"":""public int returnTax(Person p)\n{\n  \n}\n""}"
240,5.0,0.0,0.0,0.0,2017-04-05 20:32:00.470455,17,167,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", targetDate = \""Jan 1, 2012\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""public int returnTax(Person p)\n{\n  \n}\n""}"
241,5.0,0.0,0.0,0.0,2017-04-05 20:32:01.905569,17,168,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""public int compareTo(Person other) {\n    return name.compareTo(other.name);\n}\n"",""rating"":3},""code"":""public int returnTax(Person p)\n{\n  \n}\n""}"
242,1.0,4.5,5.0,0.0,2017-04-05 20:32:04.452277,18,,"public int getTax (String type)
{
  int x;
  System.out.println(""Enter 1 for employees, 2 for business owners, 3 for veterans or 0 for none of these"");
  x=scan.nextInt();
  switch (x)
  {
    case 1:
      {
        if(salary<10000)
        {
          return 0.02;
        }
        else
        {
          return 0.05;
        }
        break;
      }
    case 2:
      {
        return 0.1;
        break;
      }
    case 3:
      {
        return 0;
        break;
      }
    case 0:
      {
        return 0.5;
        break;
      }
  }
  // returns different percentage of tax based on type of person
  
}"
243,5.0,0.0,0.0,0.0,2017-04-05 20:32:06.571922,17,169,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""public int returnTax(Person p)\n{\n  \n}\n""}"
244,1.0,4.5,5.0,0.0,2017-04-05 20:32:17.500779,18,170,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Constructs a salaried employee with a given name and annual salary.\n      @param name the name of this employee\n      @param salary the annual salary\n    */\npublic SalariedEmployee(String name, double salary) {\n    setName(name);\n    annualSalary = salary;\n}\n"",""rating"":3},""code"":""public int getTax (String type)\n{\n  int x;\n  System.out.println(\""Enter 1 for employees, 2 for business owners, 3 for veterans or 0 for none of these\"");\n  x=scan.nextInt();\n  switch (x)\n  {\n    case 1:\n      {\n        if(salary<10000)\n        {\n          return 0.02;\n        }\n        else\n        {\n          return 0.05;\n        }\n        break;\n      }\n    case 2:\n      {\n        return 0.1;\n        break;\n      }\n    case 3:\n      {\n        return 0;\n        break;\n      }\n    case 0:\n      {\n        return 0.5;\n        break;\n      }\n  }\n  // returns different percentage of tax based on type of person\n  \n}""}"
245,1.0,4.5,5.0,0.0,2017-04-05 20:32:24.663638,18,171,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""public String checkYourself(String stringGuess) {\n    int guess = Integer.parseInt(stringGuess);\n    String result = \""miss\"";\n    for (int cell : locationCells) {\n        if (guess == cell) {\n            result = \""hit\"";\n            numOfHits++;\n            break;\n        }\n    }\n    if (numOfHits == locationCells.length) {\n        result = \""kill\"";\n    }\n    System.out.println(result);\n    return result;\n}\n"",""rating"":1},""code"":""public int getTax (String type)\n{\n  int x;\n  System.out.println(\""Enter 1 for employees, 2 for business owners, 3 for veterans or 0 for none of these\"");\n  x=scan.nextInt();\n  switch (x)\n  {\n    case 1:\n      {\n        if(salary<10000)\n        {\n          return 0.02;\n        }\n        else\n        {\n          return 0.05;\n        }\n        break;\n      }\n    case 2:\n      {\n        return 0.1;\n        break;\n      }\n    case 3:\n      {\n        return 0;\n        break;\n      }\n    case 0:\n      {\n        return 0.5;\n        break;\n      }\n  }\n  // returns different percentage of tax based on type of person\n  \n}""}"
246,1.0,4.5,5.0,0.0,2017-04-05 20:32:28.436413,18,172,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""/**\n      Gets the name of this employee.\n      @return the name \n   */\npublic String getName() {\n    return name;\n}\n"",""rating"":1},""code"":""public int getTax (String type)\n{\n  int x;\n  System.out.println(\""Enter 1 for employees, 2 for business owners, 3 for veterans or 0 for none of these\"");\n  x=scan.nextInt();\n  switch (x)\n  {\n    case 1:\n      {\n        if(salary<10000)\n        {\n          return 0.02;\n        }\n        else\n        {\n          return 0.05;\n        }\n        break;\n      }\n    case 2:\n      {\n        return 0.1;\n        break;\n      }\n    case 3:\n      {\n        return 0;\n        break;\n      }\n    case 0:\n      {\n        return 0.5;\n        break;\n      }\n  }\n  // returns different percentage of tax based on type of person\n  \n}""}"
247,4.0,1.0,1.0,1.0,2017-04-05 20:32:51.277232,5,,"/**
Write a java method that takes a person and returns their tax as below:
1. For employees, if salary < $10,000, 2% of salary, else 5%
2. For business owners, 10% of their profit
3. 0 for veterans
**/
public static double tax(Person p)
  double salary,profit,tax;
	salary=p.getSalary();
	profit=p.getProfit();
	if(salary<10000){
      tax=0.02
    }
	else{
  		tax=0.05;
	}
"
248,4.0,4.0,1.0,1.0,2017-04-05 20:32:52.425320,5,,"/**
Write a java method that takes a person and returns their tax as below:
1. For employees, if salary < $10,000, 2% of salary, else 5%
2. For business owners, 10% of their profit
3. 0 for veterans
**/
public static double tax(Person p)
  double salary,profit,tax;
	salary=p.getSalary();
	profit=p.getProfit();
	if(salary<10000){
      tax=0.02
    }
	else{
  		tax=0.05;
	}
"
249,4.0,4.0,4.0,1.0,2017-04-05 20:32:54.382400,5,,"/**
Write a java method that takes a person and returns their tax as below:
1. For employees, if salary < $10,000, 2% of salary, else 5%
2. For business owners, 10% of their profit
3. 0 for veterans
**/
public static double tax(Person p)
  double salary,profit,tax;
	salary=p.getSalary();
	profit=p.getProfit();
	if(salary<10000){
      tax=0.02
    }
	else{
  		tax=0.05;
	}
"
250,4.0,4.0,4.0,4.0,2017-04-05 20:32:56.007654,5,,"/**
Write a java method that takes a person and returns their tax as below:
1. For employees, if salary < $10,000, 2% of salary, else 5%
2. For business owners, 10% of their profit
3. 0 for veterans
**/
public static double tax(Person p)
  double salary,profit,tax;
	salary=p.getSalary();
	profit=p.getProfit();
	if(salary<10000){
      tax=0.02
    }
	else{
  		tax=0.05;
	}
"
251,1.0,1.0,1.0,1.0,2017-04-05 20:33:33.443336,13,173,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public int compare(Object a, Object b) {\n    TimerTask t1 = (TimerTask) a;\n    TimerTask t2 = (TimerTask) b;\n    long diff = t1.nextTime - t2.nextTime;\n    if (diff < 0)\n        return -1;\n    else if (diff > 0)\n        return 1;\n    else\n        return 0;\n}\n"",""rating"":3},""code"":""int largDiff(int s){\nint[] array;\n\narray = new int[3];\narray[0] = 1;\narray[1] = 4;\narray[2] = 7;\n\nint a = array[0];\nint b = array[1];\nint c = array[2];\n\nint d = b-a;\nint e = c-a;\nint f = c-b;\n  \n if (d > f){\n   return d;\n } else if( e > f){\n   return e;\n }else return f;\n}""}"
252,1.0,1.0,1.0,1.0,2017-04-05 20:33:55.084832,11,174,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""double value() {\n    // The value of the node is the number that it contains.\n    return number;\n}\n"",""rating"":4},""code"":""class Person{\n        String name;\n        int age;\n    }\n    class Employee extends Person{\n        double getSalary();\n    }\n    class BusinessOwner extends Person {\n        double getProfit();\n    }\n    class Veteran extends Person{\n        String veteran_id;\n    }\n""}"
253,1.0,1.0,1.0,1.0,2017-04-05 20:34:00.666362,11,175,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String[] args) {\n    Employee[] staff = new Employee[3];\n    staff[0] = new HourlyEmployee(\""Morgan, Harry\"", 30);\n    staff[1] = new SalariedEmployee(\""Lin, Sally\"", 52000);\n    staff[2] = new Manager(\""Smith, Mary\"", 104000, 50);\n    Scanner in = new Scanner(System.in);\n    for (Employee e : staff) {\n        System.out.print(\""Hours worked by \"" + e.getName() + \"": \"");\n        int hours = in.nextInt();\n        System.out.println(\""Salary: \"" + e.weeklyPay(hours));\n    }\n}\n"",""rating"":3},""code"":""class Person{\n        String name;\n        int age;\n    }\n    class Employee extends Person{\n        double getSalary();\n    }\n    class BusinessOwner extends Person {\n        double getProfit();\n    }\n    class Veteran extends Person{\n        String veteran_id;\n    }\n""}"
254,1.0,1.0,1.0,1.0,2017-04-05 20:34:06.145943,11,176,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""double value() {\n    // The value is the negative of the value of the operand.\n    double neg = operand.value();\n    return -neg;\n}\n"",""rating"":1},""code"":""class Person{\n        String name;\n        int age;\n    }\n    class Employee extends Person{\n        double getSalary();\n    }\n    class BusinessOwner extends Person {\n        double getProfit();\n    }\n    class Veteran extends Person{\n        String veteran_id;\n    }\n""}"
255,5.0,0.0,0.0,0.0,2017-04-05 20:34:13.052438,17,177,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""/** This Paint object only uses opaque colors */\npublic int getTransparency() {\n    return OPAQUE;\n}\n"",""rating"":1},""code"":""public int returnTax(Person p)\n{\n  Veteran test = new Veteran();\n  if(p.getClass()==test.getClass())\n    return 0;\n  else if( )\n}\n""}"
256,1.0,1.0,1.0,1.0,2017-04-05 20:34:13.138064,11,178,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Constructs a salaried employee with a given name and annual salary.\n      @param name the name of this employee\n      @param salary the annual salary\n    */\npublic SalariedEmployee(String name, double salary) {\n    setName(name);\n    annualSalary = salary;\n}\n"",""rating"":4},""code"":""class Person{\n        String name;\n        int age;\n    }\n    class Employee extends Person{\n        double getSalary();\n    }\n    class BusinessOwner extends Person {\n        double getProfit();\n    }\n    class Veteran extends Person{\n        String veteran_id;\n    }\n""}"
257,5.0,0.0,0.0,0.0,2017-04-05 20:34:15.439755,17,179,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""public Product(float price) {\n    this.price = price;\n    tax = (float) (price * 0.20);\n}\n"",""rating"":1},""code"":""public int returnTax(Person p)\n{\n  Veteran test = new Veteran();\n  if(p.getClass()==test.getClass())\n    return 0;\n  else if( )\n}\n""}"
258,5.0,0.0,0.0,0.0,2017-04-05 20:34:19.790501,17,180,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""public static void main(String[] args) {\n    String input = JOptionPane.showInputDialog(\""Enter price:\"");\n    double price = Double.parseDouble(input);\n    final double TAX_RATE = 8.5;\n    price = price * (1 + TAX_RATE / 100);\n    JOptionPane.showMessageDialog(null, \""Price after tax: \"" + price);\n}\n"",""rating"":1},""code"":""public int returnTax(Person p)\n{\n  Veteran test = new Veteran();\n  if(p.getClass()==test.getClass())\n    return 0;\n  else if( )\n}\n""}"
259,1.0,1.0,1.0,1.0,2017-04-05 20:34:23.805170,1,181,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Reads all data.\n      @param in the scanner that scans the data\n   */\nprivate void readData(Scanner in) throws BadDataException {\n    if (!in.hasNextInt()) {\n        throw new BadDataException(\""Length expected\"");\n    }\n    int numberOfValues = in.nextInt();\n    data = new double[numberOfValues];\n    for (int i = 0; i < numberOfValues; i++) {\n        readValue(in, i);\n    }\n    if (in.hasNext()) {\n        throw new BadDataException(\""End of file expected\"");\n    }\n}\n"",""rating"":3},""code"":""public static void main(String[] args)\n{\n    System.out.println(\""Please pass in the person you wish to tax: \"");\n  \tScanner scan = new Scanner();\n  \tObject person1 = scan.nextObject;\n  \t\n   \tSystem.out.println(\""Expected: 0.0 2000.0 10000.0\"");\n  \n}\n""}"
260,1.0,1.0,1.0,3.0,2017-04-05 20:34:25.574596,13,,"int largDiff(int s){
int[] array;
// largest difference
array = new int[3];
array[0] = 1;
array[1] = 4;
array[2] = 7;

int a = array[0];
int b = array[1];
int c = array[2];

int d = b-a;
int e = c-a;
int f = c-b;
  
 if (d > f){
   return d;
 } else if( e > f){
   return e;
 }else return f;
}"
261,0.0,0.0,0.0,0.0,2017-04-05 20:34:27.841324,17,,"public int returnTax(Person p)
{
  Veteran test = new Veteran();
  if(p.getClass()==test.getClass())
    return 0;
  else if( )
}
"
262,1.0,1.0,1.0,1.0,2017-04-05 20:34:28.026526,1,182,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":2},""code"":""public static void main(String[] args)\n{\n    System.out.println(\""Please pass in the person you wish to tax: \"");\n  \tScanner scan = new Scanner();\n  \tObject person1 = scan.nextObject;\n  \t\n   \tSystem.out.println(\""Expected: 0.0 2000.0 10000.0\"");\n  \n}\n""}"
263,0.0,5.0,0.0,0.0,2017-04-05 20:34:28.638243,17,,"public int returnTax(Person p)
{
  Veteran test = new Veteran();
  if(p.getClass()==test.getClass())
    return 0;
  else if( )
}
"
264,1.0,1.0,1.0,1.0,2017-04-05 20:34:31.351988,1,183,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""/**\n      Reads one data value.\n      @param in the scanner that scans the data\n      @param i the position of the value to read\n   */\nprivate void readValue(Scanner in, int i) throws BadDataException {\n    if (!in.hasNextDouble()) {\n        throw new BadDataException(\""Data value expected\"");\n    }\n    data[i] = in.nextDouble();\n}\n"",""rating"":1},""code"":""public static void main(String[] args)\n{\n    System.out.println(\""Please pass in the person you wish to tax: \"");\n  \tScanner scan = new Scanner();\n  \tObject person1 = scan.nextObject;\n  \t\n   \tSystem.out.println(\""Expected: 0.0 2000.0 10000.0\"");\n  \n}\n""}"
265,1.0,1.0,1.0,4.5,2017-04-05 20:34:32.891681,18,,"
public int static void (String []args)
{
// declare array?
}"
266,1.0,1.0,1.0,3.0,2017-04-05 20:34:35.012238,13,184,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""public static <E extends Comparable<? super E>> E max(ArrayList<E> a) // public static <E extends Comparable<E>> E max(ArrayList<E> a) \n// doesn't work with Student array list\n{\n    E largest = a.get(0);\n    for (int i = 1; i < a.size(); i++) {\n        if (a.get(i).compareTo(largest) > 0) {\n            largest = a.get(i);\n        }\n    }\n    return largest;\n}\n"",""rating"":4},""code"":""int largDiff(int s){\nint[] array;\n// largest difference\narray = new int[3];\narray[0] = 1;\narray[1] = 4;\narray[2] = 7;\n\nint a = array[0];\nint b = array[1];\nint c = array[2];\n\nint d = b-a;\nint e = c-a;\nint f = c-b;\n  \n if (d > f){\n   return d;\n } else if( e > f){\n   return e;\n }else return f;\n}""}"
267,1.0,1.0,1.0,1.0,2017-04-05 20:34:37.691170,1,185,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""// BEGIN search\npublic static void main(String[] args) {\n    for (Object camera : // <1>\n    privateListOfCameras.parallelStream().filter(// <2>\n     c -> c.isIlc() && c.getPrice() < 500).toArray()) {\n        // <3>\n        // <4>\n        System.out.println(camera);\n    }\n}\n"",""rating"":4},""code"":""public static void main(String[] args)\n{\n    System.out.println(\""Please pass in the person you wish to tax: \"");\n  \tScanner scan = new Scanner();\n  \tObject person1 = scan.nextObject;\n  \t\n   \tSystem.out.println(\""Expected: 0.0 2000.0 10000.0\"");\n  \n}\n""}"
268,1.0,1.0,1.0,1.0,2017-04-05 20:34:38.793540,11,186,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""public static void main(String[] args) {\n    double sum = 0;\n    int count = 0;\n    double salary = 0;\n    System.out.print(\""Enter salaries, -1 to finish: \"");\n    Scanner in = new Scanner(System.in);\n    while (salary != -1) {\n        salary = in.nextDouble();\n        if (salary != -1) {\n            sum = sum + salary;\n            count++;\n        }\n    }\n    if (count > 0) {\n        double average = sum / count;\n        System.out.println(\""Average salary: \"" + average);\n       // Process data until the sentinel is entered \n\n    } else {\n        System.out.println(\""No data\"");\n    }\n}\n       // Compute and print the average\n\n"",""rating"":5},""code"":""class Person{\n        String name;\n        int age;\n    }\n    class Employee extends Person{\n        double getSalary();\n    }\n    class BusinessOwner extends Person {\n        double getProfit();\n    }\n    class Veteran extends Person{\n        String veteran_id;\n    }\n""}"
269,0.0,5.0,0.0,0.0,2017-04-05 20:34:45.561524,17,187,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""public int compareTo(Person other) {\n    return name.compareTo(other.name);\n}\n"",""rating"":5},""code"":""public int returnTax(Person p)\n{\n  Veteran test = new Veteran();\n  Bui\n  if(p.getClass()==test.getClass())\n    return 0;\n  else if( )\n}\n""}"
270,1.0,1.0,1.0,1.0,2017-04-05 20:34:46.674151,1,188,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""public static void main(String[] args) {\n    try {\n        Scanner s = new Scanner(new File(\""scores.dat\""));\n        while (s.hasNextInt()) {\n            System.out.println(s.nextInt());\n        }\n    } catch (IOException e) {\n        System.out.println(e);\n    }\n}\n"",""rating"":3},""code"":""public static void main(String[] args)\n{\n    System.out.println(\""Please pass in the person you wish to tax: \"");\n  \tScanner scan = new Scanner();\n  \tObject person1 = scan.nextObject;\n  \t\n   \tSystem.out.println(\""Expected: 0.0 2000.0 10000.0\"");\n  \n}\n""}"
271,0.0,5.0,5.0,0.0,2017-04-05 20:34:47.573178,17,,"public int returnTax(Person p)
{
  Veteran test = new Veteran();
  Bui
  if(p.getClass()==test.getClass())
    return 0;
  else if( )
}
"
272,1.0,1.0,1.0,3.0,2017-04-05 20:34:48.346501,13,189,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""private static int numNeighbors(boolean[][] world, int row, int col) {\n    int num = world[row][col] ? -1 : 0;\n    for (int r = row - 1; r <= row + 1; r++) for (int c = col - 1; c <= col + 1; c++) if (inbounds(world, r, c) && world[r][c])\n        num++;\n    return num;\n}\n"",""rating"":4},""code"":""int largDiff(int s){\nint[] array;\n// largest difference\narray = new int[3];\narray[0] = 1;\narray[1] = 4;\narray[2] = 7;\n\nint a = array[0];\nint b = array[1];\nint c = array[2];\n\nint d = b-a;\nint e = c-a;\nint f = c-b;\n  \n if (d > f){\n   return d;\n } else if( e > f){\n   return e;\n }else return f;\n}""}"
273,1.0,1.0,1.0,1.0,2017-04-05 20:34:54.748071,1,190,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""public static void main(String[] args) throws Exception {\n    // Create an Object with a finalize() method - Bad idea!\n    Object f = new Object() {\n\n        public void finalize() throws Throwable {\n            System.out.println(\""Running finalize()\"");\n            super.finalize();\n        }\n    };\n    // Add a shutdownHook to the JVM\n    Runtime.getRuntime().addShutdownHook(new Thread() {\n\n        public void run() {\n            System.out.println(\""Running Shutdown Hook\"");\n        }\n    });\n    if (args.length == 1 && args[0].equals(\""-f\"")) {\n        f = null;\n        System.gc();\n    }\n    System.out.println(\""Calling System.exit(), with f = \"" + f);\n    System.exit(0);\n}\n         // Unless the user puts -f (this-program-specific argument for \""free\"") on \n\n         // the command line, call System.exit while holding a reference to \n\n         // Object f, which can therefore not be finalized().\n\n"",""rating"":3},""code"":""public static void main(String[] args)\n{\n    System.out.println(\""Please pass in the person you wish to tax: \"");\n  \tScanner scan = new Scanner();\n  \tObject person1 = scan.nextObject;\n  \t\n   \tSystem.out.println(\""Expected: 0.0 2000.0 10000.0\"");\n  \n}\n""}"
274,1.0,1.0,1.0,1.0,2017-04-05 20:35:02.772041,1,191,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""public static void main(String[] args) {\n    // The arguments to all these format methods consist of\n    // a format code String and 1 or more arguments.\n    // Each format code consists of the following:\n    // % - code lead-in\n    // N$ - which parameter number (1-based) after the code - OPTIONAL\n    // N - field width\n    // L - format letter (d: decimal(int); f: float; s: general; many more)\n    // For the full(!) story, see javadoc for java.util.Formatter.\n    // Most general (cumbersome) way of proceding.\n    Formatter fmtr = new Formatter();\n    Object result = fmtr.format(\""%1$04d - the year of %2$f\"", 1956, Math.PI);\n    System.out.println(result);\n    // Shorter way using static String.format(), and\n    // default parameter numbering.\n    Object stringResult = String.format(\""%04d - the year of %f\"", 1956, Math.PI);\n    System.out.println(stringResult);\n    // A shorter way using PrintStream/PrintWriter.format, more in line with\n    // other languages. But this way you must provide the newline delimiter \n    // using %n (do NOT use \\n as that is platform-dependent!).\n    System.out.printf(\""%04d - the year of %f%n\"", 1956, Math.PI);\n    // Format doubles with more control\n    System.out.printf(\""PI is approximately %4.2f%n\"", Math.PI);\n}\n"",""rating"":1},""code"":""public static void main(String[] args)\n{\n    System.out.println(\""Please pass in the person you wish to tax: \"");\n  \tScanner scan = new Scanner();\n  \tObject person1 = scan.nextObject;\n  \t\n   \tSystem.out.println(\""Expected: 0.0 2000.0 10000.0\"");\n  \n}\n""}"
275,1.0,1.0,1.0,1.0,2017-04-05 20:35:09.297652,1,192,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    System.out.print(\""Please enter your income: \"");\n    double income = in.nextDouble();\n    System.out.print(\""Are you married? (Y/N) \"");\n    String input = in.next();\n    int status;\n    if (input.equals(\""Y\"")) {\n        status = TaxReturn.MARRIED;\n    } else {\n        status = TaxReturn.SINGLE;\n    }\n    TaxReturn aTaxReturn = new TaxReturn(income, status);\n    System.out.println(\""Tax: \"" + aTaxReturn.getTax());\n}\n"",""rating"":5},""code"":""public static void main(String[] args)\n{\n    System.out.println(\""Please pass in the person you wish to tax: \"");\n  \tScanner scan = new Scanner();\n  \tObject person1 = scan.nextObject;\n  \t\n   \tSystem.out.println(\""Expected: 0.0 2000.0 10000.0\"");\n  \n}\n""}"
276,3.5,1.0,1.0,1.0,2017-04-05 20:35:09.446030,3,,"double TaxReturn(double SalaryTax){
  /*Write a java method that takes a person and returns their tax as below:
1. For employees, if salary < $10,000, 2% of salary, else 5%
2. For business owners, 10% of their profit
3. 0 for veterans*/
}"
277,3.5,1.0,1.0,1.0,2017-04-05 20:35:10.747302,3,,"double TaxReturn(double SalaryTax){
  /*Write a java method that takes a person and returns their tax as below:
1. For employees, if salary < $10,000, 2% of salary, else 5%
2. For business owners, 10% of their profit
3. 0 for veterans*/
}"
278,3.5,1.0,1.0,3.0,2017-04-05 20:35:11.616741,3,,"double TaxReturn(double SalaryTax){
  /*Write a java method that takes a person and returns their tax as below:
1. For employees, if salary < $10,000, 2% of salary, else 5%
2. For business owners, 10% of their profit
3. 0 for veterans*/
}"
279,3.5,1.5,1.0,3.0,2017-04-05 20:35:14.664886,3,,"double TaxReturn(double SalaryTax){
  /*Write a java method that takes a person and returns their tax as below:
1. For employees, if salary < $10,000, 2% of salary, else 5%
2. For business owners, 10% of their profit
3. 0 for veterans*/
}"
280,1.0,1.0,1.0,3.0,2017-04-05 20:35:17.679656,13,193,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""/**\n         * Return the largest item that has been entered.\n         * The return value will be -infinity if no numbers have been entered. \n         */\npublic double getMax() {\n    return max;\n}\n"",""rating"":3},""code"":""int largDiff(int s){\nint[] array;\n// largest difference\narray = new int[3];\narray[0] = 1;\narray[1] = 4;\narray[2] = 7;\n\nint a = array[0];\nint b = array[1];\nint c = array[2];\n\nint d = b-a;\nint e = c-a;\nint f = c-b;\n  \n if (d > f){\n   return d;\n } else if( e > f){\n   return e;\n }else return f;\n}""}"
281,3.5,1.0,1.0,3.0,2017-04-05 20:35:18.432320,3,,"double TaxReturn(double SalaryTax){
  /*Write a java method that takes a person and returns their tax as below:
1. For employees, if salary < $10,000, 2% of salary, else 5%
2. For business owners, 10% of their profit
3. 0 for veterans*/
}"
282,1.0,1.0,1.0,1.0,2017-04-05 20:35:19.641822,11,194,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""double value() {\n    // The value is the negative of the value of the operand.\n    double neg = operand.value();\n    return -neg;\n}\n"",""rating"":1},""code"":""class Person{\n        String name;\n        int age;\n    }\n    class Employee extends Person{\n        double getSalary();\n    }\n    class BusinessOwner extends Person {\n        double getProfit();\n    }\n    class Veteran extends Person{\n        String veteran_id;\n    }\n\npublic static void main(String[] args) {\n    double sum = 0;\n    int count = 0;\n    double salary = 0;\n    System.out.print(\""Enter salaries, -1 to finish: \"");\n    Scanner in = new Scanner(System.in);\n    while (salary != -1) {\n        salary = in.nextDouble();\n        if (salary != -1) {\n            sum = sum + salary;\n            count++;\n        }\n    }\n    if (count > 0) {\n        double average = sum / count;\n        System.out.println(\""Average salary: \"" + average);\n       // Process data until the sentinel is entered \n\n    } else {\n        System.out.println(\""No data\"");\n    }\n}\n       // Compute and print the average""}"
283,1.0,1.0,1.0,1.0,2017-04-05 20:35:23.250280,11,195,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""double value() {\n    // The value is obtained by evaluating the left and right\n    // operands and combining the values with the operator.\n    double x = left.value();\n    double y = right.value();\n    switch(op) {\n        case '+':\n            return x + y;\n        case '-':\n            return x - y;\n        case '*':\n            return x * y;\n        case '/':\n            return x / y;\n        // Bad operator!\n        default:\n            return Double.NaN;\n    }\n}\n"",""rating"":1},""code"":""class Person{\n        String name;\n        int age;\n    }\n    class Employee extends Person{\n        double getSalary();\n    }\n    class BusinessOwner extends Person {\n        double getProfit();\n    }\n    class Veteran extends Person{\n        String veteran_id;\n    }\n\npublic static void main(String[] args) {\n    double sum = 0;\n    int count = 0;\n    double salary = 0;\n    System.out.print(\""Enter salaries, -1 to finish: \"");\n    Scanner in = new Scanner(System.in);\n    while (salary != -1) {\n        salary = in.nextDouble();\n        if (salary != -1) {\n            sum = sum + salary;\n            count++;\n        }\n    }\n    if (count > 0) {\n        double average = sum / count;\n        System.out.println(\""Average salary: \"" + average);\n       // Process data until the sentinel is entered \n\n    } else {\n        System.out.println(\""No data\"");\n    }\n}\n       // Compute and print the average""}"
284,1.0,1.0,1.0,1.0,2017-04-05 20:35:25.417033,11,196,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""double performConversion(double f) {\n    return f *= 0.45359237;\n}\n"",""rating"":1},""code"":""class Person{\n        String name;\n        int age;\n    }\n    class Employee extends Person{\n        double getSalary();\n    }\n    class BusinessOwner extends Person {\n        double getProfit();\n    }\n    class Veteran extends Person{\n        String veteran_id;\n    }\n\npublic static void main(String[] args) {\n    double sum = 0;\n    int count = 0;\n    double salary = 0;\n    System.out.print(\""Enter salaries, -1 to finish: \"");\n    Scanner in = new Scanner(System.in);\n    while (salary != -1) {\n        salary = in.nextDouble();\n        if (salary != -1) {\n            sum = sum + salary;\n            count++;\n        }\n    }\n    if (count > 0) {\n        double average = sum / count;\n        System.out.println(\""Average salary: \"" + average);\n       // Process data until the sentinel is entered \n\n    } else {\n        System.out.println(\""No data\"");\n    }\n}\n       // Compute and print the average""}"
285,1.0,1.0,1.0,1.0,2017-04-05 20:35:28.337691,11,197,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Constructs a salaried employee with a given name and annual salary.\n      @param name the name of this employee\n      @param salary the annual salary\n    */\npublic SalariedEmployee(String name, double salary) {\n    setName(name);\n    annualSalary = salary;\n}\n"",""rating"":4},""code"":""class Person{\n        String name;\n        int age;\n    }\n    class Employee extends Person{\n        double getSalary();\n    }\n    class BusinessOwner extends Person {\n        double getProfit();\n    }\n    class Veteran extends Person{\n        String veteran_id;\n    }\n\npublic static void main(String[] args) {\n    double sum = 0;\n    int count = 0;\n    double salary = 0;\n    System.out.print(\""Enter salaries, -1 to finish: \"");\n    Scanner in = new Scanner(System.in);\n    while (salary != -1) {\n        salary = in.nextDouble();\n        if (salary != -1) {\n            sum = sum + salary;\n            count++;\n        }\n    }\n    if (count > 0) {\n        double average = sum / count;\n        System.out.println(\""Average salary: \"" + average);\n       // Process data until the sentinel is entered \n\n    } else {\n        System.out.println(\""No data\"");\n    }\n}\n       // Compute and print the average""}"
286,1.0,1.0,1.0,5.0,2017-04-05 20:35:28.823217,13,,"int largDiff(int s){
int[] array;
// largest difference
array = new int[3];
array[0] = 1;
array[1] = 4;
array[2] = 7;

int a = array[0];
int b = array[1];
int c = array[2];

int d = b-a;
int e = c-a;
int f = c-b;
  
 if (d > f){
   return d;
 } else if( e > f){
   return e;
 }else return f;
}"
287,1.0,1.0,1.0,1.0,2017-04-05 20:35:32.205644,11,198,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String[] args) {\n    Employee[] staff = new Employee[3];\n    staff[0] = new HourlyEmployee(\""Morgan, Harry\"", 30);\n    staff[1] = new SalariedEmployee(\""Lin, Sally\"", 52000);\n    staff[2] = new Manager(\""Smith, Mary\"", 104000, 50);\n    Scanner in = new Scanner(System.in);\n    for (Employee e : staff) {\n        System.out.print(\""Hours worked by \"" + e.getName() + \"": \"");\n        int hours = in.nextInt();\n        System.out.println(\""Salary: \"" + e.weeklyPay(hours));\n    }\n}\n"",""rating"":2},""code"":""class Person{\n        String name;\n        int age;\n    }\n    class Employee extends Person{\n        double getSalary();\n    }\n    class BusinessOwner extends Person {\n        double getProfit();\n    }\n    class Veteran extends Person{\n        String veteran_id;\n    }\n\npublic static void main(String[] args) {\n    double sum = 0;\n    int count = 0;\n    double salary = 0;\n    System.out.print(\""Enter salaries, -1 to finish: \"");\n    Scanner in = new Scanner(System.in);\n    while (salary != -1) {\n        salary = in.nextDouble();\n        if (salary != -1) {\n            sum = sum + salary;\n            count++;\n        }\n    }\n    if (count > 0) {\n        double average = sum / count;\n        System.out.println(\""Average salary: \"" + average);\n       // Process data until the sentinel is entered \n\n    } else {\n        System.out.println(\""No data\"");\n    }\n}\n       // Compute and print the average""}"
288,1.0,1.0,1.0,1.0,2017-04-05 20:35:33.949522,11,199,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""double value() {\n    // The value of the node is the number that it contains.\n    return number;\n}\n"",""rating"":1},""code"":""class Person{\n        String name;\n        int age;\n    }\n    class Employee extends Person{\n        double getSalary();\n    }\n    class BusinessOwner extends Person {\n        double getProfit();\n    }\n    class Veteran extends Person{\n        String veteran_id;\n    }\n\npublic static void main(String[] args) {\n    double sum = 0;\n    int count = 0;\n    double salary = 0;\n    System.out.print(\""Enter salaries, -1 to finish: \"");\n    Scanner in = new Scanner(System.in);\n    while (salary != -1) {\n        salary = in.nextDouble();\n        if (salary != -1) {\n            sum = sum + salary;\n            count++;\n        }\n    }\n    if (count > 0) {\n        double average = sum / count;\n        System.out.println(\""Average salary: \"" + average);\n       // Process data until the sentinel is entered \n\n    } else {\n        System.out.println(\""No data\"");\n    }\n}\n       // Compute and print the average""}"
289,1.0,1.0,1.0,1.0,2017-04-05 20:35:36.689086,11,200,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""public double weeklyPay(int hoursWorked) {\n    final int WEEKS_PER_YEAR = 52;\n    return annualSalary / WEEKS_PER_YEAR;\n}\n"",""rating"":3},""code"":""class Person{\n        String name;\n        int age;\n    }\n    class Employee extends Person{\n        double getSalary();\n    }\n    class BusinessOwner extends Person {\n        double getProfit();\n    }\n    class Veteran extends Person{\n        String veteran_id;\n    }\n\npublic static void main(String[] args) {\n    double sum = 0;\n    int count = 0;\n    double salary = 0;\n    System.out.print(\""Enter salaries, -1 to finish: \"");\n    Scanner in = new Scanner(System.in);\n    while (salary != -1) {\n        salary = in.nextDouble();\n        if (salary != -1) {\n            sum = sum + salary;\n            count++;\n        }\n    }\n    if (count > 0) {\n        double average = sum / count;\n        System.out.println(\""Average salary: \"" + average);\n       // Process data until the sentinel is entered \n\n    } else {\n        System.out.println(\""No data\"");\n    }\n}\n       // Compute and print the average""}"
290,1.0,1.0,1.0,1.0,2017-04-05 20:35:49.985719,11,201,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""double performConversion(double f) {\n    return f *= 453.59237;\n}\n"",""rating"":1},""code"":""class Person{\n        String name;\n        int age;\n    }\n    class Employee extends Person{\n        double getSalary();\n    }\n    class BusinessOwner extends Person {\n        double getProfit();\n    }\n    class Veteran extends Person{\n        String veteran_id;\n    }\n\npublic static void main(String[] args) {\n    double sum = 0;\n    int count = 0;\n    double salary = 0;\n    System.out.print(\""Enter salaries, -1 to finish: \"");\n    Scanner in = new Scanner(System.in);\n    while (salary != -1) {\n        salary = in.nextDouble();\n        if (salary != -1) {\n            sum = sum + salary;\n            count++;\n        }\n    }\n    if (count > 0) {\n        double average = sum / count;\n        System.out.println(\""Average salary: \"" + average);\n       // Process data until the sentinel is entered \n\n    } else {\n        System.out.println(\""No data\"");\n    }\n}\n       // Compute and print the average""}"
291,3.5,1.0,1.0,3.0,2017-04-05 20:35:55.542483,3,202,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""/**\n      Constructs a manager with a given name, annual salary and weekly bonus.\n      @param name the name of this employee\n      @param salary the annual salary\n      @param bonus the weekly bonus\n    */\npublic Manager(String name, double salary, double bonus) {\n    super(name, salary);\n    weeklyBonus = bonus;\n}\n"",""rating"":2},""code"":""double TaxReturn(double SalaryTax){\n  /*Write a java method that takes a person and returns their tax as below:\n1. For employees, if salary < $10,000, 2% of salary, else 5%\n2. For business owners, 10% of their profit\n3. 0 for veterans*/\n}""}"
292,1.0,1.0,1.0,5.0,2017-04-05 20:36:03.466676,13,203,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""public int compare(Object a, Object b) {\n    TimerTask t1 = (TimerTask) a;\n    TimerTask t2 = (TimerTask) b;\n    long diff = t1.nextTime - t2.nextTime;\n    if (diff < 0)\n        return -1;\n    else if (diff > 0)\n        return 1;\n    else\n        return 0;\n}\n"",""rating"":4},""code"":""int largDiff(int s){\nint[] array;\n// largest difference in array\narray = new int[3];\narray[0] = 1;\narray[1] = 4;\narray[2] = 7;\n\nint a = array[0];\nint b = array[1];\nint c = array[2];\n\nint d = b-a;\nint e = c-a;\nint f = c-b;\n  \n if (d > f){\n   return d;\n } else if( e > f){\n   return e;\n }else return f;\n}""}"
293,1.0,1.0,1.0,1.0,2017-04-05 20:36:11.616233,11,204,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String[] args) {\n    Employee[] staff = new Employee[3];\n    staff[0] = new HourlyEmployee(\""Morgan, Harry\"", 30);\n    staff[1] = new SalariedEmployee(\""Lin, Sally\"", 52000);\n    staff[2] = new Manager(\""Smith, Mary\"", 104000, 50);\n    Scanner in = new Scanner(System.in);\n    for (Employee e : staff) {\n        System.out.print(\""Hours worked by \"" + e.getName() + \"": \"");\n        int hours = in.nextInt();\n        System.out.println(\""Salary: \"" + e.weeklyPay(hours));\n    }\n}\n"",""rating"":5},""code"":""class Person{\n        String name;\n        int age;\n    }\n    class Employee extends Person{\n        double getSalary();\n    }\n    class BusinessOwner extends Person {\n        double getProfit();\n    }\n    class Veteran extends Person{\n        String veteran_id;\n    }\n\npublic static void main(String[] args) {\n    double sum = 0;\n    int count = 0;\n    double salary = 0;\n    System.out.print(\""Enter salaries, -1 to finish: \"");\n    Scanner in = new Scanner(System.in);\n    while (salary != -1) {\n        salary = in.nextDouble();\n        if (salary != -1) {\n            sum = sum + salary;\n            count++;\n        }\n    }\n    if (count > 0) {\n        double average = sum / count;\n        System.out.println(\""Average salary: \"" + average);\n       // Process data until the sentinel is entered \n\n    } else {\n        System.out.println(\""No data\"");\n    }\n}\n       // Compute and print the average""}"
294,2.0,1.0,1.0,1.0,2017-04-05 20:36:27.394803,4,,"double tax(Person p){
  
  Employee e = p.Employee;
  BusinessOwner b = p.BusinessOwner;
  Veteran v = p.Veteran ;
  double s =e.getSalary();
    double a =.getProfit();
  //For employees, if salary < $10,000, 2% of salary
  if (s < 10000)
  {
    s = 0.2 * s;
  }
 
}"
295,2.0,1.5,1.0,1.0,2017-04-05 20:36:28.656763,4,,"double tax(Person p){
  
  Employee e = p.Employee;
  BusinessOwner b = p.BusinessOwner;
  Veteran v = p.Veteran ;
  double s =e.getSalary();
    double a =.getProfit();
  //For employees, if salary < $10,000, 2% of salary
  if (s < 10000)
  {
    s = 0.2 * s;
  }
 
}"
296,2.0,1.5,1.5,1.0,2017-04-05 20:36:30.040173,4,,"double tax(Person p){
  
  Employee e = p.Employee;
  BusinessOwner b = p.BusinessOwner;
  Veteran v = p.Veteran ;
  double s =e.getSalary();
    double a =.getProfit();
  //For employees, if salary < $10,000, 2% of salary
  if (s < 10000)
  {
    s = 0.2 * s;
  }
 
}"
297,2.0,1.5,1.5,2.0,2017-04-05 20:36:31.584364,4,,"double tax(Person p){
  
  Employee e = p.Employee;
  BusinessOwner b = p.BusinessOwner;
  Veteran v = p.Veteran ;
  double s =e.getSalary();
    double a =.getProfit();
  //For employees, if salary < $10,000, 2% of salary
  if (s < 10000)
  {
    s = 0.2 * s;
  }
 
}"
298,1.0,1.0,1.0,1.0,2017-04-05 20:36:35.080753,11,205,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""public static void main(String[] args) {\n    double sum = 0;\n    int count = 0;\n    double salary = 0;\n    System.out.print(\""Enter salaries, -1 to finish: \"");\n    Scanner in = new Scanner(System.in);\n    while (salary != -1) {\n        salary = in.nextDouble();\n        if (salary != -1) {\n            sum = sum + salary;\n            count++;\n        }\n    }\n    if (count > 0) {\n        double average = sum / count;\n        System.out.println(\""Average salary: \"" + average);\n       // Process data until the sentinel is entered \n\n    } else {\n        System.out.println(\""No data\"");\n    }\n}\n       // Compute and print the average\n\n"",""rating"":4},""code"":""class Person{\n        String name;\n        int age;\n    }\n    class Employee extends Person{\n        double getSalary();\n    }\n    class BusinessOwner extends Person {\n        double getProfit();\n    }\n    class Veteran extends Person{\n        String veteran_id;\n    }\n\npublic static void main(String[] args) {\n    double sum = 0;\n    int count = 0;\n    double salary = 0;\n    System.out.print(\""Enter salaries, -1 to finish: \"");\n    Scanner in = new Scanner(System.in);\n    while (salary != -1) {\n        salary = in.nextDouble();\n        if (salary != -1) {\n            sum = sum + salary;\n            count++;\n        }\n    }\n    if (count > 0) {\n        double average = sum / count;\n        System.out.println(\""Average salary: \"" + average);\n       // Process data until the sentinel is entered \n\n    } else {\n        System.out.println(\""No data\"");\n    }\n}\n       // Compute and print the average""}"
299,3.5,1.0,1.0,3.0,2017-04-05 20:36:37.277332,3,206,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Constructs a salaried employee with a given name and annual salary.\n      @param name the name of this employee\n      @param salary the annual salary\n    */\npublic SalariedEmployee(String name, double salary) {\n    setName(name);\n    annualSalary = salary;\n}\n"",""rating"":2},""code"":""double TaxReturn(double SalaryTax){\n  /*Write a java method that takes a person and returns their tax as below:\n1. For employees, if salary < $10,000, 2% of salary, else 5%\n2. For business owners, 10% of their profit\n3. 0 for veterans*/\n}""}"
300,1.0,1.0,1.0,1.0,2017-04-05 20:36:40.768371,11,207,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""double value() {\n    // The value is obtained by evaluating the left and right\n    // operands and combining the values with the operator.\n    double x = left.value();\n    double y = right.value();\n    switch(op) {\n        case '+':\n            return x + y;\n        case '-':\n            return x - y;\n        case '*':\n            return x * y;\n        case '/':\n            return x / y;\n        // Bad operator!\n        default:\n            return Double.NaN;\n    }\n}\n"",""rating"":2},""code"":""class Person{\n        String name;\n        int age;\n    }\n    class Employee extends Person{\n        double getSalary();\n    }\n    class BusinessOwner extends Person {\n        double getProfit();\n    }\n    class Veteran extends Person{\n        String veteran_id;\n    }\n\npublic static void main(String[] args) {\n    double sum = 0;\n    int count = 0;\n    double salary = 0;\n    System.out.print(\""Enter salaries, -1 to finish: \"");\n    Scanner in = new Scanner(System.in);\n    while (salary != -1) {\n        salary = in.nextDouble();\n        if (salary != -1) {\n            sum = sum + salary;\n            count++;\n        }\n    }\n    if (count > 0) {\n        double average = sum / count;\n        System.out.println(\""Average salary: \"" + average);\n       // Process data until the sentinel is entered \n\n    } else {\n        System.out.println(\""No data\"");\n    }\n}\n       // Compute and print the average""}"
301,1.0,1.0,1.0,5.0,2017-04-05 20:36:41.962624,13,208,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static <E extends Comparable<E>> E max(E[] a) {\n    E largest = a[0];\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":3},""code"":""int largDiff(int s){\nint[] array;\n// largest difference in array\narray = new int[3];\narray[0] = 1;\narray[1] = 4;\narray[2] = 7;\n\nint a = array[0];\nint b = array[1];\nint c = array[2];\n\nint d = b-a;\nint e = c-a;\nint f = c-b;\n  \n if (d > f){\n   return d;\n } else if( e > f){\n   return e;\n }else return f;\n}""}"
302,3.5,1.0,1.0,3.0,2017-04-05 20:36:42.222097,3,209,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""/**\n      Gets the name of this employee.\n      @return the name \n   */\npublic String getName() {\n    return name;\n}\n"",""rating"":1},""code"":""double TaxReturn(double SalaryTax){\n  /*Write a java method that takes a person and returns their tax as below:\n1. For employees, if salary < $10,000, 2% of salary, else 5%\n2. For business owners, 10% of their profit\n3. 0 for veterans*/\n}""}"
303,1.0,1.0,1.0,1.0,2017-04-05 20:36:42.912254,11,210,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Constructs a salaried employee with a given name and annual salary.\n      @param name the name of this employee\n      @param salary the annual salary\n    */\npublic SalariedEmployee(String name, double salary) {\n    setName(name);\n    annualSalary = salary;\n}\n"",""rating"":4},""code"":""class Person{\n        String name;\n        int age;\n    }\n    class Employee extends Person{\n        double getSalary();\n    }\n    class BusinessOwner extends Person {\n        double getProfit();\n    }\n    class Veteran extends Person{\n        String veteran_id;\n    }\n\npublic static void main(String[] args) {\n    double sum = 0;\n    int count = 0;\n    double salary = 0;\n    System.out.print(\""Enter salaries, -1 to finish: \"");\n    Scanner in = new Scanner(System.in);\n    while (salary != -1) {\n        salary = in.nextDouble();\n        if (salary != -1) {\n            sum = sum + salary;\n            count++;\n        }\n    }\n    if (count > 0) {\n        double average = sum / count;\n        System.out.println(\""Average salary: \"" + average);\n       // Process data until the sentinel is entered \n\n    } else {\n        System.out.println(\""No data\"");\n    }\n}\n       // Compute and print the average""}"
304,1.0,1.0,1.0,5.0,2017-04-05 20:36:44.601037,13,211,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Computes the largest value of an array.\n      @param a the array\n      @return the largest value in a\n   */\npublic static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":4},""code"":""int largDiff(int s){\nint[] array;\n// largest difference in array\narray = new int[3];\narray[0] = 1;\narray[1] = 4;\narray[2] = 7;\n\nint a = array[0];\nint b = array[1];\nint c = array[2];\n\nint d = b-a;\nint e = c-a;\nint f = c-b;\n  \n if (d > f){\n   return d;\n } else if( e > f){\n   return e;\n }else return f;\n}""}"
305,1.0,1.0,1.0,1.0,2017-04-05 20:36:45.448077,11,212,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""public double weeklyPay(int hoursWorked) {\n    final int WEEKS_PER_YEAR = 52;\n    return annualSalary / WEEKS_PER_YEAR;\n}\n"",""rating"":1},""code"":""class Person{\n        String name;\n        int age;\n    }\n    class Employee extends Person{\n        double getSalary();\n    }\n    class BusinessOwner extends Person {\n        double getProfit();\n    }\n    class Veteran extends Person{\n        String veteran_id;\n    }\n\npublic static void main(String[] args) {\n    double sum = 0;\n    int count = 0;\n    double salary = 0;\n    System.out.print(\""Enter salaries, -1 to finish: \"");\n    Scanner in = new Scanner(System.in);\n    while (salary != -1) {\n        salary = in.nextDouble();\n        if (salary != -1) {\n            sum = sum + salary;\n            count++;\n        }\n    }\n    if (count > 0) {\n        double average = sum / count;\n        System.out.println(\""Average salary: \"" + average);\n       // Process data until the sentinel is entered \n\n    } else {\n        System.out.println(\""No data\"");\n    }\n}\n       // Compute and print the average""}"
306,3.5,1.0,1.0,3.0,2017-04-05 20:36:47.205178,3,213,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""double value(double xValue) {\n    // The value of the node is the number that it contains.\n    return number;\n}\n"",""rating"":1},""code"":""double TaxReturn(double SalaryTax){\n  /*Write a java method that takes a person and returns their tax as below:\n1. For employees, if salary < $10,000, 2% of salary, else 5%\n2. For business owners, 10% of their profit\n3. 0 for veterans*/\n}""}"
307,2.0,1.0,1.0,1.0,2017-04-05 20:36:54.506739,11,,"class Person{
        String name;
        int age;
    }
    class Employee extends Person{
        double getSalary();
    }
    class BusinessOwner extends Person {
        double getProfit();
    }
    class Veteran extends Person{
        String veteran_id;
    }

public static void main(String[] args) {
    double sum = 0;
    int count = 0;
    double salary = 0;
    System.out.print(""Enter salaries, -1 to finish: "");
    Scanner in = new Scanner(System.in);
    while (salary != -1) {
        salary = in.nextDouble();
        if (salary != -1) {
            sum = sum + salary;
            count++;
        }
    }
    if (count > 0) {
        double average = sum / count;
        System.out.println(""Average salary: "" + average);
       // Process data until the sentinel is entered 

    } else {
        System.out.println(""No data"");
    }
}
       // Compute and print the average"
308,2.0,2.0,1.0,1.0,2017-04-05 20:37:05.553932,11,,"class Person{
        String name;
        int age;
    }
    class Employee extends Person{
        double getSalary();
    }
    class BusinessOwner extends Person {
        double getProfit();
    }
    class Veteran extends Person{
        String veteran_id;
    }

public static void main(String[] args) {
    double sum = 0;
    int count = 0;
    double salary = 0;
    System.out.print(""Enter salaries, -1 to finish: "");
    Scanner in = new Scanner(System.in);
    while (salary != -1) {
        salary = in.nextDouble();
        if (salary != -1) {
            sum = sum + salary;
            count++;
        }
    }
    if (count > 0) {
        double average = sum / count;
        System.out.println(""Average salary: "" + average);
       // Process data until the sentinel is entered 

    } else {
        System.out.println(""No data"");
    }
}
       // Compute and print the average"
309,0.0,5.0,5.0,5.0,2017-04-05 20:37:06.391577,17,,"public int returnTax(Person p)
{
  Veteran test = new Veteran();
  BusinessOwner testb = new BusinessOwner()
  if(p.getClass()==test.getClass())
    return 0;
  else if(p.getClass()==testb.getClass())
  {
    return p.getProfit() * 0.1;
  }
  else if(p.getSalary() < 10000)
  {
    return p.getSalary() * 0.02;
  }
  else
    return p.getSalary() * 0.05;
  
  
}
"
310,0.0,0.0,5.0,5.0,2017-04-05 20:37:07.107615,17,,"public int returnTax(Person p)
{
  Veteran test = new Veteran();
  BusinessOwner testb = new BusinessOwner()
  if(p.getClass()==test.getClass())
    return 0;
  else if(p.getClass()==testb.getClass())
  {
    return p.getProfit() * 0.1;
  }
  else if(p.getSalary() < 10000)
  {
    return p.getSalary() * 0.02;
  }
  else
    return p.getSalary() * 0.05;
  
  
}
"
311,0.0,0.0,0.0,5.0,2017-04-05 20:37:08.000687,17,,"public int returnTax(Person p)
{
  Veteran test = new Veteran();
  BusinessOwner testb = new BusinessOwner()
  if(p.getClass()==test.getClass())
    return 0;
  else if(p.getClass()==testb.getClass())
  {
    return p.getProfit() * 0.1;
  }
  else if(p.getSalary() < 10000)
  {
    return p.getSalary() * 0.02;
  }
  else
    return p.getSalary() * 0.05;
  
  
}
"
312,2.0,1.5,1.5,2.0,2017-04-05 20:37:12.620468,4,214,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""/**\n      Constructs a manager with a given name, annual salary and weekly bonus.\n      @param name the name of this employee\n      @param salary the annual salary\n      @param bonus the weekly bonus\n    */\npublic Manager(String name, double salary, double bonus) {\n    super(name, salary);\n    weeklyBonus = bonus;\n}\n"",""rating"":4},""code"":""double tax(Person p){\n  \n  Employee e = p.Employee;\n\n  double s =e.getSalary();\n   \n  //For employees, if salary < $10,000, 2% of salary\n  if (s < 10000)\n  {\n    s = 0.2 * s;\n  }\n //For business owners, 10% of their profit\n}""}"
313,3.5,1.0,1.0,3.0,2017-04-05 20:37:21.916098,3,215,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""/**\n       * Finds the value of this function for the specified \n       * parameter value, x.\n       */\ndouble evaluate(double x) {\n    switch(functionCode) {\n        case SIN:\n            return Math.sin(x);\n        case COS:\n            return Math.cos(x);\n        case TAN:\n            return Math.tan(x);\n        case ABS:\n            return Math.abs(x);\n        case SQRT:\n            return Math.sqrt(x);\n        default:\n            return Math.log(x);\n    }\n}\n"",""rating"":2},""code"":""double TaxReturn(double SalaryTax){\n  /*Write a java method that takes a person and returns their tax as below:\n1. For employees, if salary < $10,000, 2% of salary, else 5%\n2. For business owners, 10% of their profit\n3. 0 for veterans*/\n}""}"
314,1.0,1.0,1.0,3.5,2017-04-05 20:37:29.160164,18,,"public double getdifference (x[])
{
  int max, min;
  //for loop to find max
}"
315,3.5,1.0,1.0,3.0,2017-04-05 20:37:29.204145,3,216,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""/**\n      Sets the name of this employee.\n      @param employeeName the new name \n   */\npublic void setName(String employeeName) {\n    name = employeeName;\n}\n"",""rating"":1},""code"":""double TaxReturn(double SalaryTax){\n  /*Write a java method that takes a person and returns their tax as below:\n1. For employees, if salary < $10,000, 2% of salary, else 5%\n2. For business owners, 10% of their profit\n3. 0 for veterans*/\n}""}"
316,0.5,1.0,1.0,3.5,2017-04-05 20:37:30.823719,18,,"public double getdifference (x[])
{
  int max, min;
  //for loop to find max
}"
317,0.5,0.5,1.0,3.5,2017-04-05 20:37:32.263165,18,,"public double getdifference (x[])
{
  int max, min;
  //for loop to find max
}"
318,0.5,0.5,0.0,3.5,2017-04-05 20:37:33.195415,18,,"public double getdifference (x[])
{
  int max, min;
  //for loop to find max
}"
319,0.5,0.5,0.5,3.5,2017-04-05 20:37:34.007120,18,,"public double getdifference (x[])
{
  int max, min;
  //for loop to find max
}"
320,3.5,1.0,1.0,3.0,2017-04-05 20:37:37.267556,3,217,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""double value(double xValue) {\n    // The value of the node is the value of x.\n    return xValue;\n}\n"",""rating"":1},""code"":""double TaxReturn(double SalaryTax){\n  /*Write a java method that takes a person and returns their tax as below:\n1. For employees, if salary < $10,000, 2% of salary, else 5%\n2. For business owners, 10% of their profit\n3. 0 for veterans*/\n}""}"
321,3.5,1.0,1.0,3.0,2017-04-05 20:37:42.354225,3,218,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""/**\n      Constructs an employee with an empty name.\n   */\npublic Employee() {\n    name = \""\"";\n}\n"",""rating"":1},""code"":""double TaxReturn(double SalaryTax){\n  /*Write a java method that takes a person and returns their tax as below:\n1. For employees, if salary < $10,000, 2% of salary, else 5%\n2. For business owners, 10% of their profit\n3. 0 for veterans*/\n}""}"
322,2.0,1.5,1.5,2.0,2017-04-05 20:37:45.676102,4,219,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""/**\n      Gets the name of this employee.\n      @return the name \n   */\npublic String getName() {\n    return name;\n}\n"",""rating"":4},""code"":""double tax(Person p){\n  \n  Employee e = p.Employee;\n\n  double s =e.getSalary();\n   \n  //For employees, if salary < $10,000, 2% of salary\n  if (s < 10000)\n  {\n    s = 0.2 * s;\n  }\n //For business owners, 10% of their profit\n}""}"
323,2.0,1.5,1.5,2.0,2017-04-05 20:37:54.587084,4,220,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""double value() {\n    // The value is the negative of the value of the operand.\n    double neg = operand.value();\n    return -neg;\n}\n"",""rating"":2},""code"":""double tax(Person p){\n  \n  Employee e = p.Employee;\n\n  double s =e.getSalary();\n   \n  //For employees, if salary < $10,000, 2% of salary\n  if (s < 10000)\n  {\n    s = 0.2 * s;\n  }\n //For business owners, 10% of their profit\n}""}"
324,1.0,1.0,1.0,1.0,2017-04-05 20:37:57.006749,1,221,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    double value;\n    do {\n        System.out.print(\""Enter a number >= 0: \"");\n        value = in.nextDouble();\n    } while (value < 0);\n    double root = Math.sqrt(value);\n    System.out.println(\""The square root of the number is \"" + root);\n}\n"",""rating"":3},""code"":""public static void main(String[] args)\n{\n    System.out.println(\""Please pass in the person you wish to tax: \"");\n  \tScanner scan = new Scanner();\n  \tObject person1 = scan.nextObject;\n  \tdouble tax = 0.00;\n  \tif(person1.equals(Employee))\n    {\n      double salary = person1.getSalary();\n      if(salary < 10000)\n      {\n        tax = salary*0.02;\n      }\n        \n    }\n   \tSystem.out.println(\""Expected: 0.0 2000.0 10000.0\"");\n  \n}\n""}"
325,2.0,1.5,1.5,2.0,2017-04-05 20:37:57.907800,4,222,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""/**\n      Constructs an employee with an empty name.\n   */\npublic Employee() {\n    name = \""\"";\n}\n"",""rating"":3},""code"":""double tax(Person p){\n  \n  Employee e = p.Employee;\n\n  double s =e.getSalary();\n   \n  //For employees, if salary < $10,000, 2% of salary\n  if (s < 10000)\n  {\n    s = 0.2 * s;\n  }\n //For business owners, 10% of their profit\n}""}"
326,1.0,1.0,1.0,1.0,2017-04-05 20:38:00.327123,1,223,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    System.out.println(\""Enter two numbers (such as 3.5 4.5): \"");\n    double x = in.nextDouble();\n    double y = in.nextDouble();\n    if (x == y) {\n        System.out.println(\""They are the same.\"");\n    } else {\n        System.out.print(\""The first number is \"");\n        if (x > y) {\n            System.out.println(\""larger\"");\n        } else {\n            System.out.println(\""smaller\"");\n        }\n        if (-0.01 < x - y && x - y < 0.01) {\n            System.out.println(\""The numbers are close together\"");\n        }\n        if (x == y + 1 || x == y - 1) {\n            System.out.println(\""The numbers are one apart\"");\n        }\n        if (x > 0 && y > 0 || x < 0 && y < 0) {\n            System.out.println(\""The numbers have the same sign\"");\n        } else {\n            System.out.println(\""The numbers have different signs\"");\n        }\n    }\n}\n"",""rating"":2},""code"":""public static void main(String[] args)\n{\n    System.out.println(\""Please pass in the person you wish to tax: \"");\n  \tScanner scan = new Scanner();\n  \tObject person1 = scan.nextObject;\n  \tdouble tax = 0.00;\n  \tif(person1.equals(Employee))\n    {\n      double salary = person1.getSalary();\n      if(salary < 10000)\n      {\n        tax = salary*0.02;\n      }\n        \n    }\n   \tSystem.out.println(\""Expected: 0.0 2000.0 10000.0\"");\n  \n}\n""}"
327,1.0,1.0,1.0,1.0,2017-04-05 20:38:05.104205,1,224,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""// BEGIN main\npublic static void main(String[] argv) {\n    double d = LogBase.log_base(10, 10000);\n    System.out.println(\""log10(10000) = \"" + d);\n}\n"",""rating"":2},""code"":""public static void main(String[] args)\n{\n    System.out.println(\""Please pass in the person you wish to tax: \"");\n  \tScanner scan = new Scanner();\n  \tObject person1 = scan.nextObject;\n  \tdouble tax = 0.00;\n  \tif(person1.equals(Employee))\n    {\n      double salary = person1.getSalary();\n      if(salary < 10000)\n      {\n        tax = salary*0.02;\n      }\n        \n    }\n   \tSystem.out.println(\""Expected: 0.0 2000.0 10000.0\"");\n  \n}\n""}"
328,1.0,1.0,1.0,1.0,2017-04-05 20:38:07.852669,1,225,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Reads all data.\n      @param in the scanner that scans the data\n   */\nprivate void readData(Scanner in) throws BadDataException {\n    if (!in.hasNextInt()) {\n        throw new BadDataException(\""Length expected\"");\n    }\n    int numberOfValues = in.nextInt();\n    data = new double[numberOfValues];\n    for (int i = 0; i < numberOfValues; i++) {\n        readValue(in, i);\n    }\n    if (in.hasNext()) {\n        throw new BadDataException(\""End of file expected\"");\n    }\n}\n"",""rating"":3},""code"":""public static void main(String[] args)\n{\n    System.out.println(\""Please pass in the person you wish to tax: \"");\n  \tScanner scan = new Scanner();\n  \tObject person1 = scan.nextObject;\n  \tdouble tax = 0.00;\n  \tif(person1.equals(Employee))\n    {\n      double salary = person1.getSalary();\n      if(salary < 10000)\n      {\n        tax = salary*0.02;\n      }\n        \n    }\n   \tSystem.out.println(\""Expected: 0.0 2000.0 10000.0\"");\n  \n}\n""}"
329,2.0,1.5,1.5,2.0,2017-04-05 20:38:12.028437,4,226,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""double peek() {\n    return ((Double) s.peek()).doubleValue();\n}\n"",""rating"":3},""code"":""double tax(Person p){\n  \n  Employee e = p.Employee;\n\n  double s =e.getSalary();\n   \n  //For employees, if salary < $10,000, 2% of salary\n  if (s < 10000)\n  {\n    s = 0.2 * s;\n  }\n //For business owners, 10% of their profit\n}""}"
330,3.5,1.0,1.0,3.0,2017-04-05 20:38:20.746888,3,227,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""double value(double xValue) {\n    // The value is obtained by evaluating the left and right\n    // operands and combining the values with the operator.\n    double x = left.value(xValue);\n    double y = right.value(xValue);\n    switch(op) {\n        case '+':\n            return x + y;\n        case '-':\n            return x - y;\n        case '*':\n            return x * y;\n        case '/':\n            return x / y;\n        // Bad operator!\n        default:\n            return Double.NaN;\n    }\n}\n"",""rating"":3},""code"":""double TaxReturn(double SalaryTax){\n  /*Write a java method that takes a person and returns their tax as below:\n1. For employees, if salary < $10,000, 2% of salary, else 5%\n2. For business owners, 10% of their profit\n3. 0 for veterans*/\n}""}"
331,2.0,1.5,1.5,2.0,2017-04-05 20:38:20.801731,4,228,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""/**\n      Constructs a salaried employee with a given name and annual salary.\n      @param name the name of this employee\n      @param salary the annual salary\n    */\npublic SalariedEmployee(String name, double salary) {\n    setName(name);\n    annualSalary = salary;\n}\n"",""rating"":4},""code"":""double tax(Person p){\n  \n  Employee e = p.Employee;\n\n  double s =e.getSalary();\n   \n  //For employees, if salary < $10,000, 2% of salary\n  if (s < 10000)\n  {\n    s = 0.2 * s;\n  }\n //For business owners, 10% of their profit\n}""}"
332,2.0,1.5,1.5,2.0,2017-04-05 20:38:26.931830,4,229,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""double value() {\n    // The value is obtained by evaluating the left and right\n    // operands and combining the values with the operator.\n    double x = left.value();\n    double y = right.value();\n    switch(op) {\n        case '+':\n            return x + y;\n        case '-':\n            return x - y;\n        case '*':\n            return x * y;\n        case '/':\n            return x / y;\n        // Bad operator!\n        default:\n            return Double.NaN;\n    }\n}\n"",""rating"":2},""code"":""double tax(Person p){\n  \n  Employee e = p.Employee;\n\n  double s =e.getSalary();\n   \n  //For employees, if salary < $10,000, 2% of salary\n  if (s < 10000)\n  {\n    s = 0.2 * s;\n  }\n //For business owners, 10% of their profit\n}""}"
333,1.0,1.0,1.0,5.0,2017-04-05 20:38:38.853406,13,230,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""public static int minWasted(int[] items, int itemNum, int capLeft) {\n    int result = 0;\n    if (itemNum >= items.length)\n        result = capLeft;\n    else if (capLeft == 0)\n        result = 0;\n    else {\n        int minWithout = minWasted(items, itemNum + 1, capLeft);\n        if (capLeft <= items[itemNum]) {\n            int minWith = minWasted(items, itemNum + 1, capLeft - items[itemNum]);\n            result = Math.min(minWith, minWithout);\n        } else\n            result = minWithout;\n    }\n    return result;\n}\n"",""rating"":4},""code"":""int largDiff(int s){\nint[] array;\n// largest difference in array\narray = new int[s];\narray[0] = 1;\narray[1] = 4;\narray[2] = 7;\n\nint a = array[0];\nint b = array[1];\nint c = array[2];\n\nint d = b-a;\nint e = c-a;\nint f = c-b;\n  \n if (d > f){\n   return d;\n } else if( e > f){\n   return e;\n }else return f;\n}""}"
334,1.0,1.0,1.0,5.0,2017-04-05 20:38:40.158344,13,231,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""int countEmptyBlock(int r, int c) {\n    // Find the size of one empty region on the board; recursive routine called by obviousBlockExists.\n    if (blockCheck[r][c] == blockCheckCt || board.getColor(r, c) != null)\n        return 0;\n    int c1 = c, c2 = c;\n    while (c1 > 0 && blockCheck[r][c1 - 1] < blockCheckCt && board.getColor(r, c1 - 1) == null) c1--;\n    while (c2 < cols - 1 && blockCheck[r][c2 + 1] < blockCheckCt && board.getColor(r, c2 + 1) == null) c2++;\n    for (int i = c1; i <= c2; i++) blockCheck[r][i] = blockCheckCt;\n    int ct = c2 - c1 + 1;\n    if (r > 0)\n        for (int i = c1; i <= c2; i++) ct += countEmptyBlock(r - 1, i);\n    if (r < rows - 1)\n        for (int i = c1; i <= c2; i++) ct += countEmptyBlock(r + 1, i);\n    return ct;\n}\n"",""rating"":5},""code"":""int largDiff(int s){\nint[] array;\n// largest difference in array\narray = new int[s];\narray[0] = 1;\narray[1] = 4;\narray[2] = 7;\n\nint a = array[0];\nint b = array[1];\nint c = array[2];\n\nint d = b-a;\nint e = c-a;\nint f = c-b;\n  \n if (d > f){\n   return d;\n } else if( e > f){\n   return e;\n }else return f;\n}""}"
335,3.5,1.0,1.0,3.0,2017-04-05 20:38:41.659570,3,232,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""double value(double xValue) {\n    // The value is the negative of the value of the operand.\n    double neg = operand.value(xValue);\n    return -neg;\n}\n"",""rating"":1},""code"":""double TaxReturn(double SalaryTax){\n  /*Write a java method that takes a person and returns their tax as below:\n1. For employees, if salary < $10,000, 2% of salary, else 5%\n2. For business owners, 10% of their profit\n3. 0 for veterans*/\n}""}"
336,1.0,1.0,1.0,5.0,2017-04-05 20:38:41.670167,13,233,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static <E extends Comparable<E>> E max(E[] a) {\n    E largest = a[0];\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":5},""code"":""int largDiff(int s){\nint[] array;\n// largest difference in array\narray = new int[s];\narray[0] = 1;\narray[1] = 4;\narray[2] = 7;\n\nint a = array[0];\nint b = array[1];\nint c = array[2];\n\nint d = b-a;\nint e = c-a;\nint f = c-b;\n  \n if (d > f){\n   return d;\n } else if( e > f){\n   return e;\n }else return f;\n}""}"
337,2.0,1.5,1.5,2.0,2017-04-05 20:38:42.786225,4,234,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Sets the name of this employee.\n      @param employeeName the new name \n   */\npublic void setName(String employeeName) {\n    name = employeeName;\n}\n"",""rating"":2},""code"":""double tax(Person p){\n  \n  Employee e = p.Employee;\n\n  double s =e.getSalary();\n   \n  //For employees, if salary < $10,000, 2% of salary\n  if (s < 10000)\n  {\n    s = 0.2 * s;\n  }\n //For business owners, 10% of their profit\n}""}"
338,1.0,1.0,1.0,5.0,2017-04-05 20:38:49.954118,13,235,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""public int compare(Object a, Object b) {\n    TimerTask t1 = (TimerTask) a;\n    TimerTask t2 = (TimerTask) b;\n    long diff = t1.nextTime - t2.nextTime;\n    if (diff < 0)\n        return -1;\n    else if (diff > 0)\n        return 1;\n    else\n        return 0;\n}\n"",""rating"":4},""code"":""int largDiff(int s){\nint[] array;\n// largest difference in array\narray = new int[s];\narray[0] = 1;\narray[1] = 4;\narray[2] = 7;\n\nint a = array[0];\nint b = array[1];\nint c = array[2];\n\nint d = b-a;\nint e = c-a;\nint f = c-b;\n  \n if (d > f){\n   return d;\n } else if( e > f){\n   return e;\n }else return f;\n}""}"
339,2.0,1.5,1.5,2.0,2017-04-05 20:38:56.994157,4,236,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""double value(double xValue) {\n    // The value is obtained by evaluating the left and right\n    // operands and combining the values with the operator.\n    double x = left.value(xValue);\n    double y = right.value(xValue);\n    switch(op) {\n        case '+':\n            return x + y;\n        case '-':\n            return x - y;\n        case '*':\n            return x * y;\n        case '/':\n            return x / y;\n        // Bad operator!\n        default:\n            return Double.NaN;\n    }\n}\n"",""rating"":1},""code"":""double tax(Person p){\n  \n  Employee e = p.Employee;\n\n  double s =e.getSalary();\n   \n  //For employees, if salary < $10,000, 2% of salary\n  if (s < 10000)\n  {\n    s = 0.2 * s;\n  }\n //For business owners, 10% of their profit\n}""}"
340,2.0,1.5,1.5,2.0,2017-04-05 20:38:59.785551,4,237,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""double value(double xValue) {\n    // The value is obtained by evaluating the left and right\n    // operands and combining the values with the operator.\n    double x = left.value(xValue);\n    double y = right.value(xValue);\n    switch(op) {\n        case '+':\n            return x + y;\n        case '-':\n            return x - y;\n        case '*':\n            return x * y;\n        case '/':\n            return x / y;\n        // Bad operator!\n        default:\n            return Double.NaN;\n    }\n}\n"",""rating"":1},""code"":""double tax(Person p){\n  \n  Employee e = p.Employee;\n\n  double s =e.getSalary();\n   \n  //For employees, if salary < $10,000, 2% of salary\n  if (s < 10000)\n  {\n    s = 0.2 * s;\n  }\n //For business owners, 10% of their profit\n}""}"
341,1.0,1.0,1.0,1.0,2017-04-05 20:39:16.642095,14,238,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""public static void main(String[] args) {\n    String input = JOptionPane.showInputDialog(\""Enter price:\"");\n    double price = Double.parseDouble(input);\n    final double TAX_RATE = 8.5;\n    price = price * (1 + TAX_RATE / 100);\n    JOptionPane.showMessageDialog(null, \""Price after tax: \"" + price);\n}\n"",""rating"":4},""code"":""\ntax()\n{\n  \n  if(Person.getSalary() < 10000)\n  {\n    System.out.println(\""Tax is 2% of your salary: \"" + (Person.getSalary())*0.02);\n    \n  }\n  else\n  {\n    System.out.println(\""Tax is 5% of your salary : \"" + (Person.getSalary())*0.05);\n  }\n  \n  if(Person == BusinessOwner)\n  {\n    System.out.println(\""\"")\n  }\n  \n}""}"
342,5.0,1.0,1.0,3.0,2017-04-05 20:39:16.991699,3,,"double TaxReturn(double SalaryTax){
  /*Write a java method that takes a person and returns their tax as below:
1. For employees, if salary < $10,000, 2% of salary, else 5%
2. For business owners, 10% of their profit
3. 0 for veterans*/
}"
343,1.0,1.0,1.0,1.0,2017-04-05 20:39:17.640941,14,239,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""void doFile(Reader is) throws IOException {\n    int c;\n    while ((c = is.read()) != -1) {\n        System.out.print((char) c);\n    }\n}\n"",""rating"":4},""code"":""\ntax()\n{\n  \n  if(Person.getSalary() < 10000)\n  {\n    System.out.println(\""Tax is 2% of your salary: \"" + (Person.getSalary())*0.02);\n    \n  }\n  else\n  {\n    System.out.println(\""Tax is 5% of your salary : \"" + (Person.getSalary())*0.05);\n  }\n  \n  if(Person == BusinessOwner)\n  {\n    System.out.println(\""\"")\n  }\n  \n}""}"
344,4.5,1.0,1.0,3.0,2017-04-05 20:39:17.759349,3,,"double TaxReturn(double SalaryTax){
  /*Write a java method that takes a person and returns their tax as below:
1. For employees, if salary < $10,000, 2% of salary, else 5%
2. For business owners, 10% of their profit
3. 0 for veterans*/
}"
345,1.0,1.0,1.0,5.0,2017-04-05 20:39:17.894975,13,240,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""/**\n         * Return the largest item that has been entered.\n         * The return value will be -infinity if no numbers have been entered. \n         */\npublic double getMax() {\n    return max;\n}\n"",""rating"":5},""code"":""int largDiff(int s){\nint[] array;\n// largest difference in array\narray = new int[s];\narray[0] = 1;\narray[1] = 4;\narray[2] = 7;\n\nint a = array[0];\nint b = array[1];\nint c = array[2];\n\nint d = b-a;\nint e = c-a;\nint f = c-b;\n  \n if (d > f){\n   return d;\n } else if( e > f){\n   return e;\n }else return f;\n}""}"
346,1.0,1.0,1.0,1.0,2017-04-05 20:39:18.542964,14,241,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":4},""code"":""\ntax()\n{\n  \n  if(Person.getSalary() < 10000)\n  {\n    System.out.println(\""Tax is 2% of your salary: \"" + (Person.getSalary())*0.02);\n    \n  }\n  else\n  {\n    System.out.println(\""Tax is 5% of your salary : \"" + (Person.getSalary())*0.05);\n  }\n  \n  if(Person == BusinessOwner)\n  {\n    System.out.println(\""\"")\n  }\n  \n}""}"
347,1.0,1.0,1.0,1.0,2017-04-05 20:39:21.247701,14,242,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""/**\n         * Return an array containing all the legal CheckersMoves\n         * for the specified player on the current board.  If the player\n         * has no legal moves, null is returned.  The value of player\n         * should be one of the constants RED or BLACK; if not, null\n         * is returned.  If the returned value is non-null, it consists\n         * entirely of jump moves or entirely of regular moves, since\n         * if the player can jump, only jumps are legal moves.\n         */\nCheckersMove[] getLegalMoves(int player) {\n    if (player != RED && player != BLACK)\n        return null;\n    // The constant representing a King belonging to player.\n    int playerKing;\n    if (player == RED)\n        playerKing = RED_KING;\n    else\n        playerKing = BLACK_KING;\n    // Moves will be stored in this list.\n    ArrayList<CheckersMove> moves = new ArrayList<CheckersMove>();\n    for (int row = 0; row < 8; row++) {\n        for (int col = 0; col < 8; col++) {\n            if (board[row][col] == player || board[row][col] == playerKing) {\n                if (canJump(player, row, col, row + 1, col + 1, row + 2, col + 2))\n                    moves.add(new CheckersMove(row, col, row + 2, col + 2));\n                if (canJump(player, row, col, row - 1, col + 1, row - 2, col + 2))\n                    moves.add(new CheckersMove(row, col, row - 2, col + 2));\n                if (canJump(player, row, col, row + 1, col - 1, row + 2, col - 2))\n                    moves.add(new CheckersMove(row, col, row + 2, col - 2));\n                if (canJump(player, row, col, row - 1, col - 1, row - 2, col - 2))\n                    moves.add(new CheckersMove(row, col, row - 2, col - 2));\n            }\n        }\n    }\n    if (moves.size() == 0) {\n        for (int row = 0; row < 8; row++) {\n            for (int col = 0; col < 8; col++) {\n                if (board[row][col] == player || board[row][col] == playerKing) {\n                    if (canMove(player, row, col, row + 1, col + 1))\n                        moves.add(new CheckersMove(row, col, row + 1, col + 1));\n                    if (canMove(player, row, col, row - 1, col + 1))\n                        moves.add(new CheckersMove(row, col, row - 1, col + 1));\n                    if (canMove(player, row, col, row + 1, col - 1))\n                        moves.add(new CheckersMove(row, col, row + 1, col - 1));\n                    if (canMove(player, row, col, row - 1, col - 1))\n                        moves.add(new CheckersMove(row, col, row - 1, col - 1));\n                }\n            }\n        }\n    }\n    if (moves.size() == 0)\n        return null;\n    else {\n        CheckersMove[] moveArray = new CheckersMove[moves.size()];\n        for (int i = 0; i < moves.size(); i++) moveArray[i] = moves.get(i);\n        return moveArray;\n    }\n}\n             /*  First, check for any possible jumps.  Look at each square on the board.\n             If that square contains one of the player's pieces, look at a possible\n             jump in each of the four directions from that square.  If there is \n             a legal jump in that direction, put it in the moves ArrayList.\n             */\n\n             /*  If any jump moves were found, then the user must jump, so we don't \n             add any regular moves.  However, if no jumps were found, check for\n             any legal regular moves.  Look at each square on the board.\n             If that square contains one of the player's pieces, look at a possible\n             move in each of the four directions from that square.  If there is \n             a legal move in that direction, put it in the moves ArrayList.\n             */\n\n             /* If no legal moves have been found, return null.  Otherwise, create\n             an array just big enough to hold all the legal moves, copy the\n             legal moves from the ArrayList into the array, and return the array. */\n\n"",""rating"":5},""code"":""\ntax()\n{\n  \n  if(Person.getSalary() < 10000)\n  {\n    System.out.println(\""Tax is 2% of your salary: \"" + (Person.getSalary())*0.02);\n    \n  }\n  else\n  {\n    System.out.println(\""Tax is 5% of your salary : \"" + (Person.getSalary())*0.05);\n  }\n  \n  if(Person == BusinessOwner)\n  {\n    System.out.println(\""\"")\n  }\n  \n}""}"
348,1.0,1.0,1.0,5.0,2017-04-05 20:39:22.446276,13,243,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""public static int factorial(int n) {\n    int result = 1;\n    for (int i = 2; i <= n; i++) result *= i;\n    return result;\n}\n"",""rating"":1},""code"":""int largDiff(int s){\nint[] array;\n// largest difference in array\narray = new int[s];\narray[0] = 1;\narray[1] = 4;\narray[2] = 7;\n\nint a = array[0];\nint b = array[1];\nint c = array[2];\n\nint d = b-a;\nint e = c-a;\nint f = c-b;\n  \n if (d > f){\n   return d;\n } else if( e > f){\n   return e;\n }else return f;\n}""}"
349,2.0,1.5,1.5,2.0,2017-04-05 20:39:23.346658,4,244,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""double value(double xValue) {\n    // The value is obtained by evaluating the left and right\n    // operands and combining the values with the operator.\n    double x = left.value(xValue);\n    double y = right.value(xValue);\n    switch(op) {\n        case '+':\n            return x + y;\n        case '-':\n            return x - y;\n        case '*':\n            return x * y;\n        case '/':\n            return x / y;\n        // Bad operator!\n        default:\n            return Double.NaN;\n    }\n}\n"",""rating"":1},""code"":""double tax(Person p){\n  \n  Employee e = p.Employee;\n\n  double s =e.getSalary();\n   \n  //For employees, if salary < $10,000, 2% of salary\n  if (s < 10000)\n  {\n    s = 0.2 * s;\n  }\n //For business owners, 10% of their profit\n}""}"
350,1.0,1.0,1.0,5.0,2017-04-05 20:39:24.991217,13,245,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""void doFile(Reader is) throws IOException {\n    int c;\n    while ((c = is.read()) != -1) {\n        System.out.print((char) c);\n    }\n}\n"",""rating"":1},""code"":""int largDiff(int s){\nint[] array;\n// largest difference in array\narray = new int[s];\narray[0] = 1;\narray[1] = 4;\narray[2] = 7;\n\nint a = array[0];\nint b = array[1];\nint c = array[2];\n\nint d = b-a;\nint e = c-a;\nint f = c-b;\n  \n if (d > f){\n   return d;\n } else if( e > f){\n   return e;\n }else return f;\n}""}"
351,4.5,3.0,1.0,3.0,2017-04-05 20:39:27.430063,3,,"double TaxReturn(double SalaryTax){
  /*Write a java method that takes a person and returns their tax as below:
1. For employees, if salary < $10,000, 2% of salary, else 5%
2. For business owners, 10% of their profit
3. 0 for veterans*/
}"
352,2.0,1.5,1.5,2.0,2017-04-05 20:39:30.195916,4,246,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""double value() {\n    // The value is obtained by evaluating the left and right\n    // operands and combining the values with the operator.\n    double x = left.value();\n    double y = right.value();\n    switch(op) {\n        case '+':\n            return x + y;\n        case '-':\n            return x - y;\n        case '*':\n            return x * y;\n        case '/':\n            return x / y;\n        // Bad operator!\n        default:\n            return Double.NaN;\n    }\n}\n"",""rating"":1},""code"":""double tax(Person p){\n  \n  Employee e = p.Employee;\n\n  double s =e.getSalary();\n   \n  //For employees, if salary < $10,000, 2% of salary\n  if (s < 10000)\n  {\n    s = 0.2 * s;\n  }\n //For business owners, 10% of their profit\n}""}"
353,1.0,1.0,1.0,5.0,2017-04-05 20:39:30.902058,13,247,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""private static int numNeighbors(boolean[][] world, int row, int col) {\n    int num = world[row][col] ? -1 : 0;\n    for (int r = row - 1; r <= row + 1; r++) for (int c = col - 1; c <= col + 1; c++) if (inbounds(world, r, c) && world[r][c])\n        num++;\n    return num;\n}\n"",""rating"":3},""code"":""int largDiff(int s){\nint[] array;\n// largest difference in array\narray = new int[s];\narray[0] = 1;\narray[1] = 4;\narray[2] = 7;\n\nint a = array[0];\nint b = array[1];\nint c = array[2];\n\nint d = b-a;\nint e = c-a;\nint f = c-b;\n  \n if (d > f){\n   return d;\n } else if( e > f){\n   return e;\n }else return f;\n}""}"
354,2.0,1.5,1.5,2.0,2017-04-05 20:39:39.442470,4,248,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""/**\n      Constructs an employee with an empty name.\n   */\npublic Employee() {\n    name = \""\"";\n}\n"",""rating"":2},""code"":""double tax(Person p){\n  \n  Employee e = p.Employee;\n\n  double s =e.getSalary();\n   \n  //For employees, if salary < $10,000, 2% of salary\n  if (s < 10000)\n  {\n    s = 0.2 * s;\n  }\n //For business owners, 10% of their profit\n}""}"
355,4.5,3.0,1.0,3.0,2017-04-05 20:39:44.477046,3,249,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""/**\n       * Finds the value of this function for the specified \n       * parameter value, x.\n       */\ndouble evaluate(double x) {\n    switch(functionCode) {\n        case SIN:\n            return Math.sin(x);\n        case COS:\n            return Math.cos(x);\n        case TAN:\n            return Math.tan(x);\n        case ABS:\n            return Math.abs(x);\n        case SQRT:\n            return Math.sqrt(x);\n        default:\n            return Math.log(x);\n    }\n}\n"",""rating"":2},""code"":""double TaxReturn(double SalaryTax){\n  /*Write a java method that takes a person and returns their tax as below:\n1. For employees, if salary < $10,000, 2% of salary, else 5%\n2. For business owners, 10% of their profit\n3. 0 for veterans*/\n}""}"
356,2.0,1.5,1.5,2.0,2017-04-05 20:39:46.448739,4,250,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""double value() {\n    // The value is the negative of the value of the operand.\n    double neg = operand.value();\n    return -neg;\n}\n"",""rating"":1},""code"":""double tax(Person p){\n  \n  Employee e = p.Employee;\n\n  double s =e.getSalary();\n   \n  //For employees, if salary < $10,000, 2% of salary\n  if (s < 10000)\n  {\n    s = 0.2 * s;\n  }\n //For business owners, 10% of their profit\n}""}"
357,4.5,3.0,1.0,3.0,2017-04-05 20:39:46.734513,3,251,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""/**\n      Gets the name of this employee.\n      @return the name \n   */\npublic String getName() {\n    return name;\n}\n"",""rating"":1},""code"":""double TaxReturn(double SalaryTax){\n  /*Write a java method that takes a person and returns their tax as below:\n1. For employees, if salary < $10,000, 2% of salary, else 5%\n2. For business owners, 10% of their profit\n3. 0 for veterans*/\n}""}"
358,4.5,3.0,1.0,3.0,2017-04-05 20:39:53.337751,3,252,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""double value(double xValue) {\n    // The value is obtained by evaluating the left and right\n    // operands and combining the values with the operator.\n    double x = left.value(xValue);\n    double y = right.value(xValue);\n    switch(op) {\n        case '+':\n            return x + y;\n        case '-':\n            return x - y;\n        case '*':\n            return x * y;\n        case '/':\n            return x / y;\n        // Bad operator!\n        default:\n            return Double.NaN;\n    }\n}\n"",""rating"":3},""code"":""double TaxReturn(double SalaryTax){\n  /*Write a java method that takes a person and returns their tax as below:\n1. For employees, if salary < $10,000, 2% of salary, else 5%\n2. For business owners, 10% of their profit\n3. 0 for veterans*/\n}""}"
359,2.0,1.5,1.5,2.0,2017-04-05 20:39:54.792865,4,253,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Sets the name of this employee.\n      @param employeeName the new name \n   */\npublic void setName(String employeeName) {\n    name = employeeName;\n}\n"",""rating"":1},""code"":""double tax(Person p){\n  \n  Employee e = p.Employee;\n\n  double s =e.getSalary();\n   \n  //For employees, if salary < $10,000, 2% of salary\n  if (s < 10000)\n  {\n    s = 0.2 * s;\n  }\n //For business owners, 10% of their profit\n}""}"
360,4.5,3.0,1.0,3.0,2017-04-05 20:40:00.674232,3,254,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""/**\n      Constructs a manager with a given name, annual salary and weekly bonus.\n      @param name the name of this employee\n      @param salary the annual salary\n      @param bonus the weekly bonus\n    */\npublic Manager(String name, double salary, double bonus) {\n    super(name, salary);\n    weeklyBonus = bonus;\n}\n"",""rating"":2},""code"":""double TaxReturn(double SalaryTax){\n  /*Write a java method that takes a person and returns their tax as below:\n1. For employees, if salary < $10,000, 2% of salary, else 5%\n2. For business owners, 10% of their profit\n3. 0 for veterans*/\n}""}"
361,4.5,3.0,1.0,3.0,2017-04-05 20:40:19.282741,3,255,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""/**\n      Sets the name of this employee.\n      @param employeeName the new name \n   */\npublic void setName(String employeeName) {\n    name = employeeName;\n}\n"",""rating"":1},""code"":""double TaxReturn(double SalaryTax){\n  /*Write a java method that takes a person and returns their tax as below:\n1. For employees, if salary < $10,000, 2% of salary, else 5%\n2. For business owners, 10% of their profit\n3. 0 for veterans*/\n}""}"
362,4.5,3.0,1.0,3.0,2017-04-05 20:40:21.453203,3,256,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""/**\n      Constructs an employee with an empty name.\n   */\npublic Employee() {\n    name = \""\"";\n}\n"",""rating"":1},""code"":""double TaxReturn(double SalaryTax){\n  /*Write a java method that takes a person and returns their tax as below:\n1. For employees, if salary < $10,000, 2% of salary, else 5%\n2. For business owners, 10% of their profit\n3. 0 for veterans*/\n}""}"
363,4.5,3.0,1.0,3.0,2017-04-05 20:40:26.957096,3,257,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Constructs a salaried employee with a given name and annual salary.\n      @param name the name of this employee\n      @param salary the annual salary\n    */\npublic SalariedEmployee(String name, double salary) {\n    setName(name);\n    annualSalary = salary;\n}\n"",""rating"":3},""code"":""double TaxReturn(double SalaryTax){\n  /*Write a java method that takes a person and returns their tax as below:\n1. For employees, if salary < $10,000, 2% of salary, else 5%\n2. For business owners, 10% of their profit\n3. 0 for veterans*/\n}""}"
364,4.5,3.0,1.0,3.0,2017-04-05 20:40:30.265337,3,258,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""double value(double xValue) {\n    // The value of the node is the number that it contains.\n    return number;\n}\n"",""rating"":2},""code"":""double TaxReturn(double SalaryTax){\n  /*Write a java method that takes a person and returns their tax as below:\n1. For employees, if salary < $10,000, 2% of salary, else 5%\n2. For business owners, 10% of their profit\n3. 0 for veterans*/\n}""}"
365,4.5,3.0,1.0,3.0,2017-04-05 20:40:36.969369,3,259,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""double value(double xValue) {\n    // The value of the node is the value of x.\n    return xValue;\n}\n"",""rating"":1},""code"":""double TaxReturn(double SalaryTax){\n  /*Write a java method that takes a person and returns their tax as below:\n1. For employees, if salary < $10,000, 2% of salary, else 5%\n2. For business owners, 10% of their profit\n3. 0 for veterans*/\n}""}"
366,1.0,1.0,1.0,1.0,2017-04-05 20:40:45.840389,15,260,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""/**\n      Reads one data value.\n      @param in the scanner that scans the data\n      @param i the position of the value to read\n   */\nprivate void readValue(Scanner in, int i) throws BadDataException {\n    if (!in.hasNextDouble()) {\n        throw new BadDataException(\""Data value expected\"");\n    }\n    data[i] = in.nextDouble();\n}\n"",""rating"":3},""code"":""public static void main(String[] args)\n{\n    System.out.println(\""Please pass in the person you wish to tax: \"");\n  \tScanner scan = new Scanner();\n  \tObject person1 = scan.nextObject;\n  \tdouble tax = 0.00;\n  \tif(person1.equals(Employee))\n    {\n      double salary = person1.getSalary();\n      if(salary < 10000)\n      {\n        tax = salary*0.02;\n      }\n        \n    }\n   \tSystem.out.println(\""Expected: 0.0 2000.0 10000.0\"");\n  \n}\n""}"
367,1.0,1.0,1.0,1.0,2017-04-05 20:40:47.620493,5,261,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Constructs a salaried employee with a given name and annual salary.\n      @param name the name of this employee\n      @param salary the annual salary\n    */\npublic SalariedEmployee(String name, double salary) {\n    setName(name);\n    annualSalary = salary;\n}\n"",""rating"":5},""code"":""/**\nWrite a java method that takes a person and returns their tax as below:\n1. For employees, if salary < $10,000, 2% of salary, else 5%\n2. For business owners, 10% of their profit\n3. 0 for veterans\n**/\npublic static double tax(Employees p){\n  \tdouble salary=p.getSalary();\n  \tdouble tax=0;\n\tif(salary<10000){\n      tax=0.02;\n    }\n\telse{\n  \t\ttax=0.05;\n\t}\n\treturn tax;\n}""}"
368,1.0,1.0,1.0,1.0,2017-04-05 20:40:55.889650,5,262,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""/**\n     * Skips whitespace characters and then reads a value of type double from input.  Any additional characters on\n     * the current line of input are retained, and will be read by the next input operation.  When using standard IO,\n     * this will not produce an error; the user will be prompted repeatedly for input until a legal value\n     * is input.  In other cases, an IllegalArgumentException will be thrown if a legal value is not found.\n     */\npublic static double getDouble() {\n    double x = 0.0;\n    while (true) {\n        String str = readRealString();\n        if (str == null) {\n            errorMessage(\""Floating point number not found.\"", \""Real number in the range \"" + (-Double.MAX_VALUE) + \"" to \"" + Double.MAX_VALUE);\n        } else {\n            try {\n                x = Double.parseDouble(str);\n            } catch (NumberFormatException e) {\n                errorMessage(\""Illegal floating point input, \"" + str + \"".\"", \""Real number in the range \"" + (-Double.MAX_VALUE) + \"" to \"" + Double.MAX_VALUE);\n                continue;\n            }\n            if (Double.isInfinite(x)) {\n                errorMessage(\""Floating point input outside of legal range, \"" + str + \"".\"", \""Real number in the range \"" + (-Double.MAX_VALUE) + \"" to \"" + Double.MAX_VALUE);\n                continue;\n            }\n            break;\n        }\n    }\n    inputErrorCount = 0;\n    return x;\n}\n"",""rating"":5},""code"":""/**\nWrite a java method that takes a person and returns their tax as below:\n1. For employees, if salary < $10,000, 2% of salary, else 5%\n2. For business owners, 10% of their profit\n3. 0 for veterans\n**/\npublic static double tax(Employees p){\n  \tdouble salary=p.getSalary();\n  \tdouble tax=0;\n\tif(salary<10000){\n      tax=0.02;\n    }\n\telse{\n  \t\ttax=0.05;\n\t}\n\treturn tax;\n}""}"
369,1.0,1.0,1.0,1.0,2017-04-05 20:41:05.971464,5,263,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""/**\n      Gets the name of this employee.\n      @return the name \n   */\npublic String getName() {\n    return name;\n}\n"",""rating"":5},""code"":""/**\nWrite a java method that takes a person and returns their tax as below:\n1. For employees, if salary < $10,000, 2% of salary, else 5%\n2. For business owners, 10% of their profit\n3. 0 for veterans\n**/\npublic static double tax(Employees p){\n  \tdouble salary=p.getSalary();\n  \tdouble tax=0;\n\tif(salary<10000){\n      tax=0.02;\n    }\n\telse{\n  \t\ttax=0.05;\n\t}\n\treturn tax;\n}""}"
370,1.0,1.0,1.0,1.0,2017-04-05 20:41:07.428771,5,264,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""/**\n      Computes the average of the measures of the given objects.\n      @param objects an array of Measurable objects\n      @return the average of the measures\n   */\npublic static double average(Measurable[] objects) {\n    double sum = 0;\n    for (Measurable obj : objects) {\n        sum = sum + obj.getMeasure();\n    }\n    if (objects.length > 0) {\n        return sum / objects.length;\n    } else {\n        return 0;\n    }\n}\n"",""rating"":5},""code"":""/**\nWrite a java method that takes a person and returns their tax as below:\n1. For employees, if salary < $10,000, 2% of salary, else 5%\n2. For business owners, 10% of their profit\n3. 0 for veterans\n**/\npublic static double tax(Employees p){\n  \tdouble salary=p.getSalary();\n  \tdouble tax=0;\n\tif(salary<10000){\n      tax=0.02;\n    }\n\telse{\n  \t\ttax=0.05;\n\t}\n\treturn tax;\n}""}"
371,1.0,1.0,1.0,1.0,2017-04-05 20:41:12.100542,15,265,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static void main(String args[]) {\n    new IntrospectionTestApplication();\n}\n"",""rating"":3},""code"":""public static void main(String[] args)\n{\n  \n}""}"
372,1.0,1.0,1.0,1.0,2017-04-05 20:41:14.341052,5,266,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Constructs a salaried employee with a given name and annual salary.\n      @param name the name of this employee\n      @param salary the annual salary\n    */\npublic SalariedEmployee(String name, double salary) {\n    setName(name);\n    annualSalary = salary;\n}\n"",""rating"":5},""code"":""/**\nWrite a java method that takes a person and returns their tax as below:\n1. For employees, if salary < $10,000, 2% of salary, else 5%\n2. For business owners, 10% of their profit\n3. 0 for veterans\n**/\npublic static double tax(Employees p){\n  \tdouble salary=p.getSalary();\n  \tdouble tax=0;\n\tif(salary<10000){\n      tax=0.02;\n    }\n\telse{\n  \t\ttax=0.05;\n\t}\n\treturn tax;\n}""}"
373,1.0,1.0,1.0,1.0,2017-04-05 20:41:16.197104,5,267,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""/**\n      Constructs a manager with a given name, annual salary and weekly bonus.\n      @param name the name of this employee\n      @param salary the annual salary\n      @param bonus the weekly bonus\n    */\npublic Manager(String name, double salary, double bonus) {\n    super(name, salary);\n    weeklyBonus = bonus;\n}\n"",""rating"":5},""code"":""/**\nWrite a java method that takes a person and returns their tax as below:\n1. For employees, if salary < $10,000, 2% of salary, else 5%\n2. For business owners, 10% of their profit\n3. 0 for veterans\n**/\npublic static double tax(Employees p){\n  \tdouble salary=p.getSalary();\n  \tdouble tax=0;\n\tif(salary<10000){\n      tax=0.02;\n    }\n\telse{\n  \t\ttax=0.05;\n\t}\n\treturn tax;\n}""}"
374,1.0,1.0,1.0,1.0,2017-04-05 20:41:17.732277,15,268,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""public static void main(String[] args) {\n    new BeatBoxSaveOnly().buildGUI();\n}\n"",""rating"":1},""code"":""public static void main(String[] args)\n{\n  \n}""}"
375,1.0,1.0,1.0,1.0,2017-04-05 20:41:22.592238,15,269,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""public static void main(String[] argv) {\n    BadNewline jack = new BadNewline(\""Jack Adolphus Schmidt, III\"");\n    System.out.println(jack);\n}\n"",""rating"":2},""code"":""public static void main(String[] args)\n{\n  \n}""}"
376,1.0,1.0,1.0,1.0,2017-04-05 20:41:24.287498,5,270,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""/**\n      Computes the average of the measures of the given objects.\n      @param objects an array of Measurable objects\n      @return the average of the measures\n   */\npublic static double average(Measurable[] objects) {\n    double sum = 0;\n    for (Measurable obj : objects) {\n        sum = sum + obj.getMeasure();\n    }\n    if (objects.length > 0) {\n        return sum / objects.length;\n    } else {\n        return 0;\n    }\n}\n"",""rating"":5},""code"":""/**\nWrite a java method that takes a person and returns their tax as below:\n1. For employees, if salary < $10,000, 2% of salary, else 5%\n2. For business owners, 10% of their profit\n3. 0 for veterans\n**/\npublic static double tax(Employees p){\n  \tdouble salary=p.getSalary();\n  \tdouble tax=0;\n\tif(salary<10000){\n      tax=0.02;\n    }\n\telse{\n  \t\ttax=0.05;\n\t}\n\treturn tax;\n}""}"
377,1.0,1.0,1.0,1.0,2017-04-05 20:41:26.142916,5,271,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""/**\n     * Skips whitespace characters and then reads a value of type double from input.  Any additional characters on\n     * the current line of input are retained, and will be read by the next input operation.  When using standard IO,\n     * this will not produce an error; the user will be prompted repeatedly for input until a legal value\n     * is input.  In other cases, an IllegalArgumentException will be thrown if a legal value is not found.\n     */\npublic static double getDouble() {\n    double x = 0.0;\n    while (true) {\n        String str = readRealString();\n        if (str == null) {\n            errorMessage(\""Floating point number not found.\"", \""Real number in the range \"" + (-Double.MAX_VALUE) + \"" to \"" + Double.MAX_VALUE);\n        } else {\n            try {\n                x = Double.parseDouble(str);\n            } catch (NumberFormatException e) {\n                errorMessage(\""Illegal floating point input, \"" + str + \"".\"", \""Real number in the range \"" + (-Double.MAX_VALUE) + \"" to \"" + Double.MAX_VALUE);\n                continue;\n            }\n            if (Double.isInfinite(x)) {\n                errorMessage(\""Floating point input outside of legal range, \"" + str + \"".\"", \""Real number in the range \"" + (-Double.MAX_VALUE) + \"" to \"" + Double.MAX_VALUE);\n                continue;\n            }\n            break;\n        }\n    }\n    inputErrorCount = 0;\n    return x;\n}\n"",""rating"":5},""code"":""/**\nWrite a java method that takes a person and returns their tax as below:\n1. For employees, if salary < $10,000, 2% of salary, else 5%\n2. For business owners, 10% of their profit\n3. 0 for veterans\n**/\npublic static double tax(Employees p){\n  \tdouble salary=p.getSalary();\n  \tdouble tax=0;\n\tif(salary<10000){\n      tax=0.02;\n    }\n\telse{\n  \t\ttax=0.05;\n\t}\n\treturn tax;\n}""}"
378,1.0,1.0,1.0,1.0,2017-04-05 20:41:27.595433,15,272,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""/*  This program prints my initials (DJE) in big letters,\n           where each letter is nine lines tall.\n       */\npublic static void main(String[] args) {\n    System.out.println();\n    System.out.println(\""           ******           *************        **********\"");\n    System.out.println(\""           **    **                **            **\"");\n    System.out.println(\""           **     **               **            **\"");\n    System.out.println(\""           **      **              **            **\"");\n    System.out.println(\""           **      **              **            ********\"");\n    System.out.println(\""           **      **       **     **            **\"");\n    System.out.println(\""           **     **         **    **            **\"");\n    System.out.println(\""           **    **           **  **             **\"");\n    System.out.println(\""           *****               ****              **********\"");\n    System.out.println();\n}\n"",""rating"":1},""code"":""public static void main(String[] args)\n{\n  \n}""}"
379,1.0,1.0,1.0,1.0,2017-04-05 20:41:29.747147,15,273,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String[] args) {\n    move(5, 1, 3);\n}\n"",""rating"":1},""code"":""public static void main(String[] args)\n{\n  \n}""}"
380,1.0,1.0,1.0,1.0,2017-04-05 20:41:32.286300,5,274,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""/**\n     * Skips whitespace characters and then reads a value of type double from input.  Any additional characters on\n     * the current line of input are retained, and will be read by the next input operation.  When using standard IO,\n     * this will not produce an error; the user will be prompted repeatedly for input until a legal value\n     * is input.  In other cases, an IllegalArgumentException will be thrown if a legal value is not found.\n     */\npublic static double getDouble() {\n    double x = 0.0;\n    while (true) {\n        String str = readRealString();\n        if (str == null) {\n            errorMessage(\""Floating point number not found.\"", \""Real number in the range \"" + (-Double.MAX_VALUE) + \"" to \"" + Double.MAX_VALUE);\n        } else {\n            try {\n                x = Double.parseDouble(str);\n            } catch (NumberFormatException e) {\n                errorMessage(\""Illegal floating point input, \"" + str + \"".\"", \""Real number in the range \"" + (-Double.MAX_VALUE) + \"" to \"" + Double.MAX_VALUE);\n                continue;\n            }\n            if (Double.isInfinite(x)) {\n                errorMessage(\""Floating point input outside of legal range, \"" + str + \"".\"", \""Real number in the range \"" + (-Double.MAX_VALUE) + \"" to \"" + Double.MAX_VALUE);\n                continue;\n            }\n            break;\n        }\n    }\n    inputErrorCount = 0;\n    return x;\n}\n"",""rating"":5},""code"":""/**\nWrite a java method that takes a person and returns their tax as below:\n1. For employees, if salary < $10,000, 2% of salary, else 5%\n2. For business owners, 10% of their profit\n3. 0 for veterans\n**/\npublic static double tax(Employees p){\n  \tdouble salary=p.getSalary();\n  \tdouble tax=0;\n\tif(salary<10000){\n      tax=0.02;\n    }\n\telse{\n  \t\ttax=0.05;\n\t}\n\treturn tax;\n}""}"
381,1.0,1.0,1.0,1.0,2017-04-05 20:41:33.212837,15,275,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""public static void main(String[] args) {\n    BankAccount[] accounts = new BankAccount[3];\n    accounts[0] = new BankAccount(10000);\n    accounts[1] = new BankAccount(0);\n    accounts[2] = new BankAccount(2000);\n    Arrays.sort(accounts);\n    for (int i = 0; i < accounts.length; i++) {\n        System.out.print(accounts[i].getBalance() + \"" \"");\n    }\n    System.out.println();\n    System.out.println(\""Expected: 0.0 2000.0 10000.0\"");\n}\n"",""rating"":3},""code"":""public static void main(String[] args)\n{\n  \n}""}"
382,1.0,1.0,1.0,1.0,2017-04-05 20:41:35.850905,15,276,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""public static void main(String args[]) {\n    // BEGIN main\n    String[] data = { \""Toronto\"", \""Stockholm\"" };\n    for (String s : data) {\n        System.out.println(s);\n    }\n    // Show the Java 5 foreach loop - do not modernize to Java 8\n    List<String> list = Arrays.asList(data);\n    for (String s : list) {\n        System.out.println(s);\n    }\n// END main\n}\n"",""rating"":1},""code"":""public static void main(String[] args)\n{\n  \n}""}"
383,1.0,1.0,1.0,1.0,2017-04-05 20:41:38.181078,15,277,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""public static void main(String[] args) {\n    new SimpleChatClientA().go();\n}\n"",""rating"":1},""code"":""public static void main(String[] args)\n{\n  \n}""}"
384,1.0,1.0,1.0,1.0,2017-04-05 20:41:40.460555,5,278,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""/**\n      Sets the name of this employee.\n      @param employeeName the new name \n   */\npublic void setName(String employeeName) {\n    name = employeeName;\n}\n"",""rating"":5},""code"":""/**\nWrite a java method that takes a person and returns their tax as below:\n1. For employees, if salary < $10,000, 2% of salary, else 5%\n2. For business owners, 10% of their profit\n3. 0 for veterans\n**/\npublic static double tax(Employees p){\n  \tdouble salary=p.getSalary();\n  \tdouble tax=0;\n\tif(salary<10000){\n      tax=0.02;\n    }\n\telse{\n  \t\ttax=0.05;\n\t}\n\treturn tax;\n}""}"
385,1.0,1.0,1.0,1.0,2017-04-05 20:41:41.770361,5,279,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""/**\n      Constructs a manager with a given name, annual salary and weekly bonus.\n      @param name the name of this employee\n      @param salary the annual salary\n      @param bonus the weekly bonus\n    */\npublic Manager(String name, double salary, double bonus) {\n    super(name, salary);\n    weeklyBonus = bonus;\n}\n"",""rating"":5},""code"":""/**\nWrite a java method that takes a person and returns their tax as below:\n1. For employees, if salary < $10,000, 2% of salary, else 5%\n2. For business owners, 10% of their profit\n3. 0 for veterans\n**/\npublic static double tax(Employees p){\n  \tdouble salary=p.getSalary();\n  \tdouble tax=0;\n\tif(salary<10000){\n      tax=0.02;\n    }\n\telse{\n  \t\ttax=0.05;\n\t}\n\treturn tax;\n}""}"
386,1.0,1.0,1.0,1.0,2017-04-05 20:41:43.062856,15,280,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""public static void main(String[] args) {\n    // We will compute all primes less than the supplied command line argument\n    // Or, if no argument, all primes less than 100\n    // Assign a default value\n    int max = 100;\n    try // Try to parse user-supplied arg\n    {\n        max = Integer.parseInt(args[0]);\n    }// Silently ignore exceptions.\n     catch (Exception e) {\n    }\n    // Create an array that specifies whether each number is prime or not.\n    boolean[] isprime = new boolean[max + 1];\n    // Assume that all numbers are primes, until proven otherwise.\n    for (int i = 0; i <= max; i++) isprime[i] = true;\n    // However, we know that 0 and 1 are not primes.  Make a note of it.\n    isprime[0] = isprime[1] = false;\n    // To compute all primes less than max, we need to rule out\n    // multiples of all integers less than the square root of max.\n    // See java.lang.Math class\n    int n = (int) Math.ceil(Math.sqrt(max));\n    //   ruled out by one of the prime factors of i, so we can skip this case.\n    for (int i = 0; i <= n; i++) {\n        if (// If i is a prime, \n        isprime[i])\n            for (// loop through its multiples\n            int j = 2 * i; // loop through its multiples\n            j <= max; // loop through its multiples\n            j = j + i) // noting they are not prime.\n            isprime[j] = false;\n    }\n    // Now go look for the largest prime:\n    int largest;\n    // empty loop body\n     // Now, for each integer i from 0 to n:\n\n     //   If i is a prime, then none of its multiples are primes, so\n\n     //   indicate this in the array.  \n\n     //   If i is not a prime, then its multiples have already been\n\n    for (largest = max; !isprime[largest]; largest--) ;\n    // Output the result\n    System.out.println(\""The largest prime less than or equal to \"" + max + \"" is \"" + largest);\n}\n"",""rating"":1},""code"":""public static void main(String[] args)\n{\n  \n}""}"
387,1.0,1.0,1.0,1.0,2017-04-05 20:41:43.397781,5,281,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""/**\n      Gets the name of this employee.\n      @return the name \n   */\npublic String getName() {\n    return name;\n}\n"",""rating"":5},""code"":""/**\nWrite a java method that takes a person and returns their tax as below:\n1. For employees, if salary < $10,000, 2% of salary, else 5%\n2. For business owners, 10% of their profit\n3. 0 for veterans\n**/\npublic static double tax(Employees p){\n  \tdouble salary=p.getSalary();\n  \tdouble tax=0;\n\tif(salary<10000){\n      tax=0.02;\n    }\n\telse{\n  \t\ttax=0.05;\n\t}\n\treturn tax;\n}""}"
388,0.5,0.5,0.5,3.5,2017-04-05 20:41:46.907990,18,,"public static double getdifference (x[])
{
  int max, min;
  //for loop to find max and min
  for(int z=0; z<x.length;z++)
  {
    if(x[z]>max)
    max=x[z];
    if(x[z]<min)
    min=x[z];
  }
  return max-min;
}"
389,2.5,0.5,0.5,3.5,2017-04-05 20:41:49.528023,18,,"public static double getdifference (x[])
{
  int max, min;
  //for loop to find max and min
  for(int z=0; z<x.length;z++)
  {
    if(x[z]>max)
    max=x[z];
    if(x[z]<min)
    min=x[z];
  }
  return max-min;
}"
390,1.0,1.0,1.0,1.0,2017-04-05 20:41:50.099935,15,282,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""/**\n    * Simulate choosing people at random and checking the\n    * day of the year they were born on.  If the person is\n    * the third who was born on that day of the year, stop,\n    * and output the number of people who were checked.\n    */\npublic static void main(String[] args) {\n    // numFound[i] will be the number of people\n    int[] numFound;\n    // who have been found who have a birthday\n    // on the i-th day of the year\n    // The number of people who have been checked.\n    int count;\n    // Initially, all entries are 0.\n    numFound = new int[365];\n    count = 0;\n    while (true) {\n        // Select a birthday at random, from 0 to 364.\n        // If the same birthday was already seen twice\n        // before, then quit.  Otherwise, add one to\n        // the corresponding entry in the numFound array \n        // to record that a person with that birthday\n        // has been found.\n        // The selected birthday.\n        int birthday;\n        birthday = (int) (Math.random() * 365);\n        count++;\n        if (numFound[birthday] == 2)\n            break;\n        numFound[birthday]++;\n    }\n    System.out.println(\""It took \"" + count + \"" tries to find three people with the same birthday.\"");\n}\n"",""rating"":3},""code"":""public static void main(String[] args)\n{\n  \n}""}"
391,2.5,1.0,0.5,3.5,2017-04-05 20:41:53.520863,18,,"public static double getdifference (x[])
{
  int max, min;
  //for loop to find max and min
  for(int z=0; z<x.length;z++)
  {
    if(x[z]>max)
    max=x[z];
    if(x[z]<min)
    min=x[z];
  }
  return max-min;
}"
392,2.5,1.0,0.5,3.0,2017-04-05 20:41:54.866366,18,,"public static double getdifference (x[])
{
  int max, min;
  //for loop to find max and min
  for(int z=0; z<x.length;z++)
  {
    if(x[z]>max)
    max=x[z];
    if(x[z]<min)
    min=x[z];
  }
  return max-min;
}"
393,1.0,1.0,1.0,1.0,2017-04-05 20:41:56.974594,5,283,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""/**\n      Constructs an employee with an empty name.\n   */\npublic Employee() {\n    name = \""\"";\n}\n"",""rating"":5},""code"":""/**\nWrite a java method that takes a person and returns their tax as below:\n1. For employees, if salary < $10,000, 2% of salary, else 5%\n2. For business owners, 10% of their profit\n3. 0 for veterans\n**/\npublic static double tax(Employees p){\n  \tdouble salary=p.getSalary();\n  \tdouble tax=0;\n\tif(salary<10000){\n      tax=0.02;\n    }\n\telse{\n  \t\ttax=0.05;\n\t}\n\treturn tax;\n}""}"
394,1.0,1.0,1.0,1.0,2017-04-05 20:41:59.319689,5,284,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""/**\n      Computes the average of the measures of the given objects.\n      @param objects an array of Measurable objects\n      @return the average of the measures\n   */\npublic static double average(Measurable[] objects) {\n    double sum = 0;\n    for (Measurable obj : objects) {\n        sum = sum + obj.getMeasure();\n    }\n    if (objects.length > 0) {\n        return sum / objects.length;\n    } else {\n        return 0;\n    }\n}\n"",""rating"":5},""code"":""/**\nWrite a java method that takes a person and returns their tax as below:\n1. For employees, if salary < $10,000, 2% of salary, else 5%\n2. For business owners, 10% of their profit\n3. 0 for veterans\n**/\npublic static double tax(Employees p){\n  \tdouble salary=p.getSalary();\n  \tdouble tax=0;\n\tif(salary<10000){\n      tax=0.02;\n    }\n\telse{\n  \t\ttax=0.05;\n\t}\n\treturn tax;\n}""}"
395,1.0,1.0,1.0,1.0,2017-04-05 20:42:03.521137,5,285,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""/**\n      Gets the name of this employee.\n      @return the name \n   */\npublic String getName() {\n    return name;\n}\n"",""rating"":5},""code"":""/**\nWrite a java method that takes a person and returns their tax as below:\n1. For employees, if salary < $10,000, 2% of salary, else 5%\n2. For business owners, 10% of their profit\n3. 0 for veterans\n**/\npublic static double tax(Employees p){\n  \tdouble salary=p.getSalary();\n  \tdouble tax=0;\n\tif(salary<10000){\n      tax=0.02;\n    }\n\telse{\n  \t\ttax=0.05;\n\t}\n\treturn tax;\n}""}"
396,1.0,1.0,1.0,1.0,2017-04-05 20:42:15.864260,5,286,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""/**\n      Sets the name of this employee.\n      @param employeeName the new name \n   */\npublic void setName(String employeeName) {\n    name = employeeName;\n}\n"",""rating"":5},""code"":""/**\nWrite a java method that takes a person and returns their tax as below:\n1. For employees, if salary < $10,000, 2% of salary, else 5%\n2. For business owners, 10% of their profit\n3. 0 for veterans\n**/\npublic static double tax(Employees p){\n  \tdouble salary=p.getSalary();\n  \tdouble tax=0;\n\tif(salary<10000){\n      tax=0.02;\n    }\n\telse{\n  \t\ttax=0.05;\n\t}\n\treturn tax;\n}""}"
397,1.0,1.0,1.0,1.0,2017-04-05 20:42:19.256263,19,287,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""double value(double xValue) {\n    // The value of the node is the value of x.\n    return xValue;\n}\n"",""rating"":3},""code"":""double tax(Person p)\n{\n  \n}""}"
398,1.0,1.0,1.0,1.0,2017-04-05 20:42:25.695069,4,288,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""public void paintComponent(Graphics graph) {\n    int increment = samples.length / getWidth();\n    final int LARGEST = 32767;\n    int x = 0;\n    for (int i = 0; i < samples.length; i = i + increment) {\n        int value = samples[i];\n        value = Math.min(LARGEST, value);\n        value = Math.max(-LARGEST, value);\n        int height = getHeight() / 2;\n        int y = height - samples[i] * height / LARGEST;\n        graph.drawLine(x, y, x, height);\n        x++;\n    }\n}\n"",""rating"":2},""code"":""public int largest_difference(int array){\n  \n  \n  \n  \n  \n}""}"
399,1.0,1.0,1.0,1.0,2017-04-05 20:42:28.501829,19,289,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""public static void main(String[] args) {\n    String input = JOptionPane.showInputDialog(\""Enter price:\"");\n    double price = Double.parseDouble(input);\n    final double TAX_RATE = 8.5;\n    price = price * (1 + TAX_RATE / 100);\n    JOptionPane.showMessageDialog(null, \""Price after tax: \"" + price);\n}\n"",""rating"":2},""code"":""double tax(Person p)\n{\n  \n}""}"
400,1.0,1.0,1.0,1.0,2017-04-05 20:42:29.885211,14,290,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""public Person(String firstName, String lastName) {\n    this.firstName = firstName;\n    this.lastName = lastName;\n}\n"",""rating"":5},""code"":""\ntax()\n{\n  \n  if(Person.getSalary() < 10000)\n  {\n    System.out.println(\""Tax is 2% of your salary: \"" + (Person.getSalary())*0.02);\n    \n  }\n  else\n  {\n    System.out.println(\""Tax is 5% of your salary : \"" + (Person.getSalary())*0.05);\n  }\n  \n  if(Person == BusinessOwner)\n  {\n    System.out.println(\""Tax = \"" + (BusinessOwner.getSalary())*0.1);\n  }\n  if(Person == Veteran)\n  {\n    System.out.println(\""Tax = 0\"" );\n  }\n  }\n}""}"
401,1.0,1.0,1.0,1.0,2017-04-05 20:42:30.868044,14,291,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", targetDate = \""Jan 1, 2012\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":4},""code"":""\ntax()\n{\n  \n  if(Person.getSalary() < 10000)\n  {\n    System.out.println(\""Tax is 2% of your salary: \"" + (Person.getSalary())*0.02);\n    \n  }\n  else\n  {\n    System.out.println(\""Tax is 5% of your salary : \"" + (Person.getSalary())*0.05);\n  }\n  \n  if(Person == BusinessOwner)\n  {\n    System.out.println(\""Tax = \"" + (BusinessOwner.getSalary())*0.1);\n  }\n  if(Person == Veteran)\n  {\n    System.out.println(\""Tax = 0\"" );\n  }\n  }\n}""}"
402,1.0,1.0,1.0,1.0,2017-04-05 20:42:32.362502,14,292,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""boolean solveMaze(int row, int col) {\n    // considered to be solved if the path reaches the lower right cell.\n    if (maze[row][col] == emptyCode) {\n        // add this cell to the path\n        maze[row][col] = pathCode;\n        repaint();\n        if (row == rows - 2 && col == columns - 2)\n            // path has reached goal\n            return true;\n        try {\n            Thread.sleep(speedSleep);\n        } catch (InterruptedException e) {\n        }\n        if (// try to solve maze by extending path\n        solveMaze(row - 1, col) || //    in each possible direction\n        solveMaze(row, col - 1) || solveMaze(row + 1, col) || solveMaze(row, col + 1))\n            return true;\n        // maze can't be solved from this cell, so backtrack out of the cell\n        // mark cell as having been visited\n        maze[row][col] = visitedCode;\n        repaint();\n        synchronized (this) {\n            try {\n                wait(speedSleep);\n            } catch (InterruptedException e) {\n            }\n        }\n    }\n    return false;\n}\n             // Try to solve the maze by continuing current path from position\n\n             // (row,col).  Return true if a solution is found.  The maze is\n\n"",""rating"":4},""code"":""\ntax()\n{\n  \n  if(Person.getSalary() < 10000)\n  {\n    System.out.println(\""Tax is 2% of your salary: \"" + (Person.getSalary())*0.02);\n    \n  }\n  else\n  {\n    System.out.println(\""Tax is 5% of your salary : \"" + (Person.getSalary())*0.05);\n  }\n  \n  if(Person == BusinessOwner)\n  {\n    System.out.println(\""Tax = \"" + (BusinessOwner.getSalary())*0.1);\n  }\n  if(Person == Veteran)\n  {\n    System.out.println(\""Tax = 0\"" );\n  }\n  }\n}""}"
403,1.0,1.0,1.0,1.0,2017-04-05 20:42:35.066716,14,293,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""/**\n       * Return an array containing all the legal CheckersMoves\n       * for the specified player on the current board.  If the player\n       * has no legal moves, null is returned.  The value of player\n       * should be one of the constants RED or BLACK; if not, null\n       * is returned.  If the returned value is non-null, it consists\n       * entirely of jump moves or entirely of regular moves, since\n       * if the player can jump, only jumps are legal moves.\n       */\nCheckersMove[] getLegalMoves(int player) {\n    if (player != RED && player != BLACK)\n        return null;\n    // The constant representing a King belonging to player.\n    int playerKing;\n    if (player == RED)\n        playerKing = RED_KING;\n    else\n        playerKing = BLACK_KING;\n    // Moves will be stored in this list.\n    ArrayList<CheckersMove> moves = new ArrayList<CheckersMove>();\n    for (int row = 0; row < 8; row++) {\n        for (int col = 0; col < 8; col++) {\n            if (board[row][col] == player || board[row][col] == playerKing) {\n                if (canJump(player, row, col, row + 1, col + 1, row + 2, col + 2))\n                    moves.add(new CheckersMove(row, col, row + 2, col + 2));\n                if (canJump(player, row, col, row - 1, col + 1, row - 2, col + 2))\n                    moves.add(new CheckersMove(row, col, row - 2, col + 2));\n                if (canJump(player, row, col, row + 1, col - 1, row + 2, col - 2))\n                    moves.add(new CheckersMove(row, col, row + 2, col - 2));\n                if (canJump(player, row, col, row - 1, col - 1, row - 2, col - 2))\n                    moves.add(new CheckersMove(row, col, row - 2, col - 2));\n            }\n        }\n    }\n    if (moves.size() == 0) {\n        for (int row = 0; row < 8; row++) {\n            for (int col = 0; col < 8; col++) {\n                if (board[row][col] == player || board[row][col] == playerKing) {\n                    if (canMove(player, row, col, row + 1, col + 1))\n                        moves.add(new CheckersMove(row, col, row + 1, col + 1));\n                    if (canMove(player, row, col, row - 1, col + 1))\n                        moves.add(new CheckersMove(row, col, row - 1, col + 1));\n                    if (canMove(player, row, col, row + 1, col - 1))\n                        moves.add(new CheckersMove(row, col, row + 1, col - 1));\n                    if (canMove(player, row, col, row - 1, col - 1))\n                        moves.add(new CheckersMove(row, col, row - 1, col - 1));\n                }\n            }\n        }\n    }\n    if (moves.size() == 0)\n        return null;\n    else {\n        CheckersMove[] moveArray = new CheckersMove[moves.size()];\n        for (int i = 0; i < moves.size(); i++) moveArray[i] = moves.get(i);\n        return moveArray;\n    }\n}\n          /*  First, check for any possible jumps.  Look at each square on the board.\n          If that square contains one of the player's pieces, look at a possible\n          jump in each of the four directions from that square.  If there is \n          a legal jump in that direction, put it in the moves ArrayList.\n          */\n\n          /*  If any jump moves were found, then the user must jump, so we don't \n          add any regular moves.  However, if no jumps were found, check for\n          any legal regular moves.  Look at each square on the board.\n          If that square contains one of the player's pieces, look at a possible\n          move in each of the four directions from that square.  If there is \n          a legal move in that direction, put it in the moves ArrayList.\n          */\n\n          /* If no legal moves have been found, return null.  Otherwise, create\n          an array just big enough to hold all the legal moves, copy the\n          legal moves from the ArrayList into the array, and return the array. */\n\n"",""rating"":4},""code"":""\ntax()\n{\n  \n  if(Person.getSalary() < 10000)\n  {\n    System.out.println(\""Tax is 2% of your salary: \"" + (Person.getSalary())*0.02);\n    \n  }\n  else\n  {\n    System.out.println(\""Tax is 5% of your salary : \"" + (Person.getSalary())*0.05);\n  }\n  \n  if(Person == BusinessOwner)\n  {\n    System.out.println(\""Tax = \"" + (BusinessOwner.getSalary())*0.1);\n  }\n  if(Person == Veteran)\n  {\n    System.out.println(\""Tax = 0\"" );\n  }\n  }\n}""}"
404,1.0,1.0,1.0,1.0,2017-04-05 20:42:37.542863,14,294,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""public Product(float price) {\n    this.price = price;\n    tax = (float) (price * 0.20);\n}\n"",""rating"":4},""code"":""\ntax()\n{\n  \n  if(Person.getSalary() < 10000)\n  {\n    System.out.println(\""Tax is 2% of your salary: \"" + (Person.getSalary())*0.02);\n    \n  }\n  else\n  {\n    System.out.println(\""Tax is 5% of your salary : \"" + (Person.getSalary())*0.05);\n  }\n  \n  if(Person == BusinessOwner)\n  {\n    System.out.println(\""Tax = \"" + (BusinessOwner.getSalary())*0.1);\n  }\n  if(Person == Veteran)\n  {\n    System.out.println(\""Tax = 0\"" );\n  }\n  }\n}""}"
405,1.0,1.0,1.0,1.0,2017-04-05 20:42:40.902488,14,295,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""void fill(int row, int col, int replace, int replaceWith) {\n    // called by tearDown() to change \""room codes\"".\n    if (maze[row][col] == replace) {\n        maze[row][col] = replaceWith;\n        fill(row + 1, col, replace, replaceWith);\n        fill(row - 1, col, replace, replaceWith);\n        fill(row, col + 1, replace, replaceWith);\n        fill(row, col - 1, replace, replaceWith);\n    }\n}\n"",""rating"":4},""code"":""\ntax()\n{\n  \n  if(Person.getSalary() < 10000)\n  {\n    System.out.println(\""Tax is 2% of your salary: \"" + (Person.getSalary())*0.02);\n    \n  }\n  else\n  {\n    System.out.println(\""Tax is 5% of your salary : \"" + (Person.getSalary())*0.05);\n  }\n  \n  if(Person == BusinessOwner)\n  {\n    System.out.println(\""Tax = \"" + (BusinessOwner.getSalary())*0.1);\n  }\n  if(Person == Veteran)\n  {\n    System.out.println(\""Tax = 0\"" );\n  }\n  }\n}""}"
406,1.0,1.0,1.0,1.0,2017-04-05 20:42:42.430404,4,296,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static <E extends Comparable<E>> E max(E[] a) {\n    E largest = a[0];\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":3},""code"":""public int largest_difference(int array){\n  \n  \n  \n  \n  \n}""}"
407,1.0,1.0,1.0,1.0,2017-04-05 20:42:46.981193,4,297,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""/**\n     *  Return the green component of color of the rectangle in the\n     *  specified row and column.  If that rectangle lies outside \n     *  the grid or if no color has been specified for the rectangle,\n     *  then the green component of the defaultColor is returned.\n     */\npublic int getGreen(int row, int col) {\n    if (row >= 0 && row < rows && col >= 0 && col < columns && grid[row][col] != null)\n        return grid[row][col].getGreen();\n    else\n        return defaultColor.getGreen();\n}\n"",""rating"":1},""code"":""public int largest_difference(int array){\n  \n  \n  \n  \n  \n}""}"
408,1.0,1.0,1.0,1.0,2017-04-05 20:42:50.716567,4,298,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""/**\n     * Given an x-coordinate of a pixel in the MosaicPanel, this method returns\n     * the row number of the mosaic rectangle that contains that pixel.  If\n     * the x-coordinate does not lie within the bounds of the mosaic, the return\n     * value is -1 or is equal to the number of columns, depending on whether\n     * x is to the left or to the right of the mosaic.\n     */\npublic int xCoordToColumnNumber(int x) {\n    Insets insets = getInsets();\n    if (x < insets.left)\n        return -1;\n    double colWidth = (double) (getWidth() - insets.left - insets.right) / columns;\n    int col = (int) ((x - insets.left) / colWidth);\n    if (col >= columns)\n        return columns;\n    else\n        return col;\n}\n"",""rating"":1},""code"":""public int largest_difference(int array){\n  \n  \n  \n  \n  \n}""}"
409,1.0,1.0,1.0,1.0,2017-04-05 20:43:07.156497,4,299,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""/**\n      Encrypts a value.\n      @param b the value to encrypt (between 0 and 255)\n      @return the encrypted value\n   */\npublic int encrypt(int b) {\n    return (b + key) % 256;\n}\n"",""rating"":2},""code"":""public int largest_difference(int array){\n  \n  \n  \n  \n  \n}""}"
410,1.0,1.0,1.0,1.0,2017-04-05 20:43:27.876838,4,300,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Computes the largest value of an array.\n      @param a the array\n      @return the largest value in a\n   */\npublic static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":5},""code"":""public int largest_difference(int array){\n  \n  \n  \n  \n  \n}""}"
411,1.0,1.0,1.0,1.0,2017-04-05 20:44:01.476299,4,301,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""public static <E extends Comparable<? super E>> E max(ArrayList<E> a) // public static <E extends Comparable<E>> E max(ArrayList<E> a) \n// doesn't work with Student array list\n{\n    E largest = a.get(0);\n    for (int i = 1; i < a.size(); i++) {\n        if (a.get(i).compareTo(largest) > 0) {\n            largest = a.get(i);\n        }\n    }\n    return largest;\n}\n"",""rating"":2},""code"":""\n  public static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n\n  \n  \n  \n}""}"
412,1.0,1.0,1.0,1.0,2017-04-05 20:44:03.647574,4,302,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""/**\n         * Return the largest item that has been entered.\n         * The return value will be -infinity if no numbers have been entered. \n         */\npublic double getMax() {\n    return max;\n}\n"",""rating"":3},""code"":""\n  public static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n\n  \n  \n  \n}""}"
413,1.0,1.0,1.0,1.0,2017-04-05 20:44:07.863055,4,303,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""/**\n     *  Return the blue component of color of the rectangle in the\n     *  specified row and column.  If that rectangle lies outside \n     *  the grid or if no color has been specified for the rectangle,\n     *  then the blue component of the defaultColor is returned.\n     */\npublic int getBlue(int row, int col) {\n    if (row >= 0 && row < rows && col >= 0 && col < columns && grid[row][col] != null)\n        return grid[row][col].getBlue();\n    else\n        return defaultColor.getBlue();\n}\n"",""rating"":2},""code"":""\n  public static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n\n  \n  \n  \n}""}"
414,1.0,1.0,1.0,1.0,2017-04-05 20:44:19.554866,4,304,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""// pre: list != null, list.length > 0\n// post: return index of minimum element of array\npublic static int findMin(int[] list) {\n    assert list != null && list.length > 0 : \""failed precondition\"";\n    int indexOfMin = 0;\n    for (int i = 1; i < list.length; i++) {\n        if (list[i] < list[indexOfMin]) {\n            indexOfMin = i;\n        }\n    }\n    return indexOfMin;\n}\n"",""rating"":1},""code"":""\n  public static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n\n  \n  \n  \n}""}"
415,1.0,1.0,1.0,1.0,2017-04-05 20:44:21.220612,4,305,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""/**\n         * Return the largest item that has been entered.\n         * The return value will be -infinity if no numbers have been entered. \n         */\npublic double getMax() {\n    return max;\n}\n"",""rating"":1},""code"":""\n  public static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n\n  \n  \n  \n}""}"
416,1.0,1.0,1.0,1.0,2017-04-05 20:44:22.923200,4,306,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""/**\n      Finds a value in an array, using the linear search \n      algorithm.\n      @param a the array to search\n      @param value the value to find\n      @return the index at which the value occurs, or -1\n      if it does not occur in the array\n   */\npublic static int search(int[] a, int value) {\n    for (int i = 0; i < a.length; i++) {\n        if (a[i] == value) {\n            return i;\n        }\n    }\n    return -1;\n}\n"",""rating"":1},""code"":""\n  public static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n\n  \n  \n  \n}""}"
417,1.0,1.0,1.0,1.0,2017-04-05 20:44:47.552955,15,307,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    double value;\n    do {\n        System.out.print(\""Enter a number >= 0: \"");\n        value = in.nextDouble();\n    } while (value < 0);\n    double root = Math.sqrt(value);\n    System.out.println(\""The square root of the number is \"" + root);\n}\n"",""rating"":3},""code"":""public static void main(String[] args)\n{\n    System.out.println(\""Please pass in the person you wish to tax: \"");\n  \tScanner scan = new Scanner();\n  \tObject person1 = scan.nextObject;\n  \tdouble tax = 0.00;\n  \tif(person1.equals(Employee))\n    {\n      double salary = person1.getSalary();\n      if(salary < 10000)\n      {\n        tax = salary*0.02;\n      }\n        \n    }\n   \tSystem.out.println(\""Expected: 0.0 2000.0 10000.0\"");\n  \n}\n""}"
418,1.0,1.0,1.0,1.0,2017-04-05 20:44:48.114503,4,308,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""// pre: list != null\n// post: return sum of elements\n// use traditional for loop\npublic static int sumListOld(int[] list) {\n    int total = 0;\n    for (int i = 0; i < list.length; i++) {\n        total += list[i];\n        System.out.println(list[i]);\n    }\n    return total;\n}\n"",""rating"":1},""code"":""\n  public static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n\n}""}"
419,1.0,1.0,1.0,1.0,2017-04-05 20:44:57.360263,15,309,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Reads all data.\n      @param in the scanner that scans the data\n   */\nprivate void readData(Scanner in) throws BadDataException {\n    if (!in.hasNextInt()) {\n        throw new BadDataException(\""Length expected\"");\n    }\n    int numberOfValues = in.nextInt();\n    data = new double[numberOfValues];\n    for (int i = 0; i < numberOfValues; i++) {\n        readValue(in, i);\n    }\n    if (in.hasNext()) {\n        throw new BadDataException(\""End of file expected\"");\n    }\n}\n"",""rating"":3},""code"":""public static void main(String[] args)\n{\n    System.out.println(\""Please pass in the person you wish to tax: \"");\n  \tScanner scan = new Scanner();\n  \tObject person1 = scan.nextObject;\n  \tdouble tax = 0.00;\n  \tif(person1.equals(Employee))\n    {\n      double salary = person1.getSalary();\n      if(salary < 10000)\n      {\n        tax = salary*0.02;\n      }\n        \n    }\n   \tSystem.out.println(\""Expected: 0.0 2000.0 10000.0\"");\n  \n}\n""}"
420,1.0,1.0,1.0,1.0,2017-04-05 20:44:59.476166,4,310,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""/**\n         * Return the largest item that has been entered.\n         * The return value will be -infinity if no numbers have been entered. \n         */\npublic double getMax() {\n    return max;\n}\n"",""rating"":2},""code"":""\n  public static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n\n}""}"
421,1.0,1.0,1.0,1.0,2017-04-05 20:45:01.080711,15,311,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""// BEGIN main\npublic static void main(String[] argv) {\n    double d = LogBase.log_base(10, 10000);\n    System.out.println(\""log10(10000) = \"" + d);\n}\n"",""rating"":2},""code"":""public static void main(String[] args)\n{\n    System.out.println(\""Please pass in the person you wish to tax: \"");\n  \tScanner scan = new Scanner();\n  \tObject person1 = scan.nextObject;\n  \tdouble tax = 0.00;\n  \tif(person1.equals(Employee))\n    {\n      double salary = person1.getSalary();\n      if(salary < 10000)\n      {\n        tax = salary*0.02;\n      }\n        \n    }\n   \tSystem.out.println(\""Expected: 0.0 2000.0 10000.0\"");\n  \n}\n""}"
422,1.0,1.0,1.0,1.0,2017-04-05 20:45:07.531097,4,312,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent2(int[] a) {\n    // O(n log(n))\n    Arrays.sort(a);\n    int[] counts = new int[a.length];\n    int count = 0;\n    for (// O(n)\n    int i = 0; // O(n)\n    i < a.length; // O(n)\n    i++) {\n        count++;\n        if (i == a.length - 1 || a[i] != a[i + 1]) {\n            counts[i] = count;\n            count = 0;\n        }\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":1},""code"":""\n  public static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n\n}""}"
423,1.0,1.0,1.0,1.0,2017-04-05 20:45:13.162742,4,313,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent2(int[] a) {\n    // O(n log(n))\n    Arrays.sort(a);\n    int[] counts = new int[a.length];\n    int count = 0;\n    for (// O(n)\n    int i = 0; // O(n)\n    i < a.length; // O(n)\n    i++) {\n        count++;\n        if (i == a.length - 1 || a[i] != a[i + 1]) {\n            counts[i] = count;\n            count = 0;\n        }\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":1},""code"":""\n  public static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n\n}""}"
424,1.0,1.0,1.0,1.0,2017-04-05 20:45:21.882157,4,314,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent2(int[] a) {\n    // O(n log(n))\n    Arrays.sort(a);\n    int[] counts = new int[a.length];\n    int count = 0;\n    for (// O(n)\n    int i = 0; // O(n)\n    i < a.length; // O(n)\n    i++) {\n        count++;\n        if (i == a.length - 1 || a[i] != a[i + 1]) {\n            counts[i] = count;\n            count = 0;\n        }\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":1},""code"":""\n  public static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n\n}""}"
425,1.0,1.0,1.0,1.0,2017-04-05 20:45:26.883429,4,315,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""// pre: list != null, list.length > 0\n// post: return index of minimum element of array\npublic static int findMin(int[] list) {\n    assert list != null && list.length > 0 : \""failed precondition\"";\n    int indexOfMin = 0;\n    for (int i = 1; i < list.length; i++) {\n        if (list[i] < list[indexOfMin]) {\n            indexOfMin = i;\n        }\n    }\n    return indexOfMin;\n}\n"",""rating"":1},""code"":""\n  public static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n\n}""}"
426,1.0,1.0,1.0,1.0,2017-04-05 20:45:32.802142,4,316,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static <E extends Comparable<E>> E max(E[] a) {\n    E largest = a[0];\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":3},""code"":""\n  public static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n\n}""}"
427,1.0,1.0,1.0,1.0,2017-04-05 20:45:58.635162,4,317,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""/**\n         * Return the largest item that has been entered.\n         * The return value will be -infinity if no numbers have been entered. \n         */\npublic double getMax() {\n    return max;\n}\n"",""rating"":1},""code"":""\n  public static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n\n}""}"
428,1.0,1.0,1.0,1.0,2017-04-05 20:46:04.284508,4,318,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent2(int[] a) {\n    // O(n log(n))\n    Arrays.sort(a);\n    int[] counts = new int[a.length];\n    int count = 0;\n    for (// O(n)\n    int i = 0; // O(n)\n    i < a.length; // O(n)\n    i++) {\n        count++;\n        if (i == a.length - 1 || a[i] != a[i + 1]) {\n            counts[i] = count;\n            count = 0;\n        }\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":1},""code"":""\n  public static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n\n}""}"
429,1.0,1.0,1.0,1.0,2017-04-05 20:46:09.090816,4,319,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""// pre: list != null\n// post: return sum of elements\n// use traditional for loop\npublic static int sumListOld(int[] list) {\n    int total = 0;\n    for (int i = 0; i < list.length; i++) {\n        total += list[i];\n        System.out.println(list[i]);\n    }\n    return total;\n}\n"",""rating"":2},""code"":""\n  public static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n\n}""}"
430,1.0,1.0,1.0,1.0,2017-04-05 20:46:14.083000,4,320,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent2(int[] a) {\n    // O(n log(n))\n    Arrays.sort(a);\n    int[] counts = new int[a.length];\n    int count = 0;\n    for (// O(n)\n    int i = 0; // O(n)\n    i < a.length; // O(n)\n    i++) {\n        count++;\n        if (i == a.length - 1 || a[i] != a[i + 1]) {\n            counts[i] = count;\n            count = 0;\n        }\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":2},""code"":""\n  public static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n\n}""}"
431,1.0,1.0,1.0,1.0,2017-04-05 20:46:56.553201,4,321,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static <E extends Comparable<E>> E max(E[] a) {\n    E largest = a[0];\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":1},""code"":""\n  public static int max(int[] values) {\n    //an integer array and returns the largest \n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n\n}""}"
432,1.0,1.0,1.0,1.0,2017-04-05 20:47:02.608338,4,322,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent1(int[] a) {\n    int[] counts = new int[a.length];\n    for (// O(n*n)\n    int i = 0; // O(n*n)\n    i < a.length; // O(n*n)\n    i++) {\n        // O(n) in each iteration\n        counts[i] = count(a, a[i]);\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":2},""code"":""\n  public static int max(int[] values) {\n    //an integer array and returns the largest \n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n\n}""}"
433,5.0,1.0,1.0,1.0,2017-04-05 20:47:15.058497,14,," int difference(Integerarr[])
{


}//array"
434,5.0,5.0,1.0,1.0,2017-04-05 20:47:16.536078,14,," int difference(Integerarr[])
{


}//array"
435,5.0,5.0,5.0,1.0,2017-04-05 20:47:17.559623,14,," int difference(Integerarr[])
{


}//array"
436,3.0,1.0,1.0,1.0,2017-04-05 20:50:21.897204,15,,"public static void main(String[] args)
{
    System.out.println(""Please pass in the person you wish to tax: "");
  	Scanner scan = new Scanner();
  	Object person1 = scan.nextObject;
  	double tax = 0.00;
  	if(person1.equals(Employee))
    {
      double salary = person1.getSalary();
      if(salary < 10000)
      {
        tax = salary*0.02;
      }
      if(salary > 10000)
      {
        salary = salary-10000;
        tax = 200+(salary*0.05);
      }
        
    }
  	if(person1.equals(BusinessOwner))
    {
     int profit = person1.getProfit();
   	 tax = profit*0.1;
    }
  	if(person1.equals(Veteran))
    {
      tax = 0;
    }
  return tax;
  
}
"
