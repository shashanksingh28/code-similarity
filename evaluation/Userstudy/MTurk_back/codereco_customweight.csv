weightid,signature,structure,concepts,language,time,user_id,vote_id,code
1,3.5,1.0,1.0,1.0,2017-04-20 19:17:10.486069,4,,"public double calculateTax(Person p){
  
}"
2,3.5,1.0,1.0,1.0,2017-04-20 19:18:12.040723,4,1,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String[] args) {\n    double price = 9.95;\n    double taxRate = 8.25;\n    double tax = Financial.percentOf(price, taxRate);\n    System.out.printf(\""Tax: %.2f\\n\"", tax);\n}\n"",""rating"":1},""code"":""public double calculateTax(Person p){\n  \n}""}"
3,3.5,1.0,1.0,2.5,2017-04-20 19:19:12.341641,4,,"public double calculateTax(Person p){
  //Calculates the tax based on the persons occupation
}"
4,3.5,1.0,1.0,2.5,2017-04-20 19:21:06.398609,4,2,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""public Product(float price) {\n    this.price = price;\n    tax = (float) (price * 0.20);\n}\n"",""rating"":3},""code"":""public double calculateTax(Person p){\n  //Calculates the tax based on the persons occupation\n}""}"
5,3.5,1.0,1.0,2.5,2017-04-20 19:22:02.395706,4,3,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""/**\n      Processes the sales tax due.\n      @return the sales tax due\n   */\npublic double getSalesTax() {\n    return taxablePurchase * taxRate / 100;\n}\n"",""rating"":3},""code"":""public double calculateTax(Person p){\n  //Calculates the tax based on the persons occupation\n}""}"
6,3.5,1.0,1.0,2.5,2017-04-20 19:22:39.953375,4,4,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", targetDate = \""Jan 1, 2012\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":3},""code"":""public double calculateTax(Person p){\n  //Calculates the tax based on the persons occupation\n}""}"
7,3.5,1.0,1.0,2.5,2017-04-20 19:23:47.872558,4,5,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""public Product(float price) {\n    this.price = price;\n    tax = (float) (price * 0.20);\n}\n"",""rating"":3},""code"":""public double calculateTax(Person p){\n  //Get the class of the Person object\n  //Calculates the tax based on that person's occupation\n}""}"
8,1.0,1.0,1.0,2.5,2017-04-20 19:29:29.806782,4,,"public double calculateTax(Person p){
  //Find the class of the object
  //Calculates the tax based on that person's occupation
  if(p.class==""Employee""){
    if(p.getSalary()<10000){
      return p.getSalary()*0.02;
    }else{
      return p.getSalary()*0.05;
    }
  }else if(p.class==""BusiessOwner""){
    return p.getProfit()*0.1;
  }
  return 0.0;
}"
9,1.0,1.0,1.0,1.0,2017-04-20 19:29:31.346843,4,,"public double calculateTax(Person p){
  //Find the class of the object
  //Calculates the tax based on that person's occupation
  if(p.class==""Employee""){
    if(p.getSalary()<10000){
      return p.getSalary()*0.02;
    }else{
      return p.getSalary()*0.05;
    }
  }else if(p.class==""BusiessOwner""){
    return p.getProfit()*0.1;
  }
  return 0.0;
}"
10,2.0,1.0,1.0,1.0,2017-04-20 19:29:42.009932,4,,"public double calculateTax(Person p){
  //Find the class of the object
  //Calculates the tax based on that person's occupation
  if(p.class==""Employee""){
    if(p.getSalary()<10000){
      return p.getSalary()*0.02;
    }else{
      return p.getSalary()*0.05;
    }
  }else if(p.class==""BusiessOwner""){
    return p.getProfit()*0.1;
  }
  return 0.0;
}"
11,2.0,1.0,1.0,1.0,2017-04-20 19:30:03.403652,4,6,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""/**\n      Gets the final score for this student.\n      @return the sum of the scores, with the lowest score dropped if \n      there are at least two scores, or 0 if there are no scores.\n   */\npublic double finalScore() {\n    if (scoresSize == 0) {\n        return 0;\n    } else if (scoresSize == 1) {\n        return scores[0];\n    } else {\n        return sum() - minimum();\n    }\n}\n"",""rating"":2},""code"":""public double calculateTax(Person p){\n  //Find the class of the object\n  //Calculates the tax based on that person's occupation\n  if(p.class==\""Employee\""){\n    if(p.getSalary()<10000){\n      return p.getSalary()*0.02;\n    }else{\n      return p.getSalary()*0.05;\n    }\n  }else if(p.class==\""BusiessOwner\""){\n    return p.getProfit()*0.1;\n  }\n  return 0.0;\n}""}"
12,2.0,1.0,2.5,1.0,2017-04-20 19:31:22.107108,4,,"public double calculateTax(Person p){
  //getClass method
  //Calculates the tax based on that person's occupation
  if(p.class==""Employee""){
    if(p.getSalary()<10000){
      return p.getSalary()*0.02;
    }else{
      return p.getSalary()*0.05;
    }
  }else if(p.class==""BusiessOwner""){
    return p.getProfit()*0.1;
  }
  return 0.0;
}"
13,2.0,1.0,2.5,3.0,2017-04-20 19:32:49.128758,4,,"public double calculateTax(Person p){
  //class method of Object class
  //Calculates the tax based on that person's occupation
  if(p.class==""Employee""){
    if(p.getSalary()<10000){
      return p.getSalary()*0.02;
    }else{
      return p.getSalary()*0.05;
    }
  }else if(p.class==""BusiessOwner""){
    return p.getProfit()*0.1;
  }
  return 0.0;
}"
14,2.0,1.0,0.5,3.0,2017-04-20 19:32:51.469247,4,,"public double calculateTax(Person p){
  //class method of Object class
  //Calculates the tax based on that person's occupation
  if(p.class==""Employee""){
    if(p.getSalary()<10000){
      return p.getSalary()*0.02;
    }else{
      return p.getSalary()*0.05;
    }
  }else if(p.class==""BusiessOwner""){
    return p.getProfit()*0.1;
  }
  return 0.0;
}"
15,0.0,1.0,0.5,3.0,2017-04-20 19:32:52.605564,4,,"public double calculateTax(Person p){
  //class method of Object class
  //Calculates the tax based on that person's occupation
  if(p.class==""Employee""){
    if(p.getSalary()<10000){
      return p.getSalary()*0.02;
    }else{
      return p.getSalary()*0.05;
    }
  }else if(p.class==""BusiessOwner""){
    return p.getProfit()*0.1;
  }
  return 0.0;
}"
16,0.0,0.0,0.5,3.0,2017-04-20 19:32:53.732433,4,,"public double calculateTax(Person p){
  //class method of Object class
  //Calculates the tax based on that person's occupation
  if(p.class==""Employee""){
    if(p.getSalary()<10000){
      return p.getSalary()*0.02;
    }else{
      return p.getSalary()*0.05;
    }
  }else if(p.class==""BusiessOwner""){
    return p.getProfit()*0.1;
  }
  return 0.0;
}"
17,0.0,0.0,0.0,3.0,2017-04-20 19:32:55.344885,4,,"public double calculateTax(Person p){
  //class method of Object class
  //Calculates the tax based on that person's occupation
  if(p.class==""Employee""){
    if(p.getSalary()<10000){
      return p.getSalary()*0.02;
    }else{
      return p.getSalary()*0.05;
    }
  }else if(p.class==""BusiessOwner""){
    return p.getProfit()*0.1;
  }
  return 0.0;
}"
18,0.0,0.0,0.0,5.0,2017-04-20 19:33:59.845270,4,,"public double calculateTax(Person p){
  //Object class
  //Calculates the tax based on that person's occupation
  if(p.class==""Employee""){
    if(p.getSalary()<10000){
      return p.getSalary()*0.02;
    }else{
      return p.getSalary()*0.05;
    }
  }else if(p.class==""BusiessOwner""){
    return p.getProfit()*0.1;
  }
  return 0.0;
}"
19,0.0,0.0,0.0,0.5,2017-04-20 19:36:01.153019,4,,"public double calculateTax(Person p){
  //getClass()

  if(p.class==""Employee""){
    if(p.getSalary()<10000){
      return p.getSalary()*0.02;
    }else{
      return p.getSalary()*0.05;
    }
  }else if(p.class==""BusiessOwner""){
    return p.getProfit()*0.1;
  }
  return 0.0;
}"
20,0.0,2.0,0.0,0.5,2017-04-20 19:36:04.389895,4,,"public double calculateTax(Person p){
  //getClass()

  if(p.class==""Employee""){
    if(p.getSalary()<10000){
      return p.getSalary()*0.02;
    }else{
      return p.getSalary()*0.05;
    }
  }else if(p.class==""BusiessOwner""){
    return p.getProfit()*0.1;
  }
  return 0.0;
}"
21,0.0,2.0,0.0,0.0,2017-04-20 19:36:07.356171,4,,"public double calculateTax(Person p){
  //getClass()

  if(p.class==""Employee""){
    if(p.getSalary()<10000){
      return p.getSalary()*0.02;
    }else{
      return p.getSalary()*0.05;
    }
  }else if(p.class==""BusiessOwner""){
    return p.getProfit()*0.1;
  }
  return 0.0;
}"
22,4.5,2.0,0.0,0.0,2017-04-20 19:36:08.868282,4,,"public double calculateTax(Person p){
  //getClass()

  if(p.class==""Employee""){
    if(p.getSalary()<10000){
      return p.getSalary()*0.02;
    }else{
      return p.getSalary()*0.05;
    }
  }else if(p.class==""BusiessOwner""){
    return p.getProfit()*0.1;
  }
  return 0.0;
}"
23,5.0,2.0,0.0,0.0,2017-04-20 19:36:09.702498,4,,"public double calculateTax(Person p){
  //getClass()

  if(p.class==""Employee""){
    if(p.getSalary()<10000){
      return p.getSalary()*0.02;
    }else{
      return p.getSalary()*0.05;
    }
  }else if(p.class==""BusiessOwner""){
    return p.getProfit()*0.1;
  }
  return 0.0;
}"
24,5.0,2.0,0.0,5.0,2017-04-20 19:39:08.516829,4,,"public double calculateTax(Person p){
  //get the class of the polymorphic object 

  if(p.class==""Employee""){
    if(p.getSalary()<10000){
      return p.getSalary()*0.02;
    }else{
      return p.getSalary()*0.05;
    }
  }else if(p.class==""BusiessOwner""){
    return p.getProfit()*0.1;
  }
  return 0.0;
}"
25,0.5,2.0,0.0,5.0,2017-04-20 19:39:09.575398,4,,"public double calculateTax(Person p){
  //get the class of the polymorphic object 

  if(p.class==""Employee""){
    if(p.getSalary()<10000){
      return p.getSalary()*0.02;
    }else{
      return p.getSalary()*0.05;
    }
  }else if(p.class==""BusiessOwner""){
    return p.getProfit()*0.1;
  }
  return 0.0;
}"
26,0.5,2.0,0.0,5.0,2017-04-20 19:39:11.455342,4,,"public double calculateTax(Person p){
  //get the class of the polymorphic object 

  if(p.class==""Employee""){
    if(p.getSalary()<10000){
      return p.getSalary()*0.02;
    }else{
      return p.getSalary()*0.05;
    }
  }else if(p.class==""BusiessOwner""){
    return p.getProfit()*0.1;
  }
  return 0.0;
}"
27,0.5,0.5,0.0,5.0,2017-04-20 19:39:23.904964,4,,"public double calculateTax(Person p){
  //get the class of the polymorphic object 

  if(p.class==""Employee""){
    if(p.getSalary()<10000){
      return p.getSalary()*0.02;
    }else{
      return p.getSalary()*0.05;
    }
  }else if(p.class==""BusiessOwner""){
    return p.getProfit()*0.1;
  }
  return 0.0;
}"
28,0.5,0.5,0.0,5.0,2017-04-20 19:39:24.591019,4,,"public double calculateTax(Person p){
  //get the class of the polymorphic object 

  if(p.class==""Employee""){
    if(p.getSalary()<10000){
      return p.getSalary()*0.02;
    }else{
      return p.getSalary()*0.05;
    }
  }else if(p.class==""BusiessOwner""){
    return p.getProfit()*0.1;
  }
  return 0.0;
}"
29,0.5,0.0,0.0,5.0,2017-04-20 19:39:25.648889,4,,"public double calculateTax(Person p){
  //get the class of the polymorphic object 

  if(p.class==""Employee""){
    if(p.getSalary()<10000){
      return p.getSalary()*0.02;
    }else{
      return p.getSalary()*0.05;
    }
  }else if(p.class==""BusiessOwner""){
    return p.getProfit()*0.1;
  }
  return 0.0;
}"
30,0.0,0.0,0.0,5.0,2017-04-20 19:39:26.392958,4,,"public double calculateTax(Person p){
  //get the class of the polymorphic object 

  if(p.class==""Employee""){
    if(p.getSalary()<10000){
      return p.getSalary()*0.02;
    }else{
      return p.getSalary()*0.05;
    }
  }else if(p.class==""BusiessOwner""){
    return p.getProfit()*0.1;
  }
  return 0.0;
}"
31,0.0,0.0,0.0,5.0,2017-04-20 19:40:51.973538,4,7,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", targetDate = \""Jan 1, 2012\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":3},""code"":""public double calculateTax(Person p){\n  //function for calculating tax based on occupation \n\n  if(p.class==\""Employee\""){\n    if(p.getSalary()<10000){\n      return p.getSalary()*0.02;\n    }else{\n      return p.getSalary()*0.05;\n    }\n  }else if(p.class==\""BusiessOwner\""){\n    return p.getProfit()*0.1;\n  }\n  return 0.0;\n}""}"
32,0.0,0.0,0.0,5.0,2017-04-20 19:41:14.366613,4,8,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":3},""code"":""public double calculateTax(Person p){\n  //function for calculating tax based on occupation \n\n  if(p.class==\""Employee\""){\n    if(p.getSalary()<10000){\n      return p.getSalary()*0.02;\n    }else{\n      return p.getSalary()*0.05;\n    }\n  }else if(p.class==\""BusiessOwner\""){\n    return p.getProfit()*0.1;\n  }\n  return 0.0;\n}""}"
33,0.0,0.0,1.5,5.0,2017-04-20 19:41:26.424607,4,,"public double calculateTax(Person p){
  //function for calculating tax based on occupation 

  if(p.class==""Employee""){
    if(p.getSalary()<10000){
      return p.getSalary()*0.02;
    }else{
      return p.getSalary()*0.05;
    }
  }else if(p.class==""BusiessOwner""){
    return p.getProfit()*0.1;
  }
  return 0.0;
}"
34,0.0,1.5,1.5,5.0,2017-04-20 19:41:42.358293,4,,"public double calculateTax(Person p){
  //function for calculating tax based on occupation 

  if(p.class==""Employee""){
    if(p.getSalary()<10000){
      return p.getSalary()*0.02;
    }else{
      return p.getSalary()*0.05;
    }
  }else if(p.class==""BusiessOwner""){
    return p.getProfit()*0.1;
  }
  return 0.0;
}"
35,1.5,1.5,1.5,5.0,2017-04-20 19:41:45.095787,4,,"public double calculateTax(Person p){
  //function for calculating tax based on occupation 

  if(p.class==""Employee""){
    if(p.getSalary()<10000){
      return p.getSalary()*0.02;
    }else{
      return p.getSalary()*0.05;
    }
  }else if(p.class==""BusiessOwner""){
    return p.getProfit()*0.1;
  }
  return 0.0;
}"
36,3.5,1.5,1.5,5.0,2017-04-20 19:41:50.532266,4,,"public double calculateTax(Person p){
  //function for calculating tax based on occupation 

  if(p.class==""Employee""){
    if(p.getSalary()<10000){
      return p.getSalary()*0.02;
    }else{
      return p.getSalary()*0.05;
    }
  }else if(p.class==""BusiessOwner""){
    return p.getProfit()*0.1;
  }
  return 0.0;
}"
37,0.5,1.5,1.5,5.0,2017-04-20 19:46:51.842744,4,,"public double calculateTax(Person p){
  //function for calculating tax based on occupation 
//instanceOf method
  if(p.class==""Employee""){
    if(p.getSalary()<10000){
      return p.getSalary()*0.02;
    }else{
      return p.getSalary()*0.05;
    }
  }else if(p.class==""BusiessOwner""){
    return p.getProfit()*0.1;
  }
  return 0.0;
}"
38,0.5,1.5,1.5,5.0,2017-04-20 19:46:52.516802,4,,"public double calculateTax(Person p){
  //function for calculating tax based on occupation 
//instanceOf method
  if(p.class==""Employee""){
    if(p.getSalary()<10000){
      return p.getSalary()*0.02;
    }else{
      return p.getSalary()*0.05;
    }
  }else if(p.class==""BusiessOwner""){
    return p.getProfit()*0.1;
  }
  return 0.0;
}"
39,0.0,1.5,1.5,5.0,2017-04-20 19:46:53.358514,4,,"public double calculateTax(Person p){
  //function for calculating tax based on occupation 
//instanceOf method
  if(p.class==""Employee""){
    if(p.getSalary()<10000){
      return p.getSalary()*0.02;
    }else{
      return p.getSalary()*0.05;
    }
  }else if(p.class==""BusiessOwner""){
    return p.getProfit()*0.1;
  }
  return 0.0;
}"
40,0.0,0.0,1.5,5.0,2017-04-20 19:46:54.459190,4,,"public double calculateTax(Person p){
  //function for calculating tax based on occupation 
//instanceOf method
  if(p.class==""Employee""){
    if(p.getSalary()<10000){
      return p.getSalary()*0.02;
    }else{
      return p.getSalary()*0.05;
    }
  }else if(p.class==""BusiessOwner""){
    return p.getProfit()*0.1;
  }
  return 0.0;
}"
41,0.0,0.0,0.0,5.0,2017-04-20 19:46:55.360989,4,,"public double calculateTax(Person p){
  //function for calculating tax based on occupation 
//instanceOf method
  if(p.class==""Employee""){
    if(p.getSalary()<10000){
      return p.getSalary()*0.02;
    }else{
      return p.getSalary()*0.05;
    }
  }else if(p.class==""BusiessOwner""){
    return p.getProfit()*0.1;
  }
  return 0.0;
}"
42,0.0,0.0,0.0,5.0,2017-04-20 19:48:50.654828,4,9,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":3},""code"":""public double calculateTax(Person p){\n  //instance Of method\n  if(p.class==\""Employee\""){\n    if(p.getSalary()<10000){\n      return p.getSalary()*0.02;\n    }else{\n      return p.getSalary()*0.05;\n    }\n  }else if(p.class==\""BusiessOwner\""){\n    return p.getProfit()*0.1;\n  }\n  return 0.0;\n}""}"
43,0.0,0.0,0.0,5.0,2017-04-20 19:51:00.584833,4,10,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", targetDate = \""Jan 1, 2012\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":3},""code"":""public double calculateTax(Person p){\n  //instance Of method\n  if(p instanceof Employee){\n    Employee e = (Employee)p\n    if(p.getSalary()<10000){\n      return p.getSalary()*0.02;\n    }else{\n      return p.getSalary()*0.05;\n    }\n  }else if(p.class==\""BusiessOwner\""){\n    return p.getProfit()*0.1;\n  }\n  return 0.0;\n}""}"
44,0.0,0.0,1.0,5.0,2017-04-20 19:51:09.844064,4,,"public double calculateTax(Person p){
  //instance Of method
  if(p instanceof Employee){
    Employee e = (Employee)p
    if(p.getSalary()<10000){
      return p.getSalary()*0.02;
    }else{
      return p.getSalary()*0.05;
    }
  }else if(p.class==""BusiessOwner""){
    return p.getProfit()*0.1;
  }
  return 0.0;
}"
45,0.0,0.0,2.0,5.0,2017-04-20 19:51:10.122304,4,,"public double calculateTax(Person p){
  //instance Of method
  if(p instanceof Employee){
    Employee e = (Employee)p
    if(p.getSalary()<10000){
      return p.getSalary()*0.02;
    }else{
      return p.getSalary()*0.05;
    }
  }else if(p.class==""BusiessOwner""){
    return p.getProfit()*0.1;
  }
  return 0.0;
}"
46,1.5,0.0,2.0,5.0,2017-04-20 19:51:35.370791,4,,"public double calculateTax(Person p){
  //instance Of method
  if(p instanceof Employee){
    Employee e = (Employee)p
    if(p.getSalary()<10000){
      return p.getSalary()*0.02;
    }else{
      return p.getSalary()*0.05;
    }
  }else if(p.class==""BusiessOwner""){
    return p.getProfit()*0.1;
  }
  return 0.0;
}"
47,0.5,0.0,2.0,5.0,2017-04-20 19:53:37.951838,4,,"public double calculateTax(Person p){
  //instance Of method
  boolean flag = p instanceof Employee;
  /*if(p instanceof Employee){
    Employee e = (Employee)p
    if(e.getSalary()<10000){
      return e.getSalary()*0.02;
    }else{
      return e.getSalary()*0.05;
    }
  }else if(p instanceof BusinessOwner){
    BusinessOwner b = new BusinessOwner();
    return p.getProfit()*0.1;
  }
  return 0.0;
  */
}"
48,0.0,0.0,2.0,5.0,2017-04-20 19:53:39.166856,4,,"public double calculateTax(Person p){
  //instance Of method
  boolean flag = p instanceof Employee;
  /*if(p instanceof Employee){
    Employee e = (Employee)p
    if(e.getSalary()<10000){
      return e.getSalary()*0.02;
    }else{
      return e.getSalary()*0.05;
    }
  }else if(p instanceof BusinessOwner){
    BusinessOwner b = new BusinessOwner();
    return p.getProfit()*0.1;
  }
  return 0.0;
  */
}"
49,0.0,3.5,2.0,5.0,2017-04-20 19:53:44.872544,4,,"public double calculateTax(Person p){
  //instance Of method
  boolean flag = p instanceof Employee;
  /*if(p instanceof Employee){
    Employee e = (Employee)p
    if(e.getSalary()<10000){
      return e.getSalary()*0.02;
    }else{
      return e.getSalary()*0.05;
    }
  }else if(p instanceof BusinessOwner){
    BusinessOwner b = new BusinessOwner();
    return p.getProfit()*0.1;
  }
  return 0.0;
  */
}"
50,0.0,3.5,0.0,5.0,2017-04-20 19:53:46.025018,4,,"public double calculateTax(Person p){
  //instance Of method
  boolean flag = p instanceof Employee;
  /*if(p instanceof Employee){
    Employee e = (Employee)p
    if(e.getSalary()<10000){
      return e.getSalary()*0.02;
    }else{
      return e.getSalary()*0.05;
    }
  }else if(p instanceof BusinessOwner){
    BusinessOwner b = new BusinessOwner();
    return p.getProfit()*0.1;
  }
  return 0.0;
  */
}"
51,0.0,3.5,0.0,0.0,2017-04-20 19:53:47.367665,4,,"public double calculateTax(Person p){
  //instance Of method
  boolean flag = p instanceof Employee;
  /*if(p instanceof Employee){
    Employee e = (Employee)p
    if(e.getSalary()<10000){
      return e.getSalary()*0.02;
    }else{
      return e.getSalary()*0.05;
    }
  }else if(p instanceof BusinessOwner){
    BusinessOwner b = new BusinessOwner();
    return p.getProfit()*0.1;
  }
  return 0.0;
  */
}"
52,0.0,3.5,0.0,0.0,2017-04-20 19:56:31.756915,4,11,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""public void actionPerformed(ActionEvent evt) {\n    // This method will be called when the user changes the state of either\n    // the JCheckBox or of the JCheckBoxMenuItem.  It sets the text of the\n    // message according to the value of the action's SELECTED _KEY property.\n    // Note that a property value is actually an Object.  For a boolean\n    // property value, the wrapper class Boolean is used.  Since the\n    // return type of message.getValue() is Object, it has to be type-cast\n    // to Boolean to use the value as a boolean value.\n    boolean useHello = (Boolean) messageAction.getValue(Action.SELECTED_KEY);\n    if (useHello)\n        message.setText(\""HELLO\"");\n    else\n        message.setText(\""GOODBYE\"");\n}\n"",""rating"":3},""code"":""public double calculateTax(Person p){\n  //instance Of method\n  \n  if(p instanceof Employee){\n    Employee e = (Employee)p\n    if(e.getSalary()<10000){\n      return e.getSalary()*0.02;\n    }else{\n      return e.getSalary()*0.05;\n    }\n  }else if(p instanceof BusinessOwner){\n    BusinessOwner b = (BusinessOwner)p;\n    return b.getProfit()*0.1;\n  }\n  return 0.0;\n}""}"
53,0.0,3.5,0.0,0.0,2017-04-20 19:56:33.770989,4,12,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""/**\n      Constructs a manager with a given name, annual salary and weekly bonus.\n      @param name the name of this employee\n      @param salary the annual salary\n      @param bonus the weekly bonus\n    */\npublic Manager(String name, double salary, double bonus) {\n    super(name, salary);\n    weeklyBonus = bonus;\n}\n"",""rating"":1},""code"":""public double calculateTax(Person p){\n  //instance Of method\n  \n  if(p instanceof Employee){\n    Employee e = (Employee)p\n    if(e.getSalary()<10000){\n      return e.getSalary()*0.02;\n    }else{\n      return e.getSalary()*0.05;\n    }\n  }else if(p instanceof BusinessOwner){\n    BusinessOwner b = (BusinessOwner)p;\n    return b.getProfit()*0.1;\n  }\n  return 0.0;\n}""}"
54,0.0,3.5,0.0,0.0,2017-04-20 19:56:37.924609,4,13,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""/**\n      Gets the name of this employee.\n      @return the name \n   */\npublic String getName() {\n    return name;\n}\n"",""rating"":1},""code"":""public double calculateTax(Person p){\n  //instance Of method\n  \n  if(p instanceof Employee){\n    Employee e = (Employee)p\n    if(e.getSalary()<10000){\n      return e.getSalary()*0.02;\n    }else{\n      return e.getSalary()*0.05;\n    }\n  }else if(p instanceof BusinessOwner){\n    BusinessOwner b = (BusinessOwner)p;\n    return b.getProfit()*0.1;\n  }\n  return 0.0;\n}""}"
55,0.0,3.5,0.0,0.0,2017-04-20 19:56:38.724726,4,14,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Constructs a salaried employee with a given name and annual salary.\n      @param name the name of this employee\n      @param salary the annual salary\n    */\npublic SalariedEmployee(String name, double salary) {\n    setName(name);\n    annualSalary = salary;\n}\n"",""rating"":1},""code"":""public double calculateTax(Person p){\n  //instance Of method\n  \n  if(p instanceof Employee){\n    Employee e = (Employee)p\n    if(e.getSalary()<10000){\n      return e.getSalary()*0.02;\n    }else{\n      return e.getSalary()*0.05;\n    }\n  }else if(p instanceof BusinessOwner){\n    BusinessOwner b = (BusinessOwner)p;\n    return b.getProfit()*0.1;\n  }\n  return 0.0;\n}""}"
56,0.0,3.5,0.0,0.0,2017-04-20 19:56:44.151842,4,15,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""public static void main(String[] args) {\n    gamesPlayed = 0;\n    // This is actually redundant, since 0 is \n    gamesWon = 0;\n    //                 the default initial value.\n    System.out.println(\""Let's play a game.  I'll pick a number between\"");\n    System.out.println(\""1 and 100, and you try to guess it.\"");\n    boolean playAgain;\n    do {\n        // call subroutine to play one game\n        playGame();\n        System.out.print(\""Would you like to play again? \"");\n        playAgain = TextIO.getlnBoolean();\n    } while (playAgain);\n    System.out.println();\n    System.out.println(\""You played \"" + gamesPlayed + \"" games,\"");\n    System.out.println(\""and you won \"" + gamesWon + \"" of those games.\"");\n    System.out.println(\""Thanks for playing.  Goodbye.\"");\n}\n"",""rating"":1},""code"":""public double calculateTax(Person p){\n  //instance Of method\n  \n  if(p instanceof Employee){\n    Employee e = (Employee)p\n    if(e.getSalary()<10000){\n      return e.getSalary()*0.02;\n    }else{\n      return e.getSalary()*0.05;\n    }\n  }else if(p instanceof BusinessOwner){\n    BusinessOwner b = (BusinessOwner)p;\n    return b.getProfit()*0.1;\n  }\n  return 0.0;\n}""}"
57,1.0,0.0,1.0,1.0,2017-04-20 19:58:05.961039,4,,"public int getMaxDifference(int input[]){

}"
58,1.0,0.0,0.0,1.0,2017-04-20 19:58:06.873218,4,,"public int getMaxDifference(int input[]){

}"
59,1.0,0.0,0.0,0.0,2017-04-20 19:58:07.865443,4,,"public int getMaxDifference(int input[]){

}"
60,1.0,0.0,0.0,0.0,2017-04-20 19:58:43.888390,4,16,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""public static <E extends Comparable<E>> E max(E[] a) {\n    E largest = a[0];\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":3},""code"":""public int getMaxDifference(int input[]){\n\n}""}"
61,1.0,0.0,0.0,3.0,2017-04-20 19:59:34.165683,4,,"public int getMaxDifference(int input[]){
//function to calculate maximum difference in array
}"
62,1.0,0.0,0.0,3.0,2017-04-20 19:59:57.526941,4,17,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""/**\n      Computes the largest value of an array.\n      @param a the array\n      @return the largest value in a\n   */\npublic static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":3},""code"":""public int getMaxDifference(int input[]){\n//function to calculate maximum difference in array\n}""}"
63,1.0,0.0,0.0,3.0,2017-04-20 20:00:21.877524,4,18,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""public static void main(String args[]) {\n    int m = 10, n = 20, max;\n    max = (m > n) ? m : n;\n    System.out.println(\""max of \"" + m + \"" and \"" + n + \"": \"" + max);\n    n = 5;\n    max = (m > n) ? m : n;\n    System.out.println(\""max of \"" + m + \"" and \"" + n + \"": \"" + max);\n}\n"",""rating"":3},""code"":""public int getMaxDifference(int input[]){\n//function to calculate maximum difference in array\n}""}"
64,1.0,0.0,0.0,4.0,2017-04-20 20:01:30.130790,4,,"public int getMaxDifference(int input[]){
// gets the minimum vaue from array
}"
65,1.0,0.0,0.0,5.0,2017-04-20 20:01:35.037450,4,,"public int getMaxDifference(int input[]){
// gets the minimum vaue from array
}"
66,0.0,0.0,0.0,5.0,2017-04-20 20:02:33.377672,4,,"public int getMaxDifference(int input[]){
// difference of maximum and minimum of the array
}"
67,0.0,0.0,0.0,1.0,2017-04-20 20:19:32.117947,4,,"public int getDifferenceInArray(int input[]){
// difference of maximum and minimum of the array
  
}"
68,1.0,0.0,0.0,1.0,2017-04-20 20:19:38.484792,4,,"public int getDifferenceInArray(int input[]){
// difference of maximum and minimum of the array
  
}"
69,3.0,0.0,0.0,1.0,2017-04-20 20:20:39.743941,4,,"public int getMaxDifference(int input[]){
// difference of maximum and minimum of the array
  
}"
70,3.0,0.0,0.0,0.0,2017-04-20 20:20:41.618223,4,,"public int getMaxDifference(int input[]){
// difference of maximum and minimum of the array
  
}"
71,5.0,0.0,0.0,0.0,2017-04-20 20:20:48.653639,4,,"public int getMaxDifference(int input[]){
// difference of maximum and minimum of the array
  
}"
72,5.0,0.5,0.0,0.0,2017-04-20 20:24:14.735696,4,,"public int getMaxDifference(int input[]){
// difference of maximum and minimum of the array
  int min=Integer.MAX_VALUE;
  int max = Integer.MIN_VALUE;
  for(int i=0;i<input.length;i++){
    
  }
}"
73,2.5,0.5,0.0,0.0,2017-04-20 20:24:18.490047,4,,"public int getMaxDifference(int input[]){
// difference of maximum and minimum of the array
  int min=Integer.MAX_VALUE;
  int max = Integer.MIN_VALUE;
  for(int i=0;i<input.length;i++){
    
  }
}"
74,2.5,2.0,0.0,0.0,2017-04-20 20:24:20.942002,4,,"public int getMaxDifference(int input[]){
// difference of maximum and minimum of the array
  int min=Integer.MAX_VALUE;
  int max = Integer.MIN_VALUE;
  for(int i=0;i<input.length;i++){
    
  }
}"
75,2.5,2.0,0.0,5.0,2017-04-20 20:32:11.456206,4,,"public int getMaxDifference(int input[]){
// difference of maximum and minimum of the array
  int min=Integer.MAX_VALUE;
  int max = Integer.MIN_VALUE;
  for(int i=0;i<input.length;i++){
    
  }
}"
76,1.5,2.0,0.0,5.0,2017-04-20 20:32:12.779579,4,,"public int getMaxDifference(int input[]){
// difference of maximum and minimum of the array
  int min=Integer.MAX_VALUE;
  int max = Integer.MIN_VALUE;
  for(int i=0;i<input.length;i++){
    
  }
}"
77,0.0,2.0,0.0,5.0,2017-04-20 20:32:14.100394,4,,"public int getMaxDifference(int input[]){
// difference of maximum and minimum of the array
  int min=Integer.MAX_VALUE;
  int max = Integer.MIN_VALUE;
  for(int i=0;i<input.length;i++){
    
  }
}"
78,0.0,0.0,0.0,5.0,2017-04-20 20:32:15.738138,4,,"public int getMaxDifference(int input[]){
// difference of maximum and minimum of the array
  int min=Integer.MAX_VALUE;
  int max = Integer.MIN_VALUE;
  for(int i=0;i<input.length;i++){
    
  }
}"
79,0.0,0.0,1.5,5.0,2017-04-20 20:48:52.723432,4,,"public int getMaxDifference(int input[]){
// difference of maximum and minimum of the array
  int min=Integer.MAX_VALUE;
  int max = Integer.MIN_VALUE;
  for(int i=0;i<input.length;i++){
    
  }
}"
80,0.0,2.0,1.5,5.0,2017-04-20 20:48:54.505657,4,,"public int getMaxDifference(int input[]){
// difference of maximum and minimum of the array
  int min=Integer.MAX_VALUE;
  int max = Integer.MIN_VALUE;
  for(int i=0;i<input.length;i++){
    
  }
}"
81,1.0,2.0,1.5,5.0,2017-04-20 20:48:55.994077,4,,"public int getMaxDifference(int input[]){
// difference of maximum and minimum of the array
  int min=Integer.MAX_VALUE;
  int max = Integer.MIN_VALUE;
  for(int i=0;i<input.length;i++){
    
  }
}"
82,1.0,2.0,1.5,1.0,2017-04-20 20:48:58.956182,4,,"public int getMaxDifference(int input[]){
// difference of maximum and minimum of the array
  int min=Integer.MAX_VALUE;
  int max = Integer.MIN_VALUE;
  for(int i=0;i<input.length;i++){
    
  }
}"
83,1.0,2.0,1.5,1.0,2017-04-20 20:49:00.603376,4,,"public int getMaxDifference(int input[]){
// difference of maximum and minimum of the array
  int min=Integer.MAX_VALUE;
  int max = Integer.MIN_VALUE;
  for(int i=0;i<input.length;i++){
    
  }
}"
84,1.0,2.0,1.5,0.5,2017-04-20 20:49:02.411304,4,,"public int getMaxDifference(int input[]){
// difference of maximum and minimum of the array
  int min=Integer.MAX_VALUE;
  int max = Integer.MIN_VALUE;
  for(int i=0;i<input.length;i++){
    
  }
}"
85,1.0,2.0,1.5,0.5,2017-04-20 20:49:10.408481,4,19,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""// pre: list != null\n// post: return sum of elements\n// use traditional for loop\npublic static int sumListOld(int[] list) {\n    int total = 0;\n    for (int i = 0; i < list.length; i++) {\n        total += list[i];\n        System.out.println(list[i]);\n    }\n    return total;\n}\n"",""rating"":3},""code"":""public int getMaxDifference(int input[]){\n// difference of maximum and minimum of the array\n  int min=Integer.MAX_VALUE;\n  int max = Integer.MIN_VALUE;\n  for(int i=0;i<input.length;i++){\n    \n  }\n}""}"
86,1.0,2.0,1.5,0.5,2017-04-20 20:49:16.708175,4,20,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""// pre: list != null, list.length > 0\n// post: return index of minimum element of array\npublic static int findMin(int[] list) {\n    assert list != null && list.length > 0 : \""failed precondition\"";\n    int indexOfMin = 0;\n    for (int i = 1; i < list.length; i++) {\n        if (list[i] < list[indexOfMin]) {\n            indexOfMin = i;\n        }\n    }\n    return indexOfMin;\n}\n"",""rating"":4},""code"":""public int getMaxDifference(int input[]){\n// difference of maximum and minimum of the array\n  int min=Integer.MAX_VALUE;\n  int max = Integer.MIN_VALUE;\n  for(int i=0;i<input.length;i++){\n    \n  }\n}""}"
87,0.5,2.0,1.5,0.5,2017-04-20 20:53:07.766959,4,,"public int getMaxDifference(int input[]){
// difference of maximum and minimum of the array
  int min=Integer.MAX_VALUE;
  int max = Integer.MIN_VALUE;
  for(int i=0;i<input.length;i++){
    if(input[i]>max)
      max = input[i];
    else if(input[i]<min)
      min = input[i];
  }
  return max-min;
}"
88,0.5,2.0,0.5,0.5,2017-04-20 20:53:09.977169,4,,"public int getMaxDifference(int input[]){
// difference of maximum and minimum of the array
  int min=Integer.MAX_VALUE;
  int max = Integer.MIN_VALUE;
  for(int i=0;i<input.length;i++){
    if(input[i]>max)
      max = input[i];
    else if(input[i]<min)
      min = input[i];
  }
  return max-min;
}"
89,0.5,2.0,1.5,0.5,2017-04-20 20:53:16.474733,4,,"public int getMaxDifference(int input[]){
// difference of maximum and minimum of the array
  int min=Integer.MAX_VALUE;
  int max = Integer.MIN_VALUE;
  for(int i=0;i<input.length;i++){
    if(input[i]>max)
      max = input[i];
    else if(input[i]<min)
      min = input[i];
  }
  return max-min;
}"
90,0.5,2.0,1.5,0.5,2017-04-20 20:53:37.914926,4,21,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""// pre: list != null, list.length > 0\n// post: return index of minimum element of array\npublic static int findMin(int[] list) {\n    assert list != null && list.length > 0 : \""failed precondition\"";\n    int indexOfMin = 0;\n    for (int i = 1; i < list.length; i++) {\n        if (list[i] < list[indexOfMin]) {\n            indexOfMin = i;\n        }\n    }\n    return indexOfMin;\n}\n"",""rating"":2},""code"":""public int getMaxDifference(int input[]){\n// difference of maximum and minimum of the array\n  int min=Integer.MAX_VALUE;\n  int max = Integer.MIN_VALUE;\n  for(int i=0;i<input.length;i++){\n    if(input[i]>max)\n      max = input[i];\n    else if(input[i]<min)\n      min = input[i];\n  }\n  return max-min;\n}""}"
91,0.5,3.0,1.5,0.5,2017-04-20 20:53:51.410377,4,,"public int getMaxDifference(int input[]){
// difference of maximum and minimum of the array
  int min=Integer.MAX_VALUE;
  int max = Integer.MIN_VALUE;
  for(int i=0;i<input.length;i++){
    if(input[i]>max)
      max = input[i];
    else if(input[i]<min)
      min = input[i];
  }
  return max-min;
}"
92,0.5,3.0,2.5,0.5,2017-04-20 20:54:21.482072,4,,"public int getMaxDifference(int input[]){
// difference of maximum and minimum of the array
  int min=Integer.MAX_VALUE;
  int max = Integer.MIN_VALUE;
  for(int i=0;i<input.length;i++){
    if(input[i]>max)
      max = input[i];
    else if(input[i]<min)
      min = input[i];
  }
  return max-min;
}"
93,0.5,3.0,0.5,0.5,2017-04-20 20:54:23.411757,4,,"public int getMaxDifference(int input[]){
// difference of maximum and minimum of the array
  int min=Integer.MAX_VALUE;
  int max = Integer.MIN_VALUE;
  for(int i=0;i<input.length;i++){
    if(input[i]>max)
      max = input[i];
    else if(input[i]<min)
      min = input[i];
  }
  return max-min;
}"
94,0.0,3.0,0.5,0.5,2017-04-20 20:54:26.406640,4,,"public int getMaxDifference(int input[]){
// difference of maximum and minimum of the array
  int min=Integer.MAX_VALUE;
  int max = Integer.MIN_VALUE;
  for(int i=0;i<input.length;i++){
    if(input[i]>max)
      max = input[i];
    else if(input[i]<min)
      min = input[i];
  }
  return max-min;
}"
95,0.0,3.0,0.5,0.5,2017-04-20 20:55:04.030437,4,22,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""// pre: list != null, list.length > 0\n// post: return index of minimum element of array\npublic static int findMin(int[] list) {\n    assert list != null && list.length > 0 : \""failed precondition\"";\n    int indexOfMin = 0;\n    for (int i = 1; i < list.length; i++) {\n        if (list[i] < list[indexOfMin]) {\n            indexOfMin = i;\n        }\n    }\n    return indexOfMin;\n}\n"",""rating"":2},""code"":""public int getMaxDifference(int input[]){\n// difference of maximum and minimum of the array\n  int min=Integer.MAX_VALUE;\n  int max = Integer.MIN_VALUE;\n  for(int i=0;i<input.length;i++){\n    if(input[i]>max)\n      max = input[i];\n    else if(input[i]<min)\n      min = input[i];\n  }\n  return max-min;\n}""}"
96,0.0,3.0,2.0,0.5,2017-04-20 20:55:14.438413,4,,"public int getMaxDifference(int input[]){
// difference of maximum and minimum of the array
  int min=Integer.MAX_VALUE;
  int max = Integer.MIN_VALUE;
  for(int i=0;i<input.length;i++){
    if(input[i]>max)
      max = input[i];
    else if(input[i]<min)
      min = input[i];
  }
  return max-min;
}"
97,1.0,3.0,2.0,0.5,2017-04-20 20:55:18.513302,4,,"public int getMaxDifference(int input[]){
// difference of maximum and minimum of the array
  int min=Integer.MAX_VALUE;
  int max = Integer.MIN_VALUE;
  for(int i=0;i<input.length;i++){
    if(input[i]>max)
      max = input[i];
    else if(input[i]<min)
      min = input[i];
  }
  return max-min;
}"
98,1.0,4.0,2.0,0.5,2017-04-20 20:55:23.153127,4,,"public int getMaxDifference(int input[]){
// difference of maximum and minimum of the array
  int min=Integer.MAX_VALUE;
  int max = Integer.MIN_VALUE;
  for(int i=0;i<input.length;i++){
    if(input[i]>max)
      max = input[i];
    else if(input[i]<min)
      min = input[i];
  }
  return max-min;
}"
99,1.0,4.0,2.0,1.5,2017-04-20 20:55:49.108599,4,,"public int getMaxDifference(int input[]){
// difference of maximum and minimum of the array
  int min=Integer.MAX_VALUE;
  int max = Integer.MIN_VALUE;
  for(int i=0;i<input.length;i++){
    if(input[i]>max)
      max = input[i];
    else if(input[i]<min)
      min = input[i];
  }
  return max-min;
}"
100,1.0,4.0,2.0,1.5,2017-04-20 20:56:20.864897,4,23,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""// pre: list != null, list.length > 0\n// post: return index of minimum element of array\npublic static int findMin(int[] list) {\n    assert list != null && list.length > 0 : \""failed precondition\"";\n    int indexOfMin = 0;\n    for (int i = 1; i < list.length; i++) {\n        if (list[i] < list[indexOfMin]) {\n            indexOfMin = i;\n        }\n    }\n    return indexOfMin;\n}\n"",""rating"":1},""code"":""public int getMaxDifference(int input[]){\n// difference of maximum and minimum of the array\n  int min=Integer.MAX_VALUE;\n  int max = Integer.MIN_VALUE;\n  for(int i=0;i<input.length;i++){\n    if(input[i]>max)\n      max = input[i];\n    else if(input[i]<min)\n      min = input[i];\n  }\n  return max-min;\n}""}"
101,1.0,4.0,2.0,1.5,2017-04-20 20:56:28.688872,4,24,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""// pre: list != null\n// post: return sum of elements\n// use traditional for loop\npublic static int sumListOld(int[] list) {\n    int total = 0;\n    for (int i = 0; i < list.length; i++) {\n        total += list[i];\n        System.out.println(list[i]);\n    }\n    return total;\n}\n"",""rating"":1},""code"":""public int getMaxDifference(int input[]){\n// difference of maximum and minimum of the array\n  int min=Integer.MAX_VALUE;\n  int max = Integer.MIN_VALUE;\n  for(int i=0;i<input.length;i++){\n    if(input[i]>max)\n      max = input[i];\n    else if(input[i]<min)\n      min = input[i];\n  }\n  return max-min;\n}""}"
102,1.0,4.0,2.0,1.5,2017-04-20 20:56:52.420245,4,25,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public Dimension getMinimumSize() {\n    return size;\n}\n"",""rating"":1},""code"":""public int getMaxDifference(int input[]){\n// difference of maximum and minimum of the array\n  int min=Integer.MAX_VALUE;\n  int max = Integer.MIN_VALUE;\n  for(int i=0;i<input.length;i++){\n    if(input[i]>max)\n      max = input[i];\n    else if(input[i]<min)\n      min = input[i];\n  }\n  return max-min;\n}""}"
103,1.0,4.0,2.0,1.5,2017-04-20 20:57:01.503514,4,26,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent1(int[] a) {\n    int[] counts = new int[a.length];\n    for (// O(n*n)\n    int i = 0; // O(n*n)\n    i < a.length; // O(n*n)\n    i++) {\n        // O(n) in each iteration\n        counts[i] = count(a, a[i]);\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":1},""code"":""public int getMaxDifference(int input[]){\n// difference of maximum and minimum of the array\n  int min=Integer.MAX_VALUE;\n  int max = Integer.MIN_VALUE;\n  for(int i=0;i<input.length;i++){\n    if(input[i]>max)\n      max = input[i];\n    else if(input[i]<min)\n      min = input[i];\n  }\n  return max-min;\n}""}"
104,1.0,4.0,2.0,1.5,2017-04-20 20:57:06.032198,4,27,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""// pre: list != null, list.length > 0\n// post: return index of minimum element of array\npublic static int findMin(int[] list) {\n    assert list != null && list.length > 0 : \""failed precondition\"";\n    int indexOfMin = 0;\n    for (int i = 1; i < list.length; i++) {\n        if (list[i] < list[indexOfMin]) {\n            indexOfMin = i;\n        }\n    }\n    return indexOfMin;\n}\n"",""rating"":2},""code"":""public int getMaxDifference(int input[]){\n// difference of maximum and minimum of the array\n  int min=Integer.MAX_VALUE;\n  int max = Integer.MIN_VALUE;\n  for(int i=0;i<input.length;i++){\n    if(input[i]>max)\n      max = input[i];\n    else if(input[i]<min)\n      min = input[i];\n  }\n  return max-min;\n}""}"
105,1.0,4.0,2.0,1.5,2017-04-20 20:57:14.613768,4,28,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""// pre: list != null\n// post: return sum of elements\n// use traditional for loop\npublic static int sumListOld(int[] list) {\n    int total = 0;\n    for (int i = 0; i < list.length; i++) {\n        total += list[i];\n        System.out.println(list[i]);\n    }\n    return total;\n}\n"",""rating"":1},""code"":""public int getMaxDifference(int input[]){\n// difference of maximum and minimum of the array\n  int min=Integer.MAX_VALUE;\n  int max = Integer.MIN_VALUE;\n  for(int i=0;i<input.length;i++){\n    if(input[i]>max)\n      max = input[i];\n    else if(input[i]<min)\n      min = input[i];\n  }\n  return max-min;\n}""}"
106,1.0,4.0,2.0,1.5,2017-04-20 20:57:16.687245,4,29,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""Task(int min, int max) {\n    this.min = min;\n    this.max = max;\n}\n"",""rating"":1},""code"":""public int getMaxDifference(int input[]){\n// difference of maximum and minimum of the array\n  int min=Integer.MAX_VALUE;\n  int max = Integer.MIN_VALUE;\n  for(int i=0;i<input.length;i++){\n    if(input[i]>max)\n      max = input[i];\n    else if(input[i]<min)\n      min = input[i];\n  }\n  return max-min;\n}""}"
107,1.0,1.0,1.0,1.0,2017-04-21 05:33:45.070810,5,30,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Computes the largest value of an array.\n      @param a the array\n      @return the largest value in a\n   */\npublic static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":1},""code"":""int largestDifference(int[] a) {\n  \n}""}"
108,1.0,1.0,1.0,1.0,2017-04-21 05:35:10.638132,5,31,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static <E extends Comparable<E>> E max(E[] a) {\n    E largest = a[0];\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":2},""code"":""int largestDifference(int[] a) {\n  int largest=INTEGER.Minimum;\n  int smallest = INTEGER.Maximum;\n  for(int i=0; i<a.length; i++) {\n    if(a[i] > largest) {\n      largest = a[i];\n    }\n  }\n}""}"
109,1.0,1.0,1.0,1.0,2017-04-21 05:36:13.773030,5,32,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static <E extends Comparable<E>> E max(E[] a) {\n    E largest = a[0];\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":2},""code"":""int largestDifference(int[] a) {\n  int largest=INTEGER.Minimum;\n  int smallest = INTEGER.Maximum;\n  for(int i=0; i<a.length; i++) {\n    if(a[i] > largest) {\n      largest = a[i];\n    }\n    if(a[i] < smallest) {\n      smallest = a[i];\n    }\n  }\n  return largest - smallest;\n}""}"
110,4.0,1.0,1.0,1.0,2017-04-21 05:36:17.001976,5,,"int largestDifference(int[] a) {
  int largest=INTEGER.Minimum;
  int smallest = INTEGER.Maximum;
  for(int i=0; i<a.length; i++) {
    if(a[i] > largest) {
      largest = a[i];
    }
    if(a[i] < smallest) {
      smallest = a[i];
    }
  }
  return largest - smallest;
}"
111,4.0,1.0,5.0,1.0,2017-04-21 05:36:46.097317,5,,"int largestDifference(int[] a) {
  int largest=INTEGER.Minimum;
  int smallest = INTEGER.Maximum;
  for(int i=0; i<a.length; i++) {
    if(a[i] > largest) {
      largest = a[i];
    }
    if(a[i] < smallest) {
      smallest = a[i];
    }
  }
  return largest - smallest;
}"
112,4.0,1.0,5.0,1.0,2017-04-21 05:37:03.424485,5,33,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static <E extends Comparable<E>> E max(E[] a) {\n    E largest = a[0];\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":2},""code"":""int largestDifference(int[] a) {\n  int largest=INTEGER.Minimum;\n  int smallest = INTEGER.Maximum;\n  for(int i=0; i<a.length; i++) {\n    if(a[i] > largest) {\n      largest = a[i];\n    }\n    if(a[i] < smallest) {\n      smallest = a[i];\n    }\n  }\n  return largest - smallest;\n}""}"
113,4.0,1.0,5.0,3.0,2017-04-21 05:37:21.636985,5,,"int largestDifference(int[] a) {
  //Returns the largest difference
  int largest=INTEGER.Minimum;
  int smallest = INTEGER.Maximum;
  for(int i=0; i<a.length; i++) {
    if(a[i] > largest) {
      largest = a[i];
    }
    if(a[i] < smallest) {
      smallest = a[i];
    }
  }
  return largest - smallest;
}"
114,4.0,1.0,5.0,3.0,2017-04-21 05:37:28.965501,5,34,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""/**\n         * Return the largest item that has been entered.\n         * The return value will be -infinity if no numbers have been entered. \n         */\npublic double getMax() {\n    return max;\n}\n"",""rating"":2},""code"":""int largestDifference(int[] a) {\n  //Returns the largest difference\n  int largest=INTEGER.Minimum;\n  int smallest = INTEGER.Maximum;\n  for(int i=0; i<a.length; i++) {\n    if(a[i] > largest) {\n      largest = a[i];\n    }\n    if(a[i] < smallest) {\n      smallest = a[i];\n    }\n  }\n  return largest - smallest;\n}""}"
115,4.0,1.0,5.0,3.0,2017-04-21 05:37:40.050693,5,35,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static <E extends Comparable<E>> E max(E[] a) {\n    E largest = a[0];\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":2},""code"":""int largestDifference(int[] a) {\n  //Returns the largest difference\n  int largest=INTEGER.Minimum;\n  int smallest = INTEGER.Maximum;\n  for(int i=0; i<a.length; i++) {\n    if(a[i] > largest) {\n      largest = a[i];\n    }\n    if(a[i] < smallest) {\n      smallest = a[i];\n    }\n  }\n  return largest - smallest;\n}""}"
116,4.0,1.0,5.0,3.0,2017-04-21 05:37:45.655959,5,36,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""// pre: list != null, list.length > 0\n// post: return index of minimum element of array\npublic static int findMin(int[] list) {\n    assert list != null && list.length > 0 : \""failed precondition\"";\n    int indexOfMin = 0;\n    for (int i = 1; i < list.length; i++) {\n        if (list[i] < list[indexOfMin]) {\n            indexOfMin = i;\n        }\n    }\n    return indexOfMin;\n}\n"",""rating"":2},""code"":""int largestDifference(int[] a) {\n  //Returns the largest difference\n  int largest=INTEGER.Minimum;\n  int smallest = INTEGER.Maximum;\n  for(int i=0; i<a.length; i++) {\n    if(a[i] > largest) {\n      largest = a[i];\n    }\n    if(a[i] < smallest) {\n      smallest = a[i];\n    }\n  }\n  return largest - smallest;\n}""}"
117,4.0,1.0,5.0,5.0,2017-04-21 05:37:48.672259,5,,"int largestDifference(int[] a) {
  //Returns the largest difference
  int largest=INTEGER.Minimum;
  int smallest = INTEGER.Maximum;
  for(int i=0; i<a.length; i++) {
    if(a[i] > largest) {
      largest = a[i];
    }
    if(a[i] < smallest) {
      smallest = a[i];
    }
  }
  return largest - smallest;
}"
118,4.0,1.0,5.0,5.0,2017-04-21 05:38:02.973956,5,37,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static <E extends Comparable<E>> E max(E[] a) {\n    E largest = a[0];\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":2},""code"":""int largestDifference(int[] a) {\n  //Returns the largest difference\n  //Takes an int array as input\n  int largest=INTEGER.Minimum;\n  int smallest = INTEGER.Maximum;\n  for(int i=0; i<a.length; i++) {\n    if(a[i] > largest) {\n      largest = a[i];\n    }\n    if(a[i] < smallest) {\n      smallest = a[i];\n    }\n  }\n  return largest - smallest;\n}""}"
119,4.0,1.0,5.0,5.0,2017-04-21 05:38:15.509700,5,38,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""public static void main(String[] args) {\n    ArrayList<Double> values = new ArrayList<Double>();\n    // Read inputs\n    System.out.println(\""Please enter values, Q to quit:\"");\n    Scanner in = new Scanner(System.in);\n    while (in.hasNextDouble()) {\n        values.add(in.nextDouble());\n    }\n    // Find the largest value\n    double largest = values.get(0);\n    for (int i = 1; i < values.size(); i++) {\n        if (values.get(i) > largest) {\n            largest = values.get(i);\n        }\n    }\n    for (double element : values) {\n        System.out.print(element);\n        if (element == largest) {\n            System.out.print(\"" <== largest value\"");\n        }\n        System.out.println();\n    }\n}\n       // Print all values, marking the largest\n\n"",""rating"":2},""code"":""int largestDifference(int[] a) {\n  //Returns the largest difference\n  //Takes an int array as input\n  int largest=INTEGER.Minimum;\n  int smallest = INTEGER.Maximum;\n  for(int i=0; i<a.length; i++) {\n    if(a[i] > largest) {\n      largest = a[i];\n    }\n    if(a[i] < smallest) {\n      smallest = a[i];\n    }\n  }\n  return largest - smallest;\n}""}"
120,4.0,1.0,5.0,5.0,2017-04-21 05:38:23.627009,5,39,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""public static void main(String[] args) {\n    int n = 10;\n    int[] squares = IntStream.range(0, n).map( i -> i * i).toArray();\n    System.out.println(Arrays.toString(squares));\n    double[] values = { 32, 54, 67.5, 29, 35, 80, 115, 44.5, 100, 65 };\n    double total = DoubleStream.of(values).sum();\n    double average = DoubleStream.of(values).average().orElse(0);\n    double largest = DoubleStream.of(values).max().orElse(Double.MIN_VALUE);\n    double smallest = DoubleStream.of(values).min().orElse(Double.MAX_VALUE);\n    System.out.println(\""total: \"" + total);\n    System.out.println(\""average: \"" + average);\n    System.out.println(\""largest: \"" + largest);\n    System.out.println(\""smallest: \"" + smallest);\n    String str = \""How much wood could a woodchuck chuck?\"";\n    long spaces = str.codePoints().filter( ch -> ch == ' ').count();\n    System.out.println(\""spaces: \"" + spaces);\n    String result = DoubleStream.of(values).mapToObj( v -> \""\"" + v).collect(Collectors.joining(\"" | \""));\n    System.out.println(result);\n    OptionalDouble result2 = DoubleStream.of(values).filter( v -> v > 100).findFirst();\n    System.out.println(result2);\n    n = values.length;\n    int pos = IntStream.range(0, n).filter( i -> values[i] == 100).findFirst().orElse(-1);\n    System.out.println(\""pos: \"" + pos);\n}\n"",""rating"":2},""code"":""int largestDifference(int[] a) {\n  //Returns the largest difference\n  //Takes an int array as input\n  int largest=INTEGER.Minimum;\n  int smallest = INTEGER.Maximum;\n  for(int i=0; i<a.length; i++) {\n    if(a[i] > largest) {\n      largest = a[i];\n    }\n    if(a[i] < smallest) {\n      smallest = a[i];\n    }\n  }\n  return largest - smallest;\n}""}"
121,4.0,5.0,5.0,5.0,2017-04-21 05:38:38.082722,5,,"int largestDifference(int[] a) {
  //Returns the largest difference
  //Takes an int array as input
  int largest=INTEGER.Minimum;
  int smallest = INTEGER.Maximum;
  for(int i=0; i<a.length; i++) {
    if(a[i] > largest) {
      largest = a[i];
    }
    if(a[i] < smallest) {
      smallest = a[i];
    }
  }
  return largest - smallest;
}"
122,1.0,1.0,1.0,1.0,2017-04-21 05:40:57.583543,5,40,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""int getTax(Person person) {\n  if(person instanceof Employee) {\n    Employee e = (Employee) Person;\n    if(e.getSalary() < 10000) {\n      return e.getSalary() * .02;\n    }\n    else {\n      return e.getSalary() * 0.05;\n    }\n  }\n}""}"
123,1.0,1.0,1.0,2.0,2017-04-21 05:41:13.977307,5,,"int getTax(Person person) {
  //Finds the tax for a person
  if(person instanceof Employee) {
    Employee e = (Employee) Person;
    if(e.getSalary() < 10000) {
      return e.getSalary() * .02;
    }
    else {
      return e.getSalary() * 0.05;
    }
  }
}"
124,1.0,1.0,1.0,2.0,2017-04-21 05:41:22.557839,5,41,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""int getTax(Person person) {\n  //Finds the tax for a person\n  if(person instanceof Employee) {\n    Employee e = (Employee) Person;\n    if(e.getSalary() < 10000) {\n      return e.getSalary() * .02;\n    }\n    else {\n      return e.getSalary() * 0.05;\n    }\n  }\n}""}"
125,1.0,1.0,1.0,4.0,2017-04-21 05:41:48.781273,5,,"int getTax(Person person) {
  //Returns the tax for a person
  //Takes a Person class as input
  if(person instanceof Employee) {
    Employee e = (Employee) Person;
    if(e.getSalary() < 10000) {
      return e.getSalary() * .02;
    }
    else {
      return e.getSalary() * 0.05;
    }
  }
}"
126,1.0,1.0,1.0,4.0,2017-04-21 05:42:03.484505,5,42,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""int getTax(Person person) {\n  //Returns the tax for a person\n  //Takes a Person class as input\n  if(person instanceof Employee) {\n    Employee e = (Employee) Person;\n    if(e.getSalary() < 10000) {\n      return e.getSalary() * .02;\n    }\n    else {\n      return e.getSalary() * 0.05;\n    }\n  }\n}""}"
127,1.0,4.0,1.0,4.0,2017-04-21 05:43:16.472633,5,,"int getTax(Person person) {
  //Returns the tax for a person
  //Takes a Person class as input
  if(person instanceof Employee) {
    Employee e = (Employee) person;
    if(e.getSalary() < 10000) {
      return e.getSalary() * .02;
    }
    else {
      return e.getSalary() * 0.05;
    }
  }
  
  if(person instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) person;
    return b.getProfit() * 0.10;
  }
  
  if(person instanceof Veteran) {
    return 0;
  }
}"
128,1.0,4.0,1.0,4.0,2017-04-21 05:43:28.892904,5,43,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""/**\n     * Get the correct color from the palette to color a point with the given\n     * Iteration count.\n     */\nprivate int getColorForIterationCount(int ct) {\n    if (// Only -1 is possible, representing the Mandelbrot set.\n    ct < 0)\n        // RGB code for black\n        return 0;\n    else if (paletteLength == 0)\n        return palette[ct];\n    else {\n        ct = ct % paletteLength;\n        return palette[ct];\n    }\n}\n"",""rating"":1},""code"":""int getTax(Person person) {\n  //Returns the tax for a person\n  //Takes a Person class as input\n  if(person instanceof Employee) {\n    Employee e = (Employee) person;\n    if(e.getSalary() < 10000) {\n      return e.getSalary() * .02;\n    }\n    else {\n      return e.getSalary() * 0.05;\n    }\n  }\n  \n  if(person instanceof BusinessOwner) {\n    BusinessOwner b = (BusinessOwner) person;\n    return b.getProfit() * 0.10;\n  }\n  \n  if(person instanceof Veteran) {\n    return 0;\n  }\n}""}"
129,1.0,4.0,1.0,4.0,2017-04-21 05:43:33.425945,5,44,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", targetDate = \""Jan 1, 2012\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""int getTax(Person person) {\n  //Returns the tax for a person\n  //Takes a Person class as input\n  if(person instanceof Employee) {\n    Employee e = (Employee) person;\n    if(e.getSalary() < 10000) {\n      return e.getSalary() * .02;\n    }\n    else {\n      return e.getSalary() * 0.05;\n    }\n  }\n  \n  if(person instanceof BusinessOwner) {\n    BusinessOwner b = (BusinessOwner) person;\n    return b.getProfit() * 0.10;\n  }\n  \n  if(person instanceof Veteran) {\n    return 0;\n  }\n}""}"
130,1.0,4.0,1.0,4.0,2017-04-21 05:43:35.796846,5,45,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""int getTax(Person person) {\n  //Returns the tax for a person\n  //Takes a Person class as input\n  if(person instanceof Employee) {\n    Employee e = (Employee) person;\n    if(e.getSalary() < 10000) {\n      return e.getSalary() * .02;\n    }\n    else {\n      return e.getSalary() * 0.05;\n    }\n  }\n  \n  if(person instanceof BusinessOwner) {\n    BusinessOwner b = (BusinessOwner) person;\n    return b.getProfit() * 0.10;\n  }\n  \n  if(person instanceof Veteran) {\n    return 0;\n  }\n}""}"
131,4.0,4.0,1.0,4.0,2017-04-21 05:43:43.047640,5,,"int getTax(Person person) {
  //Returns the tax for a person
  //Takes a Person class as input
  if(person instanceof Employee) {
    Employee e = (Employee) person;
    if(e.getSalary() < 10000) {
      return e.getSalary() * .02;
    }
    else {
      return e.getSalary() * 0.05;
    }
  }
  
  if(person instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) person;
    return b.getProfit() * 0.10;
  }
  
  if(person instanceof Veteran) {
    return 0;
  }
}"
132,4.0,4.0,1.0,4.0,2017-04-21 05:43:55.546869,5,46,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", targetDate = \""Jan 1, 2012\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""int getTax(Person person) {\n  //Returns the tax for a person\n  //Takes a Person class as input\n  if(person instanceof Employee) {\n    Employee e = (Employee) person;\n    if(e.getSalary() < 10000) {\n      return e.getSalary() * .02;\n    }\n    else {\n      return e.getSalary() * 0.05;\n    }\n  }\n  \n  if(person instanceof BusinessOwner) {\n    BusinessOwner b = (BusinessOwner) person;\n    return b.getProfit() * 0.10;\n  }\n  \n  if(person instanceof Veteran) {\n    return 0;\n  }\n}""}"
133,4.0,4.0,1.0,4.0,2017-04-21 05:43:56.251920,5,47,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""int getTax(Person person) {\n  //Returns the tax for a person\n  //Takes a Person class as input\n  if(person instanceof Employee) {\n    Employee e = (Employee) person;\n    if(e.getSalary() < 10000) {\n      return e.getSalary() * .02;\n    }\n    else {\n      return e.getSalary() * 0.05;\n    }\n  }\n  \n  if(person instanceof BusinessOwner) {\n    BusinessOwner b = (BusinessOwner) person;\n    return b.getProfit() * 0.10;\n  }\n  \n  if(person instanceof Veteran) {\n    return 0;\n  }\n}""}"
134,4.0,4.0,5.0,4.0,2017-04-21 05:44:00.719085,5,,"int getTax(Person person) {
  //Returns the tax for a person
  //Takes a Person class as input
  if(person instanceof Employee) {
    Employee e = (Employee) person;
    if(e.getSalary() < 10000) {
      return e.getSalary() * .02;
    }
    else {
      return e.getSalary() * 0.05;
    }
  }
  
  if(person instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) person;
    return b.getProfit() * 0.10;
  }
  
  if(person instanceof Veteran) {
    return 0;
  }
}"
135,4.0,4.0,5.0,4.0,2017-04-21 05:44:08.430836,5,48,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", targetDate = \""Jan 1, 2012\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""int getTax(Person person) {\n  //Returns the tax for a person\n  //Takes a Person class as input\n  if(person instanceof Employee) {\n    Employee e = (Employee) person;\n    if(e.getSalary() < 10000) {\n      return e.getSalary() * .02;\n    }\n    else {\n      return e.getSalary() * 0.05;\n    }\n  }\n  \n  if(person instanceof BusinessOwner) {\n    BusinessOwner b = (BusinessOwner) person;\n    return b.getProfit() * 0.10;\n  }\n  \n  if(person instanceof Veteran) {\n    return 0;\n  }\n}""}"
136,4.0,4.0,5.0,4.0,2017-04-21 05:44:18.034660,5,49,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""int getTax(Person person) {\n  //Returns the tax for a person\n  //Takes a Person class as input\n  if(person instanceof Employee) {\n    Employee e = (Employee) person;\n    if(e.getSalary() < 10000) {\n      return e.getSalary() * .02;\n    }\n    else {\n      return e.getSalary() * 0.05;\n    }\n  }\n  \n  if(person instanceof BusinessOwner) {\n    BusinessOwner b = (BusinessOwner) person;\n    return b.getProfit() * 0.10;\n  }\n  \n  if(person instanceof Veteran) {\n    return 0;\n  }\n}""}"
137,4.0,5.0,5.0,4.0,2017-04-21 05:44:20.130363,5,,"int getTax(Person person) {
  //Returns the tax for a person
  //Takes a Person class as input
  if(person instanceof Employee) {
    Employee e = (Employee) person;
    if(e.getSalary() < 10000) {
      return e.getSalary() * .02;
    }
    else {
      return e.getSalary() * 0.05;
    }
  }
  
  if(person instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) person;
    return b.getProfit() * 0.10;
  }
  
  if(person instanceof Veteran) {
    return 0;
  }
}"
138,3.0,5.0,5.0,4.0,2017-04-21 05:44:22.424434,5,,"int getTax(Person person) {
  //Returns the tax for a person
  //Takes a Person class as input
  if(person instanceof Employee) {
    Employee e = (Employee) person;
    if(e.getSalary() < 10000) {
      return e.getSalary() * .02;
    }
    else {
      return e.getSalary() * 0.05;
    }
  }
  
  if(person instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) person;
    return b.getProfit() * 0.10;
  }
  
  if(person instanceof Veteran) {
    return 0;
  }
}"
139,3.0,5.0,5.0,4.0,2017-04-21 05:44:29.566637,5,50,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", targetDate = \""Jan 1, 2012\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""int getTax(Person person) {\n  //Returns the tax for a person\n  //Takes a Person class as input\n  if(person instanceof Employee) {\n    Employee e = (Employee) person;\n    if(e.getSalary() < 10000) {\n      return e.getSalary() * .02;\n    }\n    else {\n      return e.getSalary() * 0.05;\n    }\n  }\n  \n  if(person instanceof BusinessOwner) {\n    BusinessOwner b = (BusinessOwner) person;\n    return b.getProfit() * 0.10;\n  }\n  \n  if(person instanceof Veteran) {\n    return 0;\n  }\n}""}"
140,3.0,5.0,5.0,4.0,2017-04-21 05:44:35.941963,5,51,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""int getTax(Person person) {\n  //Returns the tax for a person\n  //Takes a Person class as input\n  if(person instanceof Employee) {\n    Employee e = (Employee) person;\n    if(e.getSalary() < 10000) {\n      return e.getSalary() * .02;\n    }\n    else {\n      return e.getSalary() * 0.05;\n    }\n  }\n  \n  if(person instanceof BusinessOwner) {\n    BusinessOwner b = (BusinessOwner) person;\n    return b.getProfit() * 0.10;\n  }\n  \n  if(person instanceof Veteran) {\n    return 0;\n  }\n}""}"
141,5.0,5.0,5.0,4.0,2017-04-21 05:44:38.912316,5,,"int getTax(Person person) {
  //Returns the tax for a person
  //Takes a Person class as input
  if(person instanceof Employee) {
    Employee e = (Employee) person;
    if(e.getSalary() < 10000) {
      return e.getSalary() * .02;
    }
    else {
      return e.getSalary() * 0.05;
    }
  }
  
  if(person instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) person;
    return b.getProfit() * 0.10;
  }
  
  if(person instanceof Veteran) {
    return 0;
  }
}"
142,5.0,5.0,5.0,4.0,2017-04-21 05:44:48.502714,5,52,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", targetDate = \""Jan 1, 2012\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""int getTax(Person person) {\n  //Returns the tax for a person\n  //Takes a Person class as input\n  if(person instanceof Employee) {\n    Employee e = (Employee) person;\n    if(e.getSalary() < 10000) {\n      return e.getSalary() * .02;\n    }\n    else {\n      return e.getSalary() * 0.05;\n    }\n  }\n  \n  if(person instanceof BusinessOwner) {\n    BusinessOwner b = (BusinessOwner) person;\n    return b.getProfit() * 0.10;\n  }\n  \n  if(person instanceof Veteran) {\n    return 0;\n  }\n}""}"
143,5.0,5.0,5.0,4.0,2017-04-21 05:44:49.283866,5,53,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""int getTax(Person person) {\n  //Returns the tax for a person\n  //Takes a Person class as input\n  if(person instanceof Employee) {\n    Employee e = (Employee) person;\n    if(e.getSalary() < 10000) {\n      return e.getSalary() * .02;\n    }\n    else {\n      return e.getSalary() * 0.05;\n    }\n  }\n  \n  if(person instanceof BusinessOwner) {\n    BusinessOwner b = (BusinessOwner) person;\n    return b.getProfit() * 0.10;\n  }\n  \n  if(person instanceof Veteran) {\n    return 0;\n  }\n}""}"
144,5.0,5.0,5.0,0.5,2017-04-21 05:44:53.698639,5,,"int getTax(Person person) {
  //Returns the tax for a person
  //Takes a Person class as input
  if(person instanceof Employee) {
    Employee e = (Employee) person;
    if(e.getSalary() < 10000) {
      return e.getSalary() * .02;
    }
    else {
      return e.getSalary() * 0.05;
    }
  }
  
  if(person instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) person;
    return b.getProfit() * 0.10;
  }
  
  if(person instanceof Veteran) {
    return 0;
  }
}"
145,5.0,5.0,0.0,0.5,2017-04-21 05:44:55.141190,5,,"int getTax(Person person) {
  //Returns the tax for a person
  //Takes a Person class as input
  if(person instanceof Employee) {
    Employee e = (Employee) person;
    if(e.getSalary() < 10000) {
      return e.getSalary() * .02;
    }
    else {
      return e.getSalary() * 0.05;
    }
  }
  
  if(person instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) person;
    return b.getProfit() * 0.10;
  }
  
  if(person instanceof Veteran) {
    return 0;
  }
}"
146,5.0,5.0,0.0,0.5,2017-04-21 05:45:08.775016,5,54,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""int powerUse() {\n    if (\""Retention\"".equals(botType)) {\n        return 2;\n    } else {\n        return 4;\n    }\n}\n"",""rating"":1},""code"":""int getTax(Person person) {\n  //Returns the tax for a person\n  //Takes a Person class as input\n  if(person instanceof Employee) {\n    Employee e = (Employee) person;\n    if(e.getSalary() < 10000) {\n      return e.getSalary() * .02;\n    }\n    else {\n      return e.getSalary() * 0.05;\n    }\n  }\n  \n  if(person instanceof BusinessOwner) {\n    BusinessOwner b = (BusinessOwner) person;\n    return b.getProfit() * 0.10;\n  }\n  \n  if(person instanceof Veteran) {\n    return 0;\n  }\n}""}"
147,5.0,5.0,0.0,0.5,2017-04-21 05:45:11.297699,5,55,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""int getTax(Person person) {\n  //Returns the tax for a person\n  //Takes a Person class as input\n  if(person instanceof Employee) {\n    Employee e = (Employee) person;\n    if(e.getSalary() < 10000) {\n      return e.getSalary() * .02;\n    }\n    else {\n      return e.getSalary() * 0.05;\n    }\n  }\n  \n  if(person instanceof BusinessOwner) {\n    BusinessOwner b = (BusinessOwner) person;\n    return b.getProfit() * 0.10;\n  }\n  \n  if(person instanceof Veteran) {\n    return 0;\n  }\n}""}"
148,2.5,1.0,1.0,1.0,2017-04-21 07:02:28.792951,7,,"int largestDifference(int[] input) {
  
}"
149,2.5,1.0,1.0,1.0,2017-04-21 07:02:35.393982,7,56,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""int getCount() {\n    return count;\n}\n"",""rating"":1},""code"":""int largestDifference(int[] input) {\n  \n}""}"
150,2.5,1.0,1.0,1.0,2017-04-21 07:02:36.325235,7,57,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""int getPlayer() {\n    return playerID;\n}\n"",""rating"":1},""code"":""int largestDifference(int[] input) {\n  \n}""}"
151,2.5,1.0,1.0,1.0,2017-04-21 07:02:44.438447,7,58,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Computes the largest value of an array.\n      @param a the array\n      @return the largest value in a\n   */\npublic static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":3},""code"":""int largestDifference(int[] input) {\n  \n}""}"
152,2.5,1.0,1.0,1.0,2017-04-21 07:02:55.625720,7,59,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""public static <E extends Comparable<? super E>> E max(ArrayList<E> a) // public static <E extends Comparable<E>> E max(ArrayList<E> a) \n// doesn't work with Student array list\n{\n    E largest = a.get(0);\n    for (int i = 1; i < a.size(); i++) {\n        if (a.get(i).compareTo(largest) > 0) {\n            largest = a.get(i);\n        }\n    }\n    return largest;\n}\n"",""rating"":1},""code"":""int largestDifference(int[] input) {\n  \n}""}"
153,2.5,1.0,1.0,1.0,2017-04-21 07:02:56.625738,7,60,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""/**\n         * Return the contents of the square in the specified row and column.\n         */\nint pieceAt(int row, int col) {\n    return board[row][col];\n}\n"",""rating"":1},""code"":""int largestDifference(int[] input) {\n  \n}""}"
154,2.5,1.0,1.0,1.0,2017-04-21 07:05:05.488801,7,61,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static <E extends Comparable<E>> E max(E[] a) {\n    E largest = a[0];\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":2},""code"":""int largestDifference(int[] input) {\n  int largest = 0;\n  for (int i = 1; i < input.length; i++) {\n    for(int j = i + 1; j < input.length; j++) {\n        if (Math.abs(input[i]-input[j]) > largest) {\n            largest = Math.abs(input[i]-input[j]);\n        }\n    \t}\n    }\n  return largest;\n}""}"
155,2.5,1.0,1.0,1.0,2017-04-21 07:05:07.658816,7,62,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""/**\n         * Return the largest item that has been entered.\n         * The return value will be -infinity if no numbers have been entered. \n         */\npublic double getMax() {\n    return max;\n}\n"",""rating"":1},""code"":""int largestDifference(int[] input) {\n  int largest = 0;\n  for (int i = 1; i < input.length; i++) {\n    for(int j = i + 1; j < input.length; j++) {\n        if (Math.abs(input[i]-input[j]) > largest) {\n            largest = Math.abs(input[i]-input[j]);\n        }\n    \t}\n    }\n  return largest;\n}""}"
156,2.5,1.0,2.0,1.0,2017-04-21 07:05:09.773834,7,,"int largestDifference(int[] input) {
  int largest = 0;
  for (int i = 1; i < input.length; i++) {
    for(int j = i + 1; j < input.length; j++) {
        if (Math.abs(input[i]-input[j]) > largest) {
            largest = Math.abs(input[i]-input[j]);
        }
    	}
    }
  return largest;
}"
157,2.5,1.0,2.0,4.0,2017-04-21 07:05:11.155719,7,,"int largestDifference(int[] input) {
  int largest = 0;
  for (int i = 1; i < input.length; i++) {
    for(int j = i + 1; j < input.length; j++) {
        if (Math.abs(input[i]-input[j]) > largest) {
            largest = Math.abs(input[i]-input[j]);
        }
    	}
    }
  return largest;
}"
158,2.5,1.0,2.0,4.0,2017-04-21 07:05:16.340920,7,63,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent2(int[] a) {\n    // O(n log(n))\n    Arrays.sort(a);\n    int[] counts = new int[a.length];\n    int count = 0;\n    for (// O(n)\n    int i = 0; // O(n)\n    i < a.length; // O(n)\n    i++) {\n        count++;\n        if (i == a.length - 1 || a[i] != a[i + 1]) {\n            counts[i] = count;\n            count = 0;\n        }\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":2},""code"":""int largestDifference(int[] input) {\n  int largest = 0;\n  for (int i = 1; i < input.length; i++) {\n    for(int j = i + 1; j < input.length; j++) {\n        if (Math.abs(input[i]-input[j]) > largest) {\n            largest = Math.abs(input[i]-input[j]);\n        }\n    \t}\n    }\n  return largest;\n}""}"
159,2.5,1.0,4.5,4.0,2017-04-21 07:05:21.091378,7,,"int largestDifference(int[] input) {
  int largest = 0;
  for (int i = 1; i < input.length; i++) {
    for(int j = i + 1; j < input.length; j++) {
        if (Math.abs(input[i]-input[j]) > largest) {
            largest = Math.abs(input[i]-input[j]);
        }
    	}
    }
  return largest;
}"
160,2.5,1.0,4.5,4.0,2017-04-21 07:05:31.124988,7,64,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""int countEmptyBlock(int r, int c) {\n    // Find the size of one empty region on the board; recursive routine called by obviousBlockExists.\n    if (blockCheck[r][c] == blockCheckCt || board.getColor(r, c) != null)\n        return 0;\n    int c1 = c, c2 = c;\n    while (c1 > 0 && blockCheck[r][c1 - 1] < blockCheckCt && board.getColor(r, c1 - 1) == null) c1--;\n    while (c2 < cols - 1 && blockCheck[r][c2 + 1] < blockCheckCt && board.getColor(r, c2 + 1) == null) c2++;\n    for (int i = c1; i <= c2; i++) blockCheck[r][i] = blockCheckCt;\n    int ct = c2 - c1 + 1;\n    if (r > 0)\n        for (int i = c1; i <= c2; i++) ct += countEmptyBlock(r - 1, i);\n    if (r < rows - 1)\n        for (int i = c1; i <= c2; i++) ct += countEmptyBlock(r + 1, i);\n    return ct;\n}\n"",""rating"":2},""code"":""int largestDifference(int[] input) {\n  int largest = 0;\n  for (int i = 1; i < input.length; i++) {\n    for(int j = i + 1; j < input.length; j++) {\n        if (Math.abs(input[i]-input[j]) > largest) {\n            largest = Math.abs(input[i]-input[j]);\n        }\n    \t}\n    }\n  return largest;\n}""}"
161,2.5,1.0,4.5,4.0,2017-04-21 07:05:34.498266,7,65,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""public void paintComponent(Graphics graph) {\n    int increment = samples.length / getWidth();\n    final int LARGEST = 32767;\n    int x = 0;\n    for (int i = 0; i < samples.length; i = i + increment) {\n        int value = samples[i];\n        value = Math.min(LARGEST, value);\n        value = Math.max(-LARGEST, value);\n        int height = getHeight() / 2;\n        int y = height - samples[i] * height / LARGEST;\n        graph.drawLine(x, y, x, height);\n        x++;\n    }\n}\n"",""rating"":1},""code"":""int largestDifference(int[] input) {\n  int largest = 0;\n  for (int i = 1; i < input.length; i++) {\n    for(int j = i + 1; j < input.length; j++) {\n        if (Math.abs(input[i]-input[j]) > largest) {\n            largest = Math.abs(input[i]-input[j]);\n        }\n    \t}\n    }\n  return largest;\n}""}"
162,2.5,1.0,4.5,4.0,2017-04-21 07:05:36.494532,7,66,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent2(int[] a) {\n    // O(n log(n))\n    Arrays.sort(a);\n    int[] counts = new int[a.length];\n    int count = 0;\n    for (// O(n)\n    int i = 0; // O(n)\n    i < a.length; // O(n)\n    i++) {\n        count++;\n        if (i == a.length - 1 || a[i] != a[i + 1]) {\n            counts[i] = count;\n            count = 0;\n        }\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":2},""code"":""int largestDifference(int[] input) {\n  int largest = 0;\n  for (int i = 1; i < input.length; i++) {\n    for(int j = i + 1; j < input.length; j++) {\n        if (Math.abs(input[i]-input[j]) > largest) {\n            largest = Math.abs(input[i]-input[j]);\n        }\n    \t}\n    }\n  return largest;\n}""}"
163,3.5,1.0,4.5,4.0,2017-04-21 07:05:46.079332,7,,"int largestDifference(int[] input) {
  int largest = 0;
  for (int i = 1; i < input.length; i++) {
    for(int j = i + 1; j < input.length; j++) {
        if (Math.abs(input[i]-input[j]) > largest) {
            largest = Math.abs(input[i]-input[j]);
        }
    	}
    }
  return largest;
}"
164,3.5,1.0,2.5,4.0,2017-04-21 07:05:47.505269,7,,"int largestDifference(int[] input) {
  int largest = 0;
  for (int i = 1; i < input.length; i++) {
    for(int j = i + 1; j < input.length; j++) {
        if (Math.abs(input[i]-input[j]) > largest) {
            largest = Math.abs(input[i]-input[j]);
        }
    	}
    }
  return largest;
}"
165,3.5,1.0,2.5,2.0,2017-04-21 07:05:48.087502,7,,"int largestDifference(int[] input) {
  int largest = 0;
  for (int i = 1; i < input.length; i++) {
    for(int j = i + 1; j < input.length; j++) {
        if (Math.abs(input[i]-input[j]) > largest) {
            largest = Math.abs(input[i]-input[j]);
        }
    	}
    }
  return largest;
}"
166,3.5,2.0,2.5,2.0,2017-04-21 07:05:49.351212,7,,"int largestDifference(int[] input) {
  int largest = 0;
  for (int i = 1; i < input.length; i++) {
    for(int j = i + 1; j < input.length; j++) {
        if (Math.abs(input[i]-input[j]) > largest) {
            largest = Math.abs(input[i]-input[j]);
        }
    	}
    }
  return largest;
}"
167,3.5,2.0,2.5,2.0,2017-04-21 07:05:54.962385,7,67,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent2(int[] a) {\n    // O(n log(n))\n    Arrays.sort(a);\n    int[] counts = new int[a.length];\n    int count = 0;\n    for (// O(n)\n    int i = 0; // O(n)\n    i < a.length; // O(n)\n    i++) {\n        count++;\n        if (i == a.length - 1 || a[i] != a[i + 1]) {\n            counts[i] = count;\n            count = 0;\n        }\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":1},""code"":""int largestDifference(int[] input) {\n  int largest = 0;\n  for (int i = 1; i < input.length; i++) {\n    for(int j = i + 1; j < input.length; j++) {\n        if (Math.abs(input[i]-input[j]) > largest) {\n            largest = Math.abs(input[i]-input[j]);\n        }\n    \t}\n    }\n  return largest;\n}""}"
168,3.5,2.0,2.5,2.0,2017-04-21 07:06:00.838082,7,68,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""// pre: list != null\n// post: return sum of elements\n// use traditional for loop\npublic static int sumListOld(int[] list) {\n    int total = 0;\n    for (int i = 0; i < list.length; i++) {\n        total += list[i];\n        System.out.println(list[i]);\n    }\n    return total;\n}\n"",""rating"":2},""code"":""int largestDifference(int[] input) {\n  int largest = 0;\n  for (int i = 1; i < input.length; i++) {\n    for(int j = i + 1; j < input.length; j++) {\n        if (Math.abs(input[i]-input[j]) > largest) {\n            largest = Math.abs(input[i]-input[j]);\n        }\n    \t}\n    }\n  return largest;\n}""}"
169,3.5,1.0,1.0,1.0,2017-04-21 07:07:10.191400,7,,"int largestDifference(int[] input) {
  
}"
170,5.0,1.0,1.0,1.0,2017-04-21 07:07:10.781037,7,,"int largestDifference(int[] input) {
  
}"
171,5.0,1.0,1.0,1.0,2017-04-21 07:07:15.430754,7,69,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""/**\n         * Return the largest item that has been entered.\n         * The return value will be -infinity if no numbers have been entered. \n         */\npublic double getMax() {\n    return max;\n}\n"",""rating"":1},""code"":""int largestDifference(int[] input) {\n  \n}""}"
172,5.0,1.0,1.0,1.0,2017-04-21 07:07:17.664499,7,70,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""int getCount() {\n    return count;\n}\n"",""rating"":1},""code"":""int largestDifference(int[] input) {\n  \n}""}"
173,5.0,1.0,1.0,1.0,2017-04-21 07:07:21.562822,7,71,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Computes the largest value of an array.\n      @param a the array\n      @return the largest value in a\n   */\npublic static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":3},""code"":""int largestDifference(int[] input) {\n  \n}""}"
174,5.0,2.5,1.0,1.0,2017-04-21 07:08:58.941142,7,,"int largestDifference(int[] input) {
  int largest = 0;
  for (int i = 1; i < input.length; i++) {
    for(int j = i+1; j < input.length; j++) {
      if (Math.abs(input[i]-input[j]) > largest) {
          largest = Math.abs(input[i]-input[j]);
      }
    }
  }
    return largest;
}"
175,5.0,2.5,1.0,1.0,2017-04-21 07:09:03.915765,7,72,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""// pre: list != null\n// post: return sum of elements\n// use traditional for loop\npublic static int sumListOld(int[] list) {\n    int total = 0;\n    for (int i = 0; i < list.length; i++) {\n        total += list[i];\n        System.out.println(list[i]);\n    }\n    return total;\n}\n"",""rating"":2},""code"":""int largestDifference(int[] input) {\n  int largest = 0;\n  for (int i = 1; i < input.length; i++) {\n    for(int j = i+1; j < input.length; j++) {\n      if (Math.abs(input[i]-input[j]) > largest) {\n          largest = Math.abs(input[i]-input[j]);\n      }\n    }\n  }\n    return largest;\n}""}"
176,5.0,2.5,1.0,1.0,2017-04-21 07:09:05.390087,7,73,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""int countEmptyBlock(int r, int c) {\n    // Find the size of one empty region on the board; recursive routine called by obviousBlockExists.\n    if (blockCheck[r][c] == blockCheckCt || board.getColor(r, c) != null)\n        return 0;\n    int c1 = c, c2 = c;\n    while (c1 > 0 && blockCheck[r][c1 - 1] < blockCheckCt && board.getColor(r, c1 - 1) == null) c1--;\n    while (c2 < cols - 1 && blockCheck[r][c2 + 1] < blockCheckCt && board.getColor(r, c2 + 1) == null) c2++;\n    for (int i = c1; i <= c2; i++) blockCheck[r][i] = blockCheckCt;\n    int ct = c2 - c1 + 1;\n    if (r > 0)\n        for (int i = c1; i <= c2; i++) ct += countEmptyBlock(r - 1, i);\n    if (r < rows - 1)\n        for (int i = c1; i <= c2; i++) ct += countEmptyBlock(r + 1, i);\n    return ct;\n}\n"",""rating"":1},""code"":""int largestDifference(int[] input) {\n  int largest = 0;\n  for (int i = 1; i < input.length; i++) {\n    for(int j = i+1; j < input.length; j++) {\n      if (Math.abs(input[i]-input[j]) > largest) {\n          largest = Math.abs(input[i]-input[j]);\n      }\n    }\n  }\n    return largest;\n}""}"
177,5.0,2.5,1.0,1.0,2017-04-21 07:09:07.065491,7,74,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""public void paintComponent(Graphics graph) {\n    int increment = samples.length / getWidth();\n    final int LARGEST = 32767;\n    int x = 0;\n    for (int i = 0; i < samples.length; i = i + increment) {\n        int value = samples[i];\n        value = Math.min(LARGEST, value);\n        value = Math.max(-LARGEST, value);\n        int height = getHeight() / 2;\n        int y = height - samples[i] * height / LARGEST;\n        graph.drawLine(x, y, x, height);\n        x++;\n    }\n}\n"",""rating"":1},""code"":""int largestDifference(int[] input) {\n  int largest = 0;\n  for (int i = 1; i < input.length; i++) {\n    for(int j = i+1; j < input.length; j++) {\n      if (Math.abs(input[i]-input[j]) > largest) {\n          largest = Math.abs(input[i]-input[j]);\n      }\n    }\n  }\n    return largest;\n}""}"
178,5.0,2.5,1.0,1.0,2017-04-21 07:09:09.899522,7,75,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""// pre: list != null, list.length > 0\n// post: return index of minimum element of array\npublic static int findMin(int[] list) {\n    assert list != null && list.length > 0 : \""failed precondition\"";\n    int indexOfMin = 0;\n    for (int i = 1; i < list.length; i++) {\n        if (list[i] < list[indexOfMin]) {\n            indexOfMin = i;\n        }\n    }\n    return indexOfMin;\n}\n"",""rating"":2},""code"":""int largestDifference(int[] input) {\n  int largest = 0;\n  for (int i = 1; i < input.length; i++) {\n    for(int j = i+1; j < input.length; j++) {\n      if (Math.abs(input[i]-input[j]) > largest) {\n          largest = Math.abs(input[i]-input[j]);\n      }\n    }\n  }\n    return largest;\n}""}"
179,5.0,2.5,1.0,1.0,2017-04-21 07:09:15.189136,7,76,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent2(int[] a) {\n    // O(n log(n))\n    Arrays.sort(a);\n    int[] counts = new int[a.length];\n    int count = 0;\n    for (// O(n)\n    int i = 0; // O(n)\n    i < a.length; // O(n)\n    i++) {\n        count++;\n        if (i == a.length - 1 || a[i] != a[i + 1]) {\n            counts[i] = count;\n            count = 0;\n        }\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":1},""code"":""int largestDifference(int[] input) {\n  int largest = 0;\n  for (int i = 1; i < input.length; i++) {\n    for(int j = i+1; j < input.length; j++) {\n      if (Math.abs(input[i]-input[j]) > largest) {\n          largest = Math.abs(input[i]-input[j]);\n      }\n    }\n  }\n    return largest;\n}""}"
180,5.0,2.5,1.0,1.0,2017-04-21 07:09:18.827799,7,77,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""public static <E extends Comparable<? super E>> E max(ArrayList<E> a) // public static <E extends Comparable<E>> E max(ArrayList<E> a) \n// doesn't work with Student array list\n{\n    E largest = a.get(0);\n    for (int i = 1; i < a.size(); i++) {\n        if (a.get(i).compareTo(largest) > 0) {\n            largest = a.get(i);\n        }\n    }\n    return largest;\n}\n"",""rating"":2},""code"":""int largestDifference(int[] input) {\n  int largest = 0;\n  for (int i = 1; i < input.length; i++) {\n    for(int j = i+1; j < input.length; j++) {\n      if (Math.abs(input[i]-input[j]) > largest) {\n          largest = Math.abs(input[i]-input[j]);\n      }\n    }\n  }\n    return largest;\n}""}"
181,5.0,2.5,1.0,1.0,2017-04-21 07:09:21.754483,7,78,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static <E extends Comparable<E>> E max(E[] a) {\n    E largest = a[0];\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":2},""code"":""int largestDifference(int[] input) {\n  int largest = 0;\n  for (int i = 1; i < input.length; i++) {\n    for(int j = i+1; j < input.length; j++) {\n      if (Math.abs(input[i]-input[j]) > largest) {\n          largest = Math.abs(input[i]-input[j]);\n      }\n    }\n  }\n    return largest;\n}""}"
182,5.0,2.5,1.0,1.0,2017-04-21 07:09:25.764800,7,79,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""/**\n         * Return the largest item that has been entered.\n         * The return value will be -infinity if no numbers have been entered. \n         */\npublic double getMax() {\n    return max;\n}\n"",""rating"":1},""code"":""int largestDifference(int[] input) {\n  int largest = 0;\n  for (int i = 1; i < input.length; i++) {\n    for(int j = i+1; j < input.length; j++) {\n      if (Math.abs(input[i]-input[j]) > largest) {\n          largest = Math.abs(input[i]-input[j]);\n      }\n    }\n  }\n    return largest;\n}""}"
183,2.5,1.0,1.0,1.0,2017-04-21 07:11:06.338613,7,,"public double getTax(Person person) {
  
}"
184,2.5,1.0,1.0,1.0,2017-04-21 07:11:16.101755,7,80,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""public static void main(String[] args) {\n    String input = JOptionPane.showInputDialog(\""Enter price:\"");\n    double price = Double.parseDouble(input);\n    final double TAX_RATE = 8.5;\n    price = price * (1 + TAX_RATE / 100);\n    JOptionPane.showMessageDialog(null, \""Price after tax: \"" + price);\n}\n"",""rating"":2},""code"":""public double getTax(Person person) {\n  \n}""}"
185,2.5,1.0,1.0,1.0,2017-04-21 07:11:20.191322,7,81,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""public double getTax(Person person) {\n  \n}""}"
186,4.0,1.0,1.0,1.0,2017-04-21 07:11:23.990972,7,,"public double getTax(Person person) {
  
}"
187,4.0,1.0,1.0,1.0,2017-04-21 07:11:31.980904,7,82,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":2},""code"":""public double getTax(Person person) {\n  \n}""}"
188,4.0,1.0,1.0,1.0,2017-04-21 07:11:35.556632,7,83,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""public Product(float price) {\n    this.price = price;\n    tax = (float) (price * 0.20);\n}\n"",""rating"":2},""code"":""public double getTax(Person person) {\n  \n}""}"
189,4.0,1.0,1.0,1.0,2017-04-21 07:12:24.054515,7,84,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""public double getAverageScore(int studentId) {\n    double total = 0;\n    for (double x : scores) {\n        total = total + x;\n    }\n    return total / scores.size();\n}\n"",""rating"":1},""code"":""public double getTax(Person person) {\n  if(person instanceof Veteran) {\n    return 0;\n  }\n  if(person instanceof BusinessOwner) {\n    \n  }\n}""}"
190,4.0,1.0,1.0,1.0,2017-04-21 07:12:26.304957,7,,"public double getTax(Person person) {
  if(person instanceof Veteran) {
    return 0;
  }
  if(person instanceof BusinessOwner) {
    
  }
}"
191,4.0,1.0,1.0,1.0,2017-04-21 07:12:35.108080,7,85,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", targetDate = \""Jan 1, 2012\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""public double getTax(Person person) {\n  if(person instanceof Veteran) {\n    return 0;\n  }\n  if(person instanceof BusinessOwner) {\n    \n  }\n}""}"
192,4.0,1.0,1.0,1.0,2017-04-21 07:12:36.455165,7,86,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""/** Return the person's name.  Not a remote method */\npublic String getName() {\n    return name;\n}\n"",""rating"":1},""code"":""public double getTax(Person person) {\n  if(person instanceof Veteran) {\n    return 0;\n  }\n  if(person instanceof BusinessOwner) {\n    \n  }\n}""}"
193,4.0,1.0,1.0,1.0,2017-04-21 07:12:37.232563,7,87,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""public Product(float price) {\n    this.price = price;\n    tax = (float) (price * 0.20);\n}\n"",""rating"":1},""code"":""public double getTax(Person person) {\n  if(person instanceof Veteran) {\n    return 0;\n  }\n  if(person instanceof BusinessOwner) {\n    \n  }\n}""}"
194,4.0,1.0,1.0,1.0,2017-04-21 07:12:40.732785,7,88,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""public static void main(String[] args) {\n    String input = JOptionPane.showInputDialog(\""Enter price:\"");\n    double price = Double.parseDouble(input);\n    final double TAX_RATE = 8.5;\n    price = price * (1 + TAX_RATE / 100);\n    JOptionPane.showMessageDialog(null, \""Price after tax: \"" + price);\n}\n"",""rating"":1},""code"":""public double getTax(Person person) {\n  if(person instanceof Veteran) {\n    return 0;\n  }\n  if(person instanceof BusinessOwner) {\n    \n  }\n}""}"
195,4.0,1.0,1.0,1.0,2017-04-21 07:12:45.735677,7,89,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""public double getTax() {\n    double tax1 = 0;\n    double tax2 = 0;\n    if (status == SINGLE) {\n        if (income <= RATE1_SINGLE_LIMIT) {\n            tax1 = RATE1 * income;\n        } else {\n            tax1 = RATE1 * RATE1_SINGLE_LIMIT;\n            tax2 = RATE2 * (income - RATE1_SINGLE_LIMIT);\n        }\n    } else {\n        if (income <= RATE1_MARRIED_LIMIT) {\n            tax1 = RATE1 * income;\n        } else {\n            tax1 = RATE1 * RATE1_MARRIED_LIMIT;\n            tax2 = RATE2 * (income - RATE1_MARRIED_LIMIT);\n        }\n    }\n    return tax1 + tax2;\n}\n"",""rating"":3},""code"":""public double getTax(Person person) {\n  if(person instanceof Veteran) {\n    return 0;\n  }\n  if(person instanceof BusinessOwner) {\n    \n  }\n}""}"
196,4.0,1.0,1.0,1.0,2017-04-21 07:12:49.084297,7,90,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""/**\n      Gets the final score for this student.\n      @return the sum of the scores, with the lowest score dropped.\n   */\npublic double finalScore() {\n    if (scoresSize == 0) {\n        return 0;\n    } else {\n        return sum() - minimum();\n    }\n}\n"",""rating"":1},""code"":""public double getTax(Person person) {\n  if(person instanceof Veteran) {\n    return 0;\n  }\n  if(person instanceof BusinessOwner) {\n    \n  }\n}""}"
197,4.0,1.0,1.0,1.0,2017-04-21 07:12:54.049020,7,91,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""public double getTax(Person person) {\n  if(person instanceof Veteran) {\n    return 0;\n  }\n  if(person instanceof BusinessOwner) {\n    \n  }\n}""}"
198,4.0,1.0,1.0,1.0,2017-04-21 07:12:55.085296,7,92,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""/**\n      Computes the sum of the scores of this student.\n      @return the sum of the scores\n   */\npublic double sum() {\n    double total = 0;\n    for (int i = 0; i < scoresSize; i++) {\n        total = total + scores[i];\n    }\n    return total;\n}\n"",""rating"":1},""code"":""public double getTax(Person person) {\n  if(person instanceof Veteran) {\n    return 0;\n  }\n  if(person instanceof BusinessOwner) {\n    \n  }\n}""}"
199,4.0,1.0,1.0,1.0,2017-04-21 07:12:56.700223,7,93,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""/**\n      Gets the minimum score of this student.\n      @return the minimum score, or 0 if there are no scores.\n   */\npublic double minimum() {\n    if (scoresSize == 0) {\n        return 0;\n    }\n    double smallest = scores[0];\n    for (int i = 1; i < scoresSize; i++) {\n        if (scores[i] < smallest) {\n            smallest = scores[i];\n        }\n    }\n    return smallest;\n}\n"",""rating"":1},""code"":""public double getTax(Person person) {\n  if(person instanceof Veteran) {\n    return 0;\n  }\n  if(person instanceof BusinessOwner) {\n    \n  }\n}""}"
200,4.0,1.0,2.0,1.0,2017-04-21 07:13:01.114016,7,,"public double getTax(Person person) {
  if(person instanceof Veteran) {
    return 0;
  }
  if(person instanceof BusinessOwner) {
    
  }
}"
201,4.0,1.0,2.0,3.0,2017-04-21 07:13:02.139312,7,,"public double getTax(Person person) {
  if(person instanceof Veteran) {
    return 0;
  }
  if(person instanceof BusinessOwner) {
    
  }
}"
202,4.0,1.0,2.0,3.0,2017-04-21 07:13:13.820545,7,94,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""/**\n      Gets the minimum score of this student.\n      @return the minimum score, or 0 if there are no scores.\n   */\npublic double minimum() {\n    if (scoresSize == 0) {\n        return 0;\n    }\n    double smallest = scores[0];\n    for (int i = 1; i < scoresSize; i++) {\n        if (scores[i] < smallest) {\n            smallest = scores[i];\n        }\n    }\n    return smallest;\n}\n"",""rating"":2},""code"":""public double getTax(Person person) {\n  if(person instanceof Veteran) {\n    return 0;\n  }\n  if(person instanceof BusinessOwner) {\n    \n  }\n}""}"
203,4.0,1.0,2.0,3.0,2017-04-21 07:13:18.413677,7,95,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""public double getTax() {\n    double tax1 = 0;\n    double tax2 = 0;\n    if (status == SINGLE) {\n        if (income <= RATE1_SINGLE_LIMIT) {\n            tax1 = RATE1 * income;\n        } else {\n            tax1 = RATE1 * RATE1_SINGLE_LIMIT;\n            tax2 = RATE2 * (income - RATE1_SINGLE_LIMIT);\n        }\n    } else {\n        if (income <= RATE1_MARRIED_LIMIT) {\n            tax1 = RATE1 * income;\n        } else {\n            tax1 = RATE1 * RATE1_MARRIED_LIMIT;\n            tax2 = RATE2 * (income - RATE1_MARRIED_LIMIT);\n        }\n    }\n    return tax1 + tax2;\n}\n"",""rating"":1},""code"":""public double getTax(Person person) {\n  if(person instanceof Veteran) {\n    return 0;\n  }\n  if(person instanceof BusinessOwner) {\n    \n  }\n}""}"
204,1.0,1.0,1.0,1.0,2017-04-21 07:22:46.291678,9,96,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Computes the largest value of an array.\n      @param a the array\n      @return the largest value in a\n   */\npublic static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":2},""code"":""int largestDifference(int [] a) {\n  \n}""}"
205,1.0,1.0,1.0,3.5,2017-04-21 07:24:03.223310,9,,"/**
* Find the largest diffence between the elements in the array.
* This means finding the min and the max element and subtracting the min from the max.
*/
int largestDifference(int [] a) {
  
}"
206,3.0,1.0,1.0,3.5,2017-04-21 07:26:21.447168,9,,"/**
* Find the largest diffence between the elements in the array.
* This means finding the min and the max element and subtracting the min from the max.
*/
int largestDifference(int [] values) {
  int largest = a[0];
  int smallest = a[0];
  for (int i = 1; i < values.length; i++){
    
  }
  
}"
207,3.0,1.0,1.0,3.5,2017-04-21 07:26:45.173160,9,97,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""// pre: list != null, list.length > 0\n// post: return index of minimum element of array\npublic static int findMin(int[] list) {\n    assert list != null && list.length > 0 : \""failed precondition\"";\n    int indexOfMin = 0;\n    for (int i = 1; i < list.length; i++) {\n        if (list[i] < list[indexOfMin]) {\n            indexOfMin = i;\n        }\n    }\n    return indexOfMin;\n}\n"",""rating"":3},""code"":""/**\n* Find the largest diffence between the elements in the array.\n* This means finding the min and the max element and subtracting the min from the max.\n*/\nint largestDifference(int [] values) {\n  int largest = a[0];\n  int smallest = a[0];\n  for (int i = 1; i < values.length; i++){\n    \n  }\n  \n}""}"
208,3.0,1.0,1.0,3.5,2017-04-21 07:28:27.695576,9,98,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""// pre: list != null\n// post: return sum of elements\n// use traditional for loop\npublic static int sumListOld(int[] list) {\n    int total = 0;\n    for (int i = 0; i < list.length; i++) {\n        total += list[i];\n        System.out.println(list[i]);\n    }\n    return total;\n}\n"",""rating"":2},""code"":""/**\n* Find the largest diffence between the elements in the array.\n* This means finding the min and the max element and subtracting the min from the max.\n*/\nint largestDifference(int [] values) {\n  int largest = a[0];\n  int smallest = a[0];\n  for (int i = 1; i < values.length; i++){\n    if(a[i] > largest) {\n      largest = a[i];\n    }\n    if(a[i] < smallest) {\n      smallest = a[i];\n    }\n    \n  }\n  \n}""}"
209,3.0,1.0,1.0,3.5,2017-04-21 07:28:49.346382,9,99,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""// pre: list != null, list.length > 0\n// post: return index of minimum element of array\npublic static int findMin(int[] list) {\n    assert list != null && list.length > 0 : \""failed precondition\"";\n    int indexOfMin = 0;\n    for (int i = 1; i < list.length; i++) {\n        if (list[i] < list[indexOfMin]) {\n            indexOfMin = i;\n        }\n    }\n    return indexOfMin;\n}\n"",""rating"":3},""code"":""/**\n* Find the largest diffence between the elements in the array.\n* This means finding the min and the max element and subtracting the min from the max.\n*/\nint largestDifference(int [] values) {\n  int largest = a[0];\n  int smallest = a[0];\n  for (int i = 1; i < values.length; i++){\n    if(a[i] > largest) {\n      largest = a[i];\n    }\n    if(a[i] < smallest) {\n      smallest = a[i];\n    }\n    \n  }\n  \n}""}"
210,3.0,1.0,1.0,3.5,2017-04-21 07:29:40.170755,9,100,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""// pre: list != null, list.length > 0\n// post: return index of minimum element of array\npublic static int findMin(int[] list) {\n    assert list != null && list.length > 0 : \""failed precondition\"";\n    int indexOfMin = 0;\n    for (int i = 1; i < list.length; i++) {\n        if (list[i] < list[indexOfMin]) {\n            indexOfMin = i;\n        }\n    }\n    return indexOfMin;\n}\n"",""rating"":3},""code"":""/**\n* Find the largest diffence between the elements in the array.\n* This means finding the min and the max element and subtracting the min from the max.\n*/\nint largestDifference(int [] values) {\n  int largest = a[0];\n  int smallest = a[0];\n  for (int i = 1; i < values.length; i++){\n    if(a[i] > largest) {\n      largest = a[i];\n    }\n    if(a[i] < smallest) {\n      smallest = a[i];\n    }\n  }\n  return largest-smallest;\n  \n}""}"
211,3.0,1.0,1.0,3.5,2017-04-21 07:29:42.302172,9,101,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""// pre: list != null\n// post: return sum of elements\n// use traditional for loop\npublic static int sumListOld(int[] list) {\n    int total = 0;\n    for (int i = 0; i < list.length; i++) {\n        total += list[i];\n        System.out.println(list[i]);\n    }\n    return total;\n}\n"",""rating"":2},""code"":""/**\n* Find the largest diffence between the elements in the array.\n* This means finding the min and the max element and subtracting the min from the max.\n*/\nint largestDifference(int [] values) {\n  int largest = a[0];\n  int smallest = a[0];\n  for (int i = 1; i < values.length; i++){\n    if(a[i] > largest) {\n      largest = a[i];\n    }\n    if(a[i] < smallest) {\n      smallest = a[i];\n    }\n  }\n  return largest-smallest;\n  \n}""}"
212,3.0,4.0,1.0,3.5,2017-04-21 07:29:48.295934,9,,"/**
* Find the largest diffence between the elements in the array.
* This means finding the min and the max element and subtracting the min from the max.
*/
int largestDifference(int [] values) {
  int largest = a[0];
  int smallest = a[0];
  for (int i = 1; i < values.length; i++){
    if(a[i] > largest) {
      largest = a[i];
    }
    if(a[i] < smallest) {
      smallest = a[i];
    }
  }
  return largest-smallest;
  
}"
213,3.0,4.0,4.0,3.5,2017-04-21 07:29:59.134542,9,,"/**
* Find the largest diffence between the elements in the array.
* This means finding the min and the max element and subtracting the min from the max.
*/
int largestDifference(int [] values) {
  int largest = a[0];
  int smallest = a[0];
  for (int i = 1; i < values.length; i++){
    if(a[i] > largest) {
      largest = a[i];
    }
    if(a[i] < smallest) {
      smallest = a[i];
    }
  }
  return largest-smallest;
  
}"
214,3.0,0.5,4.0,3.5,2017-04-21 07:30:01.546075,9,,"/**
* Find the largest diffence between the elements in the array.
* This means finding the min and the max element and subtracting the min from the max.
*/
int largestDifference(int [] values) {
  int largest = a[0];
  int smallest = a[0];
  for (int i = 1; i < values.length; i++){
    if(a[i] > largest) {
      largest = a[i];
    }
    if(a[i] < smallest) {
      smallest = a[i];
    }
  }
  return largest-smallest;
  
}"
215,3.0,0.5,4.0,1.0,2017-04-21 07:30:02.797572,9,,"/**
* Find the largest diffence between the elements in the array.
* This means finding the min and the max element and subtracting the min from the max.
*/
int largestDifference(int [] values) {
  int largest = a[0];
  int smallest = a[0];
  for (int i = 1; i < values.length; i++){
    if(a[i] > largest) {
      largest = a[i];
    }
    if(a[i] < smallest) {
      smallest = a[i];
    }
  }
  return largest-smallest;
  
}"
216,3.0,0.5,4.0,1.0,2017-04-21 07:30:27.739690,9,102,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""// pre: list != null, list.length > 0\n// post: return index of minimum element of array\npublic static int findMin(int[] list) {\n    assert list != null && list.length > 0 : \""failed precondition\"";\n    int indexOfMin = 0;\n    for (int i = 1; i < list.length; i++) {\n        if (list[i] < list[indexOfMin]) {\n            indexOfMin = i;\n        }\n    }\n    return indexOfMin;\n}\n"",""rating"":3},""code"":""/**\n* Find the largest diffence between the elements in the array.\n* This means finding the min and the max element and subtracting the min from the max.\n*/\nint largestDifference(int [] values) {\n  int largest = a[0];\n  int smallest = a[0];\n  for (int i = 1; i < values.length; i++){\n    if(a[i] > largest) {\n      largest = a[i];\n    }\n    if(a[i] < smallest) {\n      smallest = a[i];\n    }\n  }\n  return largest-smallest;\n  \n}""}"
217,3.0,0.5,4.0,1.0,2017-04-21 07:30:37.564744,9,103,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static <E extends Comparable<E>> E max(E[] a) {\n    E largest = a[0];\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":2},""code"":""/**\n* Find the largest diffence between the elements in the array.\n* This means finding the min and the max element and subtracting the min from the max.\n*/\nint largestDifference(int [] values) {\n  int largest = a[0];\n  int smallest = a[0];\n  for (int i = 1; i < values.length; i++){\n    if(a[i] > largest) {\n      largest = a[i];\n    }\n    if(a[i] < smallest) {\n      smallest = a[i];\n    }\n  }\n  return largest-smallest;\n  \n}""}"
218,3.0,4.0,4.0,1.0,2017-04-21 07:30:46.288143,9,,"/**
* Find the largest diffence between the elements in the array.
* This means finding the min and the max element and subtracting the min from the max.
*/
int largestDifference(int [] values) {
  int largest = a[0];
  int smallest = a[0];
  for (int i = 1; i < values.length; i++){
    if(a[i] > largest) {
      largest = a[i];
    }
    if(a[i] < smallest) {
      smallest = a[i];
    }
  }
  return largest-smallest;
  
}"
219,3.0,4.0,0.0,1.0,2017-04-21 07:30:47.685211,9,,"/**
* Find the largest diffence between the elements in the array.
* This means finding the min and the max element and subtracting the min from the max.
*/
int largestDifference(int [] values) {
  int largest = a[0];
  int smallest = a[0];
  for (int i = 1; i < values.length; i++){
    if(a[i] > largest) {
      largest = a[i];
    }
    if(a[i] < smallest) {
      smallest = a[i];
    }
  }
  return largest-smallest;
  
}"
220,0.0,4.0,0.0,1.0,2017-04-21 07:30:48.938863,9,,"/**
* Find the largest diffence between the elements in the array.
* This means finding the min and the max element and subtracting the min from the max.
*/
int largestDifference(int [] values) {
  int largest = a[0];
  int smallest = a[0];
  for (int i = 1; i < values.length; i++){
    if(a[i] > largest) {
      largest = a[i];
    }
    if(a[i] < smallest) {
      smallest = a[i];
    }
  }
  return largest-smallest;
  
}"
221,0.0,4.0,0.0,1.0,2017-04-21 07:31:01.509511,9,104,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Finds the smallest element in a tail range of the array.\n      @param a the array to sort\n      @param from the first position in a to compare\n      @return the position of the smallest element in the\n      range a[from] . . . a[a.length - 1]\n   */\nprivate static int minimumPosition(int[] a, int from) {\n    int minPos = from;\n    for (int i = from + 1; i < a.length; i++) {\n        if (a[i] < a[minPos]) {\n            minPos = i;\n        }\n    }\n    return minPos;\n}\n"",""rating"":1},""code"":""/**\n* Find the largest diffence between the elements in the array.\n* This means finding the min and the max element and subtracting the min from the max.\n*/\nint largestDifference(int [] values) {\n  int largest = a[0];\n  int smallest = a[0];\n  for (int i = 1; i < values.length; i++){\n    if(a[i] > largest) {\n      largest = a[i];\n    }\n    if(a[i] < smallest) {\n      smallest = a[i];\n    }\n  }\n  return largest-smallest;\n  \n}""}"
222,0.0,4.0,0.0,1.0,2017-04-21 07:31:08.435266,9,105,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""/**\n      Counts how often a value occurs in an array.\n      @param a the array\n      @param value the value to count\n      @return the number of occurrences of value in a\n   */\npublic static int count(int[] a, int value) {\n    int count = 0;\n    for (int i = 0; i < a.length; i++) {\n        if (a[i] == value) {\n            count++;\n        }\n    }\n    return count;\n}\n"",""rating"":1},""code"":""/**\n* Find the largest diffence between the elements in the array.\n* This means finding the min and the max element and subtracting the min from the max.\n*/\nint largestDifference(int [] values) {\n  int largest = a[0];\n  int smallest = a[0];\n  for (int i = 1; i < values.length; i++){\n    if(a[i] > largest) {\n      largest = a[i];\n    }\n    if(a[i] < smallest) {\n      smallest = a[i];\n    }\n  }\n  return largest-smallest;\n  \n}""}"
223,1.0,1.0,1.0,1.0,2017-04-21 07:33:26.539210,9,106,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""public Product(float price) {\n    this.price = price;\n    tax = (float) (price * 0.20);\n}\n"",""rating"":1},""code"":""/**\n* Compute tax for different types of people.\n*/\ndouble getTaxForPerson(Person p) {\n  \n}""}"
224,1.0,4.5,1.0,1.0,2017-04-21 07:35:35.025215,9,,"/**
* Compute tax for different types of people.
*/
double getTaxForPerson(Person p) {
  if(p instanceof Employee) {
    
  }
  
}"
225,1.0,4.5,3.0,1.0,2017-04-21 07:35:59.882092,9,,"/**
* Compute tax for different types of people.
*/
double getTaxForPerson(Person p) {
  if(p instanceof Employee) {
    
  }
  
}"
226,1.0,1.5,3.0,1.0,2017-04-21 07:36:01.039167,9,,"/**
* Compute tax for different types of people.
*/
double getTaxForPerson(Person p) {
  if(p instanceof Employee) {
    
  }
  
}"
227,1.0,1.5,2.0,2.0,2017-04-21 07:36:04.787653,9,,"/**
* Compute tax for different types of people.
*/
double getTaxForPerson(Person p) {
  if(p instanceof Employee) {
    
  }
  
}"
228,1.0,1.5,2.0,2.0,2017-04-21 07:36:04.974624,9,,"/**
* Compute tax for different types of people.
*/
double getTaxForPerson(Person p) {
  if(p instanceof Employee) {
    
  }
  
}"
229,1.0,1.5,3.5,2.0,2017-04-21 07:36:06.091128,9,,"/**
* Compute tax for different types of people.
*/
double getTaxForPerson(Person p) {
  if(p instanceof Employee) {
    
  }
  
}"
230,1.0,1.5,3.5,2.0,2017-04-21 07:38:33.670380,9,107,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""public double getTax() {\n    double tax1 = 0;\n    double tax2 = 0;\n    if (status == SINGLE) {\n        if (income <= RATE1_SINGLE_LIMIT) {\n            tax1 = RATE1 * income;\n        } else {\n            tax1 = RATE1 * RATE1_SINGLE_LIMIT;\n            tax2 = RATE2 * (income - RATE1_SINGLE_LIMIT);\n        }\n    } else {\n        if (income <= RATE1_MARRIED_LIMIT) {\n            tax1 = RATE1 * income;\n        } else {\n            tax1 = RATE1 * RATE1_MARRIED_LIMIT;\n            tax2 = RATE2 * (income - RATE1_MARRIED_LIMIT);\n        }\n    }\n    return tax1 + tax2;\n}\n"",""rating"":3},""code"":""/**\n* Compute tax for different types of people.\n*/\ndouble getTaxForPerson(Person p) {\n  double tax = 0;\n  if(p instanceof Employee) {\n    if(p.getSalary() < 10000){\n      tax = p.getSalary * 0.02;\n    } else {\n      tax = p.getSalary * 0.05;\n    }\n  }\n  \n}""}"
231,1.0,1.5,3.5,0.5,2017-04-21 07:39:00.182938,9,,"/**
* Compute tax for different types of people.
*/
double getTaxForPerson(Person p) {
  double tax = 0;
  if(p instanceof Employee) {
    if(p.getSalary() < 10000){
      tax = p.getSalary * 0.02;
    } else {
      tax = p.getSalary * 0.05;
    }
  }
  
}"
232,5.0,1.5,3.5,0.5,2017-04-21 07:39:01.464841,9,,"/**
* Compute tax for different types of people.
*/
double getTaxForPerson(Person p) {
  double tax = 0;
  if(p instanceof Employee) {
    if(p.getSalary() < 10000){
      tax = p.getSalary * 0.02;
    } else {
      tax = p.getSalary * 0.05;
    }
  }
  
}"
233,5.0,1.5,3.5,0.5,2017-04-21 07:39:24.363986,9,108,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", targetDate = \""Jan 1, 2012\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""/**\n* Compute tax for different types of people.\n*/\ndouble getTaxForPerson(Person p) {\n  double tax = 0;\n  if(p instanceof Employee) {\n    if(p.getSalary() < 10000){\n      tax = p.getSalary * 0.02;\n    } else {\n      tax = p.getSalary * 0.05;\n    }\n  }\n  \n}""}"
234,1.5,1.5,3.5,0.5,2017-04-21 07:42:33.024665,9,,"/**
* Compute tax for different types of people.
* Tax is 0 for veterans and everyone else.
*/
double getTaxForPerson(Person p) {
  double tax = 0;
  if(p instanceof Employee) {
    if(p.getSalary() < 10000){
      tax = p.getSalary * 0.02;
    } else {
      tax = p.getSalary * 0.05;
    }
  } else if(p instanceof BusinessOwner) {
    tax = p.getProfit * 0.1;
  }
  
}"
235,1.5,1.5,3.5,5.0,2017-04-21 07:42:34.448254,9,,"/**
* Compute tax for different types of people.
* Tax is 0 for veterans and everyone else.
*/
double getTaxForPerson(Person p) {
  double tax = 0;
  if(p instanceof Employee) {
    if(p.getSalary() < 10000){
      tax = p.getSalary * 0.02;
    } else {
      tax = p.getSalary * 0.05;
    }
  } else if(p instanceof BusinessOwner) {
    tax = p.getProfit * 0.1;
  }
  
}"
236,1.5,1.5,0.0,5.0,2017-04-21 07:42:35.855053,9,,"/**
* Compute tax for different types of people.
* Tax is 0 for veterans and everyone else.
*/
double getTaxForPerson(Person p) {
  double tax = 0;
  if(p instanceof Employee) {
    if(p.getSalary() < 10000){
      tax = p.getSalary * 0.02;
    } else {
      tax = p.getSalary * 0.05;
    }
  } else if(p instanceof BusinessOwner) {
    tax = p.getProfit * 0.1;
  }
  
}"
237,1.5,0.0,0.0,5.0,2017-04-21 07:42:36.964951,9,,"/**
* Compute tax for different types of people.
* Tax is 0 for veterans and everyone else.
*/
double getTaxForPerson(Person p) {
  double tax = 0;
  if(p instanceof Employee) {
    if(p.getSalary() < 10000){
      tax = p.getSalary * 0.02;
    } else {
      tax = p.getSalary * 0.05;
    }
  } else if(p instanceof BusinessOwner) {
    tax = p.getProfit * 0.1;
  }
  
}"
238,0.0,0.0,0.0,5.0,2017-04-21 07:42:39.481810,9,,"/**
* Compute tax for different types of people.
* Tax is 0 for veterans and everyone else.
*/
double getTaxForPerson(Person p) {
  double tax = 0;
  if(p instanceof Employee) {
    if(p.getSalary() < 10000){
      tax = p.getSalary * 0.02;
    } else {
      tax = p.getSalary * 0.05;
    }
  } else if(p instanceof BusinessOwner) {
    tax = p.getProfit * 0.1;
  }
  
}"
239,0.0,0.0,0.0,5.0,2017-04-21 07:42:45.325606,9,109,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""public double getTax() {\n    double tax1 = 0;\n    double tax2 = 0;\n    if (status == SINGLE) {\n        if (income <= RATE1_SINGLE_LIMIT) {\n            tax1 = RATE1 * income;\n        } else {\n            tax1 = RATE1 * RATE1_SINGLE_LIMIT;\n            tax2 = RATE2 * (income - RATE1_SINGLE_LIMIT);\n        }\n    } else {\n        if (income <= RATE1_MARRIED_LIMIT) {\n            tax1 = RATE1 * income;\n        } else {\n            tax1 = RATE1 * RATE1_MARRIED_LIMIT;\n            tax2 = RATE2 * (income - RATE1_MARRIED_LIMIT);\n        }\n    }\n    return tax1 + tax2;\n}\n"",""rating"":3},""code"":""/**\n* Compute tax for different types of people.\n* Tax is 0 for veterans and everyone else.\n*/\ndouble getTaxForPerson(Person p) {\n  double tax = 0;\n  if(p instanceof Employee) {\n    if(p.getSalary() < 10000){\n      tax = p.getSalary * 0.02;\n    } else {\n      tax = p.getSalary * 0.05;\n    }\n  } else if(p instanceof BusinessOwner) {\n    tax = p.getProfit * 0.1;\n  }\n  \n}""}"
240,0.0,0.0,0.0,0.5,2017-04-21 07:47:37.322752,9,,"/**
* Compute tax for different types of people.
* Tax is 0 for veterans and everyone else.
*/
double getTaxForPerson(Person p) {
  double tax = 0;
  if(p instanceof Employee) {
    Employee e = (Employee) p;
    if(e.getSalary() < 10000){
      tax = e.getSalary * 0.02;
    } else {
      tax = e.getSalary * 0.05;
    }
  } else if(p instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) p;
    tax = b.getProfit * 0.1;
  }
  
  return tax;
  
}"
241,0.0,0.0,0.0,0.5,2017-04-21 07:47:39.035167,9,110,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""public double getTax() {\n    double tax1 = 0;\n    double tax2 = 0;\n    if (status == SINGLE) {\n        if (income <= RATE1_SINGLE_LIMIT) {\n            tax1 = RATE1 * income;\n        } else {\n            tax1 = RATE1 * RATE1_SINGLE_LIMIT;\n            tax2 = RATE2 * (income - RATE1_SINGLE_LIMIT);\n        }\n    } else {\n        if (income <= RATE1_MARRIED_LIMIT) {\n            tax1 = RATE1 * income;\n        } else {\n            tax1 = RATE1 * RATE1_MARRIED_LIMIT;\n            tax2 = RATE2 * (income - RATE1_MARRIED_LIMIT);\n        }\n    }\n    return tax1 + tax2;\n}\n"",""rating"":3},""code"":""/**\n* Compute tax for different types of people.\n* Tax is 0 for veterans and everyone else.\n*/\ndouble getTaxForPerson(Person p) {\n  double tax = 0;\n  if(p instanceof Employee) {\n    Employee e = (Employee) p;\n    if(e.getSalary() < 10000){\n      tax = e.getSalary * 0.02;\n    } else {\n      tax = e.getSalary * 0.05;\n    }\n  } else if(p instanceof BusinessOwner) {\n    BusinessOwner b = (BusinessOwner) p;\n    tax = b.getProfit * 0.1;\n  }\n  \n  return tax;\n  \n}""}"
242,0.0,0.0,2.5,0.5,2017-04-21 07:47:40.500798,9,,"/**
* Compute tax for different types of people.
* Tax is 0 for veterans and everyone else.
*/
double getTaxForPerson(Person p) {
  double tax = 0;
  if(p instanceof Employee) {
    Employee e = (Employee) p;
    if(e.getSalary() < 10000){
      tax = e.getSalary * 0.02;
    } else {
      tax = e.getSalary * 0.05;
    }
  } else if(p instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) p;
    tax = b.getProfit * 0.1;
  }
  
  return tax;
  
}"
243,0.0,0.0,4.5,0.5,2017-04-21 07:47:41.404655,9,,"/**
* Compute tax for different types of people.
* Tax is 0 for veterans and everyone else.
*/
double getTaxForPerson(Person p) {
  double tax = 0;
  if(p instanceof Employee) {
    Employee e = (Employee) p;
    if(e.getSalary() < 10000){
      tax = e.getSalary * 0.02;
    } else {
      tax = e.getSalary * 0.05;
    }
  } else if(p instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) p;
    tax = b.getProfit * 0.1;
  }
  
  return tax;
  
}"
244,0.0,0.0,4.5,0.5,2017-04-21 07:47:47.011616,9,111,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""/**\n      Computes the change due and resets the machine for the next customer.\n      @return the change due to the customer\n   */\npublic double giveChange() {\n    double change = payment - purchase - get;\n    purchase = 0;\n    payment = 0;\n    return change;\n}\n"",""rating"":3},""code"":""/**\n* Compute tax for different types of people.\n* Tax is 0 for veterans and everyone else.\n*/\ndouble getTaxForPerson(Person p) {\n  double tax = 0;\n  if(p instanceof Employee) {\n    Employee e = (Employee) p;\n    if(e.getSalary() < 10000){\n      tax = e.getSalary * 0.02;\n    } else {\n      tax = e.getSalary * 0.05;\n    }\n  } else if(p instanceof BusinessOwner) {\n    BusinessOwner b = (BusinessOwner) p;\n    tax = b.getProfit * 0.1;\n  }\n  \n  return tax;\n  \n}""}"
245,0.0,0.0,4.5,0.5,2017-04-21 07:48:00.853256,9,112,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""public double getTax() {\n    double tax1 = 0;\n    double tax2 = 0;\n    if (status == SINGLE) {\n        if (income <= RATE1_SINGLE_LIMIT) {\n            tax1 = RATE1 * income;\n        } else {\n            tax1 = RATE1 * RATE1_SINGLE_LIMIT;\n            tax2 = RATE2 * (income - RATE1_SINGLE_LIMIT);\n        }\n    } else {\n        if (income <= RATE1_MARRIED_LIMIT) {\n            tax1 = RATE1 * income;\n        } else {\n            tax1 = RATE1 * RATE1_MARRIED_LIMIT;\n            tax2 = RATE2 * (income - RATE1_MARRIED_LIMIT);\n        }\n    }\n    return tax1 + tax2;\n}\n"",""rating"":3},""code"":""/**\n* Compute tax for different types of people.\n* Tax is 0 for veterans and everyone else.\n*/\ndouble getTaxForPerson(Person p) {\n  double tax = 0;\n  if(p instanceof Employee) {\n    Employee e = (Employee) p;\n    if(e.getSalary() < 10000){\n      tax = e.getSalary * 0.02;\n    } else {\n      tax = e.getSalary * 0.05;\n    }\n  } else if(p instanceof BusinessOwner) {\n    BusinessOwner b = (BusinessOwner) p;\n    tax = b.getProfit * 0.1;\n  }\n  \n  return tax;\n  \n}""}"
246,0.0,0.0,1.0,0.5,2017-04-21 07:48:15.516423,9,,"/**
* Compute tax for different types of people.
* Tax is 0 for veterans and everyone else.
*/
double getTaxForPerson(Person p) {
  double tax = 0;
  if(p instanceof Employee) {
    Employee e = (Employee) p;
    if(e.getSalary() < 10000){
      tax = e.getSalary * 0.02;
    } else {
      tax = e.getSalary * 0.05;
    }
  } else if(p instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) p;
    tax = b.getProfit * 0.1;
  }
  
  return tax;
  
}"
247,0.0,5.0,1.0,0.5,2017-04-21 07:48:16.821714,9,,"/**
* Compute tax for different types of people.
* Tax is 0 for veterans and everyone else.
*/
double getTaxForPerson(Person p) {
  double tax = 0;
  if(p instanceof Employee) {
    Employee e = (Employee) p;
    if(e.getSalary() < 10000){
      tax = e.getSalary * 0.02;
    } else {
      tax = e.getSalary * 0.05;
    }
  } else if(p instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) p;
    tax = b.getProfit * 0.1;
  }
  
  return tax;
  
}"
248,0.0,5.0,1.0,0.5,2017-04-21 07:48:37.726866,9,113,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""public double getTax() {\n    double tax1 = 0;\n    double tax2 = 0;\n    if (status == SINGLE) {\n        if (income <= RATE1_SINGLE_LIMIT) {\n            tax1 = RATE1 * income;\n        } else {\n            tax1 = RATE1 * RATE1_SINGLE_LIMIT;\n            tax2 = RATE2 * (income - RATE1_SINGLE_LIMIT);\n        }\n    } else {\n        if (income <= RATE1_MARRIED_LIMIT) {\n            tax1 = RATE1 * income;\n        } else {\n            tax1 = RATE1 * RATE1_MARRIED_LIMIT;\n            tax2 = RATE2 * (income - RATE1_MARRIED_LIMIT);\n        }\n    }\n    return tax1 + tax2;\n}\n"",""rating"":3},""code"":""/**\n* Compute tax for different types of people.\n* Tax is 0 for veterans and everyone else.\n*/\ndouble getTaxForPerson(Person p) {\n  double tax = 0;\n  if(p instanceof Employee) {\n    Employee e = (Employee) p;\n    if(e.getSalary() < 10000){\n      tax = e.getSalary * 0.02;\n    } else {\n      tax = e.getSalary * 0.05;\n    }\n  } else if(p instanceof BusinessOwner) {\n    BusinessOwner b = (BusinessOwner) p;\n    tax = b.getProfit * 0.1;\n  }\n  \n  return tax;\n  \n}""}"
249,3.0,5.0,1.0,0.5,2017-04-21 07:48:54.391523,9,,"/**
* Compute tax for different types of people.
* Tax is 0 for veterans and everyone else.
*/
double getTaxForPerson(Person p) {
  double tax = 0;
  if(p instanceof Employee) {
    Employee e = (Employee) p;
    if(e.getSalary() < 10000){
      tax = e.getSalary * 0.02;
    } else {
      tax = e.getSalary * 0.05;
    }
  } else if(p instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) p;
    tax = b.getProfit * 0.1;
  }
  
  return tax;
  
}"
250,3.0,5.0,1.0,0.5,2017-04-21 07:49:12.522475,9,114,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""public double getTax() {\n    double tax1 = 0;\n    double tax2 = 0;\n    if (status == SINGLE) {\n        if (income <= RATE1_SINGLE_LIMIT) {\n            tax1 = RATE1 * income;\n        } else {\n            tax1 = RATE1 * RATE1_SINGLE_LIMIT;\n            tax2 = RATE2 * (income - RATE1_SINGLE_LIMIT);\n        }\n    } else {\n        if (income <= RATE1_MARRIED_LIMIT) {\n            tax1 = RATE1 * income;\n        } else {\n            tax1 = RATE1 * RATE1_MARRIED_LIMIT;\n            tax2 = RATE2 * (income - RATE1_MARRIED_LIMIT);\n        }\n    }\n    return tax1 + tax2;\n}\n"",""rating"":3},""code"":""/**\n* Compute tax for different types of people.\n* Tax is 0 for veterans and everyone else.\n*/\ndouble getTaxForPerson(Person p) {\n  double tax = 0;\n  if(p instanceof Employee) {\n    Employee e = (Employee) p;\n    if(e.getSalary() < 10000){\n      tax = e.getSalary * 0.02;\n    } else {\n      tax = e.getSalary * 0.05;\n    }\n  } else if(p instanceof BusinessOwner) {\n    BusinessOwner b = (BusinessOwner) p;\n    tax = b.getProfit * 0.1;\n  }\n  \n  return tax;\n  \n}""}"
251,3.0,5.0,1.0,0.5,2017-04-21 07:49:18.510030,9,115,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""/**\n* Compute tax for different types of people.\n* Tax is 0 for veterans and everyone else.\n*/\ndouble getTaxForPerson(Person p) {\n  double tax = 0;\n  if(p instanceof Employee) {\n    Employee e = (Employee) p;\n    if(e.getSalary() < 10000){\n      tax = e.getSalary * 0.02;\n    } else {\n      tax = e.getSalary * 0.05;\n    }\n  } else if(p instanceof BusinessOwner) {\n    BusinessOwner b = (BusinessOwner) p;\n    tax = b.getProfit * 0.1;\n  }\n  \n  return tax;\n  \n}""}"
252,3.0,5.0,1.0,0.5,2017-04-21 07:49:58.883430,9,116,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""public double getTax() {\n    double tax1 = 0;\n    double tax2 = 0;\n    if (status == SINGLE) {\n        if (income <= RATE1_SINGLE_LIMIT) {\n            tax1 = RATE1 * income;\n        } else {\n            tax1 = RATE1 * RATE1_SINGLE_LIMIT;\n            tax2 = RATE2 * (income - RATE1_SINGLE_LIMIT);\n        }\n    } else {\n        if (income <= RATE1_MARRIED_LIMIT) {\n            tax1 = RATE1 * income;\n        } else {\n            tax1 = RATE1 * RATE1_MARRIED_LIMIT;\n            tax2 = RATE2 * (income - RATE1_MARRIED_LIMIT);\n        }\n    }\n    return tax1 + tax2;\n}\n"",""rating"":3},""code"":""/**\n* Compute tax for different types of people.\n* Tax is 0 for veterans and everyone else.\n*/\ndouble computeTaxForPerson(Person p) {\n  double tax = 0;\n  if(p instanceof Employee) {\n    Employee e = (Employee) p;\n    if(e.getSalary() < 10000){\n      tax = e.getSalary * 0.02;\n    } else {\n      tax = e.getSalary * 0.05;\n    }\n  } else if(p instanceof BusinessOwner) {\n    BusinessOwner b = (BusinessOwner) p;\n    tax = b.getProfit * 0.1;\n  }\n  \n  return tax;\n  \n}""}"
253,3.0,5.0,1.0,0.5,2017-04-21 07:50:04.008579,9,117,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""/**\n      Constructs an employee with an empty name.\n   */\npublic Employee() {\n    name = \""\"";\n}\n"",""rating"":1},""code"":""/**\n* Compute tax for different types of people.\n* Tax is 0 for veterans and everyone else.\n*/\ndouble computeTaxForPerson(Person p) {\n  double tax = 0;\n  if(p instanceof Employee) {\n    Employee e = (Employee) p;\n    if(e.getSalary() < 10000){\n      tax = e.getSalary * 0.02;\n    } else {\n      tax = e.getSalary * 0.05;\n    }\n  } else if(p instanceof BusinessOwner) {\n    BusinessOwner b = (BusinessOwner) p;\n    tax = b.getProfit * 0.1;\n  }\n  \n  return tax;\n  \n}""}"
254,3.0,5.0,1.0,0.5,2017-04-21 07:50:05.670707,9,118,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""/**\n      Sets the name of this employee.\n      @param employeeName the new name \n   */\npublic void setName(String employeeName) {\n    name = employeeName;\n}\n"",""rating"":1},""code"":""/**\n* Compute tax for different types of people.\n* Tax is 0 for veterans and everyone else.\n*/\ndouble computeTaxForPerson(Person p) {\n  double tax = 0;\n  if(p instanceof Employee) {\n    Employee e = (Employee) p;\n    if(e.getSalary() < 10000){\n      tax = e.getSalary * 0.02;\n    } else {\n      tax = e.getSalary * 0.05;\n    }\n  } else if(p instanceof BusinessOwner) {\n    BusinessOwner b = (BusinessOwner) p;\n    tax = b.getProfit * 0.1;\n  }\n  \n  return tax;\n  \n}""}"
255,3.0,5.0,1.0,0.5,2017-04-21 07:50:07.710628,9,119,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""/**\n      Gets the name of this employee.\n      @return the name \n   */\npublic String getName() {\n    return name;\n}\n"",""rating"":1},""code"":""/**\n* Compute tax for different types of people.\n* Tax is 0 for veterans and everyone else.\n*/\ndouble computeTaxForPerson(Person p) {\n  double tax = 0;\n  if(p instanceof Employee) {\n    Employee e = (Employee) p;\n    if(e.getSalary() < 10000){\n      tax = e.getSalary * 0.02;\n    } else {\n      tax = e.getSalary * 0.05;\n    }\n  } else if(p instanceof BusinessOwner) {\n    BusinessOwner b = (BusinessOwner) p;\n    tax = b.getProfit * 0.1;\n  }\n  \n  return tax;\n  \n}""}"
256,3.0,1.5,1.0,0.5,2017-04-21 07:50:11.800460,9,,"/**
* Compute tax for different types of people.
* Tax is 0 for veterans and everyone else.
*/
double computeTaxForPerson(Person p) {
  double tax = 0;
  if(p instanceof Employee) {
    Employee e = (Employee) p;
    if(e.getSalary() < 10000){
      tax = e.getSalary * 0.02;
    } else {
      tax = e.getSalary * 0.05;
    }
  } else if(p instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) p;
    tax = b.getProfit * 0.1;
  }
  
  return tax;
  
}"
257,3.0,1.5,1.0,3.0,2017-04-21 07:50:14.540411,9,,"/**
* Compute tax for different types of people.
* Tax is 0 for veterans and everyone else.
*/
double computeTaxForPerson(Person p) {
  double tax = 0;
  if(p instanceof Employee) {
    Employee e = (Employee) p;
    if(e.getSalary() < 10000){
      tax = e.getSalary * 0.02;
    } else {
      tax = e.getSalary * 0.05;
    }
  } else if(p instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) p;
    tax = b.getProfit * 0.1;
  }
  
  return tax;
  
}"
258,3.0,1.5,1.0,3.0,2017-04-21 07:50:24.553901,9,120,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""public double getTax() {\n    double tax1 = 0;\n    double tax2 = 0;\n    if (status == SINGLE) {\n        if (income <= RATE1_SINGLE_LIMIT) {\n            tax1 = RATE1 * income;\n        } else {\n            tax1 = RATE1 * RATE1_SINGLE_LIMIT;\n            tax2 = RATE2 * (income - RATE1_SINGLE_LIMIT);\n        }\n    } else {\n        if (income <= RATE1_MARRIED_LIMIT) {\n            tax1 = RATE1 * income;\n        } else {\n            tax1 = RATE1 * RATE1_MARRIED_LIMIT;\n            tax2 = RATE2 * (income - RATE1_MARRIED_LIMIT);\n        }\n    }\n    return tax1 + tax2;\n}\n"",""rating"":3},""code"":""/**\n* Compute tax for different types of people.\n* Tax is 0 for veterans and everyone else.\n*/\ndouble computeTaxForPerson(Person p) {\n  double tax = 0;\n  if(p instanceof Employee) {\n    Employee e = (Employee) p;\n    if(e.getSalary() < 10000){\n      tax = e.getSalary * 0.02;\n    } else {\n      tax = e.getSalary * 0.05;\n    }\n  } else if(p instanceof BusinessOwner) {\n    BusinessOwner b = (BusinessOwner) p;\n    tax = b.getProfit * 0.1;\n  }\n  \n  return tax;\n  \n}""}"
259,1.0,1.0,1.0,1.0,2017-04-21 08:26:46.424208,10,121,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":2},""code"":""double calculateTaxFromSalary(double salary){\n  \n}""}"
260,1.0,1.0,3.0,1.0,2017-04-21 08:27:37.410572,10,,"double calculateTaxFromPersonSalary(Person person, double salary){
  
}"
261,1.0,1.0,3.0,1.0,2017-04-21 08:29:07.190427,10,122,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""/**\n      Constructs a salaried employee with a given name and annual salary.\n      @param name the name of this employee\n      @param salary the annual salary\n    */\npublic SalariedEmployee(String name, double salary) {\n    setName(name);\n    annualSalary = salary;\n}\n"",""rating"":2},""code"":""double calculateTaxFromPersonSalary(Person person, double salary){\n  // Given a person and his/her salary\n  // Calculate tax\n}""}"
262,1.0,1.0,3.0,1.0,2017-04-21 08:29:21.689189,10,123,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", targetDate = \""Jan 1, 2012\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""double calculateTaxFromPersonSalary(Person person, double salary){\n  // Given a person and his/her salary\n  // Calculate tax\n}""}"
263,0.5,1.0,3.0,1.0,2017-04-21 08:29:41.440986,10,,"double calculateTaxFromPersonSalary(Person person, double salary){
  // Given a person and his/her salary
  // Calculate tax
}"
264,0.5,1.0,3.0,1.0,2017-04-21 08:29:45.507808,10,,"double calculateTaxFromPersonSalary(Person person, double salary){
  // Given a person and his/her salary
  // Calculate tax
}"
265,0.5,1.0,3.0,1.0,2017-04-21 08:32:43.727984,10,124,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Constructs a manager with a given name, annual salary and weekly bonus.\n      @param name the name of this employee\n      @param salary the annual salary\n      @param bonus the weekly bonus\n    */\npublic Manager(String name, double salary, double bonus) {\n    super(name, salary);\n    weeklyBonus = bonus;\n}\n"",""rating"":2},""code"":""double calculateTaxFromPersonSalary(Person person, double salary){\n  // Given a person and his/her salary\n  // Calculate tax\n  // float rate = 0;\n  \n  //if(person instanceOf Employee){\n  //}\n}""}"
266,0.5,1.0,3.0,1.0,2017-04-21 08:32:47.773081,10,125,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""double performConversion(double f) {\n    return f *= 0.45359237;\n}\n"",""rating"":1},""code"":""double calculateTaxFromPersonSalary(Person person, double salary){\n  // Given a person and his/her salary\n  // Calculate tax\n  // float rate = 0;\n  \n  //if(person instanceOf Employee){\n  //}\n}""}"
267,0.5,1.0,3.0,1.0,2017-04-21 08:32:52.412879,10,126,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""/**\n      Constructs a salaried employee with a given name and annual salary.\n      @param name the name of this employee\n      @param salary the annual salary\n    */\npublic SalariedEmployee(String name, double salary) {\n    setName(name);\n    annualSalary = salary;\n}\n"",""rating"":2},""code"":""double calculateTaxFromPersonSalary(Person person, double salary){\n  // Given a person and his/her salary\n  // Calculate tax\n  // float rate = 0;\n  \n  //if(person instanceOf Employee){\n  //}\n}""}"
268,0.5,1.0,3.0,1.0,2017-04-21 08:33:40.661529,10,127,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""/**\n      Constructs a salaried employee with a given name and annual salary.\n      @param name the name of this employee\n      @param salary the annual salary\n    */\npublic SalariedEmployee(String name, double salary) {\n    setName(name);\n    annualSalary = salary;\n}\n"",""rating"":2},""code"":""double calculateTaxFromPersonSalary(Person person, double salary){\n  // Given a person and his/her salary\n  // Calculate tax\n  // float rate = 0;\n  \n  //if(person instanceOf Employee){\n  // if(salary > 10000){\n  // rate = 5;\n  //}else{\n  //   rate = 2;\n//}\n  //}\n}""}"
269,0.5,1.0,3.0,1.0,2017-04-21 08:33:50.498214,10,128,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Constructs a manager with a given name, annual salary and weekly bonus.\n      @param name the name of this employee\n      @param salary the annual salary\n      @param bonus the weekly bonus\n    */\npublic Manager(String name, double salary, double bonus) {\n    super(name, salary);\n    weeklyBonus = bonus;\n}\n"",""rating"":2},""code"":""double calculateTaxFromPersonSalary(Person person, double salary){\n  // Given a person and his/her salary\n  // Calculate tax\n  // float rate = 0;\n  \n  //if(person instanceOf Employee){\n  // if(salary > 10000){\n  // rate = 5;\n  //}else{\n  //   rate = 2;\n//}\n  //}\n}""}"
270,0.5,1.0,3.0,1.0,2017-04-21 08:33:56.328876,10,129,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""double performConversion(double f) {\n    return f *= 0.45359237;\n}\n"",""rating"":2},""code"":""double calculateTaxFromPersonSalary(Person person, double salary){\n  // Given a person and his/her salary\n  // Calculate tax\n  // float rate = 0;\n  \n  //if(person instanceOf Employee){\n  // if(salary > 10000){\n  // rate = 5;\n  //}else{\n  //   rate = 2;\n//}\n  //}\n}""}"
271,0.5,1.0,3.0,1.0,2017-04-21 08:33:57.654383,10,130,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""double performConversion(double f) {\n    return f *= 2267.96185;\n}\n"",""rating"":2},""code"":""double calculateTaxFromPersonSalary(Person person, double salary){\n  // Given a person and his/her salary\n  // Calculate tax\n  // float rate = 0;\n  \n  //if(person instanceOf Employee){\n  // if(salary > 10000){\n  // rate = 5;\n  //}else{\n  //   rate = 2;\n//}\n  //}\n}""}"
272,0.5,1.0,3.0,1.0,2017-04-21 08:34:36.099685,10,131,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""/**\n      Constructs a salaried employee with a given name and annual salary.\n      @param name the name of this employee\n      @param salary the annual salary\n    */\npublic SalariedEmployee(String name, double salary) {\n    setName(name);\n    annualSalary = salary;\n}\n"",""rating"":2},""code"":""double calculateTaxFromPersonSalary(Person person, double salary){\n  // Given a person and his/her salary\n  // Calculate tax\n  // float rate = 0;\n  \n  //if(person instanceOf Employee){\n  // if(salary > 10000){\n  // rate = 5;\n  //}else{\n  //   rate = 2;\n//}\n  //}else if(person instanceOf BusinessOwner){\n  // rate = 10;\n//}\n}""}"
273,0.5,1.0,3.0,1.0,2017-04-21 08:34:40.971144,10,132,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""double performConversion(double f) {\n    return f *= 453.59237;\n}\n"",""rating"":1},""code"":""double calculateTaxFromPersonSalary(Person person, double salary){\n  // Given a person and his/her salary\n  // Calculate tax\n  // float rate = 0;\n  \n  //if(person instanceOf Employee){\n  // if(salary > 10000){\n  // rate = 5;\n  //}else{\n  //   rate = 2;\n//}\n  //}else if(person instanceOf BusinessOwner){\n  // rate = 10;\n//}\n}""}"
274,0.5,1.0,3.0,1.0,2017-04-21 08:34:46.677244,10,133,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Constructs a manager with a given name, annual salary and weekly bonus.\n      @param name the name of this employee\n      @param salary the annual salary\n      @param bonus the weekly bonus\n    */\npublic Manager(String name, double salary, double bonus) {\n    super(name, salary);\n    weeklyBonus = bonus;\n}\n"",""rating"":2},""code"":""double calculateTaxFromPersonSalary(Person person, double salary){\n  // Given a person and his/her salary\n  // Calculate tax\n  // float rate = 0;\n  \n  //if(person instanceOf Employee){\n  // if(salary > 10000){\n  // rate = 5;\n  //}else{\n  //   rate = 2;\n//}\n  //}else if(person instanceOf BusinessOwner){\n  // rate = 10;\n//}\n}""}"
275,0.5,1.0,2.5,1.0,2017-04-21 08:34:56.925117,10,,"double calculateTaxFromPersonSalary(Person person, double salary){
  // Given a person and his/her salary
  // Calculate tax
  // float rate = 0;
  
  //if(person instanceOf Employee){
  // if(salary > 10000){
  // rate = 5;
  //}else{
  //   rate = 2;
//}
  //}else if(person instanceOf BusinessOwner){
  // rate = 10;
//}
}"
276,0.5,2.0,2.5,1.0,2017-04-21 08:34:59.932933,10,,"double calculateTaxFromPersonSalary(Person person, double salary){
  // Given a person and his/her salary
  // Calculate tax
  // float rate = 0;
  
  //if(person instanceOf Employee){
  // if(salary > 10000){
  // rate = 5;
  //}else{
  //   rate = 2;
//}
  //}else if(person instanceOf BusinessOwner){
  // rate = 10;
//}
}"
277,1.0,2.0,2.5,1.0,2017-04-21 08:35:00.890623,10,,"double calculateTaxFromPersonSalary(Person person, double salary){
  // Given a person and his/her salary
  // Calculate tax
  // float rate = 0;
  
  //if(person instanceOf Employee){
  // if(salary > 10000){
  // rate = 5;
  //}else{
  //   rate = 2;
//}
  //}else if(person instanceOf BusinessOwner){
  // rate = 10;
//}
}"
278,1.0,2.0,2.5,1.0,2017-04-21 08:35:06.524421,10,134,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Constructs a manager with a given name, annual salary and weekly bonus.\n      @param name the name of this employee\n      @param salary the annual salary\n      @param bonus the weekly bonus\n    */\npublic Manager(String name, double salary, double bonus) {\n    super(name, salary);\n    weeklyBonus = bonus;\n}\n"",""rating"":3},""code"":""double calculateTaxFromPersonSalary(Person person, double salary){\n  // Given a person and his/her salary\n  // Calculate tax\n  // float rate = 0;\n  \n  //if(person instanceOf Employee){\n  // if(salary > 10000){\n  // rate = 5;\n  //}else{\n  //   rate = 2;\n//}\n  //}else if(person instanceOf BusinessOwner){\n  // rate = 10;\n//}\n}""}"
279,1.0,2.0,2.5,1.0,2017-04-21 08:35:11.395820,10,135,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""/**\n      Constructs a salaried employee with a given name and annual salary.\n      @param name the name of this employee\n      @param salary the annual salary\n    */\npublic SalariedEmployee(String name, double salary) {\n    setName(name);\n    annualSalary = salary;\n}\n"",""rating"":1},""code"":""double calculateTaxFromPersonSalary(Person person, double salary){\n  // Given a person and his/her salary\n  // Calculate tax\n  // float rate = 0;\n  \n  //if(person instanceOf Employee){\n  // if(salary > 10000){\n  // rate = 5;\n  //}else{\n  //   rate = 2;\n//}\n  //}else if(person instanceOf BusinessOwner){\n  // rate = 10;\n//}\n}""}"
280,1.0,1.0,1.0,1.0,2017-04-21 08:36:56.077950,10,136,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Computes the largest value of an array.\n      @param a the array\n      @return the largest value in a\n   */\npublic static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":1},""code"":""int largestDifferenceInArray(int[] ar){\n  \n}""}"
281,1.0,1.0,1.0,1.0,2017-04-21 08:37:09.851193,10,137,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""public void paintComponent(Graphics graph) {\n    int increment = samples.length / getWidth();\n    final int LARGEST = 32767;\n    int x = 0;\n    for (int i = 0; i < samples.length; i = i + increment) {\n        int value = samples[i];\n        value = Math.min(LARGEST, value);\n        value = Math.max(-LARGEST, value);\n        int height = getHeight() / 2;\n        int y = height - samples[i] * height / LARGEST;\n        graph.drawLine(x, y, x, height);\n        x++;\n    }\n}\n"",""rating"":2},""code"":""int largestDifferenceInArray(int[] ar){\n  \n}""}"
282,1.0,1.0,1.0,1.0,2017-04-21 08:37:37.169297,10,138,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Computes the largest value of an array.\n      @param a the array\n      @return the largest value in a\n   */\npublic static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":3},""code"":""int largestDifferenceInArrayElements(int[] ar){\n  \n}""}"
283,1.0,2.0,1.0,1.0,2017-04-21 08:37:49.024591,10,,"int largestDifferenceInArrayElements(int[] ar){
  
}"
284,1.5,2.0,1.0,1.0,2017-04-21 08:37:51.284164,10,,"int largestDifferenceInArrayElements(int[] ar){
  
}"
285,1.5,2.0,2.0,1.0,2017-04-21 08:37:53.022060,10,,"int largestDifferenceInArrayElements(int[] ar){
  
}"
286,1.5,2.0,2.0,1.5,2017-04-21 08:37:55.188191,10,,"int largestDifferenceInArrayElements(int[] ar){
  
}"
287,1.5,2.0,2.0,1.5,2017-04-21 08:38:14.716472,10,139,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Computes the largest value of an array.\n      @param a the array\n      @return the largest value in a\n   */\npublic static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":2},""code"":""int largestDifferenceInArrayElements(int[] ar){\n  \n}""}"
288,1.5,2.0,2.0,1.5,2017-04-21 08:38:33.233290,10,140,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""public static <E extends Comparable<? super E>> E max(ArrayList<E> a) // public static <E extends Comparable<E>> E max(ArrayList<E> a) \n// doesn't work with Student array list\n{\n    E largest = a.get(0);\n    for (int i = 1; i < a.size(); i++) {\n        if (a.get(i).compareTo(largest) > 0) {\n            largest = a.get(i);\n        }\n    }\n    return largest;\n}\n"",""rating"":1},""code"":""int largestDifferenceInArrayElements(int[] ar){\n  \n}""}"
289,1.5,2.0,2.0,1.5,2017-04-21 08:39:22.985946,10,141,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""public static void main(String[] args) {\n    ArrayList<Double> values = new ArrayList<Double>();\n    // Read inputs\n    System.out.println(\""Please enter values, Q to quit:\"");\n    Scanner in = new Scanner(System.in);\n    while (in.hasNextDouble()) {\n        values.add(in.nextDouble());\n    }\n    // Find the largest value\n    double largest = values.get(0);\n    for (int i = 1; i < values.size(); i++) {\n        if (values.get(i) > largest) {\n            largest = values.get(i);\n        }\n    }\n    for (double element : values) {\n        System.out.print(element);\n        if (element == largest) {\n            System.out.print(\"" <== largest value\"");\n        }\n        System.out.println();\n    }\n}\n       // Print all values, marking the largest\n\n"",""rating"":2},""code"":""int largestDifferenceInArrayElements(int[] ar){\n  \n  // find max and min element from the array\n  \n}""}"
290,1.5,2.0,2.0,1.5,2017-04-21 08:39:27.556735,10,142,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""// pre: list != null, list.length > 0\n// post: return index of minimum element of array\npublic static int findMin(int[] list) {\n    assert list != null && list.length > 0 : \""failed precondition\"";\n    int indexOfMin = 0;\n    for (int i = 1; i < list.length; i++) {\n        if (list[i] < list[indexOfMin]) {\n            indexOfMin = i;\n        }\n    }\n    return indexOfMin;\n}\n"",""rating"":2},""code"":""int largestDifferenceInArrayElements(int[] ar){\n  \n  // find max and min element from the array\n  \n}""}"
291,1.5,2.0,2.0,1.5,2017-04-21 08:40:12.890182,10,143,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""public static void main(String[] args) {\n    ArrayList<Double> values = new ArrayList<Double>();\n    // Read inputs\n    System.out.println(\""Please enter values, Q to quit:\"");\n    Scanner in = new Scanner(System.in);\n    while (in.hasNextDouble()) {\n        values.add(in.nextDouble());\n    }\n    // Find the largest value\n    double largest = values.get(0);\n    for (int i = 1; i < values.size(); i++) {\n        if (values.get(i) > largest) {\n            largest = values.get(i);\n        }\n    }\n    for (double element : values) {\n        System.out.print(element);\n        if (element == largest) {\n            System.out.print(\"" <== largest value\"");\n        }\n        System.out.println();\n    }\n}\n       // Print all values, marking the largest\n\n"",""rating"":1},""code"":""int largestDifferenceInArrayElements(int[] ar){\n  \n  // find max and min element from the array\n  // returns difference between max and min\n  \n}""}"
292,1.5,2.0,2.0,1.5,2017-04-21 08:40:20.551016,10,144,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""// pre: list != null, list.length > 0\n// post: return index of minimum element of array\npublic static int findMin(int[] list) {\n    assert list != null && list.length > 0 : \""failed precondition\"";\n    int indexOfMin = 0;\n    for (int i = 1; i < list.length; i++) {\n        if (list[i] < list[indexOfMin]) {\n            indexOfMin = i;\n        }\n    }\n    return indexOfMin;\n}\n"",""rating"":2},""code"":""int largestDifferenceInArrayElements(int[] ar){\n  \n  // find max and min element from the array\n  // returns difference between max and min\n  \n}""}"
293,1.5,2.0,2.0,1.5,2017-04-21 08:41:06.884273,10,145,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Finds the smallest element in a tail range of the array.\n      @param a the array to sort\n      @param from the first position in a to compare\n      @return the position of the smallest element in the\n      range a[from] . . . a[a.length - 1]\n   */\nprivate static int minimumPosition(int[] a, int from) {\n    int minPos = from;\n    for (int i = from + 1; i < a.length; i++) {\n        if (a[i] < a[minPos]) {\n            minPos = i;\n        }\n    }\n    return minPos;\n}\n"",""rating"":2},""code"":""int largestDifferenceInArrayElements(int[] ar){\n  \n  // find maximum element from the array\n  // find minimum element from the array\n  // returns difference between max and min\n  \n}""}"
294,1.5,1.5,2.0,1.5,2017-04-21 08:41:44.635365,10,,"int largestDifferenceInArrayElements(int[] ar){
  
  // find maximum element from the array
  // find minimum element from the array
  // returns difference between max and min
  
}"
295,1.5,1.5,2.0,1.5,2017-04-21 08:41:45.994171,10,,"int largestDifferenceInArrayElements(int[] ar){
  
  // find maximum element from the array
  // find minimum element from the array
  // returns difference between max and min
  
}"
296,1.5,1.5,2.0,1.5,2017-04-21 08:41:46.742474,10,,"int largestDifferenceInArrayElements(int[] ar){
  
  // find maximum element from the array
  // find minimum element from the array
  // returns difference between max and min
  
}"
297,1.5,1.5,2.5,1.5,2017-04-21 08:41:47.687471,10,,"int largestDifferenceInArrayElements(int[] ar){
  
  // find maximum element from the array
  // find minimum element from the array
  // returns difference between max and min
  
}"
298,1.5,1.5,2.5,2.5,2017-04-21 08:41:49.713493,10,,"int largestDifferenceInArrayElements(int[] ar){
  
  // find maximum element from the array
  // find minimum element from the array
  // returns difference between max and min
  
}"
299,1.5,1.5,2.5,3.0,2017-04-21 08:41:50.658899,10,,"int largestDifferenceInArrayElements(int[] ar){
  
  // find maximum element from the array
  // find minimum element from the array
  // returns difference between max and min
  
}"
300,1.5,1.5,2.5,3.0,2017-04-21 08:41:58.183246,10,146,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""/**\n      Gets the minimum element stored in this heap.\n      @return the minimum element\n   */\npublic Comparable peek() {\n    return elements.get(1);\n}\n"",""rating"":2},""code"":""int largestDifferenceInArrayElements(int[] ar){\n  \n  // find maximum element from the array\n  // find minimum element from the array\n  // returns difference between max and min\n  \n}""}"
301,1.5,1.5,2.5,3.0,2017-04-21 08:42:09.508832,10,147,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Finds the smallest element in a tail range of the array.\n      @param a the array to sort\n      @param from the first position in a to compare\n      @return the position of the smallest element in the\n      range a[from] . . . a[a.length - 1]\n   */\nprivate static int minimumPosition(int[] a, int from) {\n    int minPos = from;\n    for (int i = from + 1; i < a.length; i++) {\n        if (a[i] < a[minPos]) {\n            minPos = i;\n        }\n    }\n    return minPos;\n}\n"",""rating"":2},""code"":""int largestDifferenceInArrayElements(int[] ar){\n  \n  // find maximum element from the array\n  // find minimum element from the array\n  // returns difference between max and min\n  \n}""}"
302,1.0,1.0,1.0,1.0,2017-04-21 11:35:07.971741,13,148,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""/**\n      Constructs a RecordReader with a zero total.\n   */\npublic RecordReader(double aLimit) {\n    total = 0;\n    limit = aLimit;\n}\n"",""rating"":4},""code"":""public static void main(int []a)\n{\n  int total=0;\n  for(int i=0;a[i];i++)\n    \n    \n    \n  \n}""}"
303,1.0,1.0,1.0,1.0,2017-04-21 11:35:14.323596,13,149,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static void main(String[] args) {\n    int total = 0;\n    for (int i : integers) total += process(i,  x -> x * x + 1);\n    System.out.println(\""The total is \"" + total);\n}\n"",""rating"":4},""code"":""public static void main(int []a)\n{\n  int total=0;\n  for(int i=0;a[i];i++)\n    \n    \n    \n  \n}""}"
304,1.0,1.0,1.0,1.0,2017-04-21 11:35:16.279979,13,150,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""public static void main(String[] args) {\n    int total = 0;\n    for (int i : integers) {\n        // Call doTheMath with 'i' and a Lambda for n^2 +1\n        total += doTheMath(i,  k -> k * k + 1);\n    }\n    System.out.println(total);\n}\n"",""rating"":3},""code"":""public static void main(int []a)\n{\n  int total=0;\n  for(int i=0;a[i];i++)\n    \n    \n    \n  \n}""}"
305,1.0,1.0,1.0,1.0,2017-04-21 11:35:24.874466,13,151,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""// pre: list != null\n// post: return sum of elements\n// uses enhanced for loop\npublic static int sumListEnhanced(int[] list) {\n    int total = 0;\n    for (int val : list) {\n        total += val;\n    }\n    return total;\n}\n"",""rating"":4},""code"":""public static void main(int []a)\n{\n  int total=0;\n  for(int i=0;a[i];i++)\n    \n    \n    \n  \n}""}"
306,1.0,1.0,1.0,1.0,2017-04-21 11:36:07.313591,13,152,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""public static void showList(int[] list) {\n    for (int i = 0; i < list.length; i++) System.out.print(list[i] + \"" \"");\n    System.out.println();\n}\n"",""rating"":4},""code"":""public static void main(int []a)\n{\n  int total=0;\n  for(int i=0;a[i];i++)\n    \n    \n    \n  \n}""}"
307,1.0,1.0,1.0,1.0,2017-04-21 11:36:10.512261,13,153,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""/**\n      Sorts an array, using selection sort.\n      @param a the array to sort\n   */\npublic static void sort(int[] a) {\n    for (int i = 0; i < a.length - 1; i++) {\n        int minPos = minimumPosition(a, i);\n        ArrayUtil.swap(a, minPos, i);\n    }\n}\n"",""rating"":4},""code"":""public static void main(int []a)\n{\n  int total=0;\n  for(int i=0;a[i];i++)\n    \n    \n    \n  \n}""}"
308,1.0,1.0,1.0,1.0,2017-04-21 11:36:13.095523,13,154,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""/**\n      Sorts an array, using selection sort.\n      @param a the array to sort\n   */\npublic static void sort(int[] a) {\n    int n = a.length - 1;\n    for (int i = (n - 1) / 2; i >= 0; i--) {\n        fixHeap(a, i, n);\n    }\n    while (n > 0) {\n        ArrayUtil.swap(a, 0, n);\n        n--;\n        fixHeap(a, 0, n);\n    }\n}\n"",""rating"":4},""code"":""public static void main(int []a)\n{\n  int total=0;\n  for(int i=0;a[i];i++)\n    \n    \n    \n  \n}""}"
309,1.0,1.0,1.0,1.0,2017-04-21 11:36:14.026479,13,155,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""// pre: list != null\n// post: adds one to every element of list\npublic static void addOne(int[] list) {\n    for (int i = 0; i < list.length; i++) {\n        list[i]++;\n    }\n}\n"",""rating"":3},""code"":""public static void main(int []a)\n{\n  int total=0;\n  for(int i=0;a[i];i++)\n    \n    \n    \n  \n}""}"
310,1.0,1.0,1.0,1.0,2017-04-21 11:36:16.622204,13,156,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""// return sum of ints in list\n// list may not be null\nprivate static int sum(int[] list) {\n    assert list != null : \""Failed precondition, sum: parameter list\"" + \"" may not be null.\"";\n    int total = 0;\n    for (int x : list) {\n        total += x;\n    }\n    return total;\n}\n"",""rating"":4},""code"":""public static void main(int []a)\n{\n  int total=0;\n  for(int i=0;a[i];i++)\n    \n    \n    \n  \n}""}"
311,1.0,1.0,1.0,1.0,2017-04-21 11:36:24.896559,13,157,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""// BEGIN mySumDefn\nstatic int mySum(int... args) {\n    int total = 0;\n    for (int a : args) {\n        total += a;\n    }\n    return total;\n}\n"",""rating"":4},""code"":""public static void main(int []a)\n{\n  int total=0;\n  for(int i=0;a[i];i++)\n    \n    \n    \n  \n}""}"
312,1.5,1.0,1.0,1.0,2017-04-21 11:36:30.463522,13,,"public static void main(int []a)
{
  int total=0;
  for(int i=0;a[i];i++)
    
    
    
  
}"
313,1.0,1.0,1.0,1.0,2017-04-21 19:26:35.797016,16,158,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""public static void main(String[] args) {\n    String input = JOptionPane.showInputDialog(\""Enter price:\"");\n    double price = Double.parseDouble(input);\n    final double TAX_RATE = 8.5;\n    price = price * (1 + TAX_RATE / 100);\n    JOptionPane.showMessageDialog(null, \""Price after tax: \"" + price);\n}\n"",""rating"":3},""code"":""double computeTax(Employee e)\n{\n  \n}""}"
314,1.0,1.0,1.0,1.0,2017-04-21 19:32:01.819492,16,159,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", targetDate = \""Jan 1, 2012\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":3},""code"":""double computeTax()\n{\n  Person p;\n  Employee e=new Employee();\n  if (e.getSalary()<10000)\n    tax=e.getSalary()*.02;\n  else\n    tax=e.getSalary()*.05;\n  BusinessOwner bo=new BusinessOwner();\n  tax=bo.getProfit()*.1;\n  Veterans v=new Veterans();\n  tax=0;\n}""}"
315,1.0,1.0,1.0,1.0,2017-04-21 19:32:01.859877,16,160,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", targetDate = \""Jan 1, 2012\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":3},""code"":""double computeTax()\n{\n  Person p;\n  Employee e=new Employee();\n  if (e.getSalary()<10000)\n    tax=e.getSalary()*.02;\n  else\n    tax=e.getSalary()*.05;\n  BusinessOwner bo=new BusinessOwner();\n  tax=bo.getProfit()*.1;\n  Veterans v=new Veterans();\n  tax=0;\n}""}"
316,1.0,1.0,3.0,1.0,2017-04-21 19:32:19.226462,16,,"double computeTax()
{
  Person p;
  Employee e=new Employee();
  if (e.getSalary()<10000)
    tax=e.getSalary()*.02;
  else
    tax=e.getSalary()*.05;
  BusinessOwner bo=new BusinessOwner();
  tax=bo.getProfit()*.1;
  Veterans v=new Veterans();
  tax=0;
}"
317,1.0,1.0,3.0,1.0,2017-04-21 19:32:45.743935,16,161,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", targetDate = \""Jan 1, 2012\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":4},""code"":""double computeTax()\n{\n  Person p;\n  Employee e=new Employee();\n  if (e.getSalary()<10000)\n    tax=e.getSalary()*.02;\n  else\n    tax=e.getSalary()*.05;\n  BusinessOwner bo=new BusinessOwner();\n  tax=bo.getProfit()*.1;\n  Veterans v=new Veterans();\n  tax=0;\n}""}"
318,0.5,1.0,3.0,1.0,2017-04-21 19:32:56.158728,16,,"double computeTax()
{
  Person p;
  Employee e=new Employee();
  if (e.getSalary()<10000)
    tax=e.getSalary()*.02;
  else
    tax=e.getSalary()*.05;
  BusinessOwner bo=new BusinessOwner();
  tax=bo.getProfit()*.1;
  Veterans v=new Veterans();
  tax=0;
}"
319,0.5,1.0,3.0,1.0,2017-04-21 19:32:56.295906,16,,"double computeTax()
{
  Person p;
  Employee e=new Employee();
  if (e.getSalary()<10000)
    tax=e.getSalary()*.02;
  else
    tax=e.getSalary()*.05;
  BusinessOwner bo=new BusinessOwner();
  tax=bo.getProfit()*.1;
  Veterans v=new Veterans();
  tax=0;
}"
320,3.0,1.0,3.0,1.0,2017-04-21 19:32:56.739758,16,,"double computeTax()
{
  Person p;
  Employee e=new Employee();
  if (e.getSalary()<10000)
    tax=e.getSalary()*.02;
  else
    tax=e.getSalary()*.05;
  BusinessOwner bo=new BusinessOwner();
  tax=bo.getProfit()*.1;
  Veterans v=new Veterans();
  tax=0;
}"
321,3.0,1.0,3.0,1.0,2017-04-21 19:33:12.145427,16,162,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":4},""code"":""double computeTax()\n{\n  Person p;\n  Employee e=new Employee();\n  if (e.getSalary()<10000)\n    tax=e.getSalary()*.02;\n  else\n    tax=e.getSalary()*.05;\n  BusinessOwner bo=new BusinessOwner();\n  tax=bo.getProfit()*.1;\n  Veterans v=new Veterans();\n  tax=0;\n}""}"
322,3.0,1.0,3.0,1.0,2017-04-21 19:33:17.661415,16,163,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""double value(double xValue) {\n    // The value is obtained by evaluating the left and right\n    // operands and combining the values with the operator.\n    double x = left.value(xValue);\n    double y = right.value(xValue);\n    switch(op) {\n        case '+':\n            return x + y;\n        case '-':\n            return x - y;\n        case '*':\n            return x * y;\n        case '/':\n            return x / y;\n        // Bad operator!\n        default:\n            return Double.NaN;\n    }\n}\n"",""rating"":3},""code"":""double computeTax()\n{\n  Person p;\n  Employee e=new Employee();\n  if (e.getSalary()<10000)\n    tax=e.getSalary()*.02;\n  else\n    tax=e.getSalary()*.05;\n  BusinessOwner bo=new BusinessOwner();\n  tax=bo.getProfit()*.1;\n  Veterans v=new Veterans();\n  tax=0;\n}""}"
323,3.0,2.0,3.0,1.0,2017-04-21 19:33:25.367829,16,,"double computeTax()
{
  Person p;
  Employee e=new Employee();
  if (e.getSalary()<10000)
    tax=e.getSalary()*.02;
  else
    tax=e.getSalary()*.05;
  BusinessOwner bo=new BusinessOwner();
  tax=bo.getProfit()*.1;
  Veterans v=new Veterans();
  tax=0;
}"
324,3.0,2.0,3.0,1.0,2017-04-21 19:33:49.659961,16,164,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":4},""code"":""double computeTax()\n{\n  Person p;\n  Employee e=new Employee();\n  if (e.getSalary()<10000)\n    tax=e.getSalary()*.02;\n  else\n    tax=e.getSalary()*.05;\n  BusinessOwner bo=new BusinessOwner();\n  tax=bo.getProfit()*.1;\n  Veterans v=new Veterans();\n  tax=0;\n}""}"
325,3.0,2.0,3.0,1.0,2017-04-21 19:33:49.795019,16,165,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":4},""code"":""double computeTax()\n{\n  Person p;\n  Employee e=new Employee();\n  if (e.getSalary()<10000)\n    tax=e.getSalary()*.02;\n  else\n    tax=e.getSalary()*.05;\n  BusinessOwner bo=new BusinessOwner();\n  tax=bo.getProfit()*.1;\n  Veterans v=new Veterans();\n  tax=0;\n}""}"
326,3.0,2.5,3.0,1.0,2017-04-21 19:34:27.385556,16,,"double computeTax()
{
  Person p;
  Employee e=new Employee();
  if (e.getSalary()<10000)
    tax=e.getSalary()*.02;
  else
    tax=e.getSalary()*.05;
  BusinessOwner bo=new BusinessOwner();
  tax=bo.getProfit()*.1;
  Veterans v=new Veterans();
  tax=0;
}"
327,3.0,2.5,3.0,1.0,2017-04-21 19:34:27.432545,16,,"double computeTax()
{
  Person p;
  Employee e=new Employee();
  if (e.getSalary()<10000)
    tax=e.getSalary()*.02;
  else
    tax=e.getSalary()*.05;
  BusinessOwner bo=new BusinessOwner();
  tax=bo.getProfit()*.1;
  Veterans v=new Veterans();
  tax=0;
}"
328,3.0,2.5,3.0,1.0,2017-04-21 19:34:43.036155,16,166,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""/** serialize an Object to byte array. */\nprotected byte[] toByteArray(Object o) throws IOException {\n    if (bo == null)\n        bo = new ByteArrayOutputStream(1024);\n    bo.reset();\n    ObjectOutputStream os = new ObjectOutputStream(bo);\n    os.writeObject(o);\n    os.close();\n    return bo.toByteArray();\n}\n"",""rating"":2},""code"":""double computeTax()\n{\n  Person p;\n  Employee e=new Employee();\n  if (e.getSalary()<10000)\n    tax=e.getSalary()*.02;\n  else\n    tax=e.getSalary()*.05;\n  BusinessOwner bo=new BusinessOwner();\n  tax=bo.getProfit()*.1;\n  Veterans v=new Veterans();\n  tax=0;\n}""}"
329,3.0,2.5,3.0,1.0,2017-04-21 19:34:48.434536,16,167,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", targetDate = \""Jan 1, 2012\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":2},""code"":""double computeTax()\n{\n  Person p;\n  Employee e=new Employee();\n  if (e.getSalary()<10000)\n    tax=e.getSalary()*.02;\n  else\n    tax=e.getSalary()*.05;\n  BusinessOwner bo=new BusinessOwner();\n  tax=bo.getProfit()*.1;\n  Veterans v=new Veterans();\n  tax=0;\n}""}"
330,3.0,2.5,3.0,2.0,2017-04-21 19:34:52.840863,16,,"double computeTax()
{
  Person p;
  Employee e=new Employee();
  if (e.getSalary()<10000)
    tax=e.getSalary()*.02;
  else
    tax=e.getSalary()*.05;
  BusinessOwner bo=new BusinessOwner();
  tax=bo.getProfit()*.1;
  Veterans v=new Veterans();
  tax=0;
}"
331,3.0,2.5,3.0,2.0,2017-04-21 19:34:52.882235,16,,"double computeTax()
{
  Person p;
  Employee e=new Employee();
  if (e.getSalary()<10000)
    tax=e.getSalary()*.02;
  else
    tax=e.getSalary()*.05;
  BusinessOwner bo=new BusinessOwner();
  tax=bo.getProfit()*.1;
  Veterans v=new Veterans();
  tax=0;
}"
332,3.0,2.5,3.0,2.0,2017-04-21 19:35:14.306269,16,168,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":3},""code"":""double computeTax()\n{\n  Person p;\n  Employee e=new Employee();\n  if (e.getSalary()<10000)\n    tax=e.getSalary()*.02;\n  else\n    tax=e.getSalary()*.05;\n  BusinessOwner bo=new BusinessOwner();\n  tax=bo.getProfit()*.1;\n  Veterans v=new Veterans();\n  tax=0;\n}""}"
333,3.0,2.5,3.0,2.0,2017-04-21 19:35:17.859762,16,169,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""/** serialize an Object to byte array. */\nprotected byte[] toByteArray(Object o) throws IOException {\n    if (bo == null)\n        bo = new ByteArrayOutputStream(1024);\n    bo.reset();\n    ObjectOutputStream os = new ObjectOutputStream(bo);\n    os.writeObject(o);\n    os.close();\n    return bo.toByteArray();\n}\n"",""rating"":2},""code"":""double computeTax()\n{\n  Person p;\n  Employee e=new Employee();\n  if (e.getSalary()<10000)\n    tax=e.getSalary()*.02;\n  else\n    tax=e.getSalary()*.05;\n  BusinessOwner bo=new BusinessOwner();\n  tax=bo.getProfit()*.1;\n  Veterans v=new Veterans();\n  tax=0;\n}""}"
334,3.0,2.5,3.0,2.0,2017-04-21 19:35:17.892632,16,170,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""/** serialize an Object to byte array. */\nprotected byte[] toByteArray(Object o) throws IOException {\n    if (bo == null)\n        bo = new ByteArrayOutputStream(1024);\n    bo.reset();\n    ObjectOutputStream os = new ObjectOutputStream(bo);\n    os.writeObject(o);\n    os.close();\n    return bo.toByteArray();\n}\n"",""rating"":2},""code"":""double computeTax()\n{\n  Person p;\n  Employee e=new Employee();\n  if (e.getSalary()<10000)\n    tax=e.getSalary()*.02;\n  else\n    tax=e.getSalary()*.05;\n  BusinessOwner bo=new BusinessOwner();\n  tax=bo.getProfit()*.1;\n  Veterans v=new Veterans();\n  tax=0;\n}""}"
335,3.0,2.5,3.0,2.0,2017-04-21 19:35:21.671017,16,171,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", targetDate = \""Jan 1, 2012\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":4},""code"":""double computeTax()\n{\n  Person p;\n  Employee e=new Employee();\n  if (e.getSalary()<10000)\n    tax=e.getSalary()*.02;\n  else\n    tax=e.getSalary()*.05;\n  BusinessOwner bo=new BusinessOwner();\n  tax=bo.getProfit()*.1;\n  Veterans v=new Veterans();\n  tax=0;\n}""}"
336,3.0,2.5,3.0,2.0,2017-04-21 19:35:34.421814,16,172,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", targetDate = \""Jan 1, 2012\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":4},""code"":""double computeTax()\n{\n  Person p;\n  Employee e=new Employee();\n  if (e.getSalary()<10000)\n    tax=e.getSalary()*.02;\n  else\n    tax=e.getSalary()*.05;\n  BusinessOwner bo=new BusinessOwner();\n  tax=bo.getProfit()*.1;\n  Veterans v=new Veterans();\n  tax=0;\n}""}"
337,1.0,1.0,1.0,1.0,2017-04-21 19:40:16.064708,16,173,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""public CountDivisorsThread(int min, int max) {\n    this.min = min;\n    this.max = max;\n}\n"",""rating"":3},""code"":""double diffElement(int[] a)\n{\n  int max=a[0];\n  for(int i;i<=a.length;i++)\n    if (max<a[i])\n     max=a[i];\n  int min=0;\n  for(int i;i<=a.length;i++)\n     if (a[i]<min)\n\t\tmin=a[i];\n  diff=max-min;\n  return diff;\n}""}"
338,1.5,1.0,1.0,1.0,2017-04-21 19:40:22.870631,16,,"double diffElement(int[] a)
{
  int max=a[0];
  for(int i;i<=a.length;i++)
    if (max<a[i])
     max=a[i];
  int min=0;
  for(int i;i<=a.length;i++)
     if (a[i]<min)
		min=a[i];
  diff=max-min;
  return diff;
}"
339,1.5,1.0,1.0,1.0,2017-04-21 19:40:23.216437,16,,"double diffElement(int[] a)
{
  int max=a[0];
  for(int i;i<=a.length;i++)
    if (max<a[i])
     max=a[i];
  int min=0;
  for(int i;i<=a.length;i++)
     if (a[i]<min)
		min=a[i];
  diff=max-min;
  return diff;
}"
340,1.5,1.0,1.0,1.0,2017-04-21 19:40:29.983974,16,174,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""Task(int min, int max) {\n    this.min = min;\n    this.max = max;\n}\n"",""rating"":2},""code"":""double diffElement(int[] a)\n{\n  int max=a[0];\n  for(int i;i<=a.length;i++)\n    if (max<a[i])\n     max=a[i];\n  int min=0;\n  for(int i;i<=a.length;i++)\n     if (a[i]<min)\n\t\tmin=a[i];\n  diff=max-min;\n  return diff;\n}""}"
341,1.5,1.0,1.0,2.5,2017-04-21 19:40:41.550444,16,,"double diffElement(int[] a)
{
  int max=a[0];
  for(int i;i<=a.length;i++)
    if (max<a[i])
     max=a[i];
  int min=0;
  for(int i;i<=a.length;i++)
     if (a[i]<min)
		min=a[i];
  diff=max-min;
  return diff;
}"
342,1.5,1.0,1.0,2.5,2017-04-21 19:40:46.259802,16,175,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""Task(int min, int max) {\n    this.min = min;\n    this.max = max;\n}\n"",""rating"":2},""code"":""double diffElement(int[] a)\n{\n  int max=a[0];\n  for(int i;i<=a.length;i++)\n    if (max<a[i])\n     max=a[i];\n  int min=0;\n  for(int i;i<=a.length;i++)\n     if (a[i]<min)\n\t\tmin=a[i];\n  diff=max-min;\n  return diff;\n}""}"
343,1.5,1.0,1.0,2.5,2017-04-21 19:40:54.390459,16,176,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent1(int[] a) {\n    int[] counts = new int[a.length];\n    for (// O(n*n)\n    int i = 0; // O(n*n)\n    i < a.length; // O(n*n)\n    i++) {\n        // O(n) in each iteration\n        counts[i] = count(a, a[i]);\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":3},""code"":""double diffElement(int[] a)\n{\n  int max=a[0];\n  for(int i;i<=a.length;i++)\n    if (max<a[i])\n     max=a[i];\n  int min=0;\n  for(int i;i<=a.length;i++)\n     if (a[i]<min)\n\t\tmin=a[i];\n  diff=max-min;\n  return diff;\n}""}"
344,1.5,1.0,1.0,2.5,2017-04-21 19:40:58.965147,16,177,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""// pre: list != null\n// post: return sum of elements\n// use traditional for loop\npublic static int sumListOld(int[] list) {\n    int total = 0;\n    for (int i = 0; i < list.length; i++) {\n        total += list[i];\n        System.out.println(list[i]);\n    }\n    return total;\n}\n"",""rating"":2},""code"":""double diffElement(int[] a)\n{\n  int max=a[0];\n  for(int i;i<=a.length;i++)\n    if (max<a[i])\n     max=a[i];\n  int min=0;\n  for(int i;i<=a.length;i++)\n     if (a[i]<min)\n\t\tmin=a[i];\n  diff=max-min;\n  return diff;\n}""}"
345,1.5,1.0,1.0,2.5,2017-04-21 19:41:01.147109,16,178,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""// pre: list != null\n// post: adds one to every element of list\npublic static void addOne(int[] list) {\n    for (int i = 0; i < list.length; i++) {\n        list[i]++;\n    }\n}\n"",""rating"":2},""code"":""double diffElement(int[] a)\n{\n  int max=a[0];\n  for(int i;i<=a.length;i++)\n    if (max<a[i])\n     max=a[i];\n  int min=0;\n  for(int i;i<=a.length;i++)\n     if (a[i]<min)\n\t\tmin=a[i];\n  diff=max-min;\n  return diff;\n}""}"
346,1.5,1.0,1.0,2.5,2017-04-21 19:41:01.493977,16,179,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""// pre: list != null\n// post: adds one to every element of list\npublic static void addOne(int[] list) {\n    for (int i = 0; i < list.length; i++) {\n        list[i]++;\n    }\n}\n"",""rating"":2},""code"":""double diffElement(int[] a)\n{\n  int max=a[0];\n  for(int i;i<=a.length;i++)\n    if (max<a[i])\n     max=a[i];\n  int min=0;\n  for(int i;i<=a.length;i++)\n     if (a[i]<min)\n\t\tmin=a[i];\n  diff=max-min;\n  return diff;\n}""}"
347,1.5,1.0,2.5,2.5,2017-04-21 19:41:02.910973,16,,"double diffElement(int[] a)
{
  int max=a[0];
  for(int i;i<=a.length;i++)
    if (max<a[i])
     max=a[i];
  int min=0;
  for(int i;i<=a.length;i++)
     if (a[i]<min)
		min=a[i];
  diff=max-min;
  return diff;
}"
348,1.5,1.0,2.5,2.5,2017-04-21 19:41:02.988749,16,,"double diffElement(int[] a)
{
  int max=a[0];
  for(int i;i<=a.length;i++)
    if (max<a[i])
     max=a[i];
  int min=0;
  for(int i;i<=a.length;i++)
     if (a[i]<min)
		min=a[i];
  diff=max-min;
  return diff;
}"
349,1.5,1.0,2.5,2.5,2017-04-21 19:41:11.049970,16,180,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent1(int[] a) {\n    int[] counts = new int[a.length];\n    for (// O(n*n)\n    int i = 0; // O(n*n)\n    i < a.length; // O(n*n)\n    i++) {\n        // O(n) in each iteration\n        counts[i] = count(a, a[i]);\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":3},""code"":""double diffElement(int[] a)\n{\n  int max=a[0];\n  for(int i;i<=a.length;i++)\n    if (max<a[i])\n     max=a[i];\n  int min=0;\n  for(int i;i<=a.length;i++)\n     if (a[i]<min)\n\t\tmin=a[i];\n  diff=max-min;\n  return diff;\n}""}"
350,1.5,1.0,2.5,2.5,2017-04-21 19:41:11.068195,16,181,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent1(int[] a) {\n    int[] counts = new int[a.length];\n    for (// O(n*n)\n    int i = 0; // O(n*n)\n    i < a.length; // O(n*n)\n    i++) {\n        // O(n) in each iteration\n        counts[i] = count(a, a[i]);\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":3},""code"":""double diffElement(int[] a)\n{\n  int max=a[0];\n  for(int i;i<=a.length;i++)\n    if (max<a[i])\n     max=a[i];\n  int min=0;\n  for(int i;i<=a.length;i++)\n     if (a[i]<min)\n\t\tmin=a[i];\n  diff=max-min;\n  return diff;\n}""}"
351,1.5,3.5,2.5,2.5,2017-04-21 19:41:21.618262,16,,"double diffElement(int[] a)
{
  int max=a[0];
  for(int i;i<=a.length;i++)
    if (max<a[i])
     max=a[i];
  int min=0;
  for(int i;i<=a.length;i++)
     if (a[i]<min)
		min=a[i];
  diff=max-min;
  return diff;
}"
352,1.5,3.5,2.5,2.5,2017-04-21 19:41:21.643497,16,,"double diffElement(int[] a)
{
  int max=a[0];
  for(int i;i<=a.length;i++)
    if (max<a[i])
     max=a[i];
  int min=0;
  for(int i;i<=a.length;i++)
     if (a[i]<min)
		min=a[i];
  diff=max-min;
  return diff;
}"
353,1.5,3.5,2.5,2.5,2017-04-21 19:41:39.748066,16,182,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""public CountDivisorsThread(int min, int max) {\n    this.min = min;\n    this.max = max;\n}\n"",""rating"":3},""code"":""double diffElement(int[] a)\n{\n  int max=a[0];\n  for(int i;i<=a.length;i++)\n    if (max<a[i])\n     max=a[i];\n  int min=0;\n  for(int i;i<=a.length;i++)\n     if (a[i]<min)\n\t\tmin=a[i];\n  diff=max-min;\n  return diff;\n}""}"
354,1.5,3.5,2.5,2.5,2017-04-21 19:41:42.307320,16,183,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String args[]) {\n    int m = 10, n = 20, max;\n    max = (m > n) ? m : n;\n    System.out.println(\""max of \"" + m + \"" and \"" + n + \"": \"" + max);\n    n = 5;\n    max = (m > n) ? m : n;\n    System.out.println(\""max of \"" + m + \"" and \"" + n + \"": \"" + max);\n}\n"",""rating"":4},""code"":""double diffElement(int[] a)\n{\n  int max=a[0];\n  for(int i;i<=a.length;i++)\n    if (max<a[i])\n     max=a[i];\n  int min=0;\n  for(int i;i<=a.length;i++)\n     if (a[i]<min)\n\t\tmin=a[i];\n  diff=max-min;\n  return diff;\n}""}"
355,1.5,3.5,2.5,2.5,2017-04-21 19:41:55.281153,16,184,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""Task(int min, int max) {\n    this.min = min;\n    this.max = max;\n}\n"",""rating"":3},""code"":""double diffElement(int[] a)\n{\n  int max=a[0];\n  for(int i;i<=a.length;i++)\n    if (max<a[i])\n     max=a[i];\n  int min=0;\n  for(int i;i<=a.length;i++)\n     if (a[i]<min)\n\t\tmin=a[i];\n  diff=max-min;\n  return diff;\n}""}"
356,1.5,3.5,2.5,2.5,2017-04-21 19:41:55.341561,16,185,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""Task(int min, int max) {\n    this.min = min;\n    this.max = max;\n}\n"",""rating"":3},""code"":""double diffElement(int[] a)\n{\n  int max=a[0];\n  for(int i;i<=a.length;i++)\n    if (max<a[i])\n     max=a[i];\n  int min=0;\n  for(int i;i<=a.length;i++)\n     if (a[i]<min)\n\t\tmin=a[i];\n  diff=max-min;\n  return diff;\n}""}"
357,2.5,3.5,2.5,2.5,2017-04-21 19:42:02.469786,16,,"double diffElement(int[] a)
{
  int max=a[0];
  for(int i;i<=a.length;i++)
    if (max<a[i])
     max=a[i];
  int min=0;
  for(int i;i<=a.length;i++)
     if (a[i]<min)
		min=a[i];
  diff=max-min;
  return diff;
}"
358,2.5,3.5,2.5,2.5,2017-04-21 19:42:02.504104,16,,"double diffElement(int[] a)
{
  int max=a[0];
  for(int i;i<=a.length;i++)
    if (max<a[i])
     max=a[i];
  int min=0;
  for(int i;i<=a.length;i++)
     if (a[i]<min)
		min=a[i];
  diff=max-min;
  return diff;
}"
359,2.5,3.5,2.5,2.5,2017-04-21 19:42:16.426119,16,186,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String args[]) {\n    int m = 10, n = 20, max;\n    max = (m > n) ? m : n;\n    System.out.println(\""max of \"" + m + \"" and \"" + n + \"": \"" + max);\n    n = 5;\n    max = (m > n) ? m : n;\n    System.out.println(\""max of \"" + m + \"" and \"" + n + \"": \"" + max);\n}\n"",""rating"":4},""code"":""double diffElement(int[] a)\n{\n  int max=a[0];\n  for(int i;i<=a.length;i++)\n    if (max<a[i])\n     max=a[i];\n  int min=0;\n  for(int i;i<=a.length;i++)\n     if (a[i]<min)\n\t\tmin=a[i];\n  diff=max-min;\n  return diff;\n}""}"
360,2.5,3.5,2.5,2.5,2017-04-21 19:42:16.453643,16,187,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String args[]) {\n    int m = 10, n = 20, max;\n    max = (m > n) ? m : n;\n    System.out.println(\""max of \"" + m + \"" and \"" + n + \"": \"" + max);\n    n = 5;\n    max = (m > n) ? m : n;\n    System.out.println(\""max of \"" + m + \"" and \"" + n + \"": \"" + max);\n}\n"",""rating"":4},""code"":""double diffElement(int[] a)\n{\n  int max=a[0];\n  for(int i;i<=a.length;i++)\n    if (max<a[i])\n     max=a[i];\n  int min=0;\n  for(int i;i<=a.length;i++)\n     if (a[i]<min)\n\t\tmin=a[i];\n  diff=max-min;\n  return diff;\n}""}"
361,5.0,1.0,1.0,1.0,2017-04-21 20:44:03.064895,17,,"private int difference(a){
  int a[]
}"
362,5.0,5.0,1.0,1.0,2017-04-21 20:44:04.364938,17,,"private int difference(a){
  int a[]
}"
363,5.0,5.0,5.0,1.0,2017-04-21 20:44:05.837569,17,,"private int difference(a){
  int a[]
}"
364,5.0,5.0,5.0,5.0,2017-04-21 20:44:07.308675,17,,"private int difference(a){
  int a[]
}"
365,1.0,1.0,1.0,1.0,2017-04-21 20:46:27.096376,17,188,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""int getCount() {\n    return count;\n}\n"",""rating"":1},""code"":""int largestDifference(int a[]){\n  \n}""}"
366,1.0,1.0,1.0,1.0,2017-04-21 20:46:39.674731,17,189,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Computes the largest value of an array.\n      @param a the array\n      @return the largest value in a\n   */\npublic static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":5},""code"":""int largestDifference(int a[]){\n  \n}""}"
367,1.0,1.0,1.0,1.0,2017-04-21 20:47:02.115205,17,190,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static <E extends Comparable<E>> E max(E[] a) {\n    E largest = a[0];\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":5},""code"":""int largestDifference(int a[]){\n  \n}""}"
368,1.0,1.0,1.0,1.0,2017-04-21 20:47:09.162587,17,191,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""public static <E extends Comparable<? super E>> E max(ArrayList<E> a) // public static <E extends Comparable<E>> E max(ArrayList<E> a) \n// doesn't work with Student array list\n{\n    E largest = a.get(0);\n    for (int i = 1; i < a.size(); i++) {\n        if (a.get(i).compareTo(largest) > 0) {\n            largest = a.get(i);\n        }\n    }\n    return largest;\n}\n"",""rating"":1},""code"":""int largestDifference(int a[]){\n  \n}""}"
369,1.0,1.0,1.0,1.0,2017-04-21 20:47:10.798014,17,192,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""/**\n         * Return the largest item that has been entered.\n         * The return value will be -infinity if no numbers have been entered. \n         */\npublic double getMax() {\n    return max;\n}\n"",""rating"":1},""code"":""int largestDifference(int a[]){\n  \n}""}"
370,1.0,1.0,1.0,1.0,2017-04-21 20:47:13.136627,17,193,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""int intFieldValue(Object o, String name) throws NoSuchFieldException, IllegalAccessException {\n    Class<?> c = o.getClass();\n    Field fld = c.getField(name);\n    int value = fld.getInt(o);\n    return value;\n}\n"",""rating"":1},""code"":""int largestDifference(int a[]){\n  \n}""}"
371,1.0,1.0,1.0,1.0,2017-04-21 20:47:15.020364,17,194,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""public void paintComponent(Graphics graph) {\n    int increment = samples.length / getWidth();\n    final int LARGEST = 32767;\n    int x = 0;\n    for (int i = 0; i < samples.length; i = i + increment) {\n        int value = samples[i];\n        value = Math.min(LARGEST, value);\n        value = Math.max(-LARGEST, value);\n        int height = getHeight() / 2;\n        int y = height - samples[i] * height / LARGEST;\n        graph.drawLine(x, y, x, height);\n        x++;\n    }\n}\n"",""rating"":1},""code"":""int largestDifference(int a[]){\n  \n}""}"
372,1.0,1.0,1.0,1.0,2017-04-21 20:47:16.827458,17,195,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""// pre: list != null\n// post: return sum of elements\n// use traditional for loop\npublic static int sumListOld(int[] list) {\n    int total = 0;\n    for (int i = 0; i < list.length; i++) {\n        total += list[i];\n        System.out.println(list[i]);\n    }\n    return total;\n}\n"",""rating"":1},""code"":""int largestDifference(int a[]){\n  \n}""}"
373,1.0,1.0,1.0,1.0,2017-04-21 20:47:25.500405,17,196,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""/**\n         * Return the contents of the square in the specified row and column.\n         */\nint pieceAt(int row, int col) {\n    return board[row][col];\n}\n"",""rating"":1},""code"":""int largestDifference(int a[]){\n  \n}""}"
374,1.0,1.0,1.0,1.0,2017-04-21 20:47:27.377237,17,197,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""int getPlayer() {\n    return playerID;\n}\n"",""rating"":1},""code"":""int largestDifference(int a[]){\n  \n}""}"
375,1.0,1.0,3.0,1.0,2017-04-21 20:48:05.647296,17,,"int largestDifference(int a[]){
  //compute the largest difference between elements of an array of integers
}"
376,1.0,1.0,3.0,1.0,2017-04-21 20:48:40.962153,17,198,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""public static void main(String[] args) {\n    ArrayList<Double> values = new ArrayList<Double>();\n    // Read inputs\n    System.out.println(\""Please enter values, Q to quit:\"");\n    Scanner in = new Scanner(System.in);\n    while (in.hasNextDouble()) {\n        values.add(in.nextDouble());\n    }\n    // Find the largest value\n    double largest = values.get(0);\n    for (int i = 1; i < values.size(); i++) {\n        if (values.get(i) > largest) {\n            largest = values.get(i);\n        }\n    }\n    for (double element : values) {\n        System.out.print(element);\n        if (element == largest) {\n            System.out.print(\"" <== largest value\"");\n        }\n        System.out.println();\n    }\n}\n       // Print all values, marking the largest\n\n"",""rating"":3},""code"":""int largestDifference(int a[]){\n  //compute the largest difference between elements of an array of integers\n}""}"
377,3.5,1.0,3.0,1.0,2017-04-21 20:48:49.627234,17,,"int largestDifference(int a[]){
  //compute the largest difference between elements of an array of integers
}"
378,3.5,1.0,1.5,1.0,2017-04-21 20:48:50.947301,17,,"int largestDifference(int a[]){
  //compute the largest difference between elements of an array of integers
}"
379,3.5,1.0,1.5,1.0,2017-04-21 20:49:20.713881,17,199,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""public static void main(String[] args) {\n    ArrayList<Double> values = new ArrayList<Double>();\n    // Read inputs\n    System.out.println(\""Please enter values, Q to quit:\"");\n    Scanner in = new Scanner(System.in);\n    while (in.hasNextDouble()) {\n        values.add(in.nextDouble());\n    }\n    // Find the largest value\n    double largest = values.get(0);\n    for (int i = 1; i < values.size(); i++) {\n        if (values.get(i) > largest) {\n            largest = values.get(i);\n        }\n    }\n    for (double element : values) {\n        System.out.print(element);\n        if (element == largest) {\n            System.out.print(\"" <== largest value\"");\n        }\n        System.out.println();\n    }\n}\n       // Print all values, marking the largest\n\n"",""rating"":5},""code"":""int largestDifference(int a[]){\n  //compute the largest difference between elements of an array of integers\n}""}"
380,3.5,1.0,1.5,1.0,2017-04-21 20:49:25.972296,17,200,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""// pre: list != null, list.length > 0\n// post: return index of minimum element of array\npublic static int findMin(int[] list) {\n    assert list != null && list.length > 0 : \""failed precondition\"";\n    int indexOfMin = 0;\n    for (int i = 1; i < list.length; i++) {\n        if (list[i] < list[indexOfMin]) {\n            indexOfMin = i;\n        }\n    }\n    return indexOfMin;\n}\n"",""rating"":5},""code"":""int largestDifference(int a[]){\n  //compute the largest difference between elements of an array of integers\n}""}"
381,2.0,1.0,1.0,1.0,2017-04-21 20:52:27.740409,17,,"int computeTax(person){
  Person person = new Person;
  //compute tax
}"
382,2.0,1.0,1.0,1.0,2017-04-21 20:53:44.928933,17,201,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", targetDate = \""Jan 1, 2012\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":3},""code"":""int computeTax(Person person){\n  //compute tax given salary\n}""}"
383,2.0,1.0,1.0,1.0,2017-04-21 20:53:50.370112,17,202,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""/**\n      Constructs a salaried employee with a given name and annual salary.\n      @param name the name of this employee\n      @param salary the annual salary\n    */\npublic SalariedEmployee(String name, double salary) {\n    setName(name);\n    annualSalary = salary;\n}\n"",""rating"":4},""code"":""int computeTax(Person person){\n  //compute tax given salary\n}""}"
384,2.0,1.0,1.0,1.0,2017-04-21 20:53:58.259882,17,203,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""public static void main(String[] args) {\n    double sum = 0;\n    int count = 0;\n    double salary = 0;\n    System.out.print(\""Enter salaries, -1 to finish: \"");\n    Scanner in = new Scanner(System.in);\n    while (salary != -1) {\n        salary = in.nextDouble();\n        if (salary != -1) {\n            sum = sum + salary;\n            count++;\n        }\n    }\n    if (count > 0) {\n        double average = sum / count;\n        System.out.println(\""Average salary: \"" + average);\n       // Process data until the sentinel is entered \n\n    } else {\n        System.out.println(\""No data\"");\n    }\n}\n       // Compute and print the average\n\n"",""rating"":4},""code"":""int computeTax(Person person){\n  //compute tax given salary\n}""}"
385,2.0,1.0,1.0,1.0,2017-04-21 20:54:03.878944,17,204,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""public Product(float price) {\n    this.price = price;\n    tax = (float) (price * 0.20);\n}\n"",""rating"":2},""code"":""int computeTax(Person person){\n  //compute tax given salary\n}""}"
386,2.0,4.0,1.0,1.0,2017-04-21 20:54:07.501399,17,,"int computeTax(Person person){
  //compute tax given salary
}"
387,2.0,4.0,1.0,1.0,2017-04-21 20:54:19.610019,17,205,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", targetDate = \""Jan 1, 2012\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":4},""code"":""int computeTax(Person person){\n  //compute tax given salary\n}""}"
388,2.0,4.0,1.0,1.0,2017-04-21 20:54:21.765301,17,206,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""/**\n      Constructs a salaried employee with a given name and annual salary.\n      @param name the name of this employee\n      @param salary the annual salary\n    */\npublic SalariedEmployee(String name, double salary) {\n    setName(name);\n    annualSalary = salary;\n}\n"",""rating"":5},""code"":""int computeTax(Person person){\n  //compute tax given salary\n}""}"
389,2.0,4.0,1.0,1.0,2017-04-21 20:54:28.769420,17,207,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""public static void main(String[] args) {\n    double sum = 0;\n    int count = 0;\n    double salary = 0;\n    System.out.print(\""Enter salaries, -1 to finish: \"");\n    Scanner in = new Scanner(System.in);\n    while (salary != -1) {\n        salary = in.nextDouble();\n        if (salary != -1) {\n            sum = sum + salary;\n            count++;\n        }\n    }\n    if (count > 0) {\n        double average = sum / count;\n        System.out.println(\""Average salary: \"" + average);\n       // Process data until the sentinel is entered \n\n    } else {\n        System.out.println(\""No data\"");\n    }\n}\n       // Compute and print the average\n\n"",""rating"":5},""code"":""int computeTax(Person person){\n  //compute tax given salary\n}""}"
390,2.0,1.0,1.0,1.0,2017-04-21 20:54:35.084867,17,,"int computeTax(Person person){
  //compute tax given salary
}"
391,2.0,1.0,3.0,1.0,2017-04-21 20:54:36.357019,17,,"int computeTax(Person person){
  //compute tax given salary
}"
392,2.0,1.0,3.0,1.0,2017-04-21 20:54:45.308681,17,208,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""/**\n      Constructs a salaried employee with a given name and annual salary.\n      @param name the name of this employee\n      @param salary the annual salary\n    */\npublic SalariedEmployee(String name, double salary) {\n    setName(name);\n    annualSalary = salary;\n}\n"",""rating"":5},""code"":""int computeTax(Person person){\n  //compute tax given salary\n}""}"
393,2.0,1.0,3.0,1.0,2017-04-21 20:54:47.816069,17,209,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""public static void main(String[] args) {\n    double sum = 0;\n    int count = 0;\n    double salary = 0;\n    System.out.print(\""Enter salaries, -1 to finish: \"");\n    Scanner in = new Scanner(System.in);\n    while (salary != -1) {\n        salary = in.nextDouble();\n        if (salary != -1) {\n            sum = sum + salary;\n            count++;\n        }\n    }\n    if (count > 0) {\n        double average = sum / count;\n        System.out.println(\""Average salary: \"" + average);\n       // Process data until the sentinel is entered \n\n    } else {\n        System.out.println(\""No data\"");\n    }\n}\n       // Compute and print the average\n\n"",""rating"":5},""code"":""int computeTax(Person person){\n  //compute tax given salary\n}""}"
394,2.0,1.0,1.0,1.0,2017-04-21 20:54:57.614755,17,,"int computeTax(Person person){
  //compute tax given salary
}"
395,2.0,1.0,1.0,3.0,2017-04-21 20:54:58.776729,17,,"int computeTax(Person person){
  //compute tax given salary
}"
396,2.0,1.0,1.0,3.0,2017-04-21 20:55:07.401447,17,210,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":4},""code"":""int computeTax(Person person){\n  //compute tax given salary\n}""}"
397,2.0,1.0,1.0,3.0,2017-04-21 20:55:11.287510,17,211,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", targetDate = \""Jan 1, 2012\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":4},""code"":""int computeTax(Person person){\n  //compute tax given salary\n}""}"
398,2.0,1.0,1.0,3.0,2017-04-21 20:55:15.392606,17,212,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""public static void main(String[] args) {\n    double sum = 0;\n    int count = 0;\n    double salary = 0;\n    System.out.print(\""Enter salaries, -1 to finish: \"");\n    Scanner in = new Scanner(System.in);\n    while (salary != -1) {\n        salary = in.nextDouble();\n        if (salary != -1) {\n            sum = sum + salary;\n            count++;\n        }\n    }\n    if (count > 0) {\n        double average = sum / count;\n        System.out.println(\""Average salary: \"" + average);\n       // Process data until the sentinel is entered \n\n    } else {\n        System.out.println(\""No data\"");\n    }\n}\n       // Compute and print the average\n\n"",""rating"":5},""code"":""int computeTax(Person person){\n  //compute tax given salary\n}""}"
399,2.0,1.0,1.0,3.0,2017-04-21 20:55:18.516562,17,213,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""/**\n      Constructs a salaried employee with a given name and annual salary.\n      @param name the name of this employee\n      @param salary the annual salary\n    */\npublic SalariedEmployee(String name, double salary) {\n    setName(name);\n    annualSalary = salary;\n}\n"",""rating"":5},""code"":""int computeTax(Person person){\n  //compute tax given salary\n}""}"
400,5.0,1.0,1.0,3.0,2017-04-21 20:55:28.922949,17,,"int computeTax(Person person){
  //compute tax given salary
}"
401,5.0,1.0,1.0,3.0,2017-04-21 20:55:34.556931,17,214,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""/**\n      Constructs a salaried employee with a given name and annual salary.\n      @param name the name of this employee\n      @param salary the annual salary\n    */\npublic SalariedEmployee(String name, double salary) {\n    setName(name);\n    annualSalary = salary;\n}\n"",""rating"":5},""code"":""int computeTax(Person person){\n  //compute tax given salary\n}""}"
402,5.0,1.0,1.0,3.0,2017-04-21 20:55:39.348402,17,215,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", targetDate = \""Jan 1, 2012\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":3},""code"":""int computeTax(Person person){\n  //compute tax given salary\n}""}"
403,3.5,1.0,1.0,1.0,2017-04-23 08:52:12.978710,28,,"private double calculateTax(Person person){
  double taxCal = 0;
  if(person instanceof Employee){
    if(((Employee)person).getSalary()<10000){
      taxCal= (person.getSalary())*0.02;
    }
    else
      taxCal= (person.getSalary())*0.05;
    
  }
  else if(person instanceof BusinessOwner ){
    taxCal= ((BusinessOwner)person.getProfit())*0.10;
  }
  else if(person instanceof Veteran ){
    return taxCal;
  }
  return taxCal;
  
  
}"
404,3.5,4.0,1.0,1.0,2017-04-23 08:52:13.693477,28,,"private double calculateTax(Person person){
  double taxCal = 0;
  if(person instanceof Employee){
    if(((Employee)person).getSalary()<10000){
      taxCal= (person.getSalary())*0.02;
    }
    else
      taxCal= (person.getSalary())*0.05;
    
  }
  else if(person instanceof BusinessOwner ){
    taxCal= ((BusinessOwner)person.getProfit())*0.10;
  }
  else if(person instanceof Veteran ){
    return taxCal;
  }
  return taxCal;
  
  
}"
405,0.0,4.0,1.0,1.0,2017-04-23 08:52:33.058353,28,,"private double calculateTax(Person person){
  double taxCal = 0;
  if(person instanceof Employee){
    if(((Employee)person).getSalary()<10000){
      taxCal= (person.getSalary())*0.02;
    }
    else
      taxCal= (person.getSalary())*0.05;
    
  }
  else if(person instanceof BusinessOwner ){
    taxCal= ((BusinessOwner)person.getProfit())*0.10;
  }
  else if(person instanceof Veteran ){
    return taxCal;
  }
  return taxCal;
  
  
}"
406,0.0,0.0,1.0,1.0,2017-04-23 08:52:34.398087,28,,"private double calculateTax(Person person){
  double taxCal = 0;
  if(person instanceof Employee){
    if(((Employee)person).getSalary()<10000){
      taxCal= (person.getSalary())*0.02;
    }
    else
      taxCal= (person.getSalary())*0.05;
    
  }
  else if(person instanceof BusinessOwner ){
    taxCal= ((BusinessOwner)person.getProfit())*0.10;
  }
  else if(person instanceof Veteran ){
    return taxCal;
  }
  return taxCal;
  
  
}"
407,0.0,0.0,0.0,1.0,2017-04-23 08:52:35.926771,28,,"private double calculateTax(Person person){
  double taxCal = 0;
  if(person instanceof Employee){
    if(((Employee)person).getSalary()<10000){
      taxCal= (person.getSalary())*0.02;
    }
    else
      taxCal= (person.getSalary())*0.05;
    
  }
  else if(person instanceof BusinessOwner ){
    taxCal= ((BusinessOwner)person.getProfit())*0.10;
  }
  else if(person instanceof Veteran ){
    return taxCal;
  }
  return taxCal;
  
  
}"
408,0.0,0.0,5.0,1.0,2017-04-23 08:52:37.571631,28,,"private double calculateTax(Person person){
  double taxCal = 0;
  if(person instanceof Employee){
    if(((Employee)person).getSalary()<10000){
      taxCal= (person.getSalary())*0.02;
    }
    else
      taxCal= (person.getSalary())*0.05;
    
  }
  else if(person instanceof BusinessOwner ){
    taxCal= ((BusinessOwner)person.getProfit())*0.10;
  }
  else if(person instanceof Veteran ){
    return taxCal;
  }
  return taxCal;
  
  
}"
409,0.0,0.0,5.0,5.0,2017-04-23 08:52:39.530842,28,,"private double calculateTax(Person person){
  double taxCal = 0;
  if(person instanceof Employee){
    if(((Employee)person).getSalary()<10000){
      taxCal= (person.getSalary())*0.02;
    }
    else
      taxCal= (person.getSalary())*0.05;
    
  }
  else if(person instanceof BusinessOwner ){
    taxCal= ((BusinessOwner)person.getProfit())*0.10;
  }
  else if(person instanceof Veteran ){
    return taxCal;
  }
  return taxCal;
  
  
}"
410,0.0,4.5,5.0,5.0,2017-04-23 08:52:43.309866,28,,"private double calculateTax(Person person){
  double taxCal = 0;
  if(person instanceof Employee){
    if(((Employee)person).getSalary()<10000){
      taxCal= (person.getSalary())*0.02;
    }
    else
      taxCal= (person.getSalary())*0.05;
    
  }
  else if(person instanceof BusinessOwner ){
    taxCal= ((BusinessOwner)person.getProfit())*0.10;
  }
  else if(person instanceof Veteran ){
    return taxCal;
  }
  return taxCal;
  
  
}"
411,0.0,4.5,5.0,1.5,2017-04-23 08:52:45.616036,28,,"private double calculateTax(Person person){
  double taxCal = 0;
  if(person instanceof Employee){
    if(((Employee)person).getSalary()<10000){
      taxCal= (person.getSalary())*0.02;
    }
    else
      taxCal= (person.getSalary())*0.05;
    
  }
  else if(person instanceof BusinessOwner ){
    taxCal= ((BusinessOwner)person.getProfit())*0.10;
  }
  else if(person instanceof Veteran ){
    return taxCal;
  }
  return taxCal;
  
  
}"
412,0.0,5.0,5.0,1.5,2017-04-23 08:52:46.893583,28,,"private double calculateTax(Person person){
  double taxCal = 0;
  if(person instanceof Employee){
    if(((Employee)person).getSalary()<10000){
      taxCal= (person.getSalary())*0.02;
    }
    else
      taxCal= (person.getSalary())*0.05;
    
  }
  else if(person instanceof BusinessOwner ){
    taxCal= ((BusinessOwner)person.getProfit())*0.10;
  }
  else if(person instanceof Veteran ){
    return taxCal;
  }
  return taxCal;
  
  
}"
413,5.0,5.0,5.0,1.5,2017-04-23 08:52:48.940406,28,,"private double calculateTax(Person person){
  double taxCal = 0;
  if(person instanceof Employee){
    if(((Employee)person).getSalary()<10000){
      taxCal= (person.getSalary())*0.02;
    }
    else
      taxCal= (person.getSalary())*0.05;
    
  }
  else if(person instanceof BusinessOwner ){
    taxCal= ((BusinessOwner)person.getProfit())*0.10;
  }
  else if(person instanceof Veteran ){
    return taxCal;
  }
  return taxCal;
  
  
}"
414,5.0,5.0,5.0,1.5,2017-04-23 08:53:00.372021,28,216,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""private String now(String dateFormat) {\n    Calendar cal = Calendar.getInstance();\n    SimpleDateFormat sdf = new SimpleDateFormat(dateFormat);\n    return sdf.format(cal.getTime());\n}\n"",""rating"":5},""code"":""private double calculateTax(Person person){\n  double taxCal = 0;\n  if(person instanceof Employee){\n    if(((Employee)person).getSalary()<10000){\n      taxCal= (person.getSalary())*0.02;\n    }\n    else\n      taxCal= (person.getSalary())*0.05;\n    \n  }\n  else if(person instanceof BusinessOwner ){\n    taxCal= ((BusinessOwner)person.getProfit())*0.10;\n  }\n  else if(person instanceof Veteran ){\n    return taxCal;\n  }\n  return taxCal;\n  \n  \n}""}"
415,5.0,5.0,5.0,1.5,2017-04-23 08:53:04.690412,28,217,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""public static void main(String[] args) {\n    String input = JOptionPane.showInputDialog(\""Enter price:\"");\n    double price = Double.parseDouble(input);\n    final double TAX_RATE = 8.5;\n    price = price * (1 + TAX_RATE / 100);\n    JOptionPane.showMessageDialog(null, \""Price after tax: \"" + price);\n}\n"",""rating"":5},""code"":""private double calculateTax(Person person){\n  double taxCal = 0;\n  if(person instanceof Employee){\n    if(((Employee)person).getSalary()<10000){\n      taxCal= (person.getSalary())*0.02;\n    }\n    else\n      taxCal= (person.getSalary())*0.05;\n    \n  }\n  else if(person instanceof BusinessOwner ){\n    taxCal= ((BusinessOwner)person.getProfit())*0.10;\n  }\n  else if(person instanceof Veteran ){\n    return taxCal;\n  }\n  return taxCal;\n  \n  \n}""}"
416,5.0,5.0,5.0,1.5,2017-04-23 08:53:16.257610,28,218,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", targetDate = \""Jan 1, 2012\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":3},""code"":""private double calculateTax(Person person){\n  double taxCal = 0;\n  if(person instanceof Employee){\n    if(((Employee)person).getSalary()<10000){\n      taxCal= (person.getSalary())*0.02;\n    }\n    else\n      taxCal= (person.getSalary())*0.05;\n    \n  }\n  else if(person instanceof BusinessOwner ){\n    taxCal= ((BusinessOwner)person.getProfit())*0.10;\n  }\n  else if(person instanceof Veteran ){\n    return taxCal;\n  }\n  return taxCal;\n  \n  \n}""}"
417,5.0,5.0,5.0,1.5,2017-04-23 08:53:18.560337,28,219,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""/**\n      Computes the total amount due.\n      @return the amount due\n   */\nprivate double getAmountDue() {\n    double amountDue = 0;\n    for (LineItem item : items) {\n        amountDue = amountDue + item.getTotalPrice();\n    }\n    return amountDue;\n}\n"",""rating"":5},""code"":""private double calculateTax(Person person){\n  double taxCal = 0;\n  if(person instanceof Employee){\n    if(((Employee)person).getSalary()<10000){\n      taxCal= (person.getSalary())*0.02;\n    }\n    else\n      taxCal= (person.getSalary())*0.05;\n    \n  }\n  else if(person instanceof BusinessOwner ){\n    taxCal= ((BusinessOwner)person.getProfit())*0.10;\n  }\n  else if(person instanceof Veteran ){\n    return taxCal;\n  }\n  return taxCal;\n  \n  \n}""}"
418,5.0,5.0,5.0,1.5,2017-04-23 08:53:24.896530,28,220,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""private double eval(double variable) {\n    // evaluate this expression for this value of the variable\n    try {\n        int top = 0;\n        for (int i = 0; i < codeSize; i++) {\n            if (code[i] >= 0)\n                stack[top++] = constants[code[i]];\n            else if (code[i] >= POWER) {\n                double y = stack[--top];\n                double x = stack[--top];\n                double ans = Double.NaN;\n                switch(code[i]) {\n                    case PLUS:\n                        ans = x + y;\n                        break;\n                    case MINUS:\n                        ans = x - y;\n                        break;\n                    case TIMES:\n                        ans = x * y;\n                        break;\n                    case DIVIDE:\n                        ans = x / y;\n                        break;\n                    case POWER:\n                        ans = Math.pow(x, y);\n                        break;\n                }\n                if (Double.isNaN(ans))\n                    return ans;\n                stack[top++] = ans;\n            } else if (code[i] == VARIABLE) {\n                stack[top++] = variable;\n            } else {\n                double x = stack[--top];\n                double ans = Double.NaN;\n                switch(code[i]) {\n                    case SIN:\n                        ans = Math.sin(x);\n                        break;\n                    case COS:\n                        ans = Math.cos(x);\n                        break;\n                    case TAN:\n                        ans = Math.tan(x);\n                        break;\n                    case COT:\n                        ans = Math.cos(x) / Math.sin(x);\n                        break;\n                    case SEC:\n                        ans = 1.0 / Math.cos(x);\n                        break;\n                    case CSC:\n                        ans = 1.0 / Math.sin(x);\n                        break;\n                    case ARCSIN:\n                        if (Math.abs(x) <= 1.0)\n                            ans = Math.asin(x);\n                        break;\n                    case ARCCOS:\n                        if (Math.abs(x) <= 1.0)\n                            ans = Math.acos(x);\n                        break;\n                    case ARCTAN:\n                        ans = Math.atan(x);\n                        break;\n                    case EXP:\n                        ans = Math.exp(x);\n                        break;\n                    case LN:\n                        if (x > 0.0)\n                            ans = Math.log(x);\n                        break;\n                    case LOG2:\n                        if (x > 0.0)\n                            ans = Math.log(x) / Math.log(2);\n                        break;\n                    case LOG10:\n                        if (x > 0.0)\n                            ans = Math.log(x) / Math.log(10);\n                        break;\n                    case ABS:\n                        ans = Math.abs(x);\n                        break;\n                    case SQRT:\n                        if (x >= 0.0)\n                            ans = Math.sqrt(x);\n                        break;\n                    case UNARYMINUS:\n                        ans = -x;\n                        break;\n                }\n                if (Double.isNaN(ans))\n                    return ans;\n                stack[top++] = ans;\n            }\n        }\n    } catch (Exception e) {\n        return Double.NaN;\n    }\n    if (Double.isInfinite(stack[0]))\n        return Double.NaN;\n    else\n        return stack[0];\n}\n"",""rating"":5},""code"":""private double calculateTax(Person person){\n  double taxCal = 0;\n  if(person instanceof Employee){\n    if(((Employee)person).getSalary()<10000){\n      taxCal= (person.getSalary())*0.02;\n    }\n    else\n      taxCal= (person.getSalary())*0.05;\n    \n  }\n  else if(person instanceof BusinessOwner ){\n    taxCal= ((BusinessOwner)person.getProfit())*0.10;\n  }\n  else if(person instanceof Veteran ){\n    return taxCal;\n  }\n  return taxCal;\n  \n  \n}""}"
419,5.0,5.0,5.0,1.5,2017-04-23 08:53:33.526799,28,221,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""public double getAverageScore(int studentId) {\n    double total = 0;\n    for (double x : scores) {\n        total = total + x;\n    }\n    return total / scores.size();\n}\n"",""rating"":5},""code"":""private double calculateTax(Person person){\n  double taxCal = 0;\n  if(person instanceof Employee){\n    if(((Employee)person).getSalary()<10000){\n      taxCal= (person.getSalary())*0.02;\n    }\n    else\n      taxCal= (person.getSalary())*0.05;\n    \n  }\n  else if(person instanceof BusinessOwner ){\n    taxCal= ((BusinessOwner)person.getProfit())*0.10;\n  }\n  else if(person instanceof Veteran ){\n    return taxCal;\n  }\n  return taxCal;\n  \n  \n}""}"
420,5.0,5.0,5.0,1.5,2017-04-23 08:53:36.376354,28,222,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""/**\n      Computes the sum of the scores\n      @return the total score\n   */\npublic double sum() {\n    double total = 0;\n    for (double score : scores) {\n        total = total + score;\n    }\n    return total;\n}\n"",""rating"":5},""code"":""private double calculateTax(Person person){\n  double taxCal = 0;\n  if(person instanceof Employee){\n    if(((Employee)person).getSalary()<10000){\n      taxCal= (person.getSalary())*0.02;\n    }\n    else\n      taxCal= (person.getSalary())*0.05;\n    \n  }\n  else if(person instanceof BusinessOwner ){\n    taxCal= ((BusinessOwner)person.getProfit())*0.10;\n  }\n  else if(person instanceof Veteran ){\n    return taxCal;\n  }\n  return taxCal;\n  \n  \n}""}"
421,5.0,5.0,5.0,1.5,2017-04-23 08:53:44.695380,28,223,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""public double getTax() {\n    double tax1 = 0;\n    double tax2 = 0;\n    if (status == SINGLE) {\n        if (income <= RATE1_SINGLE_LIMIT) {\n            tax1 = RATE1 * income;\n        } else {\n            tax1 = RATE1 * RATE1_SINGLE_LIMIT;\n            tax2 = RATE2 * (income - RATE1_SINGLE_LIMIT);\n        }\n    } else {\n        if (income <= RATE1_MARRIED_LIMIT) {\n            tax1 = RATE1 * income;\n        } else {\n            tax1 = RATE1 * RATE1_MARRIED_LIMIT;\n            tax2 = RATE2 * (income - RATE1_MARRIED_LIMIT);\n        }\n    }\n    return tax1 + tax2;\n}\n"",""rating"":4},""code"":""private double calculateTax(Person person){\n  double taxCal = 0;\n  if(person instanceof Employee){\n    if(((Employee)person).getSalary()<10000){\n      taxCal= (person.getSalary())*0.02;\n    }\n    else\n      taxCal= (person.getSalary())*0.05;\n    \n  }\n  else if(person instanceof BusinessOwner ){\n    taxCal= ((BusinessOwner)person.getProfit())*0.10;\n  }\n  else if(person instanceof Veteran ){\n    return taxCal;\n  }\n  return taxCal;\n  \n  \n}""}"
422,5.0,5.0,5.0,1.5,2017-04-23 08:53:46.332332,28,224,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""public Product(float price) {\n    this.price = price;\n    tax = (float) (price * 0.20);\n}\n"",""rating"":5},""code"":""private double calculateTax(Person person){\n  double taxCal = 0;\n  if(person instanceof Employee){\n    if(((Employee)person).getSalary()<10000){\n      taxCal= (person.getSalary())*0.02;\n    }\n    else\n      taxCal= (person.getSalary())*0.05;\n    \n  }\n  else if(person instanceof BusinessOwner ){\n    taxCal= ((BusinessOwner)person.getProfit())*0.10;\n  }\n  else if(person instanceof Veteran ){\n    return taxCal;\n  }\n  return taxCal;\n  \n  \n}""}"
423,5.0,5.0,5.0,1.5,2017-04-23 08:53:48.851327,28,225,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":3},""code"":""private double calculateTax(Person person){\n  double taxCal = 0;\n  if(person instanceof Employee){\n    if(((Employee)person).getSalary()<10000){\n      taxCal= (person.getSalary())*0.02;\n    }\n    else\n      taxCal= (person.getSalary())*0.05;\n    \n  }\n  else if(person instanceof BusinessOwner ){\n    taxCal= ((BusinessOwner)person.getProfit())*0.10;\n  }\n  else if(person instanceof Veteran ){\n    return taxCal;\n  }\n  return taxCal;\n  \n  \n}""}"
424,5.0,5.0,5.0,1.5,2017-04-23 08:55:40.673729,28,226,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""/**\n      Computes the sum of the scores\n      @return the total score\n   */\npublic double sum() {\n    double total = 0;\n    for (double score : scores) {\n        total = total + score;\n    }\n    return total;\n}\n"",""rating"":5},""code"":""private double calculateTax(Person person){\n  double taxCal = 0;\n  if(person instanceof Employee){\n    if(((Employee)person).getSalary()<10000){\n      taxCal= (person.getSalary())*0.02;\n    }\n    else\n      taxCal= (person.getSalary())*0.05;\n    \n  }\n  else if(person instanceof BusinessOwner ){\n    taxCal= ((BusinessOwner)person.getProfit())*0.10;\n  }\n  else if(person instanceof Veteran ){\n    return taxCal;\n  }\n  return taxCal;\n  \n  \n}""}"
425,5.0,5.0,5.0,1.5,2017-04-23 08:55:48.800423,28,227,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""private String now(String dateFormat) {\n    Calendar cal = Calendar.getInstance();\n    SimpleDateFormat sdf = new SimpleDateFormat(dateFormat);\n    return sdf.format(cal.getTime());\n}\n"",""rating"":4},""code"":""private double calculateTax(Person person){\n  double taxCal = 0;\n  if(person instanceof Employee){\n    if(((Employee)person).getSalary()<10000){\n      taxCal= (person.getSalary())*0.02;\n    }\n    else\n      taxCal= (person.getSalary())*0.05;\n    \n  }\n  else if(person instanceof BusinessOwner ){\n    taxCal= ((BusinessOwner)person.getProfit())*0.10;\n  }\n  else if(person instanceof Veteran ){\n    return taxCal;\n  }\n  return taxCal;\n  \n  \n}""}"
426,5.0,5.0,5.0,1.5,2017-04-23 08:55:50.530789,28,228,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""public double getAverageScore(int studentId) {\n    double total = 0;\n    for (double x : scores) {\n        total = total + x;\n    }\n    return total / scores.size();\n}\n"",""rating"":5},""code"":""private double calculateTax(Person person){\n  double taxCal = 0;\n  if(person instanceof Employee){\n    if(((Employee)person).getSalary()<10000){\n      taxCal= (person.getSalary())*0.02;\n    }\n    else\n      taxCal= (person.getSalary())*0.05;\n    \n  }\n  else if(person instanceof BusinessOwner ){\n    taxCal= ((BusinessOwner)person.getProfit())*0.10;\n  }\n  else if(person instanceof Veteran ){\n    return taxCal;\n  }\n  return taxCal;\n  \n  \n}""}"
427,5.0,5.0,5.0,1.5,2017-04-23 08:55:53.508261,28,229,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", targetDate = \""Jan 1, 2012\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":3},""code"":""private double calculateTax(Person person){\n  double taxCal = 0;\n  if(person instanceof Employee){\n    if(((Employee)person).getSalary()<10000){\n      taxCal= (person.getSalary())*0.02;\n    }\n    else\n      taxCal= (person.getSalary())*0.05;\n    \n  }\n  else if(person instanceof BusinessOwner ){\n    taxCal= ((BusinessOwner)person.getProfit())*0.10;\n  }\n  else if(person instanceof Veteran ){\n    return taxCal;\n  }\n  return taxCal;\n  \n  \n}""}"
428,5.0,5.0,5.0,1.5,2017-04-23 08:55:58.396703,28,230,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":2},""code"":""private double calculateTax(Person person){\n  double taxCal = 0;\n  if(person instanceof Employee){\n    if(((Employee)person).getSalary()<10000){\n      taxCal= (person.getSalary())*0.02;\n    }\n    else\n      taxCal= (person.getSalary())*0.05;\n    \n  }\n  else if(person instanceof BusinessOwner ){\n    taxCal= ((BusinessOwner)person.getProfit())*0.10;\n  }\n  else if(person instanceof Veteran ){\n    return taxCal;\n  }\n  return taxCal;\n  \n  \n}""}"
429,5.0,5.0,5.0,1.5,2017-04-23 08:56:00.280824,28,231,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""public double getTax() {\n    double tax1 = 0;\n    double tax2 = 0;\n    if (status == SINGLE) {\n        if (income <= RATE1_SINGLE_LIMIT) {\n            tax1 = RATE1 * income;\n        } else {\n            tax1 = RATE1 * RATE1_SINGLE_LIMIT;\n            tax2 = RATE2 * (income - RATE1_SINGLE_LIMIT);\n        }\n    } else {\n        if (income <= RATE1_MARRIED_LIMIT) {\n            tax1 = RATE1 * income;\n        } else {\n            tax1 = RATE1 * RATE1_MARRIED_LIMIT;\n            tax2 = RATE2 * (income - RATE1_MARRIED_LIMIT);\n        }\n    }\n    return tax1 + tax2;\n}\n"",""rating"":5},""code"":""private double calculateTax(Person person){\n  double taxCal = 0;\n  if(person instanceof Employee){\n    if(((Employee)person).getSalary()<10000){\n      taxCal= (person.getSalary())*0.02;\n    }\n    else\n      taxCal= (person.getSalary())*0.05;\n    \n  }\n  else if(person instanceof BusinessOwner ){\n    taxCal= ((BusinessOwner)person.getProfit())*0.10;\n  }\n  else if(person instanceof Veteran ){\n    return taxCal;\n  }\n  return taxCal;\n  \n  \n}""}"
430,5.0,5.0,5.0,1.5,2017-04-23 08:56:08.403627,28,232,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""/**\n      Computes the total amount due.\n      @return the amount due\n   */\nprivate double getAmountDue() {\n    double amountDue = 0;\n    for (LineItem item : items) {\n        amountDue = amountDue + item.getTotalPrice();\n    }\n    return amountDue;\n}\n"",""rating"":4},""code"":""private double calculateTax(Person person){\n  double taxCal = 0;\n  if(person instanceof Employee){\n    if(((Employee)person).getSalary()<10000){\n      taxCal= (person.getSalary())*0.02;\n    }\n    else\n      taxCal= (person.getSalary())*0.05;\n    \n  }\n  else if(person instanceof BusinessOwner ){\n    taxCal= ((BusinessOwner)person.getProfit())*0.10;\n  }\n  else if(person instanceof Veteran ){\n    return taxCal;\n  }\n  return taxCal;\n  \n  \n}""}"
431,5.0,5.0,5.0,1.5,2017-04-23 08:56:12.174856,28,233,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""public static void main(String[] args) {\n    String input = JOptionPane.showInputDialog(\""Enter price:\"");\n    double price = Double.parseDouble(input);\n    final double TAX_RATE = 8.5;\n    price = price * (1 + TAX_RATE / 100);\n    JOptionPane.showMessageDialog(null, \""Price after tax: \"" + price);\n}\n"",""rating"":5},""code"":""private double calculateTax(Person person){\n  double taxCal = 0;\n  if(person instanceof Employee){\n    if(((Employee)person).getSalary()<10000){\n      taxCal= (person.getSalary())*0.02;\n    }\n    else\n      taxCal= (person.getSalary())*0.05;\n    \n  }\n  else if(person instanceof BusinessOwner ){\n    taxCal= ((BusinessOwner)person.getProfit())*0.10;\n  }\n  else if(person instanceof Veteran ){\n    return taxCal;\n  }\n  return taxCal;\n  \n  \n}""}"
432,5.0,5.0,5.0,1.5,2017-04-23 08:56:14.272205,28,234,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""public Product(float price) {\n    this.price = price;\n    tax = (float) (price * 0.20);\n}\n"",""rating"":5},""code"":""private double calculateTax(Person person){\n  double taxCal = 0;\n  if(person instanceof Employee){\n    if(((Employee)person).getSalary()<10000){\n      taxCal= (person.getSalary())*0.02;\n    }\n    else\n      taxCal= (person.getSalary())*0.05;\n    \n  }\n  else if(person instanceof BusinessOwner ){\n    taxCal= ((BusinessOwner)person.getProfit())*0.10;\n  }\n  else if(person instanceof Veteran ){\n    return taxCal;\n  }\n  return taxCal;\n  \n  \n}""}"
433,5.0,5.0,5.0,1.5,2017-04-23 08:56:18.362916,28,235,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""private double eval(double variable) {\n    // evaluate this expression for this value of the variable\n    try {\n        int top = 0;\n        for (int i = 0; i < codeSize; i++) {\n            if (code[i] >= 0)\n                stack[top++] = constants[code[i]];\n            else if (code[i] >= POWER) {\n                double y = stack[--top];\n                double x = stack[--top];\n                double ans = Double.NaN;\n                switch(code[i]) {\n                    case PLUS:\n                        ans = x + y;\n                        break;\n                    case MINUS:\n                        ans = x - y;\n                        break;\n                    case TIMES:\n                        ans = x * y;\n                        break;\n                    case DIVIDE:\n                        ans = x / y;\n                        break;\n                    case POWER:\n                        ans = Math.pow(x, y);\n                        break;\n                }\n                if (Double.isNaN(ans))\n                    return ans;\n                stack[top++] = ans;\n            } else if (code[i] == VARIABLE) {\n                stack[top++] = variable;\n            } else {\n                double x = stack[--top];\n                double ans = Double.NaN;\n                switch(code[i]) {\n                    case SIN:\n                        ans = Math.sin(x);\n                        break;\n                    case COS:\n                        ans = Math.cos(x);\n                        break;\n                    case TAN:\n                        ans = Math.tan(x);\n                        break;\n                    case COT:\n                        ans = Math.cos(x) / Math.sin(x);\n                        break;\n                    case SEC:\n                        ans = 1.0 / Math.cos(x);\n                        break;\n                    case CSC:\n                        ans = 1.0 / Math.sin(x);\n                        break;\n                    case ARCSIN:\n                        if (Math.abs(x) <= 1.0)\n                            ans = Math.asin(x);\n                        break;\n                    case ARCCOS:\n                        if (Math.abs(x) <= 1.0)\n                            ans = Math.acos(x);\n                        break;\n                    case ARCTAN:\n                        ans = Math.atan(x);\n                        break;\n                    case EXP:\n                        ans = Math.exp(x);\n                        break;\n                    case LN:\n                        if (x > 0.0)\n                            ans = Math.log(x);\n                        break;\n                    case LOG2:\n                        if (x > 0.0)\n                            ans = Math.log(x) / Math.log(2);\n                        break;\n                    case LOG10:\n                        if (x > 0.0)\n                            ans = Math.log(x) / Math.log(10);\n                        break;\n                    case ABS:\n                        ans = Math.abs(x);\n                        break;\n                    case SQRT:\n                        if (x >= 0.0)\n                            ans = Math.sqrt(x);\n                        break;\n                    case UNARYMINUS:\n                        ans = -x;\n                        break;\n                }\n                if (Double.isNaN(ans))\n                    return ans;\n                stack[top++] = ans;\n            }\n        }\n    } catch (Exception e) {\n        return Double.NaN;\n    }\n    if (Double.isInfinite(stack[0]))\n        return Double.NaN;\n    else\n        return stack[0];\n}\n"",""rating"":5},""code"":""private double calculateTax(Person person){\n  double taxCal = 0;\n  if(person instanceof Employee){\n    if(((Employee)person).getSalary()<10000){\n      taxCal= (person.getSalary())*0.02;\n    }\n    else\n      taxCal= (person.getSalary())*0.05;\n    \n  }\n  else if(person instanceof BusinessOwner ){\n    taxCal= ((BusinessOwner)person.getProfit())*0.10;\n  }\n  else if(person instanceof Veteran ){\n    return taxCal;\n  }\n  return taxCal;\n  \n  \n}""}"
434,5.0,1.0,1.0,1.0,2017-04-23 09:01:22.138506,28,,"private int diffCalci(int[] numbers){
  int largest = 0;
  int smallest = 0;
 	for(int i=0;i<numbers.length;i++){
      if(numbers[i]>largest )
        largest= numbers[i];
      if(numbers[i]<smallest)
        smallest=numbers[i];
    }
  return largest - smallest;
  
}"
435,5.0,4.5,1.0,1.0,2017-04-23 09:01:23.369812,28,,"private int diffCalci(int[] numbers){
  int largest = 0;
  int smallest = 0;
 	for(int i=0;i<numbers.length;i++){
      if(numbers[i]>largest )
        largest= numbers[i];
      if(numbers[i]<smallest)
        smallest=numbers[i];
    }
  return largest - smallest;
  
}"
436,5.0,4.5,5.0,1.0,2017-04-23 09:01:24.676250,28,,"private int diffCalci(int[] numbers){
  int largest = 0;
  int smallest = 0;
 	for(int i=0;i<numbers.length;i++){
      if(numbers[i]>largest )
        largest= numbers[i];
      if(numbers[i]<smallest)
        smallest=numbers[i];
    }
  return largest - smallest;
  
}"
437,5.0,4.5,5.0,1.0,2017-04-23 09:01:43.991486,28,236,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent2(int[] a) {\n    // O(n log(n))\n    Arrays.sort(a);\n    int[] counts = new int[a.length];\n    int count = 0;\n    for (// O(n)\n    int i = 0; // O(n)\n    i < a.length; // O(n)\n    i++) {\n        count++;\n        if (i == a.length - 1 || a[i] != a[i + 1]) {\n            counts[i] = count;\n            count = 0;\n        }\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":1},""code"":""private int diffCalci(int[] numbers){\n  int largest = 0;\n  int smallest = 0;\n \tfor(int i=0;i<numbers.length;i++){\n      if(numbers[i]>largest )\n        largest= numbers[i];\n      if(numbers[i]<smallest)\n        smallest=numbers[i];\n    }\n  return largest - smallest;\n  \n}""}"
438,5.0,4.5,5.0,1.0,2017-04-23 09:01:51.863283,28,237,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""// pre: list != null\n// post: return sum of elements\n// use traditional for loop\npublic static int sumListOld(int[] list) {\n    int total = 0;\n    for (int i = 0; i < list.length; i++) {\n        total += list[i];\n        System.out.println(list[i]);\n    }\n    return total;\n}\n"",""rating"":2},""code"":""private int diffCalci(int[] numbers){\n  int largest = 0;\n  int smallest = 0;\n \tfor(int i=0;i<numbers.length;i++){\n      if(numbers[i]>largest )\n        largest= numbers[i];\n      if(numbers[i]<smallest)\n        smallest=numbers[i];\n    }\n  return largest - smallest;\n  \n}""}"
439,5.0,4.5,5.0,1.0,2017-04-23 09:02:06.542436,28,238,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""public static void main(String[] args) {\n    int n = 10;\n    int[] squares = IntStream.range(0, n).map( i -> i * i).toArray();\n    System.out.println(Arrays.toString(squares));\n    double[] values = { 32, 54, 67.5, 29, 35, 80, 115, 44.5, 100, 65 };\n    double total = DoubleStream.of(values).sum();\n    double average = DoubleStream.of(values).average().orElse(0);\n    double largest = DoubleStream.of(values).max().orElse(Double.MIN_VALUE);\n    double smallest = DoubleStream.of(values).min().orElse(Double.MAX_VALUE);\n    System.out.println(\""total: \"" + total);\n    System.out.println(\""average: \"" + average);\n    System.out.println(\""largest: \"" + largest);\n    System.out.println(\""smallest: \"" + smallest);\n    String str = \""How much wood could a woodchuck chuck?\"";\n    long spaces = str.codePoints().filter( ch -> ch == ' ').count();\n    System.out.println(\""spaces: \"" + spaces);\n    String result = DoubleStream.of(values).mapToObj( v -> \""\"" + v).collect(Collectors.joining(\"" | \""));\n    System.out.println(result);\n    OptionalDouble result2 = DoubleStream.of(values).filter( v -> v > 100).findFirst();\n    System.out.println(result2);\n    n = values.length;\n    int pos = IntStream.range(0, n).filter( i -> values[i] == 100).findFirst().orElse(-1);\n    System.out.println(\""pos: \"" + pos);\n}\n"",""rating"":5},""code"":""private int diffCalci(int[] numbers){\n  int largest = 0;\n  int smallest = 0;\n \tfor(int i=0;i<numbers.length;i++){\n      if(numbers[i]>largest )\n        largest= numbers[i];\n      if(numbers[i]<smallest)\n        smallest=numbers[i];\n    }\n  return largest - smallest;\n  \n}""}"
440,5.0,4.5,5.0,1.0,2017-04-23 09:02:14.511808,28,239,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""/**\n         * Return the smallest item that has been entered.\n         * The return value will be infinity if no numbers have been entered. \n         */\npublic double getMin() {\n    return min;\n}\n"",""rating"":5},""code"":""private int diffCalci(int[] numbers){\n  int largest = 0;\n  int smallest = 0;\n \tfor(int i=0;i<numbers.length;i++){\n      if(numbers[i]>largest )\n        largest= numbers[i];\n      if(numbers[i]<smallest)\n        smallest=numbers[i];\n    }\n  return largest - smallest;\n  \n}""}"
441,5.0,4.5,5.0,1.0,2017-04-23 09:02:22.432595,28,240,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent1(int[] a) {\n    int[] counts = new int[a.length];\n    for (// O(n*n)\n    int i = 0; // O(n*n)\n    i < a.length; // O(n*n)\n    i++) {\n        // O(n) in each iteration\n        counts[i] = count(a, a[i]);\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":1},""code"":""private int diffCalci(int[] numbers){\n  int largest = 0;\n  int smallest = 0;\n \tfor(int i=0;i<numbers.length;i++){\n      if(numbers[i]>largest )\n        largest= numbers[i];\n      if(numbers[i]<smallest)\n        smallest=numbers[i];\n    }\n  return largest - smallest;\n  \n}""}"
442,5.0,4.5,5.0,1.0,2017-04-23 09:02:39.833042,28,241,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""private int computeStackUsage() {\n    // call after code[] is computed\n    // stack size after each operation\n    int s = 0;\n    // maximum stack size seen\n    int max = 0;\n    for (int i = 0; i < codeSize; i++) {\n        if (code[i] >= 0 || code[i] == VARIABLE) {\n            s++;\n            if (s > max)\n                max = s;\n        } else if (code[i] >= POWER)\n            s--;\n    }\n    return max;\n}\n"",""rating"":4},""code"":""private int diffCalci(int[] numbers){\n  int largest = 0;\n  int smallest = 0;\n \tfor(int i=0;i<numbers.length;i++){\n      if(numbers[i]>largest )\n        largest= numbers[i];\n      if(numbers[i]<smallest)\n        smallest=numbers[i];\n    }\n  return largest - smallest;\n  \n}""}"
443,5.0,4.5,5.0,1.0,2017-04-23 09:02:48.214565,28,242,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static <E extends Comparable<E>> E max(E[] a) {\n    E largest = a[0];\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":5},""code"":""private int diffCalci(int[] numbers){\n  int largest = 0;\n  int smallest = 0;\n \tfor(int i=0;i<numbers.length;i++){\n      if(numbers[i]>largest )\n        largest= numbers[i];\n      if(numbers[i]<smallest)\n        smallest=numbers[i];\n    }\n  return largest - smallest;\n  \n}""}"
444,5.0,4.5,5.0,1.0,2017-04-23 09:03:05.853699,28,243,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""/**\n         * Return the largest item that has been entered.\n         * The return value will be -infinity if no numbers have been entered. \n         */\npublic double getMax() {\n    return max;\n}\n"",""rating"":5},""code"":""private int diffCalci(int[] numbers){\n  int largest = 0;\n  int smallest = 0;\n \tfor(int i=0;i<numbers.length;i++){\n      if(numbers[i]>largest )\n        largest= numbers[i];\n      if(numbers[i]<smallest)\n        smallest=numbers[i];\n    }\n  return largest - smallest;\n  \n}""}"
445,5.0,4.5,5.0,1.0,2017-04-23 09:03:24.115722,28,244,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""/**\n         * Return the smallest item that has been entered.\n         * The return value will be infinity if no numbers have been entered. \n         */\npublic double getMin() {\n    return min;\n}\n"",""rating"":5},""code"":""private int diffCalci(int[] numbers){\n  int largest = 0;\n  int smallest = 0;\n \tfor(int i=0;i<numbers.length;i++){\n      if(numbers[i]>largest )\n        largest= numbers[i];\n      if(numbers[i]<smallest)\n        smallest=numbers[i];\n    }\n  return largest - smallest;\n  \n}""}"
446,5.0,4.5,5.0,1.0,2017-04-23 09:03:47.530483,28,245,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""/**\n         * Return the largest item that has been entered.\n         * The return value will be -infinity if no numbers have been entered. \n         */\npublic double getMax() {\n    return max;\n}\n"",""rating"":1},""code"":""private int diffCalci(int[] numbers){\n  int largest = 0;\n  int smallest = 0;\n \tfor(int i=0;i<numbers.length;i++){\n      if(numbers[i]>largest )\n        largest= numbers[i];\n      if(numbers[i]<smallest)\n        smallest=numbers[i];\n    }\n  return largest - smallest;\n  \n}""}"
447,5.0,4.5,5.0,1.0,2017-04-23 09:03:51.621364,28,246,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static <E extends Comparable<E>> E max(E[] a) {\n    E largest = a[0];\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":5},""code"":""private int diffCalci(int[] numbers){\n  int largest = 0;\n  int smallest = 0;\n \tfor(int i=0;i<numbers.length;i++){\n      if(numbers[i]>largest )\n        largest= numbers[i];\n      if(numbers[i]<smallest)\n        smallest=numbers[i];\n    }\n  return largest - smallest;\n  \n}""}"
448,5.0,4.5,5.0,1.0,2017-04-23 09:03:58.657923,28,247,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""private int computeStackUsage() {\n    // call after code[] is computed\n    // stack size after each operation\n    int s = 0;\n    // maximum stack size seen\n    int max = 0;\n    for (int i = 0; i < codeSize; i++) {\n        if (code[i] >= 0 || code[i] == VARIABLE) {\n            s++;\n            if (s > max)\n                max = s;\n        } else if (code[i] >= POWER)\n            s--;\n    }\n    return max;\n}\n"",""rating"":4},""code"":""private int diffCalci(int[] numbers){\n  int largest = 0;\n  int smallest = 0;\n \tfor(int i=0;i<numbers.length;i++){\n      if(numbers[i]>largest )\n        largest= numbers[i];\n      if(numbers[i]<smallest)\n        smallest=numbers[i];\n    }\n  return largest - smallest;\n  \n}""}"
449,5.0,4.5,5.0,1.0,2017-04-23 09:04:30.291544,28,248,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent2(int[] a) {\n    // O(n log(n))\n    Arrays.sort(a);\n    int[] counts = new int[a.length];\n    int count = 0;\n    for (// O(n)\n    int i = 0; // O(n)\n    i < a.length; // O(n)\n    i++) {\n        count++;\n        if (i == a.length - 1 || a[i] != a[i + 1]) {\n            counts[i] = count;\n            count = 0;\n        }\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":3},""code"":""private int diffCalci(int[] numbers){\n  int largest = 0;\n  int smallest = 0;\n \tfor(int i=0;i<numbers.length;i++){\n      if(numbers[i]>largest )\n        largest= numbers[i];\n      if(numbers[i]<smallest)\n        smallest=numbers[i];\n    }\n  return largest - smallest;\n  \n}""}"
450,5.0,4.5,5.0,1.0,2017-04-23 09:04:41.531109,28,249,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""// pre: list != null\n// post: return sum of elements\n// use traditional for loop\npublic static int sumListOld(int[] list) {\n    int total = 0;\n    for (int i = 0; i < list.length; i++) {\n        total += list[i];\n        System.out.println(list[i]);\n    }\n    return total;\n}\n"",""rating"":4},""code"":""private int diffCalci(int[] numbers){\n  int largest = 0;\n  int smallest = 0;\n \tfor(int i=0;i<numbers.length;i++){\n      if(numbers[i]>largest )\n        largest= numbers[i];\n      if(numbers[i]<smallest)\n        smallest=numbers[i];\n    }\n  return largest - smallest;\n  \n}""}"
451,5.0,4.5,5.0,1.0,2017-04-23 09:04:48.945655,28,250,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent1(int[] a) {\n    int[] counts = new int[a.length];\n    for (// O(n*n)\n    int i = 0; // O(n*n)\n    i < a.length; // O(n*n)\n    i++) {\n        // O(n) in each iteration\n        counts[i] = count(a, a[i]);\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":1},""code"":""private int diffCalci(int[] numbers){\n  int largest = 0;\n  int smallest = 0;\n \tfor(int i=0;i<numbers.length;i++){\n      if(numbers[i]>largest )\n        largest= numbers[i];\n      if(numbers[i]<smallest)\n        smallest=numbers[i];\n    }\n  return largest - smallest;\n  \n}""}"
452,5.0,1.0,1.0,1.0,2017-04-23 11:13:55.615489,29,,"int arr(int a[])
{
  int lar,b[a.length()],max;
  for(i=0;i<a.length;i++)
  {
    for(j=0;j<a.length;j++)
    {
    lar=Math.abs(a[i]-a[j]);
    b[i]=lar;  
  }
  }
  max=b[0];
  for(i=1;i<a.length;i++)
  {
   if(b[i]>max)
     max=b[i];
}
  return max;
}"
453,5.0,4.0,1.0,1.0,2017-04-23 11:13:56.118015,29,,"int arr(int a[])
{
  int lar,b[a.length()],max;
  for(i=0;i<a.length;i++)
  {
    for(j=0;j<a.length;j++)
    {
    lar=Math.abs(a[i]-a[j]);
    b[i]=lar;  
  }
  }
  max=b[0];
  for(i=1;i<a.length;i++)
  {
   if(b[i]>max)
     max=b[i];
}
  return max;
}"
454,5.0,4.0,5.0,1.0,2017-04-23 11:13:57.799583,29,,"int arr(int a[])
{
  int lar,b[a.length()],max;
  for(i=0;i<a.length;i++)
  {
    for(j=0;j<a.length;j++)
    {
    lar=Math.abs(a[i]-a[j]);
    b[i]=lar;  
  }
  }
  max=b[0];
  for(i=1;i<a.length;i++)
  {
   if(b[i]>max)
     max=b[i];
}
  return max;
}"
455,5.0,4.0,5.0,4.0,2017-04-23 11:13:58.596819,29,,"int arr(int a[])
{
  int lar,b[a.length()],max;
  for(i=0;i<a.length;i++)
  {
    for(j=0;j<a.length;j++)
    {
    lar=Math.abs(a[i]-a[j]);
    b[i]=lar;  
  }
  }
  max=b[0];
  for(i=1;i<a.length;i++)
  {
   if(b[i]>max)
     max=b[i];
}
  return max;
}"
456,5.0,4.0,5.0,5.0,2017-04-23 11:14:02.322934,29,,"int arr(int a[])
{
  int lar,b[a.length()],max;
  for(i=0;i<a.length;i++)
  {
    for(j=0;j<a.length;j++)
    {
    lar=Math.abs(a[i]-a[j]);
    b[i]=lar;  
  }
  }
  max=b[0];
  for(i=1;i<a.length;i++)
  {
   if(b[i]>max)
     max=b[i];
}
  return max;
}"
457,5.0,4.0,5.0,5.0,2017-04-23 11:14:06.846241,29,,"int arr(int a[])
{
  int lar,b[a.length()],max;
  for(i=0;i<a.length;i++)
  {
    for(j=0;j<a.length;j++)
    {
    lar=Math.abs(a[i]-a[j]);
    b[i]=lar;  
  }
  }
  max=b[0];
  for(i=1;i<a.length;i++)
  {
   if(b[i]>max)
     max=b[i];
}
  return max;
}"
458,5.0,5.0,5.0,5.0,2017-04-23 11:14:06.871357,29,,"int arr(int a[])
{
  int lar,b[a.length()],max;
  for(i=0;i<a.length;i++)
  {
    for(j=0;j<a.length;j++)
    {
    lar=Math.abs(a[i]-a[j]);
    b[i]=lar;  
  }
  }
  max=b[0];
  for(i=1;i<a.length;i++)
  {
   if(b[i]>max)
     max=b[i];
}
  return max;
}"
459,5.0,5.0,5.0,5.0,2017-04-23 11:14:07.384074,29,,"int arr(int a[])
{
  int lar,b[a.length()],max;
  for(i=0;i<a.length;i++)
  {
    for(j=0;j<a.length;j++)
    {
    lar=Math.abs(a[i]-a[j]);
    b[i]=lar;  
  }
  }
  max=b[0];
  for(i=1;i<a.length;i++)
  {
   if(b[i]>max)
     max=b[i];
}
  return max;
}"
460,5.0,5.0,5.0,5.0,2017-04-23 11:14:08.199471,29,,"int arr(int a[])
{
  int lar,b[a.length()],max;
  for(i=0;i<a.length;i++)
  {
    for(j=0;j<a.length;j++)
    {
    lar=Math.abs(a[i]-a[j]);
    b[i]=lar;  
  }
  }
  max=b[0];
  for(i=1;i<a.length;i++)
  {
   if(b[i]>max)
     max=b[i];
}
  return max;
}"
461,5.0,5.0,5.0,5.0,2017-04-23 11:14:10.498203,29,,"int arr(int a[])
{
  int lar,b[a.length()],max;
  for(i=0;i<a.length;i++)
  {
    for(j=0;j<a.length;j++)
    {
    lar=Math.abs(a[i]-a[j]);
    b[i]=lar;  
  }
  }
  max=b[0];
  for(i=1;i<a.length;i++)
  {
   if(b[i]>max)
     max=b[i];
}
  return max;
}"
462,1.5,1.0,1.0,1.0,2017-04-23 16:22:11.022467,31,,int find
463,2.5,1.0,1.0,1.0,2017-04-23 16:22:11.844242,31,,int find
464,3.5,1.0,1.0,1.0,2017-04-23 16:22:12.366477,31,,int find
465,1.0,1.0,1.0,1.0,2017-04-23 16:22:16.887973,31,,int find
466,2.0,1.0,1.0,1.0,2017-04-23 16:23:33.862716,31,,"int findLargestDiff (int a[]){
  
  
}"
467,2.0,2.5,1.0,1.0,2017-04-23 16:23:34.857120,31,,"int findLargestDiff (int a[]){
  
  
}"
468,2.0,2.5,3.0,1.0,2017-04-23 16:23:35.607783,31,,"int findLargestDiff (int a[]){
  
  
}"
469,2.0,2.5,3.0,3.0,2017-04-23 16:23:36.331655,31,,"int findLargestDiff (int a[]){
  
  
}"
470,2.0,2.5,3.0,3.0,2017-04-23 16:29:29.471321,31,251,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Computes the largest value of an array.\n      @param a the array\n      @return the largest value in a\n   */\npublic static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":5},""code"":""int findLargestDiff (int[] values){\n \n  \n  int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n  int smallest = values[0];\nfor (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n}""}"
471,2.0,2.5,3.0,3.0,2017-04-23 16:31:55.766145,31,252,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""public int compare(Object a, Object b) {\n    TimerTask t1 = (TimerTask) a;\n    TimerTask t2 = (TimerTask) b;\n    long diff = t1.nextTime - t2.nextTime;\n    if (diff < 0)\n        return -1;\n    else if (diff > 0)\n        return 1;\n    else\n        return 0;\n}\n"",""rating"":2},""code"":""int findLargestDiff (int[] values){ \n  \n  int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n  int smallest = values[0];\nfor (int i = 1; i < values.length; i++) {\n        if (values[i] < smallest) {\n            smallest = values[i];\n        }\n    }\n  return largest-smallest;\n}""}"
472,2.0,2.5,3.0,3.0,2017-04-23 16:32:03.761991,31,253,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""int getCount() {\n    return count;\n}\n"",""rating"":4},""code"":""int findLargestDiff (int[] values){ \n  \n  int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n  int smallest = values[0];\nfor (int i = 1; i < values.length; i++) {\n        if (values[i] < smallest) {\n            smallest = values[i];\n        }\n    }\n  return largest-smallest;\n}""}"
473,2.0,2.5,3.0,3.0,2017-04-23 16:32:11.722193,31,254,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""int intFieldValue(Object o, String name) throws NoSuchFieldException, IllegalAccessException {\n    Class<?> c = o.getClass();\n    Field fld = c.getField(name);\n    int value = fld.getInt(o);\n    return value;\n}\n"",""rating"":3},""code"":""int findLargestDiff (int[] values){ \n  \n  int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n  int smallest = values[0];\nfor (int i = 1; i < values.length; i++) {\n        if (values[i] < smallest) {\n            smallest = values[i];\n        }\n    }\n  return largest-smallest;\n}""}"
474,2.0,2.5,3.0,3.0,2017-04-23 16:32:18.023106,31,255,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""public static void main(String[] args) {\n    ArrayList<Double> values = new ArrayList<Double>();\n    // Read inputs\n    System.out.println(\""Please enter values, Q to quit:\"");\n    Scanner in = new Scanner(System.in);\n    while (in.hasNextDouble()) {\n        values.add(in.nextDouble());\n    }\n    // Find the largest value\n    double largest = values.get(0);\n    for (int i = 1; i < values.size(); i++) {\n        if (values.get(i) > largest) {\n            largest = values.get(i);\n        }\n    }\n    for (double element : values) {\n        System.out.print(element);\n        if (element == largest) {\n            System.out.print(\"" <== largest value\"");\n        }\n        System.out.println();\n    }\n}\n       // Print all values, marking the largest\n\n"",""rating"":1},""code"":""int findLargestDiff (int[] values){ \n  \n  int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n  int smallest = values[0];\nfor (int i = 1; i < values.length; i++) {\n        if (values[i] < smallest) {\n            smallest = values[i];\n        }\n    }\n  return largest-smallest;\n}""}"
475,4.5,2.5,3.0,3.0,2017-04-23 16:32:20.338378,31,,"int findLargestDiff (int[] values){ 
  
  int largest = values[0];
    for (int i = 1; i < values.length; i++) {
        if (values[i] > largest) {
            largest = values[i];
        }
    }
  int smallest = values[0];
for (int i = 1; i < values.length; i++) {
        if (values[i] < smallest) {
            smallest = values[i];
        }
    }
  return largest-smallest;
}"
476,4.5,4.5,3.0,3.0,2017-04-23 16:32:21.229584,31,,"int findLargestDiff (int[] values){ 
  
  int largest = values[0];
    for (int i = 1; i < values.length; i++) {
        if (values[i] > largest) {
            largest = values[i];
        }
    }
  int smallest = values[0];
for (int i = 1; i < values.length; i++) {
        if (values[i] < smallest) {
            smallest = values[i];
        }
    }
  return largest-smallest;
}"
477,4.5,4.5,5.0,3.0,2017-04-23 16:32:22.450244,31,,"int findLargestDiff (int[] values){ 
  
  int largest = values[0];
    for (int i = 1; i < values.length; i++) {
        if (values[i] > largest) {
            largest = values[i];
        }
    }
  int smallest = values[0];
for (int i = 1; i < values.length; i++) {
        if (values[i] < smallest) {
            smallest = values[i];
        }
    }
  return largest-smallest;
}"
478,4.5,4.5,5.0,5.0,2017-04-23 16:32:23.247709,31,,"int findLargestDiff (int[] values){ 
  
  int largest = values[0];
    for (int i = 1; i < values.length; i++) {
        if (values[i] > largest) {
            largest = values[i];
        }
    }
  int smallest = values[0];
for (int i = 1; i < values.length; i++) {
        if (values[i] < smallest) {
            smallest = values[i];
        }
    }
  return largest-smallest;
}"
479,4.5,4.5,5.0,5.0,2017-04-23 16:32:36.136503,31,256,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""public static void main(String[] args) {\n    ArrayList<Double> values = new ArrayList<Double>();\n    // Read inputs\n    System.out.println(\""Please enter values, Q to quit:\"");\n    Scanner in = new Scanner(System.in);\n    while (in.hasNextDouble()) {\n        values.add(in.nextDouble());\n    }\n    // Find the largest value\n    double largest = values.get(0);\n    for (int i = 1; i < values.size(); i++) {\n        if (values.get(i) > largest) {\n            largest = values.get(i);\n        }\n    }\n    for (double element : values) {\n        System.out.print(element);\n        if (element == largest) {\n            System.out.print(\"" <== largest value\"");\n        }\n        System.out.println();\n    }\n}\n       // Print all values, marking the largest\n\n"",""rating"":1},""code"":""int findLargestDiff (int[] values){ \n  \n  int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n  int smallest = values[0];\nfor (int i = 1; i < values.length; i++) {\n        if (values[i] < smallest) {\n            smallest = values[i];\n        }\n    }\n  return largest-smallest;\n}""}"
480,4.5,4.5,5.0,5.0,2017-04-23 16:32:40.750404,31,257,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""// pre: list != null\n// post: return sum of elements\n// use traditional for loop\npublic static int sumListOld(int[] list) {\n    int total = 0;\n    for (int i = 0; i < list.length; i++) {\n        total += list[i];\n        System.out.println(list[i]);\n    }\n    return total;\n}\n"",""rating"":3},""code"":""int findLargestDiff (int[] values){ \n  \n  int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n  int smallest = values[0];\nfor (int i = 1; i < values.length; i++) {\n        if (values[i] < smallest) {\n            smallest = values[i];\n        }\n    }\n  return largest-smallest;\n}""}"
481,4.5,4.5,5.0,5.0,2017-04-23 16:32:42.974129,31,258,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""/**\n      Finds a value in an array, using the linear search \n      algorithm.\n      @param a the array to search\n      @param value the value to find\n      @return the index at which the value occurs, or -1\n      if it does not occur in the array\n   */\npublic static int search(int[] a, int value) {\n    for (int i = 0; i < a.length; i++) {\n        if (a[i] == value) {\n            return i;\n        }\n    }\n    return -1;\n}\n"",""rating"":3},""code"":""int findLargestDiff (int[] values){ \n  \n  int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n  int smallest = values[0];\nfor (int i = 1; i < values.length; i++) {\n        if (values[i] < smallest) {\n            smallest = values[i];\n        }\n    }\n  return largest-smallest;\n}""}"
482,4.5,4.5,5.0,5.0,2017-04-23 16:32:44.671034,31,259,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""// pre: list != null, list.length > 0\n// post: return index of minimum element of array\npublic static int findMin(int[] list) {\n    assert list != null && list.length > 0 : \""failed precondition\"";\n    int indexOfMin = 0;\n    for (int i = 1; i < list.length; i++) {\n        if (list[i] < list[indexOfMin]) {\n            indexOfMin = i;\n        }\n    }\n    return indexOfMin;\n}\n"",""rating"":3},""code"":""int findLargestDiff (int[] values){ \n  \n  int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n  int smallest = values[0];\nfor (int i = 1; i < values.length; i++) {\n        if (values[i] < smallest) {\n            smallest = values[i];\n        }\n    }\n  return largest-smallest;\n}""}"
483,4.5,4.5,5.0,5.0,2017-04-23 16:32:50.801232,31,260,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static <E extends Comparable<E>> E max(E[] a) {\n    E largest = a[0];\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":1},""code"":""int findLargestDiff (int[] values){ \n  \n  int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n  int smallest = values[0];\nfor (int i = 1; i < values.length; i++) {\n        if (values[i] < smallest) {\n            smallest = values[i];\n        }\n    }\n  return largest-smallest;\n}""}"
484,4.5,4.5,5.0,5.0,2017-04-23 16:32:59.580644,31,261,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""/**\n         * Return the largest item that has been entered.\n         * The return value will be -infinity if no numbers have been entered. \n         */\npublic double getMax() {\n    return max;\n}\n"",""rating"":1},""code"":""int findLargestDiff (int[] values){ \n  \n  int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n  int smallest = values[0];\nfor (int i = 1; i < values.length; i++) {\n        if (values[i] < smallest) {\n            smallest = values[i];\n        }\n    }\n  return largest-smallest;\n}""}"
485,4.5,4.5,5.0,5.0,2017-04-23 16:33:30.218123,31,262,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent2(int[] a) {\n    // O(n log(n))\n    Arrays.sort(a);\n    int[] counts = new int[a.length];\n    int count = 0;\n    for (// O(n)\n    int i = 0; // O(n)\n    i < a.length; // O(n)\n    i++) {\n        count++;\n        if (i == a.length - 1 || a[i] != a[i + 1]) {\n            counts[i] = count;\n            count = 0;\n        }\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":2},""code"":""int findLargestDiff (int[] values){ \n  \n  int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n  int smallest = values[0];\nfor (int i = 1; i < values.length; i++) {\n        if (values[i] < smallest) {\n            smallest = values[i];\n        }\n    }\n  return largest-smallest;\n}""}"
486,4.5,4.5,5.0,5.0,2017-04-23 16:33:32.617190,31,263,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""public static void main(String[] args) {\n    final int LENGTH = 100;\n    double[] values = new double[LENGTH];\n    int currentSize = 0;\n    // Read inputs\n    System.out.println(\""Please enter values, Q to quit:\"");\n    Scanner in = new Scanner(System.in);\n    while (in.hasNextDouble() && currentSize < values.length) {\n        values[currentSize] = in.nextDouble();\n        currentSize++;\n    }\n    // Find the largest value\n    double largest = values[0];\n    for (int i = 1; i < currentSize; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    for (int i = 0; i < currentSize; i++) {\n        System.out.print(values[i]);\n        if (values[i] == largest) {\n            System.out.print(\"" <== largest value\"");\n        }\n        System.out.println();\n    }\n}\n       // Print all values, marking the largest\n\n"",""rating"":2},""code"":""int findLargestDiff (int[] values){ \n  \n  int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n  int smallest = values[0];\nfor (int i = 1; i < values.length; i++) {\n        if (values[i] < smallest) {\n            smallest = values[i];\n        }\n    }\n  return largest-smallest;\n}""}"
487,5.0,1.0,1.0,1.0,2017-04-23 16:34:17.837628,31,,
488,5.0,5.0,1.0,1.0,2017-04-23 16:34:19.826161,31,,
489,5.0,5.0,4.5,1.0,2017-04-23 16:34:23.299280,31,,
490,5.0,5.0,5.0,1.0,2017-04-23 16:34:24.786352,31,,
491,5.0,5.0,5.0,5.0,2017-04-23 16:34:27.196090,31,,
492,5.0,5.0,5.0,5.0,2017-04-23 16:38:57.976055,31,264,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""public double getAverageScore(int studentId) {\n    double total = 0;\n    for (double x : scores) {\n        total = total + x;\n    }\n    return total / scores.size();\n}\n"",""rating"":1},""code"":""public double tax(Person person){\n  \n}""}"
493,5.0,5.0,5.0,5.0,2017-04-23 16:38:58.562684,31,265,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", targetDate = \""Jan 1, 2012\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""public double tax(Person person){\n  \n}""}"
494,5.0,5.0,5.0,5.0,2017-04-23 16:39:00.231513,31,266,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""/**\n      Computes the change due and resets the machine for the next customer.\n      @return the change due to the customer\n   */\npublic double giveChange() {\n    double change = payment - purchase;\n    purchase = 0;\n    payment = 0;\n    return change;\n}\n"",""rating"":1},""code"":""public double tax(Person person){\n  \n}""}"
495,5.0,5.0,5.0,5.0,2017-04-23 16:39:01.285137,31,267,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""public static void main(String[] args) {\n    String input = JOptionPane.showInputDialog(\""Enter price:\"");\n    double price = Double.parseDouble(input);\n    final double TAX_RATE = 8.5;\n    price = price * (1 + TAX_RATE / 100);\n    JOptionPane.showMessageDialog(null, \""Price after tax: \"" + price);\n}\n"",""rating"":1},""code"":""public double tax(Person person){\n  \n}""}"
496,5.0,5.0,5.0,5.0,2017-04-23 16:39:03.096372,31,268,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""public Product(float price) {\n    this.price = price;\n    tax = (float) (price * 0.20);\n}\n"",""rating"":1},""code"":""public double tax(Person person){\n  \n}""}"
497,5.0,5.0,5.0,5.0,2017-04-23 16:39:03.775421,31,269,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""/** Compute the magnitude of a complex number */\npublic double magnitude() {\n    return Math.sqrt(x * x + y * y);\n}\n"",""rating"":1},""code"":""public double tax(Person person){\n  \n}""}"
498,5.0,5.0,5.0,5.0,2017-04-23 16:39:14.228467,31,270,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String[] args) {\n    double price = 9.95;\n    double taxRate = 8.25;\n    double tax = Financial.percentOf(price, taxRate);\n    System.out.printf(\""Tax: %.2f\\n\"", tax);\n}\n"",""rating"":1},""code"":""public double tax(Person person){\n  \n}""}"
499,5.0,5.0,5.0,5.0,2017-04-23 16:39:22.356834,31,271,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""public double tax(Person person){\n  \n}""}"
500,5.0,5.0,5.0,5.0,2017-04-23 16:39:24.273025,31,272,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""/**\n      Gets the product price.\n      @return the unit price\n   */\npublic double getPrice() {\n    return price;\n}\n"",""rating"":1},""code"":""public double tax(Person person){\n  \n}""}"
501,5.0,5.0,5.0,5.0,2017-04-23 16:39:25.632702,31,273,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""/**\n     * Skips whitespace characters and then reads a value of type double from input.\n     * Any characters that remain on the line are saved for subsequent input operations.\n     * An error occurs if an attempt is made to read past end-of-file,\n     * or if an IOException is thrown when an attempt is made to read data from the\n     * input source, or if a value of the correct type is not found in the input.\n     */\npublic double getDouble() throws IOException {\n    double x = 0.0;\n    while (true) {\n        String str = readRealString();\n        if (str == null) {\n            errorMessage(\""Floating point number not found.\"", \""Real number in the range \"" + (-Double.MAX_VALUE) + \"" to \"" + Double.MAX_VALUE);\n        } else {\n            try {\n                x = Double.parseDouble(str);\n            } catch (NumberFormatException e) {\n                errorMessage(\""Illegal floating point input, \"" + str + \"".\"", \""Real number in the range \"" + (-Double.MAX_VALUE) + \"" to \"" + Double.MAX_VALUE);\n                continue;\n            }\n            if (Double.isInfinite(x)) {\n                errorMessage(\""Floating point input outside of legal range, \"" + str + \"".\"", \""Real number in the range \"" + (-Double.MAX_VALUE) + \"" to \"" + Double.MAX_VALUE);\n                continue;\n            }\n            break;\n        }\n    }\n    return x;\n}\n"",""rating"":1},""code"":""public double tax(Person person){\n  \n}""}"
502,5.0,5.0,5.0,5.0,2017-04-23 16:39:40.578893,31,,"public double tax(Person person){
  
}"
503,5.0,5.0,5.0,5.0,2017-04-23 16:39:41.447774,31,,"public double tax(Person person){
  
}"
504,5.0,5.0,5.0,5.0,2017-04-23 16:39:42.196141,31,,"public double tax(Person person){
  
}"
505,5.0,5.0,5.0,5.0,2017-04-23 16:39:43.382864,31,,"public double tax(Person person){
  
}"
506,5.0,5.0,5.0,5.0,2017-04-23 16:39:48.425422,31,274,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""public double getAverageScore(int studentId) {\n    double total = 0;\n    for (double x : scores) {\n        total = total + x;\n    }\n    return total / scores.size();\n}\n"",""rating"":1},""code"":""public double tax(Person person){\n  \n}""}"
507,5.0,5.0,5.0,5.0,2017-04-23 16:40:10.817972,31,275,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""public static void main(String[] args) {\n    String input = JOptionPane.showInputDialog(\""Enter price:\"");\n    double price = Double.parseDouble(input);\n    final double TAX_RATE = 8.5;\n    price = price * (1 + TAX_RATE / 100);\n    JOptionPane.showMessageDialog(null, \""Price after tax: \"" + price);\n}\n"",""rating"":1},""code"":""public double tax(Person person){\n  \n}""}"
508,5.0,5.0,5.0,5.0,2017-04-23 16:40:11.818464,31,276,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""/**\n      Gets the product price.\n      @return the unit price\n   */\npublic double getPrice() {\n    return price;\n}\n"",""rating"":1},""code"":""public double tax(Person person){\n  \n}""}"
509,5.0,5.0,5.0,5.0,2017-04-23 16:40:12.969008,31,277,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""/**\n      Computes the change due and resets the machine for the next customer.\n      @return the change due to the customer\n   */\npublic double giveChange() {\n    double change = payment - purchase;\n    purchase = 0;\n    payment = 0;\n    return change;\n}\n"",""rating"":1},""code"":""public double tax(Person person){\n  \n}""}"
510,5.0,5.0,5.0,5.0,2017-04-23 16:40:19.960300,31,278,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""/** Compute the magnitude of a complex number */\npublic double magnitude() {\n    return Math.sqrt(x * x + y * y);\n}\n"",""rating"":1},""code"":""public double tax(Person person){\n  \n}""}"
511,5.0,5.0,5.0,5.0,2017-04-23 16:40:20.865811,31,279,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""public Product(float price) {\n    this.price = price;\n    tax = (float) (price * 0.20);\n}\n"",""rating"":1},""code"":""public double tax(Person person){\n  \n}""}"
512,1.0,1.0,1.0,1.0,2017-04-24 01:18:18.063008,35,280,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""public static <E extends Comparable<? super E>> E max(ArrayList<E> a) // public static <E extends Comparable<E>> E max(ArrayList<E> a) \n// doesn't work with Student array list\n{\n    E largest = a.get(0);\n    for (int i = 1; i < a.size(); i++) {\n        if (a.get(i).compareTo(largest) > 0) {\n            largest = a.get(i);\n        }\n    }\n    return largest;\n}\n"",""rating"":3},""code"":""public int largest(int[] arr) {\n  int min = arr[0];\n  int max = arr[1];\n  \n  for (int i = 0; i<arr.length; i++) {\n    if (arr[i] < min) min = arr[i];\n    if (arr[i] > max) max = arr[i];\n  }\n  \n  return max = min;\n}""}"
513,5.0,1.0,1.0,1.0,2017-04-24 01:18:27.782504,35,,"public int largest(int[] arr) {
  int min = arr[0];
  int max = arr[1];
  
  for (int i = 0; i<arr.length; i++) {
    if (arr[i] < min) min = arr[i];
    if (arr[i] > max) max = arr[i];
  }
  
  return max = min;
}"
514,1.0,1.0,1.0,1.0,2017-04-24 01:18:33.031984,35,,"public int largest(int[] arr) {
  int min = arr[0];
  int max = arr[1];
  
  for (int i = 0; i<arr.length; i++) {
    if (arr[i] < min) min = arr[i];
    if (arr[i] > max) max = arr[i];
  }
  
  return max = min;
}"
515,1.0,4.0,1.0,1.0,2017-04-24 01:18:42.577816,35,,"public int largest(int[] arr) {
  int min = arr[0];
  int max = arr[1];
  
  for (int i = 0; i<arr.length; i++) {
    if (arr[i] < min) min = arr[i];
    if (arr[i] > max) max = arr[i];
  }
  
  return max = min;
}"
516,1.0,4.0,1.0,1.0,2017-04-24 01:18:47.835650,35,281,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent2(int[] a) {\n    // O(n log(n))\n    Arrays.sort(a);\n    int[] counts = new int[a.length];\n    int count = 0;\n    for (// O(n)\n    int i = 0; // O(n)\n    i < a.length; // O(n)\n    i++) {\n        count++;\n        if (i == a.length - 1 || a[i] != a[i + 1]) {\n            counts[i] = count;\n            count = 0;\n        }\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":1},""code"":""public int largest(int[] arr) {\n  int min = arr[0];\n  int max = arr[1];\n  \n  for (int i = 0; i<arr.length; i++) {\n    if (arr[i] < min) min = arr[i];\n    if (arr[i] > max) max = arr[i];\n  }\n  \n  return max = min;\n}""}"
517,1.0,4.0,1.0,1.0,2017-04-24 01:18:51.260097,35,282,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""/** \n\t * Get the coordinates of the current moveto or lineto as doubles\n\t **/\npublic int currentSegment(double[] coords) {\n    int retval;\n    if (Double.isNaN(points[i])) {\n        coords[0] = points[i + 1];\n        coords[1] = points[i + 2];\n        retval = SEG_MOVETO;\n    } else {\n        coords[0] = points[i];\n        coords[1] = points[i + 1];\n        retval = SEG_LINETO;\n    }\n    if (transform != null)\n        transform.transform(coords, 0, coords, 0, 1);\n    return retval;\n}\n"",""rating"":1},""code"":""public int largest(int[] arr) {\n  int min = arr[0];\n  int max = arr[1];\n  \n  for (int i = 0; i<arr.length; i++) {\n    if (arr[i] < min) min = arr[i];\n    if (arr[i] > max) max = arr[i];\n  }\n  \n  return max = min;\n}""}"
518,1.0,4.0,1.0,1.0,2017-04-24 01:18:54.639047,35,283,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""// pre: list != null\n// post: return sum of elements\n// use traditional for loop\npublic static int sumListOld(int[] list) {\n    int total = 0;\n    for (int i = 0; i < list.length; i++) {\n        total += list[i];\n        System.out.println(list[i]);\n    }\n    return total;\n}\n"",""rating"":4},""code"":""public int largest(int[] arr) {\n  int min = arr[0];\n  int max = arr[1];\n  \n  for (int i = 0; i<arr.length; i++) {\n    if (arr[i] < min) min = arr[i];\n    if (arr[i] > max) max = arr[i];\n  }\n  \n  return max = min;\n}""}"
519,1.0,4.0,1.0,1.0,2017-04-24 01:19:01.788102,35,284,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""/**\n         * Return the largest item that has been entered.\n         * The return value will be -infinity if no numbers have been entered. \n         */\npublic double getMax() {\n    return max;\n}\n"",""rating"":1},""code"":""public int largest(int[] arr) {\n  int min = arr[0];\n  int max = arr[1];\n  \n  for (int i = 0; i<arr.length; i++) {\n    if (arr[i] < min) min = arr[i];\n    if (arr[i] > max) max = arr[i];\n  }\n  \n  return max = min;\n}""}"
520,1.0,4.0,1.0,1.0,2017-04-24 01:19:05.153623,35,285,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""public static <E extends Comparable<? super E>> E max(ArrayList<E> a) // public static <E extends Comparable<E>> E max(ArrayList<E> a) \n// doesn't work with Student array list\n{\n    E largest = a.get(0);\n    for (int i = 1; i < a.size(); i++) {\n        if (a.get(i).compareTo(largest) > 0) {\n            largest = a.get(i);\n        }\n    }\n    return largest;\n}\n"",""rating"":4},""code"":""public int largest(int[] arr) {\n  int min = arr[0];\n  int max = arr[1];\n  \n  for (int i = 0; i<arr.length; i++) {\n    if (arr[i] < min) min = arr[i];\n    if (arr[i] > max) max = arr[i];\n  }\n  \n  return max = min;\n}""}"
521,1.0,4.0,1.0,1.0,2017-04-24 01:19:14.750728,35,286,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""/** \n\t * Get the coordinates of the current moveto or lineto as floats\n\t **/\npublic int currentSegment(float[] coords) {\n    int retval;\n    if (Double.isNaN(points[i])) {\n        // If its a moveto\n        coords[0] = (float) points[i + 1];\n        coords[1] = (float) points[i + 2];\n        retval = SEG_MOVETO;\n    } else {\n        coords[0] = (float) points[i];\n        coords[1] = (float) points[i + 1];\n        retval = SEG_LINETO;\n    }\n    // If a transform was specified, use it on the coordinates\n    if (transform != null)\n        transform.transform(coords, 0, coords, 0, 1);\n    return retval;\n}\n"",""rating"":1},""code"":""public int largest(int[] arr) {\n  int min = arr[0];\n  int max = arr[1];\n  \n  for (int i = 0; i<arr.length; i++) {\n    if (arr[i] < min) min = arr[i];\n    if (arr[i] > max) max = arr[i];\n  }\n  \n  return max = min;\n}""}"
522,1.0,4.0,1.0,1.0,2017-04-24 01:19:16.637762,35,287,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""Task(int min, int max) {\n    this.min = min;\n    this.max = max;\n}\n"",""rating"":1},""code"":""public int largest(int[] arr) {\n  int min = arr[0];\n  int max = arr[1];\n  \n  for (int i = 0; i<arr.length; i++) {\n    if (arr[i] < min) min = arr[i];\n    if (arr[i] > max) max = arr[i];\n  }\n  \n  return max = min;\n}""}"
523,1.0,4.0,1.0,1.0,2017-04-24 01:19:21.385189,35,288,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static <E extends Comparable<E>> E max(E[] a) {\n    E largest = a[0];\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":4},""code"":""public int largest(int[] arr) {\n  int min = arr[0];\n  int max = arr[1];\n  \n  for (int i = 0; i<arr.length; i++) {\n    if (arr[i] < min) min = arr[i];\n    if (arr[i] > max) max = arr[i];\n  }\n  \n  return max = min;\n}""}"
524,1.0,4.0,1.0,5.0,2017-04-24 01:19:26.664255,35,,"public int largest(int[] arr) {
  int min = arr[0];
  int max = arr[1];
  
  for (int i = 0; i<arr.length; i++) {
    if (arr[i] < min) min = arr[i];
    if (arr[i] > max) max = arr[i];
  }
  
  return max = min;
}"
525,1.0,4.0,1.0,5.0,2017-04-24 01:19:31.738121,35,289,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""Task(int min, int max) {\n    this.min = min;\n    this.max = max;\n}\n"",""rating"":1},""code"":""public int largest(int[] arr) {\n  int min = arr[0];\n  int max = arr[1];\n  \n  for (int i = 0; i<arr.length; i++) {\n    if (arr[i] < min) min = arr[i];\n    if (arr[i] > max) max = arr[i];\n  }\n  \n  return max = min;\n}""}"
526,1.0,4.0,1.0,5.0,2017-04-24 01:19:34.567607,35,290,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""// pre: list != null\n// post: return sum of elements\n// use traditional for loop\npublic static int sumListOld(int[] list) {\n    int total = 0;\n    for (int i = 0; i < list.length; i++) {\n        total += list[i];\n        System.out.println(list[i]);\n    }\n    return total;\n}\n"",""rating"":3},""code"":""public int largest(int[] arr) {\n  int min = arr[0];\n  int max = arr[1];\n  \n  for (int i = 0; i<arr.length; i++) {\n    if (arr[i] < min) min = arr[i];\n    if (arr[i] > max) max = arr[i];\n  }\n  \n  return max = min;\n}""}"
527,1.0,4.0,1.0,5.0,2017-04-24 01:19:37.012787,35,291,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent2(int[] a) {\n    // O(n log(n))\n    Arrays.sort(a);\n    int[] counts = new int[a.length];\n    int count = 0;\n    for (// O(n)\n    int i = 0; // O(n)\n    i < a.length; // O(n)\n    i++) {\n        count++;\n        if (i == a.length - 1 || a[i] != a[i + 1]) {\n            counts[i] = count;\n            count = 0;\n        }\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":1},""code"":""public int largest(int[] arr) {\n  int min = arr[0];\n  int max = arr[1];\n  \n  for (int i = 0; i<arr.length; i++) {\n    if (arr[i] < min) min = arr[i];\n    if (arr[i] > max) max = arr[i];\n  }\n  \n  return max = min;\n}""}"
528,1.0,4.0,1.0,5.0,2017-04-24 01:19:42.146684,35,292,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""/**\n         * Return the largest item that has been entered.\n         * The return value will be -infinity if no numbers have been entered. \n         */\npublic double getMax() {\n    return max;\n}\n"",""rating"":1},""code"":""public int largest(int[] arr) {\n  int min = arr[0];\n  int max = arr[1];\n  \n  for (int i = 0; i<arr.length; i++) {\n    if (arr[i] < min) min = arr[i];\n    if (arr[i] > max) max = arr[i];\n  }\n  \n  return max = min;\n}""}"
529,1.0,4.0,1.0,5.0,2017-04-24 01:19:43.927914,35,293,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static <E extends Comparable<E>> E max(E[] a) {\n    E largest = a[0];\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":4},""code"":""public int largest(int[] arr) {\n  int min = arr[0];\n  int max = arr[1];\n  \n  for (int i = 0; i<arr.length; i++) {\n    if (arr[i] < min) min = arr[i];\n    if (arr[i] > max) max = arr[i];\n  }\n  \n  return max = min;\n}""}"
530,1.0,4.0,1.0,5.0,2017-04-24 01:19:48.115585,35,294,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""public static <E extends Comparable<? super E>> E max(ArrayList<E> a) // public static <E extends Comparable<E>> E max(ArrayList<E> a) \n// doesn't work with Student array list\n{\n    E largest = a.get(0);\n    for (int i = 1; i < a.size(); i++) {\n        if (a.get(i).compareTo(largest) > 0) {\n            largest = a.get(i);\n        }\n    }\n    return largest;\n}\n"",""rating"":4},""code"":""public int largest(int[] arr) {\n  int min = arr[0];\n  int max = arr[1];\n  \n  for (int i = 0; i<arr.length; i++) {\n    if (arr[i] < min) min = arr[i];\n    if (arr[i] > max) max = arr[i];\n  }\n  \n  return max = min;\n}""}"
531,5.0,1.0,1.0,1.0,2017-04-24 01:20:54.932821,35,,
532,2.0,1.0,1.0,1.0,2017-04-24 01:20:58.294549,35,,
533,2.0,1.0,1.0,1.0,2017-04-24 01:21:53.360689,35,295,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""public double getAverageScore(int studentId) {\n    double total = 0;\n    for (double x : scores) {\n        total = total + x;\n    }\n    return total / scores.size();\n}\n"",""rating"":1},""code"":""public double tax(Person p) {\n  if (instanceof)\n}""}"
534,2.0,1.0,1.0,1.0,2017-04-24 01:21:58.871087,35,296,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""/**\n     * Skips whitespace characters and then reads a value of type double from input.\n     * Any characters that remain on the line are saved for subsequent input operations.\n     * An error occurs if an attempt is made to read past end-of-file,\n     * or if an IOException is thrown when an attempt is made to read data from the\n     * input source, or if a value of the correct type is not found in the input.\n     */\npublic double getDouble() throws IOException {\n    double x = 0.0;\n    while (true) {\n        String str = readRealString();\n        if (str == null) {\n            errorMessage(\""Floating point number not found.\"", \""Real number in the range \"" + (-Double.MAX_VALUE) + \"" to \"" + Double.MAX_VALUE);\n        } else {\n            try {\n                x = Double.parseDouble(str);\n            } catch (NumberFormatException e) {\n                errorMessage(\""Illegal floating point input, \"" + str + \"".\"", \""Real number in the range \"" + (-Double.MAX_VALUE) + \"" to \"" + Double.MAX_VALUE);\n                continue;\n            }\n            if (Double.isInfinite(x)) {\n                errorMessage(\""Floating point input outside of legal range, \"" + str + \"".\"", \""Real number in the range \"" + (-Double.MAX_VALUE) + \"" to \"" + Double.MAX_VALUE);\n                continue;\n            }\n            break;\n        }\n    }\n    return x;\n}\n"",""rating"":1},""code"":""public double tax(Person p) {\n  if (instanceof)\n}""}"
535,2.0,5.0,1.0,1.0,2017-04-24 01:22:07.170369,35,,"public double tax(Person p) {
  if (instanceof)
}"
536,2.0,5.0,1.0,1.0,2017-04-24 01:22:14.004866,35,297,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""public Product(float price) {\n    this.price = price;\n    tax = (float) (price * 0.20);\n}\n"",""rating"":2},""code"":""public double tax(Person p) {\n  if (instanceof)\n}""}"
537,2.0,5.0,1.0,1.0,2017-04-24 01:22:16.585029,35,298,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""public static void main(String[] args) {\n    String input = JOptionPane.showInputDialog(\""Enter price:\"");\n    double price = Double.parseDouble(input);\n    final double TAX_RATE = 8.5;\n    price = price * (1 + TAX_RATE / 100);\n    JOptionPane.showMessageDialog(null, \""Price after tax: \"" + price);\n}\n"",""rating"":1},""code"":""public double tax(Person p) {\n  if (instanceof)\n}""}"
538,2.0,5.0,1.0,1.0,2017-04-24 01:22:18.061242,35,299,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""/**\n      Gets the product price.\n      @return the unit price\n   */\npublic double getPrice() {\n    return price;\n}\n"",""rating"":1},""code"":""public double tax(Person p) {\n  if (instanceof)\n}""}"
539,2.0,5.0,1.0,1.0,2017-04-24 01:22:20.236290,35,300,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", targetDate = \""Jan 1, 2012\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":3},""code"":""public double tax(Person p) {\n  if (instanceof)\n}""}"
540,2.0,5.0,1.0,1.0,2017-04-24 01:22:21.877625,35,301,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""public double tax(Person p) {\n  if (instanceof)\n}""}"
541,2.0,5.0,1.0,1.0,2017-04-24 01:22:32.037261,35,302,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""/**\n      Computes the change due and resets the machine for the next customer.\n      @return the change due to the customer\n   */\npublic double giveChange() {\n    double change = payment - purchase;\n    purchase = 0;\n    payment = 0;\n    return change;\n}\n"",""rating"":1},""code"":""public double tax(Person p) {\n  if (instanceof)\n}""}"
542,2.0,5.0,1.0,1.0,2017-04-24 01:22:33.937371,35,303,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""/** Compute the magnitude of a complex number */\npublic double magnitude() {\n    return Math.sqrt(x * x + y * y);\n}\n"",""rating"":1},""code"":""public double tax(Person p) {\n  if (instanceof)\n}""}"
543,2.0,5.0,1.0,1.0,2017-04-24 01:22:36.242448,35,304,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String[] args) {\n    double price = 9.95;\n    double taxRate = 8.25;\n    double tax = Financial.percentOf(price, taxRate);\n    System.out.printf(\""Tax: %.2f\\n\"", tax);\n}\n"",""rating"":1},""code"":""public double tax(Person p) {\n  if (instanceof)\n}""}"
544,2.0,5.0,1.0,1.0,2017-04-24 01:22:44.291686,35,,"public double tax(Person p) {
  if (instanceof)
}"
545,0.5,5.0,1.0,1.0,2017-04-24 01:22:45.238075,35,,"public double tax(Person p) {
  if (instanceof)
}"
546,0.5,5.0,1.0,5.0,2017-04-24 01:25:10.069136,35,,"public double tax(Person p) {
  if (p instanceof Employee) {
    double sal = p.getSalary();
    return (sal < 10000) : sal * 0.02 ? sal * 0.05;
  } else if (p instanceof BusinessOwner) {
    return p.getProfit() * 0.1;
  } else {
    return 0;
  }
}"
547,0.5,5.0,1.0,5.0,2017-04-24 01:25:17.712693,35,305,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String[] args) {\n    double price = 9.95;\n    double taxRate = 8.25;\n    double tax = Financial.percentOf(price, taxRate);\n    System.out.printf(\""Tax: %.2f\\n\"", tax);\n}\n"",""rating"":1},""code"":""public double tax(Person p) {\n  if (p instanceof Employee) {\n    double sal = p.getSalary();\n    return (sal < 10000) : sal * 0.02 ? sal * 0.05;\n  } else if (p instanceof BusinessOwner) {\n    return p.getProfit() * 0.1;\n  } else {\n    return 0;\n  }\n}""}"
548,0.5,1.0,1.0,5.0,2017-04-24 01:25:56.368843,35,,"public double tax(Person p) {
  if (p instanceof Employee) {
    double sal = p.getSalary();
    return (sal < 10000) : sal * 0.02 ? sal * 0.05;
  } else if (p instanceof BusinessOwner) {
    return p.getProfit() * 0.1;
  } else {
    return 0;
  }
}"
549,3.5,1.0,1.0,5.0,2017-04-24 01:25:58.983927,35,,"public double tax(Person p) {
  if (p instanceof Employee) {
    double sal = p.getSalary();
    return (sal < 10000) : sal * 0.02 ? sal * 0.05;
  } else if (p instanceof BusinessOwner) {
    return p.getProfit() * 0.1;
  } else {
    return 0;
  }
}"
550,3.5,1.0,3.0,5.0,2017-04-24 01:26:00.266796,35,,"public double tax(Person p) {
  if (p instanceof Employee) {
    double sal = p.getSalary();
    return (sal < 10000) : sal * 0.02 ? sal * 0.05;
  } else if (p instanceof BusinessOwner) {
    return p.getProfit() * 0.1;
  } else {
    return 0;
  }
}"
551,3.5,1.0,3.0,5.0,2017-04-24 01:28:04.865514,35,306,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""/**\n      Computes the pay for one week of work.\n      @param hoursWorked the number of hours worked in the week\n      @return the pay for the given number of hours\n   */\npublic double weeklyPay(int hoursWorked) {\n    return 0;\n}\n"",""rating"":1},""code"":""public double tax(Person p) {\n  //if (p instanceof Employee) {\n  //  p = (Employee) p;\n  //  double sal = p.getSalary();\n  //  return (sal < 10000) : sal * 0.02 ? sal * 0.05;\n  //} else if (p instanceof BusinessOwner) {\n  //  p = (BusinessOwner) p;\n  //  return p.getProfit() * 0.1;\n  //} else {\n    return 0;\n  //}\n}""}"
552,3.5,1.0,3.0,5.0,2017-04-24 01:28:10.616920,35,307,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""/**\n      Constructs an employee with an empty name.\n   */\npublic Employee() {\n    name = \""\"";\n}\n"",""rating"":2},""code"":""public double tax(Person p) {\n  //if (p instanceof Employee) {\n  //  p = (Employee) p;\n  //  double sal = p.getSalary();\n  //  return (sal < 10000) : sal * 0.02 ? sal * 0.05;\n  //} else if (p instanceof BusinessOwner) {\n  //  p = (BusinessOwner) p;\n  //  return p.getProfit() * 0.1;\n  //} else {\n    return 0;\n  //}\n}""}"
553,3.5,1.0,3.0,5.0,2017-04-24 01:28:13.655447,35,308,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""/**\n      Constructs a manager with a given name, annual salary and weekly bonus.\n      @param name the name of this employee\n      @param salary the annual salary\n      @param bonus the weekly bonus\n    */\npublic Manager(String name, double salary, double bonus) {\n    super(name, salary);\n    weeklyBonus = bonus;\n}\n"",""rating"":1},""code"":""public double tax(Person p) {\n  //if (p instanceof Employee) {\n  //  p = (Employee) p;\n  //  double sal = p.getSalary();\n  //  return (sal < 10000) : sal * 0.02 ? sal * 0.05;\n  //} else if (p instanceof BusinessOwner) {\n  //  p = (BusinessOwner) p;\n  //  return p.getProfit() * 0.1;\n  //} else {\n    return 0;\n  //}\n}""}"
554,3.5,1.0,3.0,5.0,2017-04-24 01:28:15.344471,35,309,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Constructs a salaried employee with a given name and annual salary.\n      @param name the name of this employee\n      @param salary the annual salary\n    */\npublic SalariedEmployee(String name, double salary) {\n    setName(name);\n    annualSalary = salary;\n}\n"",""rating"":1},""code"":""public double tax(Person p) {\n  //if (p instanceof Employee) {\n  //  p = (Employee) p;\n  //  double sal = p.getSalary();\n  //  return (sal < 10000) : sal * 0.02 ? sal * 0.05;\n  //} else if (p instanceof BusinessOwner) {\n  //  p = (BusinessOwner) p;\n  //  return p.getProfit() * 0.1;\n  //} else {\n    return 0;\n  //}\n}""}"
555,3.5,1.0,3.0,5.0,2017-04-24 01:28:19.555267,35,310,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""/**\n      Gets the current balance of the bank account.\n      @return the current balance\n   */\npublic double getBalance() {\n    // implementation—filled in later\n    return 0;\n}\n"",""rating"":1},""code"":""public double tax(Person p) {\n  //if (p instanceof Employee) {\n  //  p = (Employee) p;\n  //  double sal = p.getSalary();\n  //  return (sal < 10000) : sal * 0.02 ? sal * 0.05;\n  //} else if (p instanceof BusinessOwner) {\n  //  p = (BusinessOwner) p;\n  //  return p.getProfit() * 0.1;\n  //} else {\n    return 0;\n  //}\n}""}"
556,3.5,1.0,3.0,5.0,2017-04-24 01:28:21.689104,35,311,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""/**\n      Gets the final score for this student.\n      @return the sum of the scores, with the lowest score dropped if \n      there are at least two scores, or 0 if there are no scores.\n   */\npublic double finalScore() {\n    if (scoresSize == 0) {\n        return 0;\n    } else if (scoresSize == 1) {\n        return scores[0];\n    } else {\n        return sum() - minimum();\n    }\n}\n"",""rating"":1},""code"":""public double tax(Person p) {\n  //if (p instanceof Employee) {\n  //  p = (Employee) p;\n  //  double sal = p.getSalary();\n  //  return (sal < 10000) : sal * 0.02 ? sal * 0.05;\n  //} else if (p instanceof BusinessOwner) {\n  //  p = (BusinessOwner) p;\n  //  return p.getProfit() * 0.1;\n  //} else {\n    return 0;\n  //}\n}""}"
557,3.5,1.0,3.0,5.0,2017-04-24 01:28:25.342902,35,312,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""/**\n      Sets the name of this employee.\n      @param employeeName the new name \n   */\npublic void setName(String employeeName) {\n    name = employeeName;\n}\n"",""rating"":1},""code"":""public double tax(Person p) {\n  //if (p instanceof Employee) {\n  //  p = (Employee) p;\n  //  double sal = p.getSalary();\n  //  return (sal < 10000) : sal * 0.02 ? sal * 0.05;\n  //} else if (p instanceof BusinessOwner) {\n  //  p = (BusinessOwner) p;\n  //  return p.getProfit() * 0.1;\n  //} else {\n    return 0;\n  //}\n}""}"
558,3.5,1.0,3.0,5.0,2017-04-24 01:28:27.278418,35,313,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""public double getTax() {\n    double tax1 = 0;\n    double tax2 = 0;\n    if (status == SINGLE) {\n        if (income <= RATE1_SINGLE_LIMIT) {\n            tax1 = RATE1 * income;\n        } else {\n            tax1 = RATE1 * RATE1_SINGLE_LIMIT;\n            tax2 = RATE2 * (income - RATE1_SINGLE_LIMIT);\n        }\n    } else {\n        if (income <= RATE1_MARRIED_LIMIT) {\n            tax1 = RATE1 * income;\n        } else {\n            tax1 = RATE1 * RATE1_MARRIED_LIMIT;\n            tax2 = RATE2 * (income - RATE1_MARRIED_LIMIT);\n        }\n    }\n    return tax1 + tax2;\n}\n"",""rating"":1},""code"":""public double tax(Person p) {\n  //if (p instanceof Employee) {\n  //  p = (Employee) p;\n  //  double sal = p.getSalary();\n  //  return (sal < 10000) : sal * 0.02 ? sal * 0.05;\n  //} else if (p instanceof BusinessOwner) {\n  //  p = (BusinessOwner) p;\n  //  return p.getProfit() * 0.1;\n  //} else {\n    return 0;\n  //}\n}""}"
559,1.0,1.0,1.0,1.0,2017-04-24 16:35:16.773553,37,314,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""// pre: list != null, list.length > 0\n// post: return index of minimum element of array\npublic static int findMin(int[] list) {\n    assert list != null && list.length > 0 : \""failed precondition\"";\n    int indexOfMin = 0;\n    for (int i = 1; i < list.length; i++) {\n        if (list[i] < list[indexOfMin]) {\n            indexOfMin = i;\n        }\n    }\n    return indexOfMin;\n}\n"",""rating"":1},""code"":""public static int diffLargestAndSmallest(final ArrayList<Integer> list) {\n    if (list.isEmpty()) {\n        return 0;\n    } else {\n        return (Collections.max(list) - Collections.min(list)) + 1;\n    }\n}""}"
560,4.5,1.0,1.0,1.0,2017-04-24 16:35:18.745321,37,,"public static int diffLargestAndSmallest(final ArrayList<Integer> list) {
    if (list.isEmpty()) {
        return 0;
    } else {
        return (Collections.max(list) - Collections.min(list)) + 1;
    }
}"
561,4.5,1.0,1.0,1.0,2017-04-24 16:35:27.701946,37,315,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""/**\n    * Return the index of the first item in list for which the predicate is true, if any.\n    * If there is no such item, return -1.\n    */\npublic static <T> int find(ArrayList<T> list, Predicate<T> pred) {\n    // \n    for (int i = 0; i < list.size(); i++) {\n        T item = list.get(i);\n        if (pred.test(item))\n            return i;\n    }\n    return -1;\n}\n"",""rating"":3},""code"":""public static int diffLargestAndSmallest(final ArrayList<Integer> list) {\n    if (list.isEmpty()) {\n        return 0;\n    } else {\n        return (Collections.max(list) - Collections.min(list)) + 1;\n    }\n}""}"
562,4.5,1.0,1.0,1.0,2017-04-24 16:36:49.328159,37,316,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""/**\n      Finds a value in an array, using the linear search \n      algorithm.\n      @param a the array to search\n      @param value the value to find\n      @return the index at which the value occurs, or -1\n      if it does not occur in the array\n   */\npublic static int search(int[] a, int value) {\n    for (int i = 0; i < a.length; i++) {\n        if (a[i] == value) {\n            return i;\n        }\n    }\n    return -1;\n}\n"",""rating"":3},""code"":""public static int diffLargestAndSmallest(final ArrayList<Integer> list) {\n    if (list.isEmpty()) {\n        return 0;\n    } else {\n        return (Collections.max(list) - Collections.min(list)) + 1;\n    }\n}""}"
563,4.5,1.0,1.0,1.0,2017-04-24 16:36:51.952004,37,317,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""// pre: list != null, list.length > 0\n// post: return index of minimum element of array\npublic static int findMin(int[] list) {\n    assert list != null && list.length > 0 : \""failed precondition\"";\n    int indexOfMin = 0;\n    for (int i = 1; i < list.length; i++) {\n        if (list[i] < list[indexOfMin]) {\n            indexOfMin = i;\n        }\n    }\n    return indexOfMin;\n}\n"",""rating"":2},""code"":""public static int diffLargestAndSmallest(final ArrayList<Integer> list) {\n    if (list.isEmpty()) {\n        return 0;\n    } else {\n        return (Collections.max(list) - Collections.min(list)) + 1;\n    }\n}""}"
564,4.5,1.0,1.0,1.0,2017-04-24 16:36:58.081502,37,318,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static <E extends Comparable<E>> E max(E[] a) {\n    E largest = a[0];\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":2},""code"":""public static int diffLargestAndSmallest(final ArrayList<Integer> list) {\n    if (list.isEmpty()) {\n        return 0;\n    } else {\n        return (Collections.max(list) - Collections.min(list)) + 1;\n    }\n}""}"
565,4.5,1.0,1.0,1.0,2017-04-24 16:37:04.314157,37,319,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""public static <E extends Comparable<? super E>> E max(ArrayList<E> a) // public static <E extends Comparable<E>> E max(ArrayList<E> a) \n// doesn't work with Student array list\n{\n    E largest = a.get(0);\n    for (int i = 1; i < a.size(); i++) {\n        if (a.get(i).compareTo(largest) > 0) {\n            largest = a.get(i);\n        }\n    }\n    return largest;\n}\n"",""rating"":2},""code"":""public static int diffLargestAndSmallest(final ArrayList<Integer> list) {\n    if (list.isEmpty()) {\n        return 0;\n    } else {\n        return (Collections.max(list) - Collections.min(list)) + 1;\n    }\n}""}"
566,4.5,1.0,1.0,1.0,2017-04-24 16:37:06.710518,37,320,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""public static void main(String[] args) {\n    Collection<String> // <1>\n    c = // <2>\n    Arrays.asList(\""One\"", \""Two\"", \""Three\"");\n    // <3>\n    c.forEach( s -> System.out.println(s));\n}\n"",""rating"":4},""code"":""public static int diffLargestAndSmallest(final ArrayList<Integer> list) {\n    if (list.isEmpty()) {\n        return 0;\n    } else {\n        return (Collections.max(list) - Collections.min(list)) + 1;\n    }\n}""}"
567,4.5,3.0,1.0,1.0,2017-04-24 16:37:12.879816,37,,"public static int diffLargestAndSmallest(final ArrayList<Integer> list) {
    if (list.isEmpty()) {
        return 0;
    } else {
        return (Collections.max(list) - Collections.min(list)) + 1;
    }
}"
568,4.5,3.0,1.0,1.0,2017-04-24 16:37:23.907615,37,321,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""public static <E extends Comparable<? super E>> E max(ArrayList<E> a) // public static <E extends Comparable<E>> E max(ArrayList<E> a) \n// doesn't work with Student array list\n{\n    E largest = a.get(0);\n    for (int i = 1; i < a.size(); i++) {\n        if (a.get(i).compareTo(largest) > 0) {\n            largest = a.get(i);\n        }\n    }\n    return largest;\n}\n"",""rating"":4},""code"":""public static int diffLargestAndSmallest(final ArrayList<Integer> list) {\n    if (list.isEmpty()) {\n        return 0;\n    } else {\n        return (Collections.max(list) - Collections.min(list)) + 1;\n    }\n}""}"
569,4.5,3.0,1.0,1.0,2017-04-24 16:37:27.701965,37,322,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""/**\n    * Return the index of the first item in list for which the predicate is true, if any.\n    * If there is no such item, return -1.\n    */\npublic static <T> int find(ArrayList<T> list, Predicate<T> pred) {\n    // \n    for (int i = 0; i < list.size(); i++) {\n        T item = list.get(i);\n        if (pred.test(item))\n            return i;\n    }\n    return -1;\n}\n"",""rating"":2},""code"":""public static int diffLargestAndSmallest(final ArrayList<Integer> list) {\n    if (list.isEmpty()) {\n        return 0;\n    } else {\n        return (Collections.max(list) - Collections.min(list)) + 1;\n    }\n}""}"
570,4.5,3.0,1.0,1.0,2017-04-24 16:37:31.988450,37,323,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""public void go() {\n    getSongs();\n    System.out.println(songList);\n    Collections.sort(songList);\n    System.out.println(songList);\n}\n"",""rating"":1},""code"":""public static int diffLargestAndSmallest(final ArrayList<Integer> list) {\n    if (list.isEmpty()) {\n        return 0;\n    } else {\n        return (Collections.max(list) - Collections.min(list)) + 1;\n    }\n}""}"
571,4.5,3.0,1.0,1.0,2017-04-24 16:37:34.618715,37,324,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""/**\n      Finds a value in a range of a sorted array, using the binary\n      search algorithm.\n      @param a the array in which to search\n      @param low the low index of the range\n      @param high the high index of the range\n      @param value the value to find\n      @return the index at which the value occurs, or -1\n      if it does not occur in the array\n   */\npublic static int search(int[] a, int low, int high, int value) {\n    if (low <= high) {\n        int mid = (low + high) / 2;\n        if (a[mid] == value) {\n            return mid;\n        } else if (a[mid] < value) {\n            return search(a, mid + 1, high, value);\n        } else {\n            return search(a, low, mid - 1, value);\n        }\n    } else {\n        return -1;\n    }\n}\n"",""rating"":3},""code"":""public static int diffLargestAndSmallest(final ArrayList<Integer> list) {\n    if (list.isEmpty()) {\n        return 0;\n    } else {\n        return (Collections.max(list) - Collections.min(list)) + 1;\n    }\n}""}"
572,4.5,3.0,1.0,1.0,2017-04-24 16:37:40.211815,37,325,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""public static void main(String[] args) {\n    Collection<String> // <1>\n    c = // <2>\n    Arrays.asList(\""One\"", \""Two\"", \""Three\"");\n    // <3>\n    c.forEach( s -> System.out.println(s));\n}\n"",""rating"":1},""code"":""public static int diffLargestAndSmallest(final ArrayList<Integer> list) {\n    if (list.isEmpty()) {\n        return 0;\n    } else {\n        return (Collections.max(list) - Collections.min(list)) + 1;\n    }\n}""}"
573,4.5,3.0,1.0,1.0,2017-04-24 16:37:47.124058,37,326,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""/**\n      Finds a value in an array, using the linear search \n      algorithm.\n      @param a the array to search\n      @param value the value to find\n      @return the index at which the value occurs, or -1\n      if it does not occur in the array\n   */\npublic static int search(int[] a, int value) {\n    for (int i = 0; i < a.length; i++) {\n        if (a[i] == value) {\n            return i;\n        }\n    }\n    return -1;\n}\n"",""rating"":3},""code"":""public static int diffLargestAndSmallest(final ArrayList<Integer> list) {\n    if (list.isEmpty()) {\n        return 0;\n    } else {\n        return (Collections.max(list) - Collections.min(list)) + 1;\n    }\n}""}"
574,4.5,3.0,1.0,1.0,2017-04-24 16:37:53.731009,37,327,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""public static int sum(ArrayList<Integer> lst) {\n    int sum = 0;\n    Iterator<Integer> iter = lst.iterator();\n    while (iter.hasNext()) {\n        // No cast needed\n        sum = sum + iter.next();\n    }\n    return sum;\n}\n"",""rating"":2},""code"":""public static int diffLargestAndSmallest(final ArrayList<Integer> list) {\n    if (list.isEmpty()) {\n        return 0;\n    } else {\n        return (Collections.max(list) - Collections.min(list)) + 1;\n    }\n}""}"
575,3.0,1.0,1.0,1.0,2017-04-24 16:39:18.008261,37,,"public float taxOfPerson(Person p) {
  
}"
576,1.0,5.0,1.0,1.0,2017-04-24 18:09:30.310286,38,,"public double getTax(Person person) {
  if (person instanceOf )
}"
577,1.0,5.0,0.0,1.0,2017-04-24 18:09:33.480576,38,,"public double getTax(Person person) {
  if (person instanceOf )
}"
578,1.0,5.0,0.0,0.0,2017-04-24 18:09:36.374654,38,,"public double getTax(Person person) {
  if (person instanceOf )
}"
579,1.0,5.0,0.0,0.0,2017-04-24 18:10:17.031594,38,,"public double getTax(Person person) {
  if (person instanceOf )
}"
580,0.0,5.0,0.0,0.0,2017-04-24 18:10:17.478798,38,,"public double getTax(Person person) {
  if (person instanceOf )
}"
581,0.5,5.0,0.0,0.0,2017-04-24 18:12:47.718525,38,,"public double getTax(Person person) {
  if (person instanceOf )
}"
582,0.5,5.0,0.5,0.0,2017-04-24 18:12:49.963607,38,,"public double getTax(Person person) {
  if (person instanceOf )
}"
583,0.5,5.0,0.0,0.0,2017-04-24 18:12:51.249773,38,,"public double getTax(Person person) {
  if (person instanceOf )
}"
584,0.5,5.0,0.5,0.0,2017-04-24 18:12:57.494139,38,,"public double getTax(Person person) {
  if (person instanceOf )
}"
585,0.5,5.0,0.5,0.5,2017-04-24 18:13:00.294748,38,,"public double getTax(Person person) {
  if (person instanceOf )
}"
586,0.5,5.0,0.5,0.5,2017-04-24 18:13:13.790661,38,,"public double getTax(Person person) {
  if (person instanceOf )
}"
587,0.5,4.5,0.5,0.5,2017-04-24 18:13:15.852784,38,,"public double getTax(Person person) {
  if (person instanceOf )
}"
588,0.5,4.0,0.5,0.5,2017-04-24 18:13:16.916869,38,,"public double getTax(Person person) {
  if (person instanceOf )
}"
589,0.0,4.0,0.5,0.5,2017-04-24 18:13:44.639867,38,,"public double getTax(Person person) {
  // instanceOf operator to identify type of Person object
  if (person instanceOf )
}"
590,0.0,4.0,0.0,0.5,2017-04-24 18:13:45.858053,38,,"public double getTax(Person person) {
  // instanceOf operator to identify type of Person object
  if (person instanceOf )
}"
591,0.0,4.0,0.0,0.0,2017-04-24 18:13:47.996806,38,,"public double getTax(Person person) {
  // instanceOf operator to identify type of Person object
  if (person instanceOf )
}"
592,0.0,0.0,0.0,0.0,2017-04-24 18:21:56.891070,38,,"public double getTax(Person person) {
  // instanceOf operator to identify type of Person object
}"
593,0.0,0.0,0.0,5.0,2017-04-24 18:22:00.348203,38,,"public double getTax(Person person) {
  // instanceOf operator to identify type of Person object
}"
594,0.0,0.0,0.0,5.0,2017-04-24 18:23:00.024281,38,328,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""/** Static 'instance' method */\npublic static Singleton getInstance() {\n    return instance;\n}\n"",""rating"":1},""code"":""public double getTax(Person person) {\n  // instanceOf operator to identify type of Person object\n}""}"
595,0.0,2.0,0.0,5.0,2017-04-24 18:23:23.895712,38,,"public double getTax(Person person) {
  // syntax of instance of operator
}"
596,0.0,0.0,0.0,5.0,2017-04-24 18:24:19.689742,38,,"public double getTax(Person person) {
  // instanceof
}"
597,0.0,0.0,0.0,5.0,2017-04-24 18:24:44.610044,38,329,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""public static void process(Vehicle v, String plateNumber) {\n    // This example shows the syntax of instanceof and casting\n    if (v instanceof Car) {\n        // Vehicle has no setLicensePlateNumber method--must cast\n        Car c = (Car) v;\n        c.setLicensePlateNumber(plateNumber);\n    }\n    // calls v.toString()\n    System.out.println(v);\n}\n"",""rating"":5},""code"":""public double getTax(Person person) {\n  // instanceof\n}""}"
598,0.0,4.0,0.0,5.0,2017-04-24 18:25:57.382488,38,,"public double getTax(Person person) {
  if (person instanceof Employee) {
    Employee e = (Employee) person;
  }
}"
599,0.0,4.0,5.0,5.0,2017-04-24 18:25:59.818451,38,,"public double getTax(Person person) {
  if (person instanceof Employee) {
    Employee e = (Employee) person;
  }
}"
600,0.0,4.0,5.0,0.5,2017-04-24 18:26:01.483265,38,,"public double getTax(Person person) {
  if (person instanceof Employee) {
    Employee e = (Employee) person;
  }
}"
601,0.0,4.0,5.0,0.0,2017-04-24 18:26:03.020899,38,,"public double getTax(Person person) {
  if (person instanceof Employee) {
    Employee e = (Employee) person;
  }
}"
602,0.0,4.0,5.0,0.0,2017-04-24 18:26:20.585597,38,330,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""/**\n         * This method is called when a message from the hub is received \n         * by this client.  If the message is of type PokerGameState,\n         * then the newState() method in the PokerWindow class is called\n         * to handle the change in the state of the game.  If the message\n         * is of type String, it represents a message that is to be\n         * displayed to the user; the string is displayed in the JLabel\n         * messageFromServer.  If the message is of type PokerCard[],\n         * then it is the opponent's hand.  This had is sent when the\n         * game has ended and the player gets to see the opponent's hand.\n         * <p>Note that this method is called from a separate thread, not\n         * from the GUI event thread.  In order to avoid synchronization\n         * issues, this method uses SwingUtilties.invokeLater() to carry \n         * out its task in the GUI event thread.\n         */\nprotected void messageReceived(final Object message) {\n    SwingUtilities.invokeLater(new Runnable() {\n\n        public void run() {\n            if (message instanceof PokerGameState)\n                newState((PokerGameState) message);\n            else if (message instanceof String)\n                messageFromServer.setText((String) message);\n            else if (message instanceof PokerCard[]) {\n                opponentHand = (PokerCard[]) message;\n                display.repaint();\n            }\n        }\n    });\n}\n"",""rating"":5},""code"":""public double getTax(Person person) {\n  if (person instanceof Employee) {\n    Employee e = (Employee) person;\n  }\n}""}"
603,0.0,4.0,5.0,0.0,2017-04-24 18:27:00.614879,38,331,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""private void maybeKillParent() {\n    if (parent == null)\n        return;\n    if (parent instanceof Frame) {\n        ((Frame) parent).setVisible(true);\n        ((Frame) parent).dispose();\n    }\n    if (parent instanceof JInternalFrame) {\n        ((JInternalFrame) parent).setVisible(true);\n        ((JInternalFrame) parent).dispose();\n    }\n}\n"",""rating"":5},""code"":""public double getTax(Person person) {\n  if (person instanceof Employee) {\n    Employee e = (Employee) person;\n  }\n}""}"
604,0.0,4.0,5.0,0.0,2017-04-24 18:27:05.260767,38,332,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""public void run() {\n    if (message instanceof PokerGameState)\n        newState((PokerGameState) message);\n    else if (message instanceof String)\n        messageFromServer.setText((String) message);\n    else if (message instanceof PokerCard[]) {\n        opponentHand = (PokerCard[]) message;\n        display.repaint();\n    }\n}\n"",""rating"":4},""code"":""public double getTax(Person person) {\n  if (person instanceof Employee) {\n    Employee e = (Employee) person;\n  }\n}""}"
605,0.0,4.0,5.0,0.0,2017-04-24 18:27:19.554134,38,333,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""/**\n         * Responds to a message received from the Hub.  The only messages that\n         * are supported are TicTacToeGameState objects.  When one is received,\n         * the newState() method in the TicTacToeWindow class is called.  To avoid\n         * problems with synchronization, that method is called using\n         * SwingUtilities.invokeLater() so that it will run in the GUI event thread.\n         */\nprotected void messageReceived(final Object message) {\n    if (message instanceof TicTacToeGameState) {\n        SwingUtilities.invokeLater(new Runnable() {\n\n            public void run() {\n                // calls a method at the end of the TicTacToeWindow class\n                newState((TicTacToeGameState) message);\n            }\n        });\n    }\n}\n"",""rating"":4},""code"":""public double getTax(Person person) {\n  if (person instanceof Employee) {\n    Employee e = (Employee) person;\n  }\n}""}"
606,0.0,4.0,5.0,3.0,2017-04-24 18:32:19.632257,38,,"public double getTax(Person person) {
  if (person instanceof Employee) {
    Employee e = (Employee) person;
    if (e.getSalary() < 10000) {
      // 2 percent of salary
      return 2 * e.getSalary() / 100;
    }
  }
}"
607,0.0,4.0,5.0,3.0,2017-04-24 18:32:57.490347,38,334,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""/** As above, but return the default instead of throwing an exception */\npublic boolean getBoolean(String key, boolean defaultValue) {\n    try {\n        return getBoolean(key);\n    } catch (MissingResourceException e) {\n        if (e instanceof MalformedResourceException)\n            System.err.println(\""WARNING: \"" + e.getMessage());\n        return defaultValue;\n    }\n}\n"",""rating"":1},""code"":""public double getTax(Person person) {\n  if (person instanceof Employee) {\n    Employee e = (Employee) person;\n    if (e.getSalary() < 10000) {\n      // 2 percent of salary\n      return 2 * e.getSalary() / 100;\n    }\n  }\n}""}"
608,0.0,4.0,5.0,5.0,2017-04-24 18:45:12.632836,38,,"public double getTax(Person person) {
  if (person instanceof Employee) {
    Employee e = (Employee) person;
    if (e.getSalary() < 10000) {
      // Percentage of salary
      return 2 * e.getSalary() / 100;
    } else {
      return 5 * e.getSalary() / 100;
    }
  } else if (person instanceof BusinessOwner) {
    // how to get percentage in java
    return 10 * e.getProfit() / 100;
  }
  return 0.0d;
}"
609,0.0,4.0,2.0,5.0,2017-04-24 18:45:14.920518,38,,"public double getTax(Person person) {
  if (person instanceof Employee) {
    Employee e = (Employee) person;
    if (e.getSalary() < 10000) {
      // Percentage of salary
      return 2 * e.getSalary() / 100;
    } else {
      return 5 * e.getSalary() / 100;
    }
  } else if (person instanceof BusinessOwner) {
    // how to get percentage in java
    return 10 * e.getProfit() / 100;
  }
  return 0.0d;
}"
610,0.0,4.0,1.0,5.0,2017-04-24 18:45:17.693185,38,,"public double getTax(Person person) {
  if (person instanceof Employee) {
    Employee e = (Employee) person;
    if (e.getSalary() < 10000) {
      // Percentage of salary
      return 2 * e.getSalary() / 100;
    } else {
      return 5 * e.getSalary() / 100;
    }
  } else if (person instanceof BusinessOwner) {
    // how to get percentage in java
    return 10 * e.getProfit() / 100;
  }
  return 0.0d;
}"
611,0.0,0.0,1.0,5.0,2017-04-24 18:45:46.839230,38,,"public double getTax(Person person) {
  if (person instanceof Employee) {
    Employee e = (Employee) person;
    if (e.getSalary() < 10000) {
      // Percentage of salary
      return 2 * e.getSalary() / 100;
    } else {
      return 5 * e.getSalary() / 100;
    }
  } else if (person instanceof BusinessOwner) {
    // how to get percentage in java
    return 10 * e.getProfit() / 100;
  }
  return 0.0d;
}"
612,0.0,0.0,0.0,5.0,2017-04-24 18:46:50.262924,38,,"public double getTax(Person person) {
  if (person instanceof Employee) {
    Employee e = (Employee) person;
    if (e.getSalary() < 10000) {
      // Percentage of salary
      return 2 * e.getSalary() / 100;
    } else {
      return 5 * e.getSalary() / 100;
    }
  } else if (person instanceof BusinessOwner) {
    return 10 * e.getProfit() / 100;
  } else if (person instanceof Veteran) {
    return 0;
  }
  // null return for int 
  return null;
}"
613,4.0,0.0,0.0,5.0,2017-04-24 18:47:18.348755,38,,"public double getTax(Person person) {
  if (person instanceof Employee) {
    Employee e = (Employee) person;
    if (e.getSalary() < 10000) {
      // Percentage of salary
      return 2 * e.getSalary() / 100;
    } else {
      return 5 * e.getSalary() / 100;
    }
  } else if (person instanceof BusinessOwner) {
    return 10 * e.getProfit() / 100;
  } else if (person instanceof Veteran) {
    return 0;
  }
  // null return for int 
  return null;
}"
614,4.0,0.0,0.0,5.0,2017-04-24 18:47:40.142697,38,335,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""/**\n      Processes the sales tax due.\n      @return the sales tax due\n   */\npublic double getSalesTax() {\n    return taxablePurchase * taxRate / 100;\n}\n"",""rating"":5},""code"":""public double getTax(Person person) {\n  if (person instanceof Employee) {\n    Employee e = (Employee) person;\n    if (e.getSalary() < 10000) {\n      // Percentage of salary\n      return 2 * e.getSalary() / 100;\n    } else {\n      return 5 * e.getSalary() / 100;\n    }\n  } else if (person instanceof BusinessOwner) {\n    return 10 * e.getProfit() / 100;\n  } else if (person instanceof Veteran) {\n    return 0;\n  }\n  // null return for int \n  return null;\n}""}"
615,4.0,0.0,0.0,5.0,2017-04-24 18:51:20.487128,38,336,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""/**\n      Gets the final score for this student.\n      @return the sum of the scores, with the lowest score dropped.\n   */\npublic double finalScore() {\n    if (scoresSize == 0) {\n        return 0;\n    } else {\n        return sum() - minimum();\n    }\n}\n"",""rating"":2},""code"":""public double getTax(Person person) {\n  if (person instanceof Employee) {\n    Employee e = (Employee) person;\n    if (e.getSalary() < 10000) {\n      // Percentage of salary\n      return 2 * e.getSalary() / 100;\n    } else {\n      return 5 * e.getSalary() / 100;\n    }\n  } else if (person instanceof BusinessOwner) {\n    return 10 * e.getProfit() / 100;\n  } else if (person instanceof Veteran) {\n    return 0;\n  }\n  // null return for double \n  return null;\n}""}"
616,4.0,0.0,0.0,5.0,2017-04-24 18:51:27.361763,38,337,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""/**\n      Computes the pay for one week of work.\n      @param hoursWorked the number of hours worked in the week\n      @return the pay for the given number of hours\n   */\npublic double weeklyPay(int hoursWorked) {\n    return 0;\n}\n"",""rating"":1},""code"":""public double getTax(Person person) {\n  if (person instanceof Employee) {\n    Employee e = (Employee) person;\n    if (e.getSalary() < 10000) {\n      // Percentage of salary\n      return 2 * e.getSalary() / 100;\n    } else {\n      return 5 * e.getSalary() / 100;\n    }\n  } else if (person instanceof BusinessOwner) {\n    return 10 * e.getProfit() / 100;\n  } else if (person instanceof Veteran) {\n    return 0;\n  }\n  // null return for double \n  return null;\n}""}"
617,4.0,0.0,0.0,5.0,2017-04-24 18:52:32.077773,38,338,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""public Double call() {\n    double result = 1;\n    for (int i = 0; i < n; i++) {\n        result *= m;\n        try {\n            Thread.sleep(10);\n        } catch (InterruptedException ex) {\n            ex.printStackTrace();\n        }\n    }\n    System.out.printf(\""%nComputed %.02f raised to %d%n\"", m, n);\n    return result;\n}\n"",""rating"":3},""code"":""public Double getTax(Person person) {\n  if (person instanceof Employee) {\n    Employee e = (Employee) person;\n    if (e.getSalary() < 10000) {\n      // Percentage of salary\n      return 2 * e.getSalary() / 100;\n    } else {\n      return 5 * e.getSalary() / 100;\n    }\n  } else if (person instanceof BusinessOwner) {\n    return 10 * e.getProfit() / 100;\n  } else if (person instanceof Veteran) {\n    return 0;\n  }\n  // null return for double wrapper class\n  return null;\n}""}"
618,1.5,0.0,0.0,5.0,2017-04-24 18:55:32.640419,38,,"public Double getTax(Person person) {
  if (person instanceof Employee) {
    Employee e = (Employee) person;
    if (e.getSalary() < 10000) {
      // Percentage of salary
      return 2 * e.getSalary() / 100;
    } else {
      return 5 * e.getSalary() / 100;
    }
  } else if (person instanceof BusinessOwner) {
    return 10 * e.getProfit() / 100;
  } else if (person instanceof Veteran) {
    return 0;
  }
  // null return for double wrapper class
  return null;
}"
619,0.0,0.0,0.0,5.0,2017-04-24 18:55:55.760565,38,,"public Double getTax(Person person) {
  if (person instanceof Employee) {
    Employee e = (Employee) person;
    if (e.getSalary() < 10000) {
      // Percentage of salary
      return 2 * e.getSalary() / 100;
    } else {
      return 5 * e.getSalary() / 100;
    }
  } else if (person instanceof BusinessOwner) {
    return 10 * e.getProfit() / 100;
  } else if (person instanceof Veteran) {
    return 0;
  }
  // null return for double wrapper class
  return null;
}"
620,0.0,0.0,5.0,5.0,2017-04-24 18:55:57.436765,38,,"public Double getTax(Person person) {
  if (person instanceof Employee) {
    Employee e = (Employee) person;
    if (e.getSalary() < 10000) {
      // Percentage of salary
      return 2 * e.getSalary() / 100;
    } else {
      return 5 * e.getSalary() / 100;
    }
  } else if (person instanceof BusinessOwner) {
    return 10 * e.getProfit() / 100;
  } else if (person instanceof Veteran) {
    return 0;
  }
  // null return for double wrapper class
  return null;
}"
621,0.0,0.0,5.0,0.0,2017-04-24 18:55:58.857745,38,,"public Double getTax(Person person) {
  if (person instanceof Employee) {
    Employee e = (Employee) person;
    if (e.getSalary() < 10000) {
      // Percentage of salary
      return 2 * e.getSalary() / 100;
    } else {
      return 5 * e.getSalary() / 100;
    }
  } else if (person instanceof BusinessOwner) {
    return 10 * e.getProfit() / 100;
  } else if (person instanceof Veteran) {
    return 0;
  }
  // null return for double wrapper class
  return null;
}"
622,0.0,0.0,5.0,0.0,2017-04-24 18:56:25.137849,38,339,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""public float getPreferredSpan(int axis) {\n    return 0.0f;\n}\n"",""rating"":1},""code"":""public Double getTax(Person person) {\n  if (person instanceof Employee) {\n    Employee e = (Employee) person;\n    if (e.getSalary() < 10000) {\n      // Percentage of salary\n      return 2 * e.getSalary() / 100;\n    } else {\n      return 5 * e.getSalary() / 100;\n    }\n  } else if (person instanceof BusinessOwner) {\n    return 10 * e.getProfit() / 100;\n  } else if (person instanceof Veteran) {\n    return 0;\n  }\n  // null return for double wrapper class\n  return null;\n}""}"
623,0.0,0.0,5.0,0.0,2017-04-24 18:56:41.464979,38,340,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""public void run() {\n    System.out.println(\""Client receive thread started.\"");\n    try {\n        while (!closed) {\n            Object obj = in.readObject();\n            if (obj instanceof DisconnectMessage) {\n                close();\n                serverShutdown(((DisconnectMessage) obj).message);\n            } else if (obj instanceof StatusMessage) {\n                StatusMessage msg = (StatusMessage) obj;\n                connectedPlayerIDs = msg.players;\n                if (msg.connecting)\n                    playerConnected(msg.playerID);\n                else\n                    playerDisconnected(msg.playerID);\n            } else\n                messageReceived(obj);\n        }\n    } catch (IOException e) {\n        if (!closed) {\n            closedByError(\""IO error occurred while waiting to receive  message.\"");\n            System.out.println(\""Client receive thread terminated by IOException: \"" + e);\n        }\n    } catch (Exception e) {\n        if (!closed) {\n            closedByError(\""Unexpected internal error in receive thread: \"" + e);\n            System.out.println(\""\\nUnexpected error shuts down client receive thread:\"");\n            e.printStackTrace();\n        }\n    } finally {\n        System.out.println(\""Client receive thread terminated.\"");\n    }\n}\n"",""rating"":3},""code"":""public Double getTax(Person person) {\n  if (person instanceof Employee) {\n    Employee e = (Employee) person;\n    if (e.getSalary() < 10000) {\n      // Percentage of salary\n      return 2 * e.getSalary() / 100;\n    } else {\n      return 5 * e.getSalary() / 100;\n    }\n  } else if (person instanceof BusinessOwner) {\n    return 10 * e.getProfit() / 100;\n  } else if (person instanceof Veteran) {\n    return 0;\n  }\n  // null return for double wrapper class\n  return null;\n}""}"
624,0.0,5.0,5.0,0.0,2017-04-24 18:57:08.840990,38,,"public Double getTax(Person person) {
  if (person instanceof Employee) {
    Employee e = (Employee) person;
    if (e.getSalary() < 10000) {
      // Percentage of salary
      return 2 * e.getSalary() / 100;
    } else {
      return 5 * e.getSalary() / 100;
    }
  } else if (person instanceof BusinessOwner) {
    return 10 * e.getProfit() / 100;
  } else if (person instanceof Veteran) {
    return 0;
  }
  // null return for double wrapper class
  return null;
}"
625,0.0,5.0,0.0,0.0,2017-04-24 18:57:10.649477,38,,"public Double getTax(Person person) {
  if (person instanceof Employee) {
    Employee e = (Employee) person;
    if (e.getSalary() < 10000) {
      // Percentage of salary
      return 2 * e.getSalary() / 100;
    } else {
      return 5 * e.getSalary() / 100;
    }
  } else if (person instanceof BusinessOwner) {
    return 10 * e.getProfit() / 100;
  } else if (person instanceof Veteran) {
    return 0;
  }
  // null return for double wrapper class
  return null;
}"
626,0.0,5.0,0.0,0.0,2017-04-24 18:58:09.166718,38,,"public Double getTax(Person person) {
  if (person instanceof Employee) {
    Employee e = (Employee) person;
    if (e.getSalary() < 10000) {
      // Percentage of salary
      return 2 * e.getSalary() / 100;
    } else {
      return 5 * e.getSalary() / 100;
    }
  } else if (person instanceof BusinessOwner) {
    return 10 * e.getProfit() / 100;
  } else if (person instanceof Veteran) {
    return 0;
  }
  // null return for double wrapper class
  return null;
}"
627,2.5,5.0,0.0,0.0,2017-04-24 18:58:12.602012,38,,"public Double getTax(Person person) {
  if (person instanceof Employee) {
    Employee e = (Employee) person;
    if (e.getSalary() < 10000) {
      // Percentage of salary
      return 2 * e.getSalary() / 100;
    } else {
      return 5 * e.getSalary() / 100;
    }
  } else if (person instanceof BusinessOwner) {
    return 10 * e.getProfit() / 100;
  } else if (person instanceof Veteran) {
    return 0;
  }
  // null return for double wrapper class
  return null;
}"
628,2.5,2.5,0.0,0.0,2017-04-24 18:58:16.738672,38,,"public Double getTax(Person person) {
  if (person instanceof Employee) {
    Employee e = (Employee) person;
    if (e.getSalary() < 10000) {
      // Percentage of salary
      return 2 * e.getSalary() / 100;
    } else {
      return 5 * e.getSalary() / 100;
    }
  } else if (person instanceof BusinessOwner) {
    return 10 * e.getProfit() / 100;
  } else if (person instanceof Veteran) {
    return 0;
  }
  // null return for double wrapper class
  return null;
}"
629,2.5,2.5,0.0,0.0,2017-04-24 18:58:34.355647,38,341,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""public Double call() {\n    double result = 1;\n    for (int i = 0; i < n; i++) {\n        result *= m;\n        try {\n            Thread.sleep(10);\n        } catch (InterruptedException ex) {\n            ex.printStackTrace();\n        }\n    }\n    System.out.printf(\""%nComputed %.02f raised to %d%n\"", m, n);\n    return result;\n}\n"",""rating"":3},""code"":""public Double getTax(Person person) {\n  if (person instanceof Employee) {\n    Employee e = (Employee) person;\n    if (e.getSalary() < 10000) {\n      // Percentage of salary\n      return 2 * e.getSalary() / 100;\n    } else {\n      return 5 * e.getSalary() / 100;\n    }\n  } else if (person instanceof BusinessOwner) {\n    return 10 * e.getProfit() / 100;\n  } else if (person instanceof Veteran) {\n    return 0;\n  }\n  // null return for double wrapper class\n  return null;\n}""}"
630,2.5,2.5,4.0,0.0,2017-04-24 18:58:51.773726,38,,"public Double getTax(Person person) {
  if (person instanceof Employee) {
    Employee e = (Employee) person;
    if (e.getSalary() < 10000) {
      // Percentage of salary
      return 2 * e.getSalary() / 100;
    } else {
      return 5 * e.getSalary() / 100;
    }
  } else if (person instanceof BusinessOwner) {
    return 10 * e.getProfit() / 100;
  } else if (person instanceof Veteran) {
    return 0;
  }
  // null return for double wrapper class
  return null;
}"
631,2.5,2.5,4.0,0.0,2017-04-24 18:59:04.381939,38,342,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""public Double call() {\n    double result = 1;\n    for (int i = 0; i < n; i++) {\n        result *= m;\n        try {\n            Thread.sleep(10);\n        } catch (InterruptedException ex) {\n            ex.printStackTrace();\n        }\n    }\n    System.out.printf(\""%nComputed %.02f raised to %d%n\"", m, n);\n    return result;\n}\n"",""rating"":3},""code"":""public Double getTax(Person person) {\n  if (person instanceof Employee) {\n    Employee e = (Employee) person;\n    if (e.getSalary() < 10000) {\n      // Percentage of salary\n      return 2 * e.getSalary() / 100;\n    } else {\n      return 5 * e.getSalary() / 100;\n    }\n  } else if (person instanceof BusinessOwner) {\n    return 10 * e.getProfit() / 100;\n  } else if (person instanceof Veteran) {\n    return 0;\n  }\n  // null return for double wrapper class\n  return null;\n}""}"
632,1.0,3.5,1.0,1.0,2017-04-24 19:06:55.560492,38,,"// largest difference between array elements
public int maxDiffArr(int[] a) {
  
}"
633,1.0,4.0,1.0,1.0,2017-04-24 19:06:57.388859,38,,"// largest difference between array elements
public int maxDiffArr(int[] a) {
  
}"
634,1.0,4.0,1.0,1.0,2017-04-24 19:07:48.482147,38,343,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static <E extends Comparable<E>> E max(E[] a) {\n    E largest = a[0];\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":4},""code"":""// largest difference between array elements\npublic int maxDiffArr(int[] a) {\n  \n}""}"
635,1.0,4.0,1.0,1.0,2017-04-24 19:07:56.360882,38,344,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""public static <E extends Comparable<? super E>> E max(ArrayList<E> a) // public static <E extends Comparable<E>> E max(ArrayList<E> a) \n// doesn't work with Student array list\n{\n    E largest = a.get(0);\n    for (int i = 1; i < a.size(); i++) {\n        if (a.get(i).compareTo(largest) > 0) {\n            largest = a.get(i);\n        }\n    }\n    return largest;\n}\n"",""rating"":4},""code"":""// largest difference between array elements\npublic int maxDiffArr(int[] a) {\n  \n}""}"
636,1.0,4.0,1.0,5.0,2017-04-24 19:08:33.990944,38,,"// largest difference between array elements
public int maxDiffArr(int[] a) {
  // hashmap
  
}"
637,1.0,4.0,1.0,5.0,2017-04-24 19:14:29.228299,38,345,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""public static void main(String[] argv) {\n    // Construct and load the hash. This simulates loading a\n    // database or reading from a file, or wherever the data is.\n    Map<String, String> map = new HashMap<String, String>();\n    // The hash maps from company name to address.\n    // In real life this might map to an Address object...\n    map.put(\""Adobe\"", \""Mountain View, CA\"");\n    map.put(\""IBM\"", \""White Plains, NY\"");\n    map.put(\""Learning Tree\"", \""Los Angeles, CA\"");\n    map.put(\""Microsoft\"", \""Redmond, WA\"");\n    map.put(\""Netscape\"", \""Mountain View, CA\"");\n    map.put(\""O'Reilly\"", \""Sebastopol, CA\"");\n    map.put(\""Sun\"", \""Mountain View, CA\"");\n    // BEGIN SafeRemoval\n    // Version 2: get ALL the keys and values \n    // with concurrent modification\n    Iterator<String> it = map.keySet().iterator();\n    while (it.hasNext()) {\n        String key = it.next();\n        if (key.equals(\""Sun\"")) {\n            it.remove();\n            continue;\n        }\n        System.out.println(\""Company \"" + key + \""; \"" + \""Address \"" + map.get(key));\n    }\n// END SafeRemoval\n}\n"",""rating"":2},""code"":""// largest difference between array elements\npublic int maxDiffArr(int[] a) {\n  Map<Integer> map = new HashMap<>();\n  \n}""}"
638,1.0,4.0,1.0,5.0,2017-04-24 19:16:08.020401,38,346,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""public static void main(String[] args) {\n    int[] a = ArrayUtil.randomIntArray(20, 100);\n    System.out.println(Arrays.toString(a));\n    MergeSorter.sort(a);\n    System.out.println(Arrays.toString(a));\n}\n"",""rating"":2},""code"":""// largest difference between array elements\npublic int maxDiffArr(int[] a) {\n  Arrays.sort(a);\n  \n}""}"
639,1.0,4.0,5.0,5.0,2017-04-24 19:16:39.070020,38,,"// largest difference between array elements
public int maxDiffArr(int[] a) {
  Arrays.sort(a);
  return a[a.length - 1] - a[0];
}"
640,1.0,2.0,5.0,5.0,2017-04-24 19:16:41.381041,38,,"// largest difference between array elements
public int maxDiffArr(int[] a) {
  Arrays.sort(a);
  return a[a.length - 1] - a[0];
}"
641,1.0,2.0,5.0,0.0,2017-04-24 19:16:44.221255,38,,"// largest difference between array elements
public int maxDiffArr(int[] a) {
  Arrays.sort(a);
  return a[a.length - 1] - a[0];
}"
642,1.0,2.0,4.0,0.0,2017-04-24 19:16:46.323433,38,,"// largest difference between array elements
public int maxDiffArr(int[] a) {
  Arrays.sort(a);
  return a[a.length - 1] - a[0];
}"
643,1.0,2.0,4.0,5.0,2017-04-24 19:17:19.668214,38,,"// largest difference between array elements
public int maxDiffArr(int[] a) {
  // sort the array in increasing order
  Arrays.sort(a);
  // difference between the last and first is the max difference
  return a[a.length - 1] - a[0];
}"
644,1.0,2.0,4.0,5.0,2017-04-24 19:17:32.124724,38,347,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""/**\n        * Sort the numbers in A[0], A[1], ..., A[count-1] into\n        * increasing order using Selection Sort.\n        */\nstatic void selectionSort(double[] A, int count) {\n    for (int lastPlace = count - 1; lastPlace > 0; lastPlace--) {\n        int maxLoc = 0;\n        for (int j = 1; j <= lastPlace; j++) {\n            if (A[j] > A[maxLoc]) {\n                maxLoc = j;\n            }\n        }\n        double temp = A[maxLoc];\n        A[maxLoc] = A[lastPlace];\n        A[lastPlace] = temp;\n    }\n}\n"",""rating"":2},""code"":""// largest difference between array elements\npublic int maxDiffArr(int[] a) {\n  // sort the array in increasing order\n  Arrays.sort(a);\n  // difference between the last and first is the max difference\n  return a[a.length - 1] - a[0];\n}""}"
645,1.0,2.0,4.0,5.0,2017-04-24 19:24:47.112879,38,348,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""/**\n        * Sort the numbers in A[0], A[1], ..., A[count-1] into\n        * increasing order using Selection Sort.\n        */\nstatic void selectionSort(double[] A, int count) {\n    for (int lastPlace = count - 1; lastPlace > 0; lastPlace--) {\n        int maxLoc = 0;\n        for (int j = 1; j <= lastPlace; j++) {\n            if (A[j] > A[maxLoc]) {\n                maxLoc = j;\n            }\n        }\n        double temp = A[maxLoc];\n        A[maxLoc] = A[lastPlace];\n        A[lastPlace] = temp;\n    }\n}\n"",""rating"":4},""code"":""// largest difference between array elements\npublic int maxDiffArr(int[] a) {\n  // sort the array in increasing order\n  Arrays.sort(a);\n  // difference between the last and first array elements\n  // is the max difference\n  return a[a.length - 1] - a[0];\n}""}"
646,5.0,2.0,4.0,5.0,2017-04-24 19:25:22.677523,38,,"// largest difference between array elements
public int maxDiffArr(int[] a) {
  // sort the array in increasing order
  Arrays.sort(a);
  // difference between the last and first array elements
  // is the max difference
  return a[a.length - 1] - a[0];
}"
647,5.0,1.0,4.0,5.0,2017-04-24 19:25:26.079992,38,,"// largest difference between array elements
public int maxDiffArr(int[] a) {
  // sort the array in increasing order
  Arrays.sort(a);
  // difference between the last and first array elements
  // is the max difference
  return a[a.length - 1] - a[0];
}"
648,5.0,1.0,4.0,5.0,2017-04-24 19:26:33.204292,38,349,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static <E extends Comparable<E>> E max(E[] a) {\n    E largest = a[0];\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":1},""code"":""// largest difference between array elements\npublic int maxDiffArr(int[] a) {\n  // sort the array in increasing order\n  Arrays.sort(a);\n  // difference between the last and first array elements\n  // is the max difference\n  return a[a.length - 1] - a[0];\n}""}"
649,5.0,1.0,4.0,5.0,2017-04-24 19:26:42.411753,38,350,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""public static <E extends Comparable<? super E>> E max(ArrayList<E> a) // public static <E extends Comparable<E>> E max(ArrayList<E> a) \n// doesn't work with Student array list\n{\n    E largest = a.get(0);\n    for (int i = 1; i < a.size(); i++) {\n        if (a.get(i).compareTo(largest) > 0) {\n            largest = a.get(i);\n        }\n    }\n    return largest;\n}\n"",""rating"":1},""code"":""// largest difference between array elements\npublic int maxDiffArr(int[] a) {\n  // sort the array in increasing order\n  Arrays.sort(a);\n  // difference between the last and first array elements\n  // is the max difference\n  return a[a.length - 1] - a[0];\n}""}"
650,5.0,1.0,4.0,4.0,2017-04-24 19:26:47.143060,38,,"// largest difference between array elements
public int maxDiffArr(int[] a) {
  // sort the array in increasing order
  Arrays.sort(a);
  // difference between the last and first array elements
  // is the max difference
  return a[a.length - 1] - a[0];
}"
651,5.0,1.0,4.0,1.0,2017-04-24 19:26:50.659753,38,,"// largest difference between array elements
public int maxDiffArr(int[] a) {
  // sort the array in increasing order
  Arrays.sort(a);
  // difference between the last and first array elements
  // is the max difference
  return a[a.length - 1] - a[0];
}"
652,5.0,2.5,4.0,1.0,2017-04-24 19:26:55.994870,38,,"// largest difference between array elements
public int maxDiffArr(int[] a) {
  // sort the array in increasing order
  Arrays.sort(a);
  // difference between the last and first array elements
  // is the max difference
  return a[a.length - 1] - a[0];
}"
653,4.0,2.5,4.0,1.0,2017-04-24 19:26:57.940762,38,,"// largest difference between array elements
public int maxDiffArr(int[] a) {
  // sort the array in increasing order
  Arrays.sort(a);
  // difference between the last and first array elements
  // is the max difference
  return a[a.length - 1] - a[0];
}"
654,4.0,2.5,4.0,1.0,2017-04-24 19:26:58.527703,38,,"// largest difference between array elements
public int maxDiffArr(int[] a) {
  // sort the array in increasing order
  Arrays.sort(a);
  // difference between the last and first array elements
  // is the max difference
  return a[a.length - 1] - a[0];
}"
655,4.0,2.5,4.0,1.0,2017-04-24 19:27:21.843183,38,351,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""// The other three methods are pretty simple too\n// END main\npublic int subtract(int a, int b) {\n    System.out.println(\""CalcImpl.subtract()\"");\n    return a - b;\n}\n"",""rating"":1},""code"":""// largest difference between array elements\npublic int maxDiffArr(int[] a) {\n  // sort the array in increasing order\n  Arrays.sort(a);\n  // difference between the last and first array elements\n  // is the max difference\n  return a[a.length - 1] - a[0];\n}""}"
656,4.0,2.5,4.0,1.0,2017-04-24 19:27:35.011998,38,,"// largest difference between array elements
public int maxDiffArr(int[] a) {
  // sort the array in increasing order
  Arrays.sort(a);
  // difference between the last and first array elements
  // is the max difference
  return a[a.length - 1] - a[0];
}"
657,4.0,5.0,4.0,1.0,2017-04-24 19:27:37.632259,38,,"// largest difference between array elements
public int maxDiffArr(int[] a) {
  // sort the array in increasing order
  Arrays.sort(a);
  // difference between the last and first array elements
  // is the max difference
  return a[a.length - 1] - a[0];
}"
658,2.0,5.0,4.0,1.0,2017-04-24 19:27:39.897419,38,,"// largest difference between array elements
public int maxDiffArr(int[] a) {
  // sort the array in increasing order
  Arrays.sort(a);
  // difference between the last and first array elements
  // is the max difference
  return a[a.length - 1] - a[0];
}"
659,2.0,5.0,2.0,1.0,2017-04-24 19:27:42.569905,38,,"// largest difference between array elements
public int maxDiffArr(int[] a) {
  // sort the array in increasing order
  Arrays.sort(a);
  // difference between the last and first array elements
  // is the max difference
  return a[a.length - 1] - a[0];
}"
660,2.0,2.5,2.0,1.0,2017-04-24 19:31:20.523311,38,,"// largest difference between array elements
public int maxDiffArr(int[] a) {
  // sort the array in increasing order
  Arrays.sort(a);
  // difference between the last and first array elements
  // is the max difference
  return a[a.length - 1] - a[0];
}"
661,2.0,2.5,4.0,1.0,2017-04-24 19:31:21.506001,38,,"// largest difference between array elements
public int maxDiffArr(int[] a) {
  // sort the array in increasing order
  Arrays.sort(a);
  // difference between the last and first array elements
  // is the max difference
  return a[a.length - 1] - a[0];
}"
662,2.0,2.5,4.0,1.0,2017-04-24 19:31:31.793316,38,352,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""// The other three methods are pretty simple too\n// END main\npublic int subtract(int a, int b) {\n    System.out.println(\""CalcImpl.subtract()\"");\n    return a - b;\n}\n"",""rating"":2},""code"":""// largest difference between array elements\npublic int maxDiffArr(int[] a) {\n  // sort the array in increasing order\n  Arrays.sort(a);\n  // difference between the last and first array elements\n  // is the max difference\n  return a[a.length - 1] - a[0];\n}""}"
663,2.0,2.5,4.0,1.0,2017-04-24 19:31:36.300294,38,353,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""public static <E extends Comparable<? super E>> E max(ArrayList<E> a) // public static <E extends Comparable<E>> E max(ArrayList<E> a) \n// doesn't work with Student array list\n{\n    E largest = a.get(0);\n    for (int i = 1; i < a.size(); i++) {\n        if (a.get(i).compareTo(largest) > 0) {\n            largest = a.get(i);\n        }\n    }\n    return largest;\n}\n"",""rating"":1},""code"":""// largest difference between array elements\npublic int maxDiffArr(int[] a) {\n  // sort the array in increasing order\n  Arrays.sort(a);\n  // difference between the last and first array elements\n  // is the max difference\n  return a[a.length - 1] - a[0];\n}""}"
664,2.0,2.5,4.0,1.0,2017-04-24 19:31:40.642144,38,354,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""/**\n      Computes the largest value of an array.\n      @param a the array\n      @return the largest value in a\n   */\npublic static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":2},""code"":""// largest difference between array elements\npublic int maxDiffArr(int[] a) {\n  // sort the array in increasing order\n  Arrays.sort(a);\n  // difference between the last and first array elements\n  // is the max difference\n  return a[a.length - 1] - a[0];\n}""}"
665,2.0,2.5,4.0,1.0,2017-04-24 19:31:48.873310,38,355,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""/**\n        * Sort the numbers in A[0], A[1], ..., A[count-1] into\n        * increasing order using Selection Sort.\n        */\nstatic void selectionSort(double[] A, int count) {\n    for (int lastPlace = count - 1; lastPlace > 0; lastPlace--) {\n        int maxLoc = 0;\n        for (int j = 1; j <= lastPlace; j++) {\n            if (A[j] > A[maxLoc]) {\n                maxLoc = j;\n            }\n        }\n        double temp = A[maxLoc];\n        A[maxLoc] = A[lastPlace];\n        A[lastPlace] = temp;\n    }\n}\n"",""rating"":3},""code"":""// largest difference between array elements\npublic int maxDiffArr(int[] a) {\n  // sort the array in increasing order\n  Arrays.sort(a);\n  // difference between the last and first array elements\n  // is the max difference\n  return a[a.length - 1] - a[0];\n}""}"
666,1.0,1.0,1.0,2.0,2017-04-24 20:00:39.115925,40,,
667,1.0,2.0,1.0,2.0,2017-04-24 20:00:44.408433,40,,
668,2.0,2.0,1.0,2.0,2017-04-24 20:00:48.665570,40,,
669,2.0,2.0,1.0,2.0,2017-04-24 20:16:42.748064,40,,"// calculate tax for Employee
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran
public double calculateTax(Veteran v){
  return 0;
}"
670,2.0,2.0,5.0,2.0,2017-04-24 20:16:43.944122,40,,"// calculate tax for Employee
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran
public double calculateTax(Veteran v){
  return 0;
}"
671,2.0,2.0,5.0,3.0,2017-04-24 20:21:33.432217,40,,"// Function overloading for different parameters
// calculate tax for Employee
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran
public double calculateTax(Veteran v){
  return 0;
}"
672,2.0,2.0,5.0,3.0,2017-04-24 20:26:18.599754,40,356,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""public double weeklyPay(int hoursWorked) {\n    double pay = hoursWorked * hourlyWage;\n    if (hoursWorked > 40) {\n        // Add overtime\n        pay = pay + ((hoursWorked - 40) * 0.5) * hourlyWage;\n    }\n    return pay;\n}\n"",""rating"":3},""code"":""// Function overloading for different parameters\n// calculate tax for Employee\npublic double calculateTax(Employee e){\n  double sal = e.getSalary();\n  if (sal < 100000){\n    return sal * 0.02;\n  }\n  else{\n    return sal * 0.05;\n  }\n}\n\n// calculate tax for BusinessOwner\npublic double calculateTax(BusinessOwner b){\n  return b.getProfit() * 0.1;\n}\n\n// calculate tax for Veteran\npublic double calculateTax(Veteran v){\n  return 0;\n}\n\n// calculate tax for Person\npublic double calculateTax(Person p){\n  return 0;\n}""}"
673,2.0,2.0,5.0,3.0,2017-04-24 20:26:22.291412,40,357,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""/**\n      Gets the name of this employee.\n      @return the name \n   */\npublic String getName() {\n    return name;\n}\n"",""rating"":2},""code"":""// Function overloading for different parameters\n// calculate tax for Employee\npublic double calculateTax(Employee e){\n  double sal = e.getSalary();\n  if (sal < 100000){\n    return sal * 0.02;\n  }\n  else{\n    return sal * 0.05;\n  }\n}\n\n// calculate tax for BusinessOwner\npublic double calculateTax(BusinessOwner b){\n  return b.getProfit() * 0.1;\n}\n\n// calculate tax for Veteran\npublic double calculateTax(Veteran v){\n  return 0;\n}\n\n// calculate tax for Person\npublic double calculateTax(Person p){\n  return 0;\n}""}"
674,2.0,2.0,5.0,3.0,2017-04-24 20:26:31.307977,40,358,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""/**\n      Constructs an employee with an empty name.\n   */\npublic Employee() {\n    name = \""\"";\n}\n"",""rating"":1},""code"":""// Function overloading for different parameters\n// calculate tax for Employee\npublic double calculateTax(Employee e){\n  double sal = e.getSalary();\n  if (sal < 100000){\n    return sal * 0.02;\n  }\n  else{\n    return sal * 0.05;\n  }\n}\n\n// calculate tax for BusinessOwner\npublic double calculateTax(BusinessOwner b){\n  return b.getProfit() * 0.1;\n}\n\n// calculate tax for Veteran\npublic double calculateTax(Veteran v){\n  return 0;\n}\n\n// calculate tax for Person\npublic double calculateTax(Person p){\n  return 0;\n}""}"
675,2.0,2.0,5.0,3.0,2017-04-24 20:26:43.368411,40,359,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""public double getTax() {\n    double tax1 = 0;\n    double tax2 = 0;\n    if (status == SINGLE) {\n        if (income <= RATE1_SINGLE_LIMIT) {\n            tax1 = RATE1 * income;\n        } else {\n            tax1 = RATE1 * RATE1_SINGLE_LIMIT;\n            tax2 = RATE2 * (income - RATE1_SINGLE_LIMIT);\n        }\n    } else {\n        if (income <= RATE1_MARRIED_LIMIT) {\n            tax1 = RATE1 * income;\n        } else {\n            tax1 = RATE1 * RATE1_MARRIED_LIMIT;\n            tax2 = RATE2 * (income - RATE1_MARRIED_LIMIT);\n        }\n    }\n    return tax1 + tax2;\n}\n"",""rating"":3},""code"":""// Function overloading for different parameters\n// calculate tax for Employee\npublic double calculateTax(Employee e){\n  double sal = e.getSalary();\n  if (sal < 100000){\n    return sal * 0.02;\n  }\n  else{\n    return sal * 0.05;\n  }\n}\n\n// calculate tax for BusinessOwner\npublic double calculateTax(BusinessOwner b){\n  return b.getProfit() * 0.1;\n}\n\n// calculate tax for Veteran\npublic double calculateTax(Veteran v){\n  return 0;\n}\n\n// calculate tax for Person\npublic double calculateTax(Person p){\n  return 0;\n}""}"
676,2.0,2.0,5.0,3.0,2017-04-24 20:26:50.494839,40,360,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""public double getAverageScore(int studentId) {\n    double total = 0;\n    for (double x : scores) {\n        total = total + x;\n    }\n    return total / scores.size();\n}\n"",""rating"":1},""code"":""// Function overloading for different parameters\n// calculate tax for Employee\npublic double calculateTax(Employee e){\n  double sal = e.getSalary();\n  if (sal < 100000){\n    return sal * 0.02;\n  }\n  else{\n    return sal * 0.05;\n  }\n}\n\n// calculate tax for BusinessOwner\npublic double calculateTax(BusinessOwner b){\n  return b.getProfit() * 0.1;\n}\n\n// calculate tax for Veteran\npublic double calculateTax(Veteran v){\n  return 0;\n}\n\n// calculate tax for Person\npublic double calculateTax(Person p){\n  return 0;\n}""}"
677,2.0,2.0,5.0,3.0,2017-04-24 20:27:16.185992,40,361,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""/**\n      Gets the surface area of this pyramid.\n      @return the surface area, not including the base\n   */\npublic double getSurfaceArea() {\n    double sideLength = Math.sqrt(height * height + baseLength * baseLength / 4);\n    return 2 * baseLength * sideLength;\n}\n"",""rating"":1},""code"":""// Function overloading for different parameters\n// calculate tax for Employee\npublic double calculateTax(Employee e){\n  double sal = e.getSalary();\n  if (sal < 100000){\n    return sal * 0.02;\n  }\n  else{\n    return sal * 0.05;\n  }\n}\n\n// calculate tax for BusinessOwner\npublic double calculateTax(BusinessOwner b){\n  return b.getProfit() * 0.1;\n}\n\n// calculate tax for Veteran\npublic double calculateTax(Veteran v){\n  return 0;\n}\n\n// calculate tax for Person\npublic double calculateTax(Person p){\n  return 0;\n}""}"
678,2.0,2.0,5.0,3.0,2017-04-24 20:27:39.174918,40,362,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""// Function overloading for different parameters\n// calculate tax for Employee\npublic double calculateTax(Employee e){\n  double sal = e.getSalary();\n  if (sal < 100000){\n    return sal * 0.02;\n  }\n  else{\n    return sal * 0.05;\n  }\n}\n\n// calculate tax for BusinessOwner\npublic double calculateTax(BusinessOwner b){\n  return b.getProfit() * 0.1;\n}\n\n// calculate tax for Veteran\npublic double calculateTax(Veteran v){\n  return 0;\n}\n\n// calculate tax for Person\npublic double calculateTax(Person p){\n  return 0;\n}""}"
679,2.0,2.0,5.0,3.0,2017-04-24 20:27:45.150602,40,363,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", targetDate = \""Jan 1, 2012\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":2},""code"":""// Function overloading for different parameters\n// calculate tax for Employee\npublic double calculateTax(Employee e){\n  double sal = e.getSalary();\n  if (sal < 100000){\n    return sal * 0.02;\n  }\n  else{\n    return sal * 0.05;\n  }\n}\n\n// calculate tax for BusinessOwner\npublic double calculateTax(BusinessOwner b){\n  return b.getProfit() * 0.1;\n}\n\n// calculate tax for Veteran\npublic double calculateTax(Veteran v){\n  return 0;\n}\n\n// calculate tax for Person\npublic double calculateTax(Person p){\n  return 0;\n}""}"
680,2.0,2.0,3.0,3.0,2017-04-24 20:28:09.067977,40,,"// Function overloading for different parameters
// calculate tax for Employee
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran
public double calculateTax(Veteran v){
  return 0;
}

// calculate tax for Person
public double calculateTax(Person p){
  return 0;
}"
681,2.0,2.0,4.5,3.0,2017-04-24 20:28:11.507338,40,,"// Function overloading for different parameters
// calculate tax for Employee
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran
public double calculateTax(Veteran v){
  return 0;
}

// calculate tax for Person
public double calculateTax(Person p){
  return 0;
}"
682,0.0,2.0,4.5,3.0,2017-04-24 20:28:14.833989,40,,"// Function overloading for different parameters
// calculate tax for Employee
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran
public double calculateTax(Veteran v){
  return 0;
}

// calculate tax for Person
public double calculateTax(Person p){
  return 0;
}"
683,0.0,5.0,4.5,3.0,2017-04-24 20:28:25.266526,40,,"// Function overloading for different parameters
// calculate tax for Employee
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran
public double calculateTax(Veteran v){
  return 0;
}

// calculate tax for Person
public double calculateTax(Person p){
  return 0;
}"
684,0.0,5.0,2.0,3.0,2017-04-24 20:28:26.690574,40,,"// Function overloading for different parameters
// calculate tax for Employee
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran
public double calculateTax(Veteran v){
  return 0;
}

// calculate tax for Person
public double calculateTax(Person p){
  return 0;
}"
685,0.0,5.0,2.0,1.5,2017-04-24 20:28:27.889179,40,,"// Function overloading for different parameters
// calculate tax for Employee
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran
public double calculateTax(Veteran v){
  return 0;
}

// calculate tax for Person
public double calculateTax(Person p){
  return 0;
}"
686,0.0,0.0,2.0,1.5,2017-04-24 20:28:40.584951,40,,"// Function overloading for different parameters
// calculate tax for Employee
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran
public double calculateTax(Veteran v){
  return 0;
}

// calculate tax for Person
public double calculateTax(Person p){
  return 0;
}"
687,0.0,0.0,0.0,1.5,2017-04-24 20:28:41.608466,40,,"// Function overloading for different parameters
// calculate tax for Employee
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran
public double calculateTax(Veteran v){
  return 0;
}

// calculate tax for Person
public double calculateTax(Person p){
  return 0;
}"
688,0.0,0.0,0.0,0.0,2017-04-24 20:28:42.483256,40,,"// Function overloading for different parameters
// calculate tax for Employee
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran
public double calculateTax(Veteran v){
  return 0;
}

// calculate tax for Person
public double calculateTax(Person p){
  return 0;
}"
689,5.0,0.0,0.0,0.0,2017-04-24 20:28:43.497935,40,,"// Function overloading for different parameters
// calculate tax for Employee
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran
public double calculateTax(Veteran v){
  return 0;
}

// calculate tax for Person
public double calculateTax(Person p){
  return 0;
}"
690,5.0,0.0,0.0,5.0,2017-04-24 20:29:22.868135,40,,"// Method overloading for different types of parameters
// calculate tax for Employee
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran
public double calculateTax(Veteran v){
  return 0;
}

// calculate tax for Person
public double calculateTax(Person p){
  return 0;
}"
691,5.0,2.5,0.0,5.0,2017-04-24 20:29:42.702409,40,,"// Method overloading for different types of parameters
// calculate tax for Employee
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran
public double calculateTax(Veteran v){
  return 0;
}

// calculate tax for Person
public double calculateTax(Person p){
  return 0;
}"
692,1.5,2.5,0.0,5.0,2017-04-24 20:29:43.874743,40,,"// Method overloading for different types of parameters
// calculate tax for Employee
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran
public double calculateTax(Veteran v){
  return 0;
}

// calculate tax for Person
public double calculateTax(Person p){
  return 0;
}"
693,1.5,5.0,0.0,5.0,2017-04-24 20:29:47.505695,40,,"// Method overloading for different types of parameters
// calculate tax for Employee
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran
public double calculateTax(Veteran v){
  return 0;
}

// calculate tax for Person
public double calculateTax(Person p){
  return 0;
}"
694,1.5,0.0,0.0,5.0,2017-04-24 20:29:55.473781,40,,"// Method overloading for different types of parameters
// calculate tax for Employee
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran
public double calculateTax(Veteran v){
  return 0;
}

// calculate tax for Person
public double calculateTax(Person p){
  return 0;
}"
695,1.5,0.0,0.0,5.0,2017-04-24 20:30:22.105087,40,364,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""/**\n      Computes the change due and resets the machine for the next customer.\n      @return the change due to the customer\n   */\npublic double giveChange() {\n    double change = payment - purchase - get;\n    purchase = 0;\n    payment = 0;\n    return change;\n}\n"",""rating"":1},""code"":""// Method overloading for different types of parameters\n// calculate tax for Employee\npublic double calculateTax(Employee e){\n  double sal = e.getSalary();\n  if (sal < 100000){\n    return sal * 0.02;\n  }\n  else{\n    return sal * 0.05;\n  }\n}\n\n// calculate tax for BusinessOwner\npublic double calculateTax(BusinessOwner b){\n  return b.getProfit() * 0.1;\n}\n\n// calculate tax for Veteran\npublic double calculateTax(Veteran v){\n  return 0;\n}\n\n// calculate tax for Person\npublic double calculateTax(Person p){\n  return 0;\n}""}"
696,1.5,0.0,0.0,0.0,2017-04-24 20:30:36.890308,40,,"// Method overloading for different types of parameters
// calculate tax for Employee
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran
public double calculateTax(Veteran v){
  return 0;
}

// calculate tax for Person
public double calculateTax(Person p){
  return 0;
}"
697,1.5,5.0,0.0,0.0,2017-04-24 20:30:38.480768,40,,"// Method overloading for different types of parameters
// calculate tax for Employee
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran
public double calculateTax(Veteran v){
  return 0;
}

// calculate tax for Person
public double calculateTax(Person p){
  return 0;
}"
698,1.5,5.0,0.0,0.0,2017-04-24 20:30:53.599106,40,365,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""public double getTax() {\n    double tax1 = 0;\n    double tax2 = 0;\n    if (status == SINGLE) {\n        if (income <= RATE1_SINGLE_LIMIT) {\n            tax1 = RATE1 * income;\n        } else {\n            tax1 = RATE1 * RATE1_SINGLE_LIMIT;\n            tax2 = RATE2 * (income - RATE1_SINGLE_LIMIT);\n        }\n    } else {\n        if (income <= RATE1_MARRIED_LIMIT) {\n            tax1 = RATE1 * income;\n        } else {\n            tax1 = RATE1 * RATE1_MARRIED_LIMIT;\n            tax2 = RATE2 * (income - RATE1_MARRIED_LIMIT);\n        }\n    }\n    return tax1 + tax2;\n}\n"",""rating"":3},""code"":""// Method overloading for different types of parameters\n// calculate tax for Employee\npublic double calculateTax(Employee e){\n  double sal = e.getSalary();\n  if (sal < 100000){\n    return sal * 0.02;\n  }\n  else{\n    return sal * 0.05;\n  }\n}\n\n// calculate tax for BusinessOwner\npublic double calculateTax(BusinessOwner b){\n  return b.getProfit() * 0.1;\n}\n\n// calculate tax for Veteran\npublic double calculateTax(Veteran v){\n  return 0;\n}\n\n// calculate tax for Person\npublic double calculateTax(Person p){\n  return 0;\n}""}"
699,1.5,0.0,0.0,0.0,2017-04-24 20:30:59.450428,40,,"// Method overloading for different types of parameters
// calculate tax for Employee
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran
public double calculateTax(Veteran v){
  return 0;
}

// calculate tax for Person
public double calculateTax(Person p){
  return 0;
}"
700,1.5,0.0,5.0,0.0,2017-04-24 20:31:00.811417,40,,"// Method overloading for different types of parameters
// calculate tax for Employee
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran
public double calculateTax(Veteran v){
  return 0;
}

// calculate tax for Person
public double calculateTax(Person p){
  return 0;
}"
701,0.0,0.0,5.0,0.0,2017-04-24 20:31:08.137677,40,,"// Method overloading for different types of parameters
// calculate tax for Employee
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran
public double calculateTax(Veteran v){
  return 0;
}

// calculate tax for Person
public double calculateTax(Person p){
  return 0;
}"
702,0.0,0.0,5.0,5.0,2017-04-24 20:31:10.765862,40,,"// Method overloading for different types of parameters
// calculate tax for Employee
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran
public double calculateTax(Veteran v){
  return 0;
}

// calculate tax for Person
public double calculateTax(Person p){
  return 0;
}"
703,0.0,0.0,3.0,5.0,2017-04-24 20:31:23.106033,40,,"// Method overloading for different types of parameters
// calculate tax for Employee
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran
public double calculateTax(Veteran v){
  return 0;
}

// calculate tax for Person
public double calculateTax(Person p){
  return 0;
}"
704,0.0,0.0,3.0,5.0,2017-04-24 20:31:28.967049,40,366,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""public double getTax() {\n    double tax1 = 0;\n    double tax2 = 0;\n    if (status == SINGLE) {\n        if (income <= RATE1_SINGLE_LIMIT) {\n            tax1 = RATE1 * income;\n        } else {\n            tax1 = RATE1 * RATE1_SINGLE_LIMIT;\n            tax2 = RATE2 * (income - RATE1_SINGLE_LIMIT);\n        }\n    } else {\n        if (income <= RATE1_MARRIED_LIMIT) {\n            tax1 = RATE1 * income;\n        } else {\n            tax1 = RATE1 * RATE1_MARRIED_LIMIT;\n            tax2 = RATE2 * (income - RATE1_MARRIED_LIMIT);\n        }\n    }\n    return tax1 + tax2;\n}\n"",""rating"":2},""code"":""// Method overloading for different types of parameters\n// calculate tax for Employee\npublic double calculateTax(Employee e){\n  double sal = e.getSalary();\n  if (sal < 100000){\n    return sal * 0.02;\n  }\n  else{\n    return sal * 0.05;\n  }\n}\n\n// calculate tax for BusinessOwner\npublic double calculateTax(BusinessOwner b){\n  return b.getProfit() * 0.1;\n}\n\n// calculate tax for Veteran\npublic double calculateTax(Veteran v){\n  return 0;\n}\n\n// calculate tax for Person\npublic double calculateTax(Person p){\n  return 0;\n}""}"
705,0.0,0.0,2.5,5.0,2017-04-24 20:32:02.722061,40,,"// Method overloading for different types of parameters
// calculate tax for Employee
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran
public double calculateTax(Veteran v){
  return 0;
}

// calculate tax for Person
public double calculateTax(Person p){
  return 0;
}"
706,0.0,0.0,2.5,3.5,2017-04-24 20:32:04.496804,40,,"// Method overloading for different types of parameters
// calculate tax for Employee
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran
public double calculateTax(Veteran v){
  return 0;
}

// calculate tax for Person
public double calculateTax(Person p){
  return 0;
}"
707,1.0,0.0,2.5,3.5,2017-04-24 20:32:07.041066,40,,"// Method overloading for different types of parameters
// calculate tax for Employee
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran
public double calculateTax(Veteran v){
  return 0;
}

// calculate tax for Person
public double calculateTax(Person p){
  return 0;
}"
708,1.0,1.5,2.5,3.5,2017-04-24 20:32:09.306949,40,,"// Method overloading for different types of parameters
// calculate tax for Employee
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran
public double calculateTax(Veteran v){
  return 0;
}

// calculate tax for Person
public double calculateTax(Person p){
  return 0;
}"
709,1.0,1.5,2.5,3.5,2017-04-24 20:32:23.982286,40,367,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""public double getAverageScore(int studentId) {\n    double total = 0;\n    for (double x : scores) {\n        total = total + x;\n    }\n    return total / scores.size();\n}\n"",""rating"":3},""code"":""// Method overloading for different types of parameters\n// calculate tax for Employee\npublic double calculateTax(Employee e){\n  double sal = e.getSalary();\n  if (sal < 100000){\n    return sal * 0.02;\n  }\n  else{\n    return sal * 0.05;\n  }\n}\n\n// calculate tax for BusinessOwner\npublic double calculateTax(BusinessOwner b){\n  return b.getProfit() * 0.1;\n}\n\n// calculate tax for Veteran\npublic double calculateTax(Veteran v){\n  return 0;\n}\n\n// calculate tax for Person\npublic double calculateTax(Person p){\n  return 0;\n}""}"
710,1.0,1.5,2.5,4.0,2017-04-24 20:32:45.962688,40,,"// Method overloading for different types of parameters
// calculate tax for Employee object
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner object
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran object
public double calculateTax(Veteran v){
  return 0;
}

// calculate tax for Person object
public double calculateTax(Person p){
  return 0;
}"
711,1.0,1.5,2.5,4.0,2017-04-24 20:33:03.920262,40,368,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""// Method overloading for different types of parameters\n// calculate tax for Employee object\npublic double calculateTax(Employee e){\n  double sal = e.getSalary();\n  if (sal < 100000){\n    return sal * 0.02;\n  }\n  else{\n    return sal * 0.05;\n  }\n}\n\n// calculate tax for BusinessOwner object\npublic double calculateTax(BusinessOwner b){\n  return b.getProfit() * 0.1;\n}\n\n// calculate tax for Veteran object\npublic double calculateTax(Veteran v){\n  return 0;\n}\n\n// calculate tax for Person object\npublic double calculateTax(Person p){\n  return 0;\n}""}"
712,1.0,1.5,2.5,4.0,2017-04-24 20:33:06.600367,40,369,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""/**\n      Gets the name of this employee.\n      @return the name \n   */\npublic String getName() {\n    return name;\n}\n"",""rating"":1},""code"":""// Method overloading for different types of parameters\n// calculate tax for Employee object\npublic double calculateTax(Employee e){\n  double sal = e.getSalary();\n  if (sal < 100000){\n    return sal * 0.02;\n  }\n  else{\n    return sal * 0.05;\n  }\n}\n\n// calculate tax for BusinessOwner object\npublic double calculateTax(BusinessOwner b){\n  return b.getProfit() * 0.1;\n}\n\n// calculate tax for Veteran object\npublic double calculateTax(Veteran v){\n  return 0;\n}\n\n// calculate tax for Person object\npublic double calculateTax(Person p){\n  return 0;\n}""}"
713,1.0,1.5,2.5,4.0,2017-04-24 20:33:18.623743,40,370,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", targetDate = \""Jan 1, 2012\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""// Method overloading for different types of parameters\n// calculate tax for Employee object\npublic double calculateTax(Employee e){\n  double sal = e.getSalary();\n  if (sal < 100000){\n    return sal * 0.02;\n  }\n  else{\n    return sal * 0.05;\n  }\n}\n\n// calculate tax for BusinessOwner object\npublic double calculateTax(BusinessOwner b){\n  return b.getProfit() * 0.1;\n}\n\n// calculate tax for Veteran object\npublic double calculateTax(Veteran v){\n  return 0;\n}\n\n// calculate tax for Person object\npublic double calculateTax(Person p){\n  return 0;\n}""}"
714,1.0,1.0,1.0,4.0,2017-04-24 20:36:04.320871,40,,"public static void main (String args[]){
  // Loop through the array to find the max and min. Return the difference.
}

"
715,1.0,2.5,1.0,4.0,2017-04-24 21:08:58.096556,40,,"public int maxDifference(int[] input){
  if(input.length == 0 || input == null)
    return 0;
  // Loop through the array to find the max and min. Return the difference.
  int max = -2147483648;
  int min = 2147483647;
  
  for(int i = 0; i < input.length; i++){
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max - min;
}


"
716,1.0,2.5,1.0,4.0,2017-04-24 21:09:44.376224,40,371,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""public void run() {\n    count = countPrimes(min, max);\n    System.out.println(\""There are \"" + count + \"" primes between \"" + min + \"" and \"" + max);\n    addToTotal(count);\n}\n"",""rating"":1},""code"":""public int maxDifference(int[] input){\n  if(input.length == 0 || input == null)\n    return 0;\n  // Return the maximum difference of max and min.\n  int max = -2147483648;\n  int min = 2147483647;\n  \n  for(int i = 0; i < input.length; i++){\n    if(input[i] > max)\n      max = input[i];\n    if(input[i] < min)\n      min = input[i];\n  }\n  return max - min;\n}\n\n\n""}"
717,1.0,2.5,1.0,4.0,2017-04-24 21:09:48.324580,40,372,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""public void run() {\n    for (int i = 0; i < numberOfIncrements; i++) {\n        counter.inc();\n    }\n}\n"",""rating"":1},""code"":""public int maxDifference(int[] input){\n  if(input.length == 0 || input == null)\n    return 0;\n  // Return the maximum difference of max and min.\n  int max = -2147483648;\n  int min = 2147483647;\n  \n  for(int i = 0; i < input.length; i++){\n    if(input[i] > max)\n      max = input[i];\n    if(input[i] < min)\n      min = input[i];\n  }\n  return max - min;\n}\n\n\n""}"
718,1.0,2.5,1.0,4.0,2017-04-24 21:09:58.058113,40,373,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""Task(int min, int max) {\n    this.min = min;\n    this.max = max;\n}\n"",""rating"":1},""code"":""public int maxDifference(int[] input){\n  if(input.length == 0 || input == null)\n    return 0;\n  // Return the maximum difference of max and min.\n  int max = -2147483648;\n  int min = 2147483647;\n  \n  for(int i = 0; i < input.length; i++){\n    if(input[i] > max)\n      max = input[i];\n    if(input[i] < min)\n      min = input[i];\n  }\n  return max - min;\n}\n\n\n""}"
719,3.5,2.5,1.0,4.0,2017-04-24 21:10:11.670394,40,,"public int maxDifference(int[] input){
  if(input.length == 0 || input == null)
    return 0;
  // Return the maximum difference of max and min.
  int max = -2147483648;
  int min = 2147483647;
  
  for(int i = 0; i < input.length; i++){
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max - min;
}


"
720,3.5,2.5,2.5,4.0,2017-04-24 21:10:47.927330,40,,"public int maxDifference(int[] input){
  if(input.length == 0 || input == null)
    return 0;
  // Return the maximum difference of max and min.
  int max = -2147483648;
  int min = 2147483647;
  
  for(int i = 0; i < input.length; i++){
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max - min;
}


"
721,3.5,4.0,2.5,4.0,2017-04-24 21:10:49.191961,40,,"public int maxDifference(int[] input){
  if(input.length == 0 || input == null)
    return 0;
  // Return the maximum difference of max and min.
  int max = -2147483648;
  int min = 2147483647;
  
  for(int i = 0; i < input.length; i++){
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max - min;
}


"
722,3.5,4.0,2.5,4.0,2017-04-24 21:10:50.358655,40,,"public int maxDifference(int[] input){
  if(input.length == 0 || input == null)
    return 0;
  // Return the maximum difference of max and min.
  int max = -2147483648;
  int min = 2147483647;
  
  for(int i = 0; i < input.length; i++){
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max - min;
}


"
723,3.5,4.0,2.5,4.0,2017-04-24 21:11:16.987589,40,374,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""// close inner class\npublic void makeTracks(int[] list) {\n    for (int i = 0; i < 16; i++) {\n        int key = list[i];\n        if (key != 0) {\n            track.add(makeEvent(144, 9, key, 100, i));\n            track.add(makeEvent(128, 9, key, 100, i + 1));\n        }\n    }\n}\n"",""rating"":1},""code"":""public int maxDifference(int[] input){\n  if(input.length == 0 || input == null)\n    return 0;\n  // Return the maximum difference of max and min.\n  int max = -2147483648;\n  int min = 2147483647;\n  \n  for(int i = 0; i < input.length; i++){\n    if(input[i] > max)\n      max = input[i];\n    if(input[i] < min)\n      min = input[i];\n  }\n  return max - min;\n}\n\n\n""}"
724,3.5,4.0,2.5,4.0,2017-04-24 21:11:22.650742,40,375,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""Task(int min, int max) {\n    this.min = min;\n    this.max = max;\n}\n"",""rating"":1},""code"":""public int maxDifference(int[] input){\n  if(input.length == 0 || input == null)\n    return 0;\n  // Return the maximum difference of max and min.\n  int max = -2147483648;\n  int min = 2147483647;\n  \n  for(int i = 0; i < input.length; i++){\n    if(input[i] > max)\n      max = input[i];\n    if(input[i] < min)\n      min = input[i];\n  }\n  return max - min;\n}\n\n\n""}"
725,3.5,4.0,2.5,4.0,2017-04-24 21:11:36.643046,40,376,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""// close inner class\n//==============================================================       \npublic void makeTracks(int[] list) {\n    for (int i = 0; i < 16; i++) {\n        int key = list[i];\n        if (key != 0) {\n            track.add(makeEvent(144, 9, key, 100, i));\n            track.add(makeEvent(128, 9, key, 100, i + 1));\n        }\n    }\n}\n"",""rating"":1},""code"":""public int maxDifference(int[] input){\n  if(input.length == 0 || input == null)\n    return 0;\n  // Return the maximum difference of max and min.\n  int max = -2147483648;\n  int min = 2147483647;\n  \n  for(int i = 0; i < input.length; i++){\n    if(input[i] > max)\n      max = input[i];\n    if(input[i] < min)\n      min = input[i];\n  }\n  return max - min;\n}\n\n\n""}"
726,3.5,4.0,2.5,4.0,2017-04-24 21:11:39.482599,40,377,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""public CountDivisorsThread(int min, int max) {\n    this.min = min;\n    this.max = max;\n}\n"",""rating"":1},""code"":""public int maxDifference(int[] input){\n  if(input.length == 0 || input == null)\n    return 0;\n  // Return the maximum difference of max and min.\n  int max = -2147483648;\n  int min = 2147483647;\n  \n  for(int i = 0; i < input.length; i++){\n    if(input[i] > max)\n      max = input[i];\n    if(input[i] < min)\n      min = input[i];\n  }\n  return max - min;\n}\n\n\n""}"
727,3.5,4.0,2.5,4.0,2017-04-24 21:11:45.652965,40,378,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""public CountPrimesThread(int min, int max) {\n    this.min = min;\n    this.max = max;\n}\n"",""rating"":1},""code"":""public int maxDifference(int[] input){\n  if(input.length == 0 || input == null)\n    return 0;\n  // Return the maximum difference of max and min.\n  int max = -2147483648;\n  int min = 2147483647;\n  \n  for(int i = 0; i < input.length; i++){\n    if(input[i] > max)\n      max = input[i];\n    if(input[i] < min)\n      min = input[i];\n  }\n  return max - min;\n}\n\n\n""}"
728,1.5,4.0,2.5,4.0,2017-04-24 21:11:52.793717,40,,"public int maxDifference(int[] input){
  if(input.length == 0 || input == null)
    return 0;
  // Return the maximum difference of max and min.
  int max = -2147483648;
  int min = 2147483647;
  
  for(int i = 0; i < input.length; i++){
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max - min;
}


"
729,1.5,4.0,1.0,4.0,2017-04-24 21:11:54.382715,40,,"public int maxDifference(int[] input){
  if(input.length == 0 || input == null)
    return 0;
  // Return the maximum difference of max and min.
  int max = -2147483648;
  int min = 2147483647;
  
  for(int i = 0; i < input.length; i++){
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max - min;
}


"
730,1.5,3.0,1.0,4.0,2017-04-24 21:11:56.738651,40,,"public int maxDifference(int[] input){
  if(input.length == 0 || input == null)
    return 0;
  // Return the maximum difference of max and min.
  int max = -2147483648;
  int min = 2147483647;
  
  for(int i = 0; i < input.length; i++){
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max - min;
}


"
731,1.5,3.0,1.0,5.0,2017-04-24 21:11:57.763320,40,,"public int maxDifference(int[] input){
  if(input.length == 0 || input == null)
    return 0;
  // Return the maximum difference of max and min.
  int max = -2147483648;
  int min = 2147483647;
  
  for(int i = 0; i < input.length; i++){
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max - min;
}


"
732,1.5,3.0,1.0,5.0,2017-04-24 21:12:11.959539,40,379,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""public CountPrimesThread(int min, int max) {\n    this.min = min;\n    this.max = max;\n}\n"",""rating"":1},""code"":""public int maxDifference(int[] input){\n  if(input.length == 0 || input == null)\n    return 0;\n  // Return the maximum difference of max and min.\n  int max = -2147483648;\n  int min = 2147483647;\n  \n  for(int i = 0; i < input.length; i++){\n    if(input[i] > max)\n      max = input[i];\n    if(input[i] < min)\n      min = input[i];\n  }\n  return max - min;\n}\n\n\n""}"
733,1.5,3.0,1.0,5.0,2017-04-24 21:12:12.909063,40,380,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""public CountDivisorsThread(int min, int max) {\n    this.min = min;\n    this.max = max;\n}\n"",""rating"":1},""code"":""public int maxDifference(int[] input){\n  if(input.length == 0 || input == null)\n    return 0;\n  // Return the maximum difference of max and min.\n  int max = -2147483648;\n  int min = 2147483647;\n  \n  for(int i = 0; i < input.length; i++){\n    if(input[i] > max)\n      max = input[i];\n    if(input[i] < min)\n      min = input[i];\n  }\n  return max - min;\n}\n\n\n""}"
734,1.5,3.0,1.0,5.0,2017-04-24 21:12:24.147554,40,381,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""Task(int min, int max) {\n    this.min = min;\n    this.max = max;\n}\n"",""rating"":1},""code"":""public int maxDifference(int[] input){\n  if(input.length == 0 || input == null)\n    return 0;\n  // Return the maximum difference of max and min.\n  int max = -2147483648;\n  int min = 2147483647;\n  \n  for(int i = 0; i < input.length; i++){\n    if(input[i] > max)\n      max = input[i];\n    if(input[i] < min)\n      min = input[i];\n  }\n  return max - min;\n}\n\n\n""}"
735,1.5,3.0,1.0,5.0,2017-04-24 21:12:31.995966,40,382,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""// close inner class\npublic void makeTracks(int[] list) {\n    for (int i = 0; i < 16; i++) {\n        int key = list[i];\n        if (key != 0) {\n            track.add(makeEvent(144, 9, key, 100, i));\n            track.add(makeEvent(128, 9, key, 100, i + 1));\n        }\n    }\n}\n"",""rating"":1},""code"":""public int maxDifference(int[] input){\n  if(input.length == 0 || input == null)\n    return 0;\n  // Return the maximum difference of max and min.\n  int max = -2147483648;\n  int min = 2147483647;\n  \n  for(int i = 0; i < input.length; i++){\n    if(input[i] > max)\n      max = input[i];\n    if(input[i] < min)\n      min = input[i];\n  }\n  return max - min;\n}\n\n\n""}"
736,1.5,0.0,1.0,5.0,2017-04-24 21:12:36.552074,40,,"public int maxDifference(int[] input){
  if(input.length == 0 || input == null)
    return 0;
  // Return the maximum difference of max and min.
  int max = -2147483648;
  int min = 2147483647;
  
  for(int i = 0; i < input.length; i++){
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max - min;
}


"
737,1.5,0.0,0.0,5.0,2017-04-24 21:12:37.672448,40,,"public int maxDifference(int[] input){
  if(input.length == 0 || input == null)
    return 0;
  // Return the maximum difference of max and min.
  int max = -2147483648;
  int min = 2147483647;
  
  for(int i = 0; i < input.length; i++){
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max - min;
}


"
738,0.0,0.0,0.0,5.0,2017-04-24 21:12:38.481386,40,,"public int maxDifference(int[] input){
  if(input.length == 0 || input == null)
    return 0;
  // Return the maximum difference of max and min.
  int max = -2147483648;
  int min = 2147483647;
  
  for(int i = 0; i < input.length; i++){
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max - min;
}


"
739,0.0,0.0,0.0,5.0,2017-04-24 21:13:50.498850,40,383,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""public void run() {\n    for (int i = 0; i < numberOfIncrements; i++) {\n        counter.inc();\n    }\n}\n"",""rating"":1},""code"":""public int maxDifference(int[] input){\n  if(input.length == 0 || input == null)\n    return 0;\n  // Find the maximum and minimum from the integer array\n  // Return the difference of max and min.\n  int max = -2147483648;\n  int min = 2147483647;\n  \n  for(int i = 0; i < input.length; i++){\n    if(input[i] > max)\n      max = input[i];\n    if(input[i] < min)\n      min = input[i];\n  }\n  return max - min;\n}\n\n\n""}"
740,0.0,0.0,0.0,5.0,2017-04-24 21:13:52.450091,40,384,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""public Dimension getMinimumSize() {\n    return size;\n}\n"",""rating"":1},""code"":""public int maxDifference(int[] input){\n  if(input.length == 0 || input == null)\n    return 0;\n  // Find the maximum and minimum from the integer array\n  // Return the difference of max and min.\n  int max = -2147483648;\n  int min = 2147483647;\n  \n  for(int i = 0; i < input.length; i++){\n    if(input[i] > max)\n      max = input[i];\n    if(input[i] < min)\n      min = input[i];\n  }\n  return max - min;\n}\n\n\n""}"
741,0.0,4.5,0.0,5.0,2017-04-24 21:14:02.496171,40,,"public int maxDifference(int[] input){
  if(input.length == 0 || input == null)
    return 0;
  // Find the maximum and minimum from the integer array
  // Return the difference of max and min.
  int max = -2147483648;
  int min = 2147483647;
  
  for(int i = 0; i < input.length; i++){
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max - min;
}


"
742,0.0,4.5,0.0,2.0,2017-04-24 21:14:05.376365,40,,"public int maxDifference(int[] input){
  if(input.length == 0 || input == null)
    return 0;
  // Find the maximum and minimum from the integer array
  // Return the difference of max and min.
  int max = -2147483648;
  int min = 2147483647;
  
  for(int i = 0; i < input.length; i++){
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max - min;
}


"
743,0.0,4.5,0.0,0.5,2017-04-24 21:14:20.596872,40,,"public int maxDifference(int[] input){
  if(input.length == 0 || input == null)
    return 0;
  // Find the maximum and minimum from the integer array
  // Return the difference of max and min.
  int max = -2147483648;
  int min = 2147483647;
  
  for(int i = 0; i < input.length; i++){
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max - min;
}


"
744,0.0,4.5,3.0,0.5,2017-04-24 21:14:21.729809,40,,"public int maxDifference(int[] input){
  if(input.length == 0 || input == null)
    return 0;
  // Find the maximum and minimum from the integer array
  // Return the difference of max and min.
  int max = -2147483648;
  int min = 2147483647;
  
  for(int i = 0; i < input.length; i++){
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max - min;
}


"
745,0.0,4.5,3.0,0.5,2017-04-24 21:15:06.229270,40,385,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""// pre: list != null, list.length > 0\n// post: return index of minimum element of array\npublic static int findMin(int[] list) {\n    assert list != null && list.length > 0 : \""failed precondition\"";\n    int indexOfMin = 0;\n    for (int i = 1; i < list.length; i++) {\n        if (list[i] < list[indexOfMin]) {\n            indexOfMin = i;\n        }\n    }\n    return indexOfMin;\n}\n"",""rating"":3},""code"":""public int maxDifference(int[] input){\n  if(input.length == 0 || input == null)\n    return -1;\n  // Find the maximum and minimum from the integer array\n  // Return the difference of max and min.\n  int max = -2147483648;\n  int min = 2147483647;\n  \n  for(int i = 0; i < input.length; i++){\n    if(input[i] > max)\n      max = input[i];\n    if(input[i] < min)\n      min = input[i];\n  }\n  return max - min;\n}\n\n\n""}"
746,0.0,4.5,3.0,0.5,2017-04-24 21:15:17.781115,40,386,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""/**\n     * Applies current palette to the image, or to any part of the image\n     * that has been completed, if a computation is in progress.\n     */\nprivate synchronized void recomputeColors() {\n    if (OSC == null)\n        return;\n    if (palette == null)\n        createPalette();\n    for (int i = 0; i < iterationCounts.length; i++) {\n        if (iterationCounts[i] != null) {\n            for (int j = 0; j < imageWidth; j++) rgb[j] = getColorForIterationCount(iterationCounts[i][j]);\n            OSC.setRGB(0, i, imageWidth, 1, rgb, 0, imageWidth);\n        }\n    }\n    repaint();\n}\n"",""rating"":1},""code"":""public int maxDifference(int[] input){\n  if(input.length == 0 || input == null)\n    return -1;\n  // Find the maximum and minimum from the integer array\n  // Return the difference of max and min.\n  int max = -2147483648;\n  int min = 2147483647;\n  \n  for(int i = 0; i < input.length; i++){\n    if(input[i] > max)\n      max = input[i];\n    if(input[i] < min)\n      min = input[i];\n  }\n  return max - min;\n}\n\n\n""}"
747,1.0,1.0,1.0,1.0,2017-04-25 00:02:45.669181,41,387,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""/**\n         * Return the contents of the square in the specified row and column.\n         */\nint pieceAt(int row, int col) {\n    return board[row][col];\n}\n"",""rating"":1},""code"":""int largestDifferenceInArray(int a[]) {\n  \n}""}"
748,1.0,1.0,1.0,1.0,2017-04-25 00:03:23.117444,41,388,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""// pre: list != null\n// post: return sum of elements\n// use traditional for loop\npublic static int sumListOld(int[] list) {\n    int total = 0;\n    for (int i = 0; i < list.length; i++) {\n        total += list[i];\n        System.out.println(list[i]);\n    }\n    return total;\n}\n"",""rating"":1},""code"":""int largestDifferenceInArray(int a[]) {\n  \n}""}"
749,1.0,1.0,1.0,1.0,2017-04-25 00:03:28.023202,41,389,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""/**\n         * Return the largest item that has been entered.\n         * The return value will be -infinity if no numbers have been entered. \n         */\npublic double getMax() {\n    return max;\n}\n"",""rating"":2},""code"":""int largestDifferenceInArray(int a[]) {\n  \n}""}"
750,1.0,1.0,1.0,1.0,2017-04-25 00:03:31.688728,41,390,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""int getCount() {\n    return count;\n}\n"",""rating"":1},""code"":""int largestDifferenceInArray(int a[]) {\n  \n}""}"
751,1.0,1.0,1.0,1.0,2017-04-25 00:03:32.467604,41,391,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""int getPlayer() {\n    return playerID;\n}\n"",""rating"":1},""code"":""int largestDifferenceInArray(int a[]) {\n  \n}""}"
752,1.0,1.0,1.0,1.0,2017-04-25 00:03:39.508826,41,392,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static <E extends Comparable<E>> E max(E[] a) {\n    E largest = a[0];\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":2},""code"":""int largestDifferenceInArray(int a[]) {\n  \n}""}"
753,1.0,1.0,1.0,1.0,2017-04-25 00:03:41.673439,41,393,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""public void paintComponent(Graphics graph) {\n    int increment = samples.length / getWidth();\n    final int LARGEST = 32767;\n    int x = 0;\n    for (int i = 0; i < samples.length; i = i + increment) {\n        int value = samples[i];\n        value = Math.min(LARGEST, value);\n        value = Math.max(-LARGEST, value);\n        int height = getHeight() / 2;\n        int y = height - samples[i] * height / LARGEST;\n        graph.drawLine(x, y, x, height);\n        x++;\n    }\n}\n"",""rating"":1},""code"":""int largestDifferenceInArray(int a[]) {\n  \n}""}"
754,1.0,1.0,1.0,1.0,2017-04-25 00:03:42.850938,41,394,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""public static <E extends Comparable<? super E>> E max(ArrayList<E> a) // public static <E extends Comparable<E>> E max(ArrayList<E> a) \n// doesn't work with Student array list\n{\n    E largest = a.get(0);\n    for (int i = 1; i < a.size(); i++) {\n        if (a.get(i).compareTo(largest) > 0) {\n            largest = a.get(i);\n        }\n    }\n    return largest;\n}\n"",""rating"":1},""code"":""int largestDifferenceInArray(int a[]) {\n  \n}""}"
755,1.0,1.0,1.0,1.0,2017-04-25 00:03:58.420083,41,395,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""int intFieldValue(Object o, String name) throws NoSuchFieldException, IllegalAccessException {\n    Class<?> c = o.getClass();\n    Field fld = c.getField(name);\n    int value = fld.getInt(o);\n    return value;\n}\n"",""rating"":1},""code"":""int largestDifferenceInArray(int a[]) {\n  \n}""}"
756,1.0,1.0,1.0,1.0,2017-04-25 00:03:59.578436,41,396,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Computes the largest value of an array.\n      @param a the array\n      @return the largest value in a\n   */\npublic static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":1},""code"":""int largestDifferenceInArray(int a[]) {\n  \n}""}"
757,1.0,1.0,1.0,1.0,2017-04-25 00:04:32.193156,41,397,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent1(int[] a) {\n    int[] counts = new int[a.length];\n    for (// O(n*n)\n    int i = 0; // O(n*n)\n    i < a.length; // O(n*n)\n    i++) {\n        // O(n) in each iteration\n        counts[i] = count(a, a[i]);\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":1},""code"":""int largestDifferenceInArray(int[] a) {\n /* determines largest difference between two elements in array */\n}""}"
758,1.0,1.0,1.0,1.0,2017-04-25 00:04:33.960667,41,398,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent2(int[] a) {\n    // O(n log(n))\n    Arrays.sort(a);\n    int[] counts = new int[a.length];\n    int count = 0;\n    for (// O(n)\n    int i = 0; // O(n)\n    i < a.length; // O(n)\n    i++) {\n        count++;\n        if (i == a.length - 1 || a[i] != a[i + 1]) {\n            counts[i] = count;\n            count = 0;\n        }\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":1},""code"":""int largestDifferenceInArray(int[] a) {\n /* determines largest difference between two elements in array */\n}""}"
759,1.0,1.0,1.0,1.0,2017-04-25 00:04:37.446418,41,399,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""public static void main(String[] args) {\n    ArrayList<Double> values = new ArrayList<Double>();\n    // Read inputs\n    System.out.println(\""Please enter values, Q to quit:\"");\n    Scanner in = new Scanner(System.in);\n    while (in.hasNextDouble()) {\n        values.add(in.nextDouble());\n    }\n    // Find the largest value\n    double largest = values.get(0);\n    for (int i = 1; i < values.size(); i++) {\n        if (values.get(i) > largest) {\n            largest = values.get(i);\n        }\n    }\n    for (double element : values) {\n        System.out.print(element);\n        if (element == largest) {\n            System.out.print(\"" <== largest value\"");\n        }\n        System.out.println();\n    }\n}\n       // Print all values, marking the largest\n\n"",""rating"":1},""code"":""int largestDifferenceInArray(int[] a) {\n /* determines largest difference between two elements in array */\n}""}"
760,1.0,1.0,1.0,1.0,2017-04-25 00:04:42.913590,41,400,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""/** Determines if the applet is active.  */\npublic boolean isActive() {\n    return true;\n}\n"",""rating"":1},""code"":""int largestDifferenceInArray(int[] a) {\n /* determines largest difference between two elements in array */\n}""}"
761,1.0,1.0,1.0,1.0,2017-04-25 00:04:44.006375,41,401,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""/**\n         * Return the contents of the square in the specified row and column.\n         */\nint pieceAt(int row, int col) {\n    return board[row][col];\n}\n"",""rating"":1},""code"":""int largestDifferenceInArray(int[] a) {\n /* determines largest difference between two elements in array */\n}""}"
762,1.0,1.0,1.0,1.0,2017-04-25 00:05:35.531533,41,402,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static <E extends Comparable<E>> E max(E[] a) {\n    E largest = a[0];\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":1},""code"":""int largestDifferenceInArray(int[] a) {\n /* determines largest difference between two elements in array */\n}""}"
763,1.0,1.0,1.0,1.0,2017-04-25 00:05:42.900461,41,403,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""/**\n         * Return the contents of the square in the specified row and column.\n         */\nint pieceAt(int row, int col) {\n    return board[row][col];\n}\n"",""rating"":1},""code"":""int largestDifferenceInArray(int[] a) {\n /* determines largest difference between two elements in array */\n}""}"
764,1.0,1.0,1.0,1.0,2017-04-25 00:07:13.131791,41,404,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent1(int[] a) {\n    int[] counts = new int[a.length];\n    for (// O(n*n)\n    int i = 0; // O(n*n)\n    i < a.length; // O(n*n)\n    i++) {\n        // O(n) in each iteration\n        counts[i] = count(a, a[i]);\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":1},""code"":""int largestDifferenceInArray(int[] a) {\n \t/* determines largest difference between two elements in array */\n  \tint max = a[0];\n  \tfor (int i = 1; i < a.length; i++) {\n        if (max < a[i]) {\n          max = a[i];\n        }\n    }\n}""}"
765,1.0,1.0,1.0,1.0,2017-04-25 00:07:16.569724,41,405,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent2(int[] a) {\n    // O(n log(n))\n    Arrays.sort(a);\n    int[] counts = new int[a.length];\n    int count = 0;\n    for (// O(n)\n    int i = 0; // O(n)\n    i < a.length; // O(n)\n    i++) {\n        count++;\n        if (i == a.length - 1 || a[i] != a[i + 1]) {\n            counts[i] = count;\n            count = 0;\n        }\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":4},""code"":""int largestDifferenceInArray(int[] a) {\n \t/* determines largest difference between two elements in array */\n  \tint max = a[0];\n  \tfor (int i = 1; i < a.length; i++) {\n        if (max < a[i]) {\n          max = a[i];\n        }\n    }\n}""}"
766,3.0,1.0,1.0,1.0,2017-04-25 00:07:17.811876,41,,"int largestDifferenceInArray(int[] a) {
 	/* determines largest difference between two elements in array */
  	int max = a[0];
  	for (int i = 1; i < a.length; i++) {
        if (max < a[i]) {
          max = a[i];
        }
    }
}"
767,1.0,1.0,1.0,1.0,2017-04-25 00:08:54.767369,41,406,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""int getCount() {\n    return count;\n}\n"",""rating"":1},""code"":""int getTaxFromPerson(Person p) {\n  \n}""}"
768,1.0,1.0,1.0,1.0,2017-04-25 00:08:55.590377,41,407,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", targetDate = \""Jan 1, 2012\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""int getTaxFromPerson(Person p) {\n  \n}""}"
769,1.0,1.0,1.0,1.0,2017-04-25 00:08:58.370742,41,408,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""int getSize() {\n    // Return the number of items on the queue.\n    return size;\n}\n"",""rating"":1},""code"":""int getTaxFromPerson(Person p) {\n  \n}""}"
770,1.0,1.0,1.0,1.0,2017-04-25 00:09:00.137532,41,409,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""/**\n         * Return the contents of the square in the specified row and column.\n         */\nint pieceAt(int row, int col) {\n    return board[row][col];\n}\n"",""rating"":1},""code"":""int getTaxFromPerson(Person p) {\n  \n}""}"
771,1.0,1.0,1.0,1.0,2017-04-25 00:09:01.193746,41,410,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""public static void main(String[] args) {\n    String input = JOptionPane.showInputDialog(\""Enter price:\"");\n    double price = Double.parseDouble(input);\n    final double TAX_RATE = 8.5;\n    price = price * (1 + TAX_RATE / 100);\n    JOptionPane.showMessageDialog(null, \""Price after tax: \"" + price);\n}\n"",""rating"":1},""code"":""int getTaxFromPerson(Person p) {\n  \n}""}"
772,1.0,1.0,1.0,1.0,2017-04-25 00:09:02.521228,41,411,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""public int compareTo(Person other) {\n    return name.compareTo(other.name);\n}\n"",""rating"":1},""code"":""int getTaxFromPerson(Person p) {\n  \n}""}"
773,1.0,1.0,1.0,1.0,2017-04-25 00:09:03.174281,41,412,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""public Product(float price) {\n    this.price = price;\n    tax = (float) (price * 0.20);\n}\n"",""rating"":1},""code"":""int getTaxFromPerson(Person p) {\n  \n}""}"
774,1.0,1.0,1.0,1.0,2017-04-25 00:09:22.153450,41,413,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", targetDate = \""Jan 1, 2012\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""int getTaxFromPerson(Person p) {\n  /* given a person, determine their tax liabilities */\n}""}"
775,1.0,1.0,1.0,1.0,2017-04-25 00:09:24.775443,41,414,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":2},""code"":""int getTaxFromPerson(Person p) {\n  /* given a person, determine their tax liabilities */\n}""}"
776,1.0,1.0,1.0,1.0,2017-04-25 00:10:14.138328,41,415,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""int getPrice() {\n    return price;\n}\n"",""rating"":1},""code"":""int getTaxFromPerson(Person p) {\n  /* given a person, determine their tax liabilities */\n  if (p == Employee) {\n    \n  }\n}""}"
777,1.0,1.0,1.0,1.0,2017-04-25 00:10:16.210472,41,416,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Sets the name of this employee.\n      @param employeeName the new name \n   */\npublic void setName(String employeeName) {\n    name = employeeName;\n}\n"",""rating"":1},""code"":""int getTaxFromPerson(Person p) {\n  /* given a person, determine their tax liabilities */\n  if (p == Employee) {\n    \n  }\n}""}"
778,1.0,1.0,1.0,1.0,2017-04-25 00:10:18.664258,41,417,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", targetDate = \""Jan 1, 2012\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""int getTaxFromPerson(Person p) {\n  /* given a person, determine their tax liabilities */\n  if (p == Employee) {\n    \n  }\n}""}"
779,1.0,1.0,1.0,1.0,2017-04-25 00:10:19.965289,41,418,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""int getPlayer() {\n    return playerID;\n}\n"",""rating"":1},""code"":""int getTaxFromPerson(Person p) {\n  /* given a person, determine their tax liabilities */\n  if (p == Employee) {\n    \n  }\n}""}"
780,1.0,1.0,1.0,1.0,2017-04-25 00:10:21.371595,41,419,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""int getSize() {\n    // Return the number of items on the queue.\n    return size;\n}\n"",""rating"":1},""code"":""int getTaxFromPerson(Person p) {\n  /* given a person, determine their tax liabilities */\n  if (p == Employee) {\n    \n  }\n}""}"
781,1.0,1.0,1.0,1.0,2017-04-25 00:10:23.750433,41,420,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""/**\n      Constructs an employee with an empty name.\n   */\npublic Employee() {\n    name = \""\"";\n}\n"",""rating"":1},""code"":""int getTaxFromPerson(Person p) {\n  /* given a person, determine their tax liabilities */\n  if (p == Employee) {\n    \n  }\n}""}"
782,1.0,1.0,1.0,1.0,2017-04-25 00:10:27.258180,41,421,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""int powerUse() {\n    if (\""Retention\"".equals(botType)) {\n        return 2;\n    } else {\n        return 4;\n    }\n}\n"",""rating"":1},""code"":""int getTaxFromPerson(Person p) {\n  /* given a person, determine their tax liabilities */\n  if (p == Employee) {\n    \n  }\n}""}"
783,1.0,1.0,1.0,1.0,2017-04-25 00:10:29.047189,41,422,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""/**\n      Gets the name of this employee.\n      @return the name \n   */\npublic String getName() {\n    return name;\n}\n"",""rating"":1},""code"":""int getTaxFromPerson(Person p) {\n  /* given a person, determine their tax liabilities */\n  if (p == Employee) {\n    \n  }\n}""}"
784,1.0,1.0,1.0,1.0,2017-04-25 00:11:29.874651,41,423,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", targetDate = \""Jan 1, 2012\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""int getTaxFromPerson(Person p) {\n  /* given a person, determine their tax liabilities */\n  int salary = p.getSalary();\n  if (salary > 10000) {\n  \treturn p.getSalary() * 0.05;\n  } else {\n  \treturn p.getSalary() * 0.02;\n  }\n}""}"
785,1.0,1.0,1.0,1.0,2017-04-25 00:11:30.965572,41,424,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""int getTaxFromPerson(Person p) {\n  /* given a person, determine their tax liabilities */\n  int salary = p.getSalary();\n  if (salary > 10000) {\n  \treturn p.getSalary() * 0.05;\n  } else {\n  \treturn p.getSalary() * 0.02;\n  }\n}""}"
786,1.0,1.0,1.0,1.0,2017-04-25 00:11:38.323186,41,425,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""/**\n      Constructs a salaried employee with a given name and annual salary.\n      @param name the name of this employee\n      @param salary the annual salary\n    */\npublic SalariedEmployee(String name, double salary) {\n    setName(name);\n    annualSalary = salary;\n}\n"",""rating"":1},""code"":""int getTaxFromPerson(Person p) {\n  /* given a person, determine their tax liabilities */\n  int salary = p.getSalary();\n  if (salary > 10000) {\n  \treturn p.getSalary() * 0.05;\n  } else {\n  \treturn p.getSalary() * 0.02;\n  }\n}""}"
787,1.0,1.0,4.5,1.0,2017-04-25 00:11:56.109223,41,,"int getTaxFromPerson(Person p) {
  /* given a person, determine their tax liabilities */
  int salary = p.getSalary();
  if (salary > 10000) {
  	return p.getSalary() * 0.05;
  } else {
  	return p.getSalary() * 0.02;
  }
}"
788,1.0,1.0,4.5,1.0,2017-04-25 00:12:05.393065,41,426,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""/**\n      Constructs a salaried employee with a given name and annual salary.\n      @param name the name of this employee\n      @param salary the annual salary\n    */\npublic SalariedEmployee(String name, double salary) {\n    setName(name);\n    annualSalary = salary;\n}\n"",""rating"":4},""code"":""int getTaxFromPerson(Person p) {\n  /* given a person, determine their tax liabilities */\n  int salary = p.getSalary();\n  if (salary > 10000) {\n  \treturn p.getSalary() * 0.05;\n  } else {\n  \treturn p.getSalary() * 0.02;\n  }\n}""}"
789,1.5,1.0,1.0,1.0,2017-04-25 16:03:04.638952,43,,
790,1.5,1.0,1.0,1.0,2017-04-25 16:06:11.510257,43,427,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""int getSize() {\n    // Return the number of Locations on the stack. \n    return size;\n}\n"",""rating"":1},""code"":""int largestDifference(int[] a){\n  /* returns the largest difference of the items */\n  \n}""}"
791,1.5,1.0,1.0,1.0,2017-04-25 16:06:12.127157,43,428,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""/**\n         * Return the contents of the square in the specified row and column.\n         */\nint pieceAt(int row, int col) {\n    return board[row][col];\n}\n"",""rating"":1},""code"":""int largestDifference(int[] a){\n  /* returns the largest difference of the items */\n  \n}""}"
792,1.5,1.0,1.0,1.0,2017-04-25 16:06:15.266537,43,429,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static <E extends Comparable<E>> E max(E[] a) {\n    E largest = a[0];\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":2},""code"":""int largestDifference(int[] a){\n  /* returns the largest difference of the items */\n  \n}""}"
793,1.5,1.0,1.0,1.0,2017-04-25 16:07:06.275691,43,430,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""/**\n         * Return the largest item that has been entered.\n         * The return value will be -infinity if no numbers have been entered. \n         */\npublic double getMax() {\n    return max;\n}\n"",""rating"":3},""code"":""int largestDifference(int[] a){\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }  /* returns the largest difference of the items */\n  \n  \n}""}"
794,1.5,1.0,1.0,1.0,2017-04-25 16:07:10.199375,43,431,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent2(int[] a) {\n    // O(n log(n))\n    Arrays.sort(a);\n    int[] counts = new int[a.length];\n    int count = 0;\n    for (// O(n)\n    int i = 0; // O(n)\n    i < a.length; // O(n)\n    i++) {\n        count++;\n        if (i == a.length - 1 || a[i] != a[i + 1]) {\n            counts[i] = count;\n            count = 0;\n        }\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":1},""code"":""int largestDifference(int[] a){\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }  /* returns the largest difference of the items */\n  \n  \n}""}"
795,1.5,1.0,1.0,1.0,2017-04-25 16:07:11.998361,43,432,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""public void paintComponent(Graphics graph) {\n    int increment = samples.length / getWidth();\n    final int LARGEST = 32767;\n    int x = 0;\n    for (int i = 0; i < samples.length; i = i + increment) {\n        int value = samples[i];\n        value = Math.min(LARGEST, value);\n        value = Math.max(-LARGEST, value);\n        int height = getHeight() / 2;\n        int y = height - samples[i] * height / LARGEST;\n        graph.drawLine(x, y, x, height);\n        x++;\n    }\n}\n"",""rating"":1},""code"":""int largestDifference(int[] a){\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }  /* returns the largest difference of the items */\n  \n  \n}""}"
796,1.5,1.0,1.0,1.0,2017-04-25 16:07:20.059300,43,433,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""// pre: list != null, list.length > 0\n// post: return index of minimum element of array\npublic static int findMin(int[] list) {\n    assert list != null && list.length > 0 : \""failed precondition\"";\n    int indexOfMin = 0;\n    for (int i = 1; i < list.length; i++) {\n        if (list[i] < list[indexOfMin]) {\n            indexOfMin = i;\n        }\n    }\n    return indexOfMin;\n}\n"",""rating"":2},""code"":""int largestDifference(int[] a){\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }  /* returns the largest difference of the items */\n  \n  \n}""}"
797,1.5,1.0,1.0,1.0,2017-04-25 16:07:22.979524,43,434,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""// pre: list != null\n// post: return sum of elements\n// use traditional for loop\npublic static int sumListOld(int[] list) {\n    int total = 0;\n    for (int i = 0; i < list.length; i++) {\n        total += list[i];\n        System.out.println(list[i]);\n    }\n    return total;\n}\n"",""rating"":1},""code"":""int largestDifference(int[] a){\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }  /* returns the largest difference of the items */\n  \n  \n}""}"
798,1.5,1.0,1.0,1.0,2017-04-25 16:07:24.726962,43,435,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent1(int[] a) {\n    int[] counts = new int[a.length];\n    for (// O(n*n)\n    int i = 0; // O(n*n)\n    i < a.length; // O(n*n)\n    i++) {\n        // O(n) in each iteration\n        counts[i] = count(a, a[i]);\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":1},""code"":""int largestDifference(int[] a){\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }  /* returns the largest difference of the items */\n  \n  \n}""}"
799,1.5,1.0,1.0,1.0,2017-04-25 16:07:27.456046,43,436,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static <E extends Comparable<E>> E max(E[] a) {\n    E largest = a[0];\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":3},""code"":""int largestDifference(int[] a){\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }  /* returns the largest difference of the items */\n  \n  \n}""}"
800,2.5,1.0,1.0,1.0,2017-04-25 16:09:21.628576,43,,"import java.util.Arrays;
int largestDifference(int[] a){
  Arrays.sort(a)
    return a[a.length-1] - a[0]
}"
801,2.5,1.0,1.0,1.0,2017-04-25 16:10:26.017802,43,437,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent2(int[] a) {\n    // O(n log(n))\n    Arrays.sort(a);\n    int[] counts = new int[a.length];\n    int count = 0;\n    for (// O(n)\n    int i = 0; // O(n)\n    i < a.length; // O(n)\n    i++) {\n        count++;\n        if (i == a.length - 1 || a[i] != a[i + 1]) {\n            counts[i] = count;\n            count = 0;\n        }\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":1},""code"":""//import java.util.Arrays;\nint largestDifference(int[] a){\n  /* finds the largest difference */\n  Arrays.sort(a);\n  return a[a.length-1] - a[0];\n}""}"
802,2.5,1.0,1.0,1.0,2017-04-25 16:10:28.246921,43,438,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""/** Construct a CSV parser, with the default separator (`,'). */\npublic CSVImport() {\n    this(DEFAULT_SEP);\n}\n"",""rating"":1},""code"":""//import java.util.Arrays;\nint largestDifference(int[] a){\n  /* finds the largest difference */\n  Arrays.sort(a);\n  return a[a.length-1] - a[0];\n}""}"
803,2.5,1.0,1.0,1.0,2017-04-25 16:10:30.695482,43,439,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static <E extends Comparable<E>> E max(E[] a) {\n    E largest = a[0];\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":2},""code"":""//import java.util.Arrays;\nint largestDifference(int[] a){\n  /* finds the largest difference */\n  Arrays.sort(a);\n  return a[a.length-1] - a[0];\n}""}"
804,2.5,1.0,1.0,1.0,2017-04-25 16:10:33.608177,43,440,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""int countEmptyBlock(int r, int c) {\n    // Find the size of one empty region on the board; recursive routine called by obviousBlockExists.\n    if (blockCheck[r][c] == blockCheckCt || board.getColor(r, c) != null)\n        return 0;\n    int c1 = c, c2 = c;\n    while (c1 > 0 && blockCheck[r][c1 - 1] < blockCheckCt && board.getColor(r, c1 - 1) == null) c1--;\n    while (c2 < cols - 1 && blockCheck[r][c2 + 1] < blockCheckCt && board.getColor(r, c2 + 1) == null) c2++;\n    for (int i = c1; i <= c2; i++) blockCheck[r][i] = blockCheckCt;\n    int ct = c2 - c1 + 1;\n    if (r > 0)\n        for (int i = c1; i <= c2; i++) ct += countEmptyBlock(r - 1, i);\n    if (r < rows - 1)\n        for (int i = c1; i <= c2; i++) ct += countEmptyBlock(r + 1, i);\n    return ct;\n}\n"",""rating"":1},""code"":""//import java.util.Arrays;\nint largestDifference(int[] a){\n  /* finds the largest difference */\n  Arrays.sort(a);\n  return a[a.length-1] - a[0];\n}""}"
805,2.5,1.0,1.0,1.0,2017-04-25 16:10:34.601833,43,441,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""public static void main(String[] args) {\n    ArrayList<Double> values = new ArrayList<Double>();\n    // Read inputs\n    System.out.println(\""Please enter values, Q to quit:\"");\n    Scanner in = new Scanner(System.in);\n    while (in.hasNextDouble()) {\n        values.add(in.nextDouble());\n    }\n    // Find the largest value\n    double largest = values.get(0);\n    for (int i = 1; i < values.size(); i++) {\n        if (values.get(i) > largest) {\n            largest = values.get(i);\n        }\n    }\n    for (double element : values) {\n        System.out.print(element);\n        if (element == largest) {\n            System.out.print(\"" <== largest value\"");\n        }\n        System.out.println();\n    }\n}\n       // Print all values, marking the largest\n\n"",""rating"":1},""code"":""//import java.util.Arrays;\nint largestDifference(int[] a){\n  /* finds the largest difference */\n  Arrays.sort(a);\n  return a[a.length-1] - a[0];\n}""}"
806,2.5,1.0,1.0,1.0,2017-04-25 16:10:51.498555,43,442,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""public void run() {\n    ErrorUtil.showExceptions(gui, ex);\n}\n"",""rating"":1},""code"":""//import java.util.Arrays;\nint largestDifference(int[] a){\n  /* finds the largest difference */\n  Arrays.sort(a);\n  return a[a.length-1] - a[0];\n}""}"
807,2.5,1.0,1.0,1.0,2017-04-25 16:10:52.843254,43,443,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent1(int[] a) {\n    int[] counts = new int[a.length];\n    for (// O(n*n)\n    int i = 0; // O(n*n)\n    i < a.length; // O(n*n)\n    i++) {\n        // O(n) in each iteration\n        counts[i] = count(a, a[i]);\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":1},""code"":""//import java.util.Arrays;\nint largestDifference(int[] a){\n  /* finds the largest difference */\n  Arrays.sort(a);\n  return a[a.length-1] - a[0];\n}""}"
808,2.5,1.0,1.0,1.0,2017-04-25 16:10:53.802825,43,444,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""// pre: list != null\n// post: return sum of elements\n// use traditional for loop\npublic static int sumListOld(int[] list) {\n    int total = 0;\n    for (int i = 0; i < list.length; i++) {\n        total += list[i];\n        System.out.println(list[i]);\n    }\n    return total;\n}\n"",""rating"":1},""code"":""//import java.util.Arrays;\nint largestDifference(int[] a){\n  /* finds the largest difference */\n  Arrays.sort(a);\n  return a[a.length-1] - a[0];\n}""}"
809,2.0,1.0,1.0,1.0,2017-04-25 16:11:47.993315,43,,"float getTaxAmount(Person p){
  /* Returns tax amount */
}"
810,1.0,1.0,1.0,4.0,2017-04-27 00:31:19.440917,46,,"int Tax(Person P){
  
}"
811,1.0,1.0,1.0,3.5,2017-04-27 00:31:22.695117,46,,"int Tax(Person P){
  
}"
812,1.0,1.0,1.0,3.5,2017-04-27 00:31:32.725962,46,445,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""int getCount() {\n    return count;\n}\n"",""rating"":1},""code"":""int Tax(Person P){\n  \n}""}"
813,1.0,1.0,1.0,3.5,2017-04-27 00:31:33.844407,46,446,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""public static void main(String[] args) {\n    String input = JOptionPane.showInputDialog(\""Enter price:\"");\n    double price = Double.parseDouble(input);\n    final double TAX_RATE = 8.5;\n    price = price * (1 + TAX_RATE / 100);\n    JOptionPane.showMessageDialog(null, \""Price after tax: \"" + price);\n}\n"",""rating"":1},""code"":""int Tax(Person P){\n  \n}""}"
814,1.0,1.0,1.0,3.5,2017-04-27 00:31:41.937852,46,447,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""int Tax(Person P){\n  \n}""}"
815,1.0,1.0,1.0,3.5,2017-04-27 00:32:32.994185,46,448,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""/**\n      Constructs an employee with an empty name.\n   */\npublic Employee() {\n    name = \""\"";\n}\n"",""rating"":1},""code"":""int Tax(Person P){\n//Write a java method that takes a person and returns their tax as below  \n//For employees, if salary < $10,000, 2% of salary, else 5%\n}""}"
816,1.0,1.0,1.0,3.5,2017-04-27 00:32:34.608422,46,449,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""/**\n         * Return the contents of the square in the specified row and column.\n         */\nint pieceAt(int row, int col) {\n    return board[row][col];\n}\n"",""rating"":1},""code"":""int Tax(Person P){\n//Write a java method that takes a person and returns their tax as below  \n//For employees, if salary < $10,000, 2% of salary, else 5%\n}""}"
817,1.0,1.0,1.0,3.5,2017-04-27 00:32:36.178102,46,450,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""/**\n       * Return the contents of the square in the specified row and column.\n       */\nint pieceAt(int row, int col) {\n    return board[row][col];\n}\n"",""rating"":1},""code"":""int Tax(Person P){\n//Write a java method that takes a person and returns their tax as below  \n//For employees, if salary < $10,000, 2% of salary, else 5%\n}""}"
818,1.0,1.0,1.0,3.5,2017-04-27 00:32:37.189169,46,451,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Constructs a salaried employee with a given name and annual salary.\n      @param name the name of this employee\n      @param salary the annual salary\n    */\npublic SalariedEmployee(String name, double salary) {\n    setName(name);\n    annualSalary = salary;\n}\n"",""rating"":1},""code"":""int Tax(Person P){\n//Write a java method that takes a person and returns their tax as below  \n//For employees, if salary < $10,000, 2% of salary, else 5%\n}""}"
819,1.0,1.0,1.0,3.5,2017-04-27 00:34:54.581940,46,452,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""/**\n      Gets the name of this employee.\n      @return the name \n   */\npublic String getName() {\n    return name;\n}\n"",""rating"":1},""code"":""int Tax(Person P){\n//Write a java method that takes a person and returns their tax as below  \n\n}""}"
820,1.0,1.0,1.0,3.5,2017-04-27 00:34:55.351259,46,453,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""int countEmptyBlock(int r, int c) {\n    // Find the size of one empty region on the board; recursive routine called by obviousBlockExists.\n    if (blockCheck[r][c] == blockCheckCt || board.getColor(r, c) != null)\n        return 0;\n    int c1 = c, c2 = c;\n    while (c1 > 0 && blockCheck[r][c1 - 1] < blockCheckCt && board.getColor(r, c1 - 1) == null) c1--;\n    while (c2 < cols - 1 && blockCheck[r][c2 + 1] < blockCheckCt && board.getColor(r, c2 + 1) == null) c2++;\n    for (int i = c1; i <= c2; i++) blockCheck[r][i] = blockCheckCt;\n    int ct = c2 - c1 + 1;\n    if (r > 0)\n        for (int i = c1; i <= c2; i++) ct += countEmptyBlock(r - 1, i);\n    if (r < rows - 1)\n        for (int i = c1; i <= c2; i++) ct += countEmptyBlock(r + 1, i);\n    return ct;\n}\n"",""rating"":1},""code"":""int Tax(Person P){\n//Write a java method that takes a person and returns their tax as below  \n\n}""}"
821,1.0,1.0,1.0,3.5,2017-04-27 00:34:56.757421,46,454,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""/**\n      Sets the name of this employee.\n      @param employeeName the new name \n   */\npublic void setName(String employeeName) {\n    name = employeeName;\n}\n"",""rating"":1},""code"":""int Tax(Person P){\n//Write a java method that takes a person and returns their tax as below  \n\n}""}"
822,1.0,2.5,1.0,3.5,2017-04-27 00:35:29.367479,46,,"int Tax(Person P){
//Write a java method that takes a person and returns their tax as below  
return int taxint;
}"
823,4.0,2.5,1.0,3.5,2017-04-27 00:35:30.232796,46,,"int Tax(Person P){
//Write a java method that takes a person and returns their tax as below  
return int taxint;
}"
824,4.0,1.5,1.0,3.5,2017-04-27 00:35:31.450816,46,,"int Tax(Person P){
//Write a java method that takes a person and returns their tax as below  
return int taxint;
}"
825,4.0,1.5,1.0,1.0,2017-04-27 00:35:42.071597,46,,"int Tax(Person P){
//Write a java method that takes a person and returns their tax as below  
return int taxint
}"
826,4.0,1.0,1.0,1.0,2017-04-27 00:35:43.805811,46,,"int Tax(Person P){
//Write a java method that takes a person and returns their tax as below  
return int taxint
}"
827,4.0,1.0,1.0,1.0,2017-04-27 00:35:54.951580,46,455,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""int powerUse() {\n    if (\""Retention\"".equals(botType)) {\n        return 2;\n    } else {\n        return 4;\n    }\n}\n"",""rating"":1},""code"":""int Tax(Person P){\n//Write a java method that takes a person and returns their tax as below  \n\n}""}"
828,4.0,1.0,1.0,1.0,2017-04-27 00:35:55.946305,46,456,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""int Tax(Person P){\n//Write a java method that takes a person and returns their tax as below  \n\n}""}"
829,4.0,1.0,1.0,1.0,2017-04-27 00:35:57.430261,46,457,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""/** Set the person's name.  Not a remote method */\npublic void setName(String n) {\n    name = n;\n}\n"",""rating"":1},""code"":""int Tax(Person P){\n//Write a java method that takes a person and returns their tax as below  \n\n}""}"
830,4.0,1.0,1.0,1.0,2017-04-27 00:35:59.015548,46,458,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""/**\n         * Return the contents of the square in the specified row and column.\n         */\nint pieceAt(int row, int col) {\n    return board[row][col];\n}\n"",""rating"":1},""code"":""int Tax(Person P){\n//Write a java method that takes a person and returns their tax as below  \n\n}""}"
831,4.0,1.0,1.0,1.0,2017-04-27 00:36:02.337292,46,459,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""/** Return the person's name.  Not a remote method */\npublic String getName() {\n    return name;\n}\n"",""rating"":1},""code"":""int Tax(Person P){\n//Write a java method that takes a person and returns their tax as below  \n\n}""}"
832,1.0,1.0,1.0,2.5,2017-04-27 00:40:25.039093,46,,"int DiffOfIntArray(int IA){
// Write a method that takes an integer array and returns the largest difference between its elements.
// For example, if array contains [7, 4, 1], the method should return 6 as the largest difference (7 - 1)  
  for(int i=0; i<IA.length; i++){
   
  }
}"
833,1.0,2.0,1.0,2.5,2017-04-27 00:40:26.849007,46,,"int DiffOfIntArray(int IA){
// Write a method that takes an integer array and returns the largest difference between its elements.
// For example, if array contains [7, 4, 1], the method should return 6 as the largest difference (7 - 1)  
  for(int i=0; i<IA.length; i++){
   
  }
}"
834,2.5,2.0,1.0,2.5,2017-04-27 00:40:28.905080,46,,"int DiffOfIntArray(int IA){
// Write a method that takes an integer array and returns the largest difference between its elements.
// For example, if array contains [7, 4, 1], the method should return 6 as the largest difference (7 - 1)  
  for(int i=0; i<IA.length; i++){
   
  }
}"
835,1.0,2.0,1.0,2.5,2017-04-27 00:40:30.120411,46,,"int DiffOfIntArray(int IA){
// Write a method that takes an integer array and returns the largest difference between its elements.
// For example, if array contains [7, 4, 1], the method should return 6 as the largest difference (7 - 1)  
  for(int i=0; i<IA.length; i++){
   
  }
}"
836,1.0,2.0,1.0,2.5,2017-04-27 00:40:35.646112,46,460,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""/**\n      Counts how often a value occurs in an array.\n      @param a the array\n      @param value the value to count\n      @return the number of occurrences of value in a\n   */\npublic static int count(int[] a, int value) {\n    int count = 0;\n    for (int i = 0; i < a.length; i++) {\n        if (a[i] == value) {\n            count++;\n        }\n    }\n    return count;\n}\n"",""rating"":3},""code"":""int DiffOfIntArray(int IA){\n// Write a method that takes an integer array and returns the largest difference between its elements.\n// For example, if array contains [7, 4, 1], the method should return 6 as the largest difference (7 - 1)  \n  for(int i=0; i<IA.length; i++){\n   \n  }\n}""}"
837,1.0,2.0,1.0,2.5,2017-04-27 00:40:38.411928,46,461,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""public int run() {\n    MutableInteger list[] = new MutableInteger[MAX];\n    for (int i = 0; i < list.length; i++) {\n        list[i] = new MutableInteger(i);\n    }\n    int sum = 0;\n    for (int i = 0; i < list.length; i++) {\n        sum += list[i].getValue();\n    }\n    return sum;\n}\n"",""rating"":2},""code"":""int DiffOfIntArray(int IA){\n// Write a method that takes an integer array and returns the largest difference between its elements.\n// For example, if array contains [7, 4, 1], the method should return 6 as the largest difference (7 - 1)  \n  for(int i=0; i<IA.length; i++){\n   \n  }\n}""}"
838,1.0,2.0,1.0,2.5,2017-04-27 00:40:39.238795,46,462,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""void load() {\n    v = new ArrayList<String>();\n    for (int i = 0; i < rawStrings.length; i++) v.add(rawStrings[i]);\n}\n"",""rating"":4},""code"":""int DiffOfIntArray(int IA){\n// Write a method that takes an integer array and returns the largest difference between its elements.\n// For example, if array contains [7, 4, 1], the method should return 6 as the largest difference (7 - 1)  \n  for(int i=0; i<IA.length; i++){\n   \n  }\n}""}"
839,1.0,2.0,1.0,2.5,2017-04-27 00:40:47.471227,46,463,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static <E extends Comparable<E>> E max(E[] a) {\n    E largest = a[0];\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":4},""code"":""int DiffOfIntArray(int IA){\n// Write a method that takes an integer array and returns the largest difference between its elements.\n// For example, if array contains [7, 4, 1], the method should return 6 as the largest difference (7 - 1)  \n  for(int i=0; i<IA.length; i++){\n   \n  }\n}""}"
840,1.0,2.0,1.0,2.5,2017-04-27 00:40:49.310676,46,464,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String[] args) {\n    ArrayList<Double> values = new ArrayList<Double>();\n    // Read inputs\n    System.out.println(\""Please enter values, Q to quit:\"");\n    Scanner in = new Scanner(System.in);\n    while (in.hasNextDouble()) {\n        values.add(in.nextDouble());\n    }\n    // Find the largest value\n    double largest = values.get(0);\n    for (int i = 1; i < values.size(); i++) {\n        if (values.get(i) > largest) {\n            largest = values.get(i);\n        }\n    }\n    for (double element : values) {\n        System.out.print(element);\n        if (element == largest) {\n            System.out.print(\"" <== largest value\"");\n        }\n        System.out.println();\n    }\n}\n       // Print all values, marking the largest\n\n"",""rating"":2},""code"":""int DiffOfIntArray(int IA){\n// Write a method that takes an integer array and returns the largest difference between its elements.\n// For example, if array contains [7, 4, 1], the method should return 6 as the largest difference (7 - 1)  \n  for(int i=0; i<IA.length; i++){\n   \n  }\n}""}"
841,1.0,2.0,1.0,2.5,2017-04-27 00:40:55.061190,46,465,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Computes the largest value of an array.\n      @param a the array\n      @return the largest value in a\n   */\npublic static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":5},""code"":""int DiffOfIntArray(int IA){\n// Write a method that takes an integer array and returns the largest difference between its elements.\n// For example, if array contains [7, 4, 1], the method should return 6 as the largest difference (7 - 1)  \n  for(int i=0; i<IA.length; i++){\n   \n  }\n}""}"
842,1.0,1.0,1.0,2.5,2017-04-27 00:41:10.564343,46,,"int DiffOfIntArray(int IA){
// Write a method that takes an integer array and returns the largest difference between its elements.
// For example, if array contains [7, 4, 1], the method should return 6 as the largest difference (7 - 1)  
  for(int i=0; i<IA.length; i++){
   
  }
}"
843,1.0,1.0,1.0,3.5,2017-04-27 00:41:12.072933,46,,"int DiffOfIntArray(int IA){
// Write a method that takes an integer array and returns the largest difference between its elements.
// For example, if array contains [7, 4, 1], the method should return 6 as the largest difference (7 - 1)  
  for(int i=0; i<IA.length; i++){
   
  }
}"
844,1.0,1.0,2.0,3.5,2017-04-27 00:41:13.249093,46,,"int DiffOfIntArray(int IA){
// Write a method that takes an integer array and returns the largest difference between its elements.
// For example, if array contains [7, 4, 1], the method should return 6 as the largest difference (7 - 1)  
  for(int i=0; i<IA.length; i++){
   
  }
}"
845,1.0,1.0,2.0,3.5,2017-04-27 00:41:18.262417,46,466,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""public static Predicate<String> contains(String target) {\n    return  s -> s.indexOf(target) >= 0;\n}\n"",""rating"":2},""code"":""int DiffOfIntArray(int IA){\n// Write a method that takes an integer array and returns the largest difference between its elements.\n// For example, if array contains [7, 4, 1], the method should return 6 as the largest difference (7 - 1)  \n  for(int i=0; i<IA.length; i++){\n   \n  }\n}""}"
846,1.0,1.0,2.0,3.5,2017-04-27 00:41:19.069739,46,467,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String[] args) {\n    ArrayList<Double> values = new ArrayList<Double>();\n    // Read inputs\n    System.out.println(\""Please enter values, Q to quit:\"");\n    Scanner in = new Scanner(System.in);\n    while (in.hasNextDouble()) {\n        values.add(in.nextDouble());\n    }\n    // Find the largest value\n    double largest = values.get(0);\n    for (int i = 1; i < values.size(); i++) {\n        if (values.get(i) > largest) {\n            largest = values.get(i);\n        }\n    }\n    for (double element : values) {\n        System.out.print(element);\n        if (element == largest) {\n            System.out.print(\"" <== largest value\"");\n        }\n        System.out.println();\n    }\n}\n       // Print all values, marking the largest\n\n"",""rating"":2},""code"":""int DiffOfIntArray(int IA){\n// Write a method that takes an integer array and returns the largest difference between its elements.\n// For example, if array contains [7, 4, 1], the method should return 6 as the largest difference (7 - 1)  \n  for(int i=0; i<IA.length; i++){\n   \n  }\n}""}"
847,1.0,1.0,2.0,3.5,2017-04-27 00:41:20.586410,46,468,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""ProdCons2(int nP, int nC) {\n    for (int i = 0; i < nP; i++) new Producer().start();\n    for (int i = 0; i < nC; i++) new Consumer().start();\n}\n"",""rating"":2},""code"":""int DiffOfIntArray(int IA){\n// Write a method that takes an integer array and returns the largest difference between its elements.\n// For example, if array contains [7, 4, 1], the method should return 6 as the largest difference (7 - 1)  \n  for(int i=0; i<IA.length; i++){\n   \n  }\n}""}"
848,1.0,1.0,2.0,3.5,2017-04-27 00:41:22.163057,46,469,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""public int run() {\n    MutableInteger list[] = new MutableInteger[MAX];\n    for (int i = 0; i < list.length; i++) {\n        list[i] = new MutableInteger(i);\n    }\n    int sum = 0;\n    for (int i = 0; i < list.length; i++) {\n        sum += list[i].getValue();\n    }\n    return sum;\n}\n"",""rating"":2},""code"":""int DiffOfIntArray(int IA){\n// Write a method that takes an integer array and returns the largest difference between its elements.\n// For example, if array contains [7, 4, 1], the method should return 6 as the largest difference (7 - 1)  \n  for(int i=0; i<IA.length; i++){\n   \n  }\n}""}"
849,1.0,1.0,2.0,3.5,2017-04-27 00:41:23.585404,46,470,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""public int run() {\n    ArrayList<MutableInteger> list = new ArrayList<>();\n    for (int i = 0; i < MAX; i++) {\n        list.add(new MutableInteger(i));\n    }\n    int sum = 0;\n    for (int i = 0; i < MAX; i++) {\n        sum += ((MutableInteger) list.get(i)).getValue();\n    }\n    return sum;\n}\n"",""rating"":3},""code"":""int DiffOfIntArray(int IA){\n// Write a method that takes an integer array and returns the largest difference between its elements.\n// For example, if array contains [7, 4, 1], the method should return 6 as the largest difference (7 - 1)  \n  for(int i=0; i<IA.length; i++){\n   \n  }\n}""}"
850,1.0,1.0,2.0,3.5,2017-04-27 00:41:25.959168,46,471,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static <E extends Comparable<E>> E max(E[] a) {\n    E largest = a[0];\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":3},""code"":""int DiffOfIntArray(int IA){\n// Write a method that takes an integer array and returns the largest difference between its elements.\n// For example, if array contains [7, 4, 1], the method should return 6 as the largest difference (7 - 1)  \n  for(int i=0; i<IA.length; i++){\n   \n  }\n}""}"
851,1.0,4.5,2.0,3.5,2017-04-27 00:41:29.218370,46,,"int DiffOfIntArray(int IA){
// Write a method that takes an integer array and returns the largest difference between its elements.
// For example, if array contains [7, 4, 1], the method should return 6 as the largest difference (7 - 1)  
  for(int i=0; i<IA.length; i++){
   
  }
}"
852,2.0,4.5,2.0,3.5,2017-04-27 00:41:32.279211,46,,"int DiffOfIntArray(int IA){
// Write a method that takes an integer array and returns the largest difference between its elements.
// For example, if array contains [7, 4, 1], the method should return 6 as the largest difference (7 - 1)  
  for(int i=0; i<IA.length; i++){
   
  }
}"
853,3.0,4.5,2.0,3.5,2017-04-27 00:41:33.643298,46,,"int DiffOfIntArray(int IA){
// Write a method that takes an integer array and returns the largest difference between its elements.
// For example, if array contains [7, 4, 1], the method should return 6 as the largest difference (7 - 1)  
  for(int i=0; i<IA.length; i++){
   
  }
}"
854,3.0,4.5,2.0,3.5,2017-04-27 00:41:46.824813,46,472,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""// pre: list != null\n// post: return sum of elements\n// use traditional for loop\npublic static int sumListOld(int[] list) {\n    int total = 0;\n    for (int i = 0; i < list.length; i++) {\n        total += list[i];\n        System.out.println(list[i]);\n    }\n    return total;\n}\n"",""rating"":3},""code"":""int DiffOfIntArray(int[] IA){\n// Write a method that takes an integer array and returns the largest difference between its elements.\n// For example, if array contains [7, 4, 1], the method should return 6 as the largest difference (7 - 1)  \n  for(int i=0; i<IA.length; i++){\n   \n  }\n}""}"
855,3.0,4.5,2.0,3.5,2017-04-27 00:41:49.505910,46,473,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""/**\n      Counts how often a value occurs in an array.\n      @param a the array\n      @param value the value to count\n      @return the number of occurrences of value in a\n   */\npublic static int count(int[] a, int value) {\n    int count = 0;\n    for (int i = 0; i < a.length; i++) {\n        if (a[i] == value) {\n            count++;\n        }\n    }\n    return count;\n}\n"",""rating"":4},""code"":""int DiffOfIntArray(int[] IA){\n// Write a method that takes an integer array and returns the largest difference between its elements.\n// For example, if array contains [7, 4, 1], the method should return 6 as the largest difference (7 - 1)  \n  for(int i=0; i<IA.length; i++){\n   \n  }\n}""}"
856,2.5,1.0,1.0,1.0,2017-04-27 23:56:15.399588,48,,"public double getTax(Person person) {
  
}"
857,2.5,1.0,2.0,1.0,2017-04-27 23:56:26.802512,48,,"public double getTax(Person person) {
  
}"
858,2.5,1.0,2.0,1.0,2017-04-27 23:56:42.898126,48,474,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""/**\n      Gets the product price.\n      @return the unit price\n   */\npublic double getPrice() {\n    return price;\n}\n"",""rating"":1},""code"":""public double getTax(Person person) {\n  \n}""}"
859,2.5,1.0,2.0,1.0,2017-04-27 23:57:33.807321,48,475,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""public Product(float price) {\n    this.price = price;\n    tax = (float) (price * 0.20);\n}\n"",""rating"":3},""code"":""public double getTax(Person person) {\n  \n}""}"
860,2.5,1.0,2.0,1.0,2017-04-27 23:59:31.111076,48,476,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""/** Return a resource of type double */\npublic double getDouble(String key) throws MissingResourceException {\n    String s = bundle.getString(key);\n    try {\n        return Double.parseDouble(s);\n    } catch (NumberFormatException e) {\n        throw new MalformedResourceException(\""double\"", key);\n    }\n}\n"",""rating"":1},""code"":""public double getTax(Person person) {\n  // Need to check for coercive type\n}""}"
861,2.5,1.0,2.0,1.0,2017-04-28 00:03:53.584606,48,477,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""/**\n      Adds an element to the front of the linked list.\n      @param element the element to add\n   */\npublic void addFirst(Object element) {\n    Node newNode = new Node();\n    newNode.data = element;\n    newNode.next = first;\n    newNode.previous = null;\n    if (first == null) {\n        last = newNode;\n    } else {\n        first.previous = newNode;\n    }\n    first = newNode;\n}\n"",""rating"":3},""code"":""public double getTax(Object person) {\n  // How to establish if something is of an extended type\n  Employee employee = (Employee) person;\n}""}"
862,2.5,1.0,2.0,1.0,2017-04-28 00:04:04.924083,48,478,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""/**\n      Adds an element to the top of the stack.\n      @param element the element to add\n   */\npublic void push(Object element) {\n    Node newNode = new Node();\n    newNode.data = element;\n    newNode.next = first;\n    first = newNode;\n}\n"",""rating"":2},""code"":""public double getTax(Object person) {\n  // How to establish if something is of an extended type\n  Employee employee = (Employee) person;\n}""}"
863,2.5,1.0,2.0,1.0,2017-04-28 00:05:26.759270,48,479,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""/**\n      Computes the change due and resets the machine for the next customer.\n      @return the change due to the customer\n   */\npublic double giveChange() {\n    double change = payment - purchase;\n    purchase = 0;\n    payment = 0;\n    return change;\n}\n"",""rating"":1},""code"":""public double getTax(Object person) {\n  double tax = 0;\n  // How to establish if something is of an extended type\n  if (person instanceof Employee) {\n\n  }\n}""}"
864,2.5,1.0,2.0,1.0,2017-04-28 00:05:35.947048,48,480,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", targetDate = \""Jan 1, 2012\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""public double getTax(Object person) {\n  double tax = 0;\n  // How to establish if something is of an extended type\n  if (person instanceof Employee) {\n\n  }\n}""}"
865,1.0,1.0,2.0,1.0,2017-04-28 00:08:11.150108,48,,"public double getTax(Object person) {
  double tax = 0;
  // How to establish if something is of an extended type
  if (person instanceof Employee) {
	int salary = person.getSalary();
    if (salary < 10000) {
      tax = salary * .02;
    } else {
      tax = salary * .05;
    }
  }
  // What if person is not of any of these types?
}"
866,1.0,3.5,2.0,1.0,2017-04-28 00:08:14.244680,48,,"public double getTax(Object person) {
  double tax = 0;
  // How to establish if something is of an extended type
  if (person instanceof Employee) {
	int salary = person.getSalary();
    if (salary < 10000) {
      tax = salary * .02;
    } else {
      tax = salary * .05;
    }
  }
  // What if person is not of any of these types?
}"
867,1.0,3.5,2.0,3.0,2017-04-28 00:08:18.985609,48,,"public double getTax(Object person) {
  double tax = 0;
  // How to establish if something is of an extended type
  if (person instanceof Employee) {
	int salary = person.getSalary();
    if (salary < 10000) {
      tax = salary * .02;
    } else {
      tax = salary * .05;
    }
  }
  // What if person is not of any of these types?
}"
868,1.0,3.5,2.0,3.0,2017-04-28 00:08:33.079941,48,481,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""public double getTax() {\n    double tax1 = 0;\n    double tax2 = 0;\n    if (status == SINGLE) {\n        if (income <= RATE1_SINGLE_LIMIT) {\n            tax1 = RATE1 * income;\n        } else {\n            tax1 = RATE1 * RATE1_SINGLE_LIMIT;\n            tax2 = RATE2 * (income - RATE1_SINGLE_LIMIT);\n        }\n    } else {\n        if (income <= RATE1_MARRIED_LIMIT) {\n            tax1 = RATE1 * income;\n        } else {\n            tax1 = RATE1 * RATE1_MARRIED_LIMIT;\n            tax2 = RATE2 * (income - RATE1_MARRIED_LIMIT);\n        }\n    }\n    return tax1 + tax2;\n}\n"",""rating"":2},""code"":""public double getTax(Object person) {\n  double tax = 0;\n  // How to establish if something is of an extended type\n  if (person instanceof Employee) {\n\tint salary = person.getSalary();\n    if (salary < 10000) {\n      tax = salary * .02;\n    } else {\n      tax = salary * .05;\n    }\n  }\n  // What if person is not of any of these types?\n}""}"
869,1.0,3.5,3.0,3.0,2017-04-28 00:08:38.816122,48,,"public double getTax(Object person) {
  double tax = 0;
  // How to establish if something is of an extended type
  if (person instanceof Employee) {
	int salary = person.getSalary();
    if (salary < 10000) {
      tax = salary * .02;
    } else {
      tax = salary * .05;
    }
  }
  // What if person is not of any of these types?
}"
870,1.0,3.5,4.0,3.0,2017-04-28 00:08:56.190096,48,,"public double getTax(Object person) {
  double tax = 0;
  // How to establish if something is of an extended type
  if (person instanceof Employee) {
	int salary = person.getSalary();
    if (salary < 10000) {
      tax = salary * .02;
    } else {
      tax = salary * .05;
    }
  }
  // What if person is not of any of these types?
}"
871,1.0,2.5,4.0,3.0,2017-04-28 00:08:57.038866,48,,"public double getTax(Object person) {
  double tax = 0;
  // How to establish if something is of an extended type
  if (person instanceof Employee) {
	int salary = person.getSalary();
    if (salary < 10000) {
      tax = salary * .02;
    } else {
      tax = salary * .05;
    }
  }
  // What if person is not of any of these types?
}"
872,2.0,2.5,4.0,3.0,2017-04-28 00:09:07.327640,48,,"public double getTax(Object person) {
  double tax = 0;
  // How to establish if something is of an extended type
  if (person instanceof Employee) {
	int salary = person.getSalary();
    if (salary < 10000) {
      tax = salary * .02;
    } else {
      tax = salary * .05;
    }
  }
  // What if person is not of any of these types?
}"
873,2.0,2.5,4.0,4.0,2017-04-28 00:11:59.385871,48,,"public double getTax(Object person) {
  double tax = 0;
  // How to establish if something is of an extended type
  if (person instanceof Employee) {
	double salary = person.getSalary();
    if (salary == null) return -1;
    if (salary < 10000) {
      tax = salary * .02;
    } else {
      tax = salary * .05;
    }
  } else if (person instanceof BusinessOwner) {
    double profit = person.getProfit();
    if (profit == null) return -1;
    else tax = profit * .1;
  }
  // What if person is not of any of these types?
  // How to throw an error?
}"
874,2.0,2.5,4.0,4.0,2017-04-28 00:12:26.029790,48,482,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String[] args) {\n    double sum = 0;\n    int count = 0;\n    double salary = 0;\n    System.out.print(\""Enter salaries, -1 to finish: \"");\n    Scanner in = new Scanner(System.in);\n    while (salary != -1) {\n        salary = in.nextDouble();\n        if (salary != -1) {\n            sum = sum + salary;\n            count++;\n        }\n    }\n    if (count > 0) {\n        double average = sum / count;\n        System.out.println(\""Average salary: \"" + average);\n       // Process data until the sentinel is entered \n\n    } else {\n        System.out.println(\""No data\"");\n    }\n}\n       // Compute and print the average\n\n"",""rating"":3},""code"":""public double getTax(Object person) {\n  double tax = 0;\n  // How to establish if something is of an extended type\n  if (person instanceof Employee) {\n\tdouble salary = person.getSalary();\n    if (salary == null) return -1;\n    if (salary < 10000) {\n      tax = salary * .02;\n    } else {\n      tax = salary * .05;\n    }\n  } else if (person instanceof BusinessOwner) {\n    double profit = person.getProfit();\n    if (profit == null) return -1;\n    else tax = profit * .1;\n  }\n  // What if person is not of any of these types?\n  // How to throw an error?\n}""}"
875,2.0,2.5,4.0,4.0,2017-04-28 00:12:42.011909,48,483,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""/**\n     * Remove the top item from the stack, and return it.\n     * @return the item that was removed from the top of the stack\n     * @throws IllegalStateException if the stack is emtpy when method is called.\n     */\npublic double pop() {\n    if (top == null)\n        throw new IllegalStateException();\n    double topItem = top.item;\n    top = top.next;\n    return topItem;\n}\n"",""rating"":4},""code"":""public double getTax(Object person) {\n  double tax = 0;\n  // How to establish if something is of an extended type\n  if (person instanceof Employee) {\n\tdouble salary = person.getSalary();\n    if (salary == null) return -1;\n    if (salary < 10000) {\n      tax = salary * .02;\n    } else {\n      tax = salary * .05;\n    }\n  } else if (person instanceof BusinessOwner) {\n    double profit = person.getProfit();\n    if (profit == null) return -1;\n    else tax = profit * .1;\n  }\n  // What if person is not of any of these types?\n  // How to throw an error?\n}""}"
876,2.0,2.5,4.0,3.0,2017-04-28 00:14:12.588030,48,,"public double getTax(Object person) {
  double tax = 0;
  // How to establish if something is of an extended type
  if (person instanceof Employee) {
	double salary = person.getSalary();
    if (salary == null) throw new Exception();
    if (salary < 10000) {
      tax = salary * .02;
    } else {
      tax = salary * .05;
    }
  } else if (person instanceof BusinessOwner) {
    double profit = person.getProfit();
    if (profit == null) throw new Exception();
    else tax = profit * .1;
  } else if (person instanceof Veteran) {
    // How to check if a string is null?
    String veteran_id
  }
  // What if person is not of any of these types?
  // How to throw an error?
}"
877,2.0,2.5,4.0,5.0,2017-04-28 00:15:35.529991,48,,"public double getTax(Object person) {
  double tax = 0;
  // How to establish if something is of an extended type
  if (person instanceof Employee) {
	double salary = person.getSalary();
    if (salary == null) throw new Exception();
    if (salary < 10000) {
      tax = salary * .02;
    } else {
      tax = salary * .05;
    }
  } else if (person instanceof BusinessOwner) {
    double profit = person.getProfit();
    if (profit == null) throw new Exception();
    else tax = profit * .1;
  } else if (person instanceof Veteran) {
    // How to check if a string is null?
    String veteran_id;
  }
  // What if person is not of any of these types?
  // How to throw an error?
}"
878,2.0,2.5,1.5,5.0,2017-04-28 00:15:36.732370,48,,"public double getTax(Object person) {
  double tax = 0;
  // How to establish if something is of an extended type
  if (person instanceof Employee) {
	double salary = person.getSalary();
    if (salary == null) throw new Exception();
    if (salary < 10000) {
      tax = salary * .02;
    } else {
      tax = salary * .05;
    }
  } else if (person instanceof BusinessOwner) {
    double profit = person.getProfit();
    if (profit == null) throw new Exception();
    else tax = profit * .1;
  } else if (person instanceof Veteran) {
    // How to check if a string is null?
    String veteran_id;
  }
  // What if person is not of any of these types?
  // How to throw an error?
}"
879,2.0,1.0,1.5,5.0,2017-04-28 00:15:37.946164,48,,"public double getTax(Object person) {
  double tax = 0;
  // How to establish if something is of an extended type
  if (person instanceof Employee) {
	double salary = person.getSalary();
    if (salary == null) throw new Exception();
    if (salary < 10000) {
      tax = salary * .02;
    } else {
      tax = salary * .05;
    }
  } else if (person instanceof BusinessOwner) {
    double profit = person.getProfit();
    if (profit == null) throw new Exception();
    else tax = profit * .1;
  } else if (person instanceof Veteran) {
    // How to check if a string is null?
    String veteran_id;
  }
  // What if person is not of any of these types?
  // How to throw an error?
}"
880,1.0,1.0,1.5,5.0,2017-04-28 00:15:39.087249,48,,"public double getTax(Object person) {
  double tax = 0;
  // How to establish if something is of an extended type
  if (person instanceof Employee) {
	double salary = person.getSalary();
    if (salary == null) throw new Exception();
    if (salary < 10000) {
      tax = salary * .02;
    } else {
      tax = salary * .05;
    }
  } else if (person instanceof BusinessOwner) {
    double profit = person.getProfit();
    if (profit == null) throw new Exception();
    else tax = profit * .1;
  } else if (person instanceof Veteran) {
    // How to check if a string is null?
    String veteran_id;
  }
  // What if person is not of any of these types?
  // How to throw an error?
}"
881,1.0,1.0,1.5,5.0,2017-04-28 00:17:03.185374,48,484,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""public String getType() {\n    return type;\n}\n"",""rating"":1},""code"":""public double getTax(Object person) {\n  double tax = 0;\n  // How to establish if something is of an extended type\n  if (person instanceof Employee) {\n\tdouble salary = person.getSalary();\n    if (salary == null) throw new Exception();\n    if (salary < 10000) {\n      tax = salary * .02;\n    } else {\n      tax = salary * .05;\n    }\n  } else if (person instanceof BusinessOwner) {\n    double profit = person.getProfit();\n    if (profit == null) throw new Exception();\n    else tax = profit * .1;\n  } else if (person instanceof Veteran) {\n    // How to check if a string is null\n    // See if a returned string is not null\n    String veteran_id;\n  }\n  // What if person is not of any of these types?\n  // How to throw an error?\n}""}"
882,1.0,1.0,1.5,1.5,2017-04-28 00:18:13.924210,48,,"public double getTax(Object person) {
  double tax = 0;
  // How to establish if something is of an extended type
  if (person instanceof Employee) {
	double salary = person.getSalary();
    if (salary == null) throw new Exception();
    if (salary < 10000) {
      tax = salary * .02;
    } else {
      tax = salary * .05;
    }
  } else if (person instanceof BusinessOwner) {
    double profit = person.getProfit();
    if (profit == null) throw new Exception();
    else tax = profit * .1;
  } else if (person instanceof Veteran) {
    // How to check if a string is null
    // See if a returned string is not null
    String id = person.veteran_id;
    if (id.equals(null)) throw new Exception();
  }
  // What if person is not of any of these types?
  // How to throw an error?
}"
883,1.0,2.5,1.5,1.5,2017-04-28 00:18:16.119767,48,,"public double getTax(Object person) {
  double tax = 0;
  // How to establish if something is of an extended type
  if (person instanceof Employee) {
	double salary = person.getSalary();
    if (salary == null) throw new Exception();
    if (salary < 10000) {
      tax = salary * .02;
    } else {
      tax = salary * .05;
    }
  } else if (person instanceof BusinessOwner) {
    double profit = person.getProfit();
    if (profit == null) throw new Exception();
    else tax = profit * .1;
  } else if (person instanceof Veteran) {
    // How to check if a string is null
    // See if a returned string is not null
    String id = person.veteran_id;
    if (id.equals(null)) throw new Exception();
  }
  // What if person is not of any of these types?
  // How to throw an error?
}"
884,1.0,2.5,1.5,1.5,2017-04-28 00:18:37.515789,48,485,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""/**\n     * Skips whitespace characters and then reads a value of type double from input.\n     * Any characters that remain on the line are saved for subsequent input operations.\n     * An error occurs if an attempt is made to read past end-of-file,\n     * or if an IOException is thrown when an attempt is made to read data from the\n     * input source, or if a value of the correct type is not found in the input.\n     */\npublic double getDouble() throws IOException {\n    double x = 0.0;\n    while (true) {\n        String str = readRealString();\n        if (str == null) {\n            errorMessage(\""Floating point number not found.\"", \""Real number in the range \"" + (-Double.MAX_VALUE) + \"" to \"" + Double.MAX_VALUE);\n        } else {\n            try {\n                x = Double.parseDouble(str);\n            } catch (NumberFormatException e) {\n                errorMessage(\""Illegal floating point input, \"" + str + \"".\"", \""Real number in the range \"" + (-Double.MAX_VALUE) + \"" to \"" + Double.MAX_VALUE);\n                continue;\n            }\n            if (Double.isInfinite(x)) {\n                errorMessage(\""Floating point input outside of legal range, \"" + str + \"".\"", \""Real number in the range \"" + (-Double.MAX_VALUE) + \"" to \"" + Double.MAX_VALUE);\n                continue;\n            }\n            break;\n        }\n    }\n    return x;\n}\n"",""rating"":4},""code"":""public double getTax(Object person) {\n  double tax = 0;\n  // How to establish if something is of an extended type\n  if (person instanceof Employee) {\n\tdouble salary = person.getSalary();\n    if (salary == null) throw new Exception();\n    if (salary < 10000) {\n      tax = salary * .02;\n    } else {\n      tax = salary * .05;\n    }\n  } else if (person instanceof BusinessOwner) {\n    double profit = person.getProfit();\n    if (profit == null) throw new Exception();\n    else tax = profit * .1;\n  } else if (person instanceof Veteran) {\n    // How to check if a string is null\n    // See if a returned string is not null\n    String id = person.veteran_id;\n    if (id.equals(null)) throw new Exception();\n  }\n  // What if person is not of any of these types?\n  // How to throw an error?\n}""}"
885,1.0,2.5,1.5,1.5,2017-04-28 00:19:38.057274,48,486,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""/**\n      Computes the sum of the scores\n      @return the total score\n   */\npublic double sum() {\n    double total = 0;\n    for (double score : scores) {\n        total = total + score;\n    }\n    return total;\n}\n"",""rating"":1},""code"":""public double getTax(Object person) {\n  double tax = 0;\n  // How to establish if something is of an extended type\n  if (person instanceof Employee) {\n\tdouble salary = person.getSalary();\n    if (salary == null) throw new Exception();\n    if (salary < 10000) {\n      tax = salary * .02;\n    } else {\n      tax = salary * .05;\n    }\n  } else if (person instanceof BusinessOwner) {\n    double profit = person.getProfit();\n    if (profit == null) throw new Exception();\n    else tax = profit * .1;\n  } else if (person instanceof Veteran) {\n    // How to check if a string is null\n    // See if a returned string is not null\n    String id = person.veteran_id;\n    if (id == null) throw new Exception();\n    else tax = 0;\n  } \n  // What if person is not of any of these types?\n  // How to throw an error?\n  else {\n    throw new Exception();\n  } return tax;\n}""}"
886,1.0,2.5,1.5,1.5,2017-04-28 00:20:40.781153,48,487,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""public double getTax() {\n    double tax1 = 0;\n    double tax2 = 0;\n    if (status == SINGLE) {\n        if (income <= RATE1_SINGLE_LIMIT) {\n            tax1 = RATE1 * income;\n        } else {\n            tax1 = RATE1 * RATE1_SINGLE_LIMIT;\n            tax2 = RATE2 * (income - RATE1_SINGLE_LIMIT);\n        }\n    } else {\n        if (income <= RATE1_MARRIED_LIMIT) {\n            tax1 = RATE1 * income;\n        } else {\n            tax1 = RATE1 * RATE1_MARRIED_LIMIT;\n            tax2 = RATE2 * (income - RATE1_MARRIED_LIMIT);\n        }\n    }\n    return tax1 + tax2;\n}\n"",""rating"":2},""code"":""/*\n* Takes a person and returns their tax as below:\n* 1. For employees, if salary < $10,000, 2% of salary, else 5%\n* 2. For business owners, 10% of their profit\n* 3. 0 for veterans\n*/\npublic double getTax(Object person) {\n  double tax = 0;\n  // How to establish if something is of an extended type\n  if (person instanceof Employee) {\n\tdouble salary = person.getSalary();\n    if (salary == null) throw new Exception();\n    if (salary < 10000) {\n      tax = salary * .02;\n    } else {\n      tax = salary * .05;\n    }\n  } else if (person instanceof BusinessOwner) {\n    double profit = person.getProfit();\n    if (profit == null) throw new Exception();\n    else tax = profit * .1;\n  } else if (person instanceof Veteran) {\n    // How to check if a string is null\n    // See if a returned string is not null\n    String id = person.veteran_id;\n    if (id == null) throw new Exception();\n    else tax = 0;\n  } \n  // What if person is not of any of these types?\n  // How to throw an error?\n  else {\n    throw new Exception();\n  } return tax;\n}""}"
887,1.0,2.5,1.5,1.5,2017-04-28 00:20:49.742116,48,488,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""/**\n      Sets the name of this employee.\n      @param employeeName the new name \n   */\npublic void setName(String employeeName) {\n    name = employeeName;\n}\n"",""rating"":1},""code"":""/*\n* Takes a person and returns their tax as below:\n* 1. For employees, if salary < $10,000, 2% of salary, else 5%\n* 2. For business owners, 10% of their profit\n* 3. 0 for veterans\n*/\npublic double getTax(Object person) {\n  double tax = 0;\n  // How to establish if something is of an extended type\n  if (person instanceof Employee) {\n\tdouble salary = person.getSalary();\n    if (salary == null) throw new Exception();\n    if (salary < 10000) {\n      tax = salary * .02;\n    } else {\n      tax = salary * .05;\n    }\n  } else if (person instanceof BusinessOwner) {\n    double profit = person.getProfit();\n    if (profit == null) throw new Exception();\n    else tax = profit * .1;\n  } else if (person instanceof Veteran) {\n    // How to check if a string is null\n    // See if a returned string is not null\n    String id = person.veteran_id;\n    if (id == null) throw new Exception();\n    else tax = 0;\n  } \n  // What if person is not of any of these types?\n  // How to throw an error?\n  else {\n    throw new Exception();\n  } return tax;\n}""}"
888,1.0,2.5,1.5,1.5,2017-04-28 00:21:01.117836,48,489,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""/**\n      Constructs a manager with a given name, annual salary and weekly bonus.\n      @param name the name of this employee\n      @param salary the annual salary\n      @param bonus the weekly bonus\n    */\npublic Manager(String name, double salary, double bonus) {\n    super(name, salary);\n    weeklyBonus = bonus;\n}\n"",""rating"":2},""code"":""/*\n* Takes a person and returns their tax as below:\n* 1. For employees, if salary < $10,000, 2% of salary, else 5%\n* 2. For business owners, 10% of their profit\n* 3. 0 for veterans\n*/\npublic double getTax(Object person) {\n  double tax = 0;\n  // How to establish if something is of an extended type\n  if (person instanceof Employee) {\n\tdouble salary = person.getSalary();\n    if (salary == null) throw new Exception();\n    if (salary < 10000) {\n      tax = salary * .02;\n    } else {\n      tax = salary * .05;\n    }\n  } else if (person instanceof BusinessOwner) {\n    double profit = person.getProfit();\n    if (profit == null) throw new Exception();\n    else tax = profit * .1;\n  } else if (person instanceof Veteran) {\n    // How to check if a string is null\n    // See if a returned string is not null\n    String id = person.veteran_id;\n    if (id == null) throw new Exception();\n    else tax = 0;\n  } \n  // What if person is not of any of these types?\n  // How to throw an error?\n  else {\n    throw new Exception();\n  } return tax;\n}""}"
889,1.0,2.5,1.5,1.5,2017-04-28 00:21:40.774527,48,490,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""public double getAverageScore(int studentId) {\n    double total = 0;\n    for (double x : scores) {\n        total = total + x;\n    }\n    return total / scores.size();\n}\n"",""rating"":1},""code"":""/*\n* Takes a person and returns their tax as below:\n* 1. For employees, if salary < $10,000, 2% of salary, else 5%\n* 2. For business owners, 10% of their profit\n* 3. 0 for veterans\n*/\npublic double getTax(Object person) {\n  double tax = 0;\n  // How to establish if something is of an extended type\n  if (person instanceof Employee) {\n\tdouble salary = person.getSalary();\n    if (salary == null) throw new Exception();\n    if (salary < 10000) {\n      tax = salary * .02;\n    } else {\n      tax = salary * .05;\n    }\n  } else if (person instanceof BusinessOwner) {\n    double profit = person.getProfit();\n    if (profit == null) throw new Exception();\n    else tax = profit * .1;\n  } else if (person instanceof Veteran) {\n    // How to check if a string is null\n    // See if a returned string is not null\n    String id = person.veteran_id;\n    if (id == null) throw new Exception();\n    else tax = 0;\n  } \n  // What if person is not of any of these types?\n  // How to throw an error?\n  else {\n    throw new Exception();\n  } \n  // Return the final result, assuming an exception has not \n  // been thrown\n  return tax;\n}""}"
890,1.0,1.0,1.0,1.0,2017-04-28 00:24:07.254732,48,491,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static <E extends Comparable<E>> E max(E[] a) {\n    E largest = a[0];\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":4},""code"":""/*\n* Write a method that takes an integer array and \n* returns the largest difference between its elements\n*/\npublic int getDifference(int[] array1) {\n  \n}""}"
891,1.0,1.0,1.0,1.0,2017-04-28 00:24:08.943405,48,492,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""public static <E extends Comparable<? super E>> E max(ArrayList<E> a) // public static <E extends Comparable<E>> E max(ArrayList<E> a) \n// doesn't work with Student array list\n{\n    E largest = a.get(0);\n    for (int i = 1; i < a.size(); i++) {\n        if (a.get(i).compareTo(largest) > 0) {\n            largest = a.get(i);\n        }\n    }\n    return largest;\n}\n"",""rating"":2},""code"":""/*\n* Write a method that takes an integer array and \n* returns the largest difference between its elements\n*/\npublic int getDifference(int[] array1) {\n  \n}""}"
892,1.0,1.0,1.0,1.0,2017-04-28 00:25:00.801156,48,493,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""public void write(char[] b) {\n    write(b, 0, b.length);\n}\n"",""rating"":1},""code"":""/*\n* Write a method that takes an integer array and \n* returns the largest difference between its elements\n*/\npublic int getDifference(int[] array1) {\n  \n}""}"
893,1.0,1.0,1.0,1.0,2017-04-28 00:25:08.858551,48,494,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""/** \n   * This method computes a pseudo-random integer between 0 and specified\n   * maximum.  It uses randomFloat() above.\n   **/\npublic int randomInt(int max) {\n    return Math.round(max * randomFloat());\n}\n"",""rating"":1},""code"":""/*\n* Write a method that takes an integer array and \n* returns the largest difference between its elements\n*/\npublic int getDifference(int[] array1) {\n  \n}""}"
894,1.0,1.0,1.0,1.0,2017-04-28 00:25:14.659512,48,495,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""/** \n     * This method computes a pseudo-random integer between 0 and specified\n     * maximum.  It uses randomFloat() above.\n     **/\npublic int randomInt(int max) {\n    return Math.round(max * randomFloat());\n}\n"",""rating"":1},""code"":""/*\n* Write a method that takes an integer array and \n* returns the largest difference between its elements\n*/\npublic int getDifference(int[] array1) {\n  \n}""}"
895,1.0,1.0,1.0,1.0,2017-04-28 00:25:29.394218,48,496,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""/** \n   * This convenience method checks whether the name and password match\n   * an existing account.  If so, it returns the balance in that account.\n   * If not, it throws an exception.  Note that this method does not call\n   * commit() or rollback(), so its query is part of a larger transaction.\n   **/\npublic int verify(String name, String password) throws BankingException, SQLException {\n    Statement s = null;\n    try {\n        s = db.createStatement();\n        s.executeQuery(\""SELECT balance FROM accounts \"" + \""WHERE name='\"" + name + \""' \"" + \""  AND password = '\"" + password + \""'\"");\n        ResultSet r = s.getResultSet();\n        if (!r.next())\n            throw new BankingException(\""No such account or invalid password\"");\n        return r.getInt(1);\n    } finally {\n        try {\n            s.close();\n        } catch (Exception e) {\n        }\n    }\n}\n"",""rating"":1},""code"":""/*\n* Write a method that takes an integer array and \n* returns the largest difference between its elements\n*/\npublic int getDifference(int[] array1) {\n  \n}""}"
896,1.0,1.0,1.0,1.0,2017-04-28 00:27:47.009559,48,497,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""public int run() {\n    MutableInteger list[] = new MutableInteger[MAX];\n    for (int i = 0; i < list.length; i++) {\n        list[i] = new MutableInteger(i);\n    }\n    int sum = 0;\n    for (int i = 0; i < list.length; i++) {\n        sum += list[i].getValue();\n    }\n    return sum;\n}\n"",""rating"":1},""code"":""/*\n* Write a method that takes an integer array and \n* returns the largest difference between its elements\n*/\npublic int getDifference(int[] array1) {\n  int largest = array1[0];\n  int smallest = array1[0];\n  for (int i = 0; i < array1.length; i++) {\n    if (a[i].compareTo(largest) > 0) {\n      largest = a[i];\n    } else if (a[i].compareTo(smallest) < 0) {\n      smallest = a[i];\n    }\n  }\n}""}"
897,1.0,1.0,1.0,1.0,2017-04-28 00:28:01.329934,48,498,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Computes the largest value of an array.\n      @param a the array\n      @return the largest value in a\n   */\npublic static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":4},""code"":""/*\n* Write a method that takes an integer array and \n* returns the largest difference between its elements\n*/\npublic int getDifference(int[] array1) {\n  int largest = array1[0];\n  int smallest = array1[0];\n  for (int i = 0; i < array1.length; i++) {\n    if (a[i].compareTo(largest) > 0) {\n      largest = a[i];\n    } else if (a[i].compareTo(smallest) < 0) {\n      smallest = a[i];\n    }\n  }\n}""}"
898,1.0,1.0,1.0,1.0,2017-04-28 00:28:12.975589,48,499,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent1(int[] a) {\n    int[] counts = new int[a.length];\n    for (// O(n*n)\n    int i = 0; // O(n*n)\n    i < a.length; // O(n*n)\n    i++) {\n        // O(n) in each iteration\n        counts[i] = count(a, a[i]);\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":2},""code"":""/*\n* Write a method that takes an integer array and \n* returns the largest difference between its elements\n*/\npublic int getDifference(int[] array1) {\n  int largest = array1[0];\n  int smallest = array1[0];\n  for (int i = 0; i < array1.length; i++) {\n    if (a[i].compareTo(largest) > 0) {\n      largest = a[i];\n    } else if (a[i].compareTo(smallest) < 0) {\n      smallest = a[i];\n    }\n  }\n}""}"
899,1.0,1.0,1.0,1.0,2017-04-28 00:28:32.666459,48,500,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""/**\n      Gets the position of the minimum score.\n      @return the position of the smallest element of values, or -1\n      if there are no scores.\n   */\npublic int minimumPosition() {\n    if (scores.size() == 0) {\n        return -1;\n    }\n    int smallestPosition = 0;\n    for (int i = 1; i < scores.size(); i++) {\n        if (scores.get(i) < scores.get(smallestPosition)) {\n            smallestPosition = i;\n        }\n    }\n    return smallestPosition;\n}\n"",""rating"":3},""code"":""/*\n* Write a method that takes an integer array and \n* returns the largest difference between its elements\n*/\npublic int getDifference(int[] array1) {\n  int largest = array1[0];\n  int smallest = array1[0];\n  for (int i = 0; i < array1.length; i++) {\n    if (a[i].compareTo(largest) > 0) {\n      largest = a[i];\n    } else if (a[i].compareTo(smallest) < 0) {\n      smallest = a[i];\n    }\n  }\n}""}"
900,1.0,1.0,1.0,1.0,2017-04-28 00:29:05.331362,48,501,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""/**\n      Finds the smallest element in a tail range of the array.\n      @param a the array to sort\n      @param from the first position in a to compare\n      @return the position of the smallest element in the\n      range a[from] . . . a[a.length - 1]\n   */\nprivate static int minimumPosition(int[] a, int from) {\n    int minPos = from;\n    for (int i = from + 1; i < a.length; i++) {\n        if (a[i] < a[minPos]) {\n            minPos = i;\n        }\n    }\n    return minPos;\n}\n"",""rating"":3},""code"":""/*\n* Write a method that takes an integer array and \n* returns the largest difference between its elements\n*/\npublic int getDifference(int[] array1) {\n  int largest = array1[0];\n  int smallest = array1[0];\n  for (int i = 0; i < array1.length; i++) {\n    if (a[i].compareTo(largest) > 0) {\n      largest = a[i];\n    } else if (a[i].compareTo(smallest) < 0) {\n      smallest = a[i];\n    }\n  }\n}""}"
901,1.0,1.0,1.0,1.0,2017-04-28 00:29:59.357266,48,502,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""// close inner class\npublic void makeTracks(int[] list) {\n    for (int i = 0; i < 16; i++) {\n        int key = list[i];\n        if (key != 0) {\n            track.add(makeEvent(144, 9, key, 100, i));\n            track.add(makeEvent(128, 9, key, 100, i + 1));\n        }\n    }\n}\n"",""rating"":1},""code"":""/*\n* Write a method that takes an integer array and \n* returns the largest difference between its elements\n*/\npublic int getDifference(int[] array1) {\n  int largest = array1[0];\n  int smallest = array1[0];\n  for (int i = 0; i < array1.length; i++) {\n    if (a[i].compareTo(largest) > 0) {\n      largest = a[i];\n    } else if (a[i].compareTo(smallest) < 0) {\n      smallest = a[i];\n    }\n  } return largest - smallest;\n}""}"
902,1.0,1.0,1.0,1.0,2017-04-28 00:30:05.730710,48,503,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""// close inner class\n//==============================================================       \npublic void makeTracks(int[] list) {\n    for (int i = 0; i < 16; i++) {\n        int key = list[i];\n        if (key != 0) {\n            track.add(makeEvent(144, 9, key, 100, i));\n            track.add(makeEvent(128, 9, key, 100, i + 1));\n        }\n    }\n}\n"",""rating"":1},""code"":""/*\n* Write a method that takes an integer array and \n* returns the largest difference between its elements\n*/\npublic int getDifference(int[] array1) {\n  int largest = array1[0];\n  int smallest = array1[0];\n  for (int i = 0; i < array1.length; i++) {\n    if (a[i].compareTo(largest) > 0) {\n      largest = a[i];\n    } else if (a[i].compareTo(smallest) < 0) {\n      smallest = a[i];\n    }\n  } return largest - smallest;\n}""}"
903,1.0,1.0,1.0,1.0,2017-04-28 00:30:10.820368,48,504,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""public int run() {\n    ArrayList<MutableInteger> list = new ArrayList<>();\n    for (int i = 0; i < MAX; i++) {\n        list.add(new MutableInteger(i));\n    }\n    int sum = 0;\n    for (int i = 0; i < MAX; i++) {\n        sum += ((MutableInteger) list.get(i)).getValue();\n    }\n    return sum;\n}\n"",""rating"":1},""code"":""/*\n* Write a method that takes an integer array and \n* returns the largest difference between its elements\n*/\npublic int getDifference(int[] array1) {\n  int largest = array1[0];\n  int smallest = array1[0];\n  for (int i = 0; i < array1.length; i++) {\n    if (a[i].compareTo(largest) > 0) {\n      largest = a[i];\n    } else if (a[i].compareTo(smallest) < 0) {\n      smallest = a[i];\n    }\n  } return largest - smallest;\n}""}"
904,1.0,1.0,1.0,1.0,2017-04-28 00:30:50.704338,48,505,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""/**\n      Gets the position of the minimum score.\n      @return the position of the smallest element of values, or -1\n      if there are no scores.\n   */\npublic int minimumPosition() {\n    if (scores.size() == 0) {\n        return -1;\n    }\n    int smallestPosition = 0;\n    for (int i = 1; i < scores.size(); i++) {\n        if (scores.get(i) < scores.get(smallestPosition)) {\n            smallestPosition = i;\n        }\n    }\n    return smallestPosition;\n}\n"",""rating"":3},""code"":""/*\n* Write a method that takes an integer array and \n* returns the largest difference between its elements\n*/\npublic int getDifference(int[] array1) {\n  int largest = array1[0];\n  int smallest = array1[0];\n  for (int i = 0; i < array1.length; i++) {\n    if (a[i].compareTo(largest) > 0) {\n      largest = a[i];\n    } else if (a[i].compareTo(smallest) < 0) {\n      smallest = a[i];\n    }\n  } return largest - smallest;\n}""}"
905,1.0,4.0,1.0,1.0,2017-04-28 00:31:03.093116,48,,"/*
* Write a method that takes an integer array and 
* returns the largest difference between its elements
*/
public int getDifference(int[] array1) {
  int largest = array1[0];
  int smallest = array1[0];
  for (int i = 0; i < array1.length; i++) {
    if (a[i].compareTo(largest) > 0) {
      largest = a[i];
    } else if (a[i].compareTo(smallest) < 0) {
      smallest = a[i];
    }
  } return largest - smallest;
}"
906,1.0,1.0,1.0,1.0,2017-04-28 02:51:41.010021,49,506,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""public int getSize() {\n    return size;\n}\n"",""rating"":1},""code"":""public int returnLargestDifferenceBetweenElements(int[] array){\n  \n}""}"
907,1.0,1.0,1.0,1.0,2017-04-28 02:51:42.003281,49,507,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""/** \n     * This method computes a pseudo-random integer between 0 and specified\n     * maximum.  It uses randomFloat() above.\n     **/\npublic int randomInt(int max) {\n    return Math.round(max * randomFloat());\n}\n"",""rating"":1},""code"":""public int returnLargestDifferenceBetweenElements(int[] array){\n  \n}""}"
908,1.0,1.0,1.0,1.0,2017-04-28 02:51:49.056852,49,508,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""/**\n         * Return the largest item that has been entered.\n         * The return value will be -infinity if no numbers have been entered. \n         */\npublic double getMax() {\n    return max;\n}\n"",""rating"":2},""code"":""public int returnLargestDifferenceBetweenElements(int[] array){\n  \n}""}"
909,1.0,1.0,1.0,1.0,2017-04-28 02:52:13.452555,49,509,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Computes the largest value of an array.\n      @param a the array\n      @return the largest value in a\n   */\npublic static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":4},""code"":""public int returnLargestDifferenceBetweenElements(int[] array){\n  \n}""}"
910,1.0,1.0,1.0,4.0,2017-04-28 02:52:37.033243,49,,"public int returnLargestDifferenceBetweenElements(int[] array){
  int largest = values[0];
    for (int i = 1; i < values.length; i++) {
        if (values[i] > largest) {
            largest = values[i];
        }
    }

  //Get smallest value
  
}"
911,1.0,1.0,0.5,4.0,2017-04-28 02:52:57.614954,49,,"public int returnLargestDifferenceBetweenElements(int[] array){

  //Get smallest value
  
}"
912,1.0,1.0,0.5,4.0,2017-04-28 02:53:08.697558,49,510,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""/**\n      Gets the position of the minimum score.\n      @return the position of the smallest element of values, or -1\n      if there are no scores.\n   */\npublic int minimumPosition() {\n    if (scores.size() == 0) {\n        return -1;\n    }\n    int smallestPosition = 0;\n    for (int i = 1; i < scores.size(); i++) {\n        if (scores.get(i) < scores.get(smallestPosition)) {\n            smallestPosition = i;\n        }\n    }\n    return smallestPosition;\n}\n"",""rating"":4},""code"":""public int returnLargestDifferenceBetweenElements(int[] array){\n\n  //Get smallest value\n  \n}""}"
913,1.0,1.0,0.5,4.0,2017-04-28 02:53:27.996141,49,511,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Computes the largest value of an array.\n      @param a the array\n      @return the largest value in a\n   */\npublic static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":4},""code"":""public int returnLargestDifferenceBetweenElements(int[] array){\n\n  //Get smallest value\n  \n}""}"
914,2.5,1.0,0.5,4.0,2017-04-28 02:55:26.864280,49,,"public int returnLargestDifferenceBetweenElements(int[] array){
  //Get largest value
    int largestValue = array[0];
    for (int i = 1; i < array.length; i++) {
        if (array[i] > largestValue) {
            largestValue = array[i];
        }
    }

    int smallestValue = array[0];
    for (int i = 1; i < array.length; i++) {
        if (array[i] < smallestValue) {
            smallestValue = array[i];
        }
    }
  
}"
915,2.5,2.5,0.5,4.0,2017-04-28 02:55:28.639454,49,,"public int returnLargestDifferenceBetweenElements(int[] array){
  //Get largest value
    int largestValue = array[0];
    for (int i = 1; i < array.length; i++) {
        if (array[i] > largestValue) {
            largestValue = array[i];
        }
    }

    int smallestValue = array[0];
    for (int i = 1; i < array.length; i++) {
        if (array[i] < smallestValue) {
            smallestValue = array[i];
        }
    }
  
}"
916,2.5,2.5,0.5,3.5,2017-04-28 02:55:36.010959,49,,"public int returnLargestDifferenceBetweenElements(int[] array){
  //Get largest value
    int largestValue = array[0];
    for (int i = 1; i < array.length; i++) {
        if (array[i] > largestValue) {
            largestValue = array[i];
        }
    }

    int smallestValue = array[0];
    for (int i = 1; i < array.length; i++) {
        if (array[i] < smallestValue) {
            smallestValue = array[i];
        }
    }
  
  //Return the difference
}"
917,2.5,2.5,0.5,2.0,2017-04-28 02:56:00.008515,49,,"public int returnLargestDifferenceBetweenElements(int[] array){
  //Get largest value
    int largestValue = array[0];
    for (int i = 1; i < array.length; i++) {
        if (array[i] > largestValue) {
            largestValue = array[i];
        }
    }

    int smallestValue = array[0];
    for (int i = 1; i < array.length; i++) {
        if (array[i] < smallestValue) {
            smallestValue = array[i];
        }
    }
  
  //Return the difference
}"
918,2.5,2.5,0.5,0.5,2017-04-28 02:56:00.920462,49,,"public int returnLargestDifferenceBetweenElements(int[] array){
  //Get largest value
    int largestValue = array[0];
    for (int i = 1; i < array.length; i++) {
        if (array[i] > largestValue) {
            largestValue = array[i];
        }
    }

    int smallestValue = array[0];
    for (int i = 1; i < array.length; i++) {
        if (array[i] < smallestValue) {
            smallestValue = array[i];
        }
    }
  
  //Return the difference
}"
919,2.5,2.5,0.5,4.5,2017-04-28 02:56:02.992916,49,,"public int returnLargestDifferenceBetweenElements(int[] array){
  //Get largest value
    int largestValue = array[0];
    for (int i = 1; i < array.length; i++) {
        if (array[i] > largestValue) {
            largestValue = array[i];
        }
    }

    int smallestValue = array[0];
    for (int i = 1; i < array.length; i++) {
        if (array[i] < smallestValue) {
            smallestValue = array[i];
        }
    }
  
  //Return the difference
}"
920,2.5,2.5,0.5,4.5,2017-04-28 02:56:18.081770,49,512,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""// close inner class\npublic void makeTracks(int[] list) {\n    for (int i = 0; i < 16; i++) {\n        int key = list[i];\n        if (key != 0) {\n            track.add(makeEvent(144, 9, key, 100, i));\n            track.add(makeEvent(128, 9, key, 100, i + 1));\n        }\n    }\n}\n"",""rating"":1},""code"":""public int returnLargestDifferenceBetweenElements(int[] array){\n  //Get largest value\n    int largestValue = array[0];\n    for (int i = 1; i < array.length; i++) {\n        if (array[i] > largestValue) {\n            largestValue = array[i];\n        }\n    }\n\n    int smallestValue = array[0];\n    for (int i = 1; i < array.length; i++) {\n        if (array[i] < smallestValue) {\n            smallestValue = array[i];\n        }\n    }\n  \n  //Return the difference\n}""}"
921,2.5,2.5,0.5,4.5,2017-04-28 02:56:23.279378,49,513,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""public int run() {\n    MutableInteger list[] = new MutableInteger[MAX];\n    for (int i = 0; i < list.length; i++) {\n        list[i] = new MutableInteger(i);\n    }\n    int sum = 0;\n    for (int i = 0; i < list.length; i++) {\n        sum += list[i].getValue();\n    }\n    return sum;\n}\n"",""rating"":1},""code"":""public int returnLargestDifferenceBetweenElements(int[] array){\n  //Get largest value\n    int largestValue = array[0];\n    for (int i = 1; i < array.length; i++) {\n        if (array[i] > largestValue) {\n            largestValue = array[i];\n        }\n    }\n\n    int smallestValue = array[0];\n    for (int i = 1; i < array.length; i++) {\n        if (array[i] < smallestValue) {\n            smallestValue = array[i];\n        }\n    }\n  \n  //Return the difference\n}""}"
922,2.5,2.5,0.5,3.5,2017-04-28 02:56:33.687321,49,,"public int returnLargestDifferenceBetweenElements(int[] array){

  //Return the difference between two numbers
}"
923,3.5,2.5,0.5,3.5,2017-04-28 02:56:35.344257,49,,"public int returnLargestDifferenceBetweenElements(int[] array){

  //Return the difference between two numbers
}"
924,3.5,2.0,0.5,3.5,2017-04-28 02:56:36.398347,49,,"public int returnLargestDifferenceBetweenElements(int[] array){

  //Return the difference between two numbers
}"
925,3.5,2.0,0.5,3.5,2017-04-28 02:56:50.031082,49,,"public int returnLargestDifferenceBetweenElements(int[] array){

  //Return the difference between two numbers
}"
926,4.5,2.0,0.5,3.5,2017-04-28 02:56:52.431346,49,,"public int returnLargestDifferenceBetweenElements(int[] array){

  //Return the difference between two numbers
}"
927,4.5,1.0,0.5,3.5,2017-04-28 02:56:54.627733,49,,"public int returnLargestDifferenceBetweenElements(int[] array){

  //Return the difference between two numbers
}"
928,4.5,1.0,2.5,3.5,2017-04-28 02:56:55.395977,49,,"public int returnLargestDifferenceBetweenElements(int[] array){

  //Return the difference between two numbers
}"
929,4.5,2.0,2.5,3.5,2017-04-28 02:56:57.461708,49,,"public int returnLargestDifferenceBetweenElements(int[] array){

  //Return the difference between two numbers
}"
930,4.5,2.0,2.5,3.5,2017-04-28 02:58:22.687692,49,514,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String[] args) {\n    ArrayList<Double> values = new ArrayList<Double>();\n    // Read inputs\n    System.out.println(\""Please enter values, Q to quit:\"");\n    Scanner in = new Scanner(System.in);\n    while (in.hasNextDouble()) {\n        values.add(in.nextDouble());\n    }\n    // Find the largest value\n    double largest = values.get(0);\n    for (int i = 1; i < values.size(); i++) {\n        if (values.get(i) > largest) {\n            largest = values.get(i);\n        }\n    }\n    for (double element : values) {\n        System.out.print(element);\n        if (element == largest) {\n            System.out.print(\"" <== largest value\"");\n        }\n        System.out.println();\n    }\n}\n       // Print all values, marking the largest\n\n"",""rating"":3},""code"":""public int returnLargestDifferenceBetweenElements(int[] array){\n  //Get largest value\n    int largestValue = array[0];\n    for (int i = 1; i < array.length; i++) {\n        if (array[i] > largestValue) {\n            largestValue = array[i];\n        }\n    }\n  \n  //Get smallest value\n    int smallestValue = array[0];\n    for (int i = 1; i < array.length; i++) {\n        if (array[i] < smallestValue) {\n            smallestValue = array[i];\n        }\n    }\n  \n  //Return the difference\n  return largestValue - smallestValue;\n}""}"
931,4.5,2.0,2.5,3.5,2017-04-28 02:58:28.422839,49,515,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""/** Return an element of the array */\npublic int get(int index) throws ArrayIndexOutOfBoundsException {\n    if (index >= size)\n        throw new ArrayIndexOutOfBoundsException(index);\n    else\n        return data[index];\n}\n"",""rating"":2},""code"":""public int returnLargestDifferenceBetweenElements(int[] array){\n  //Get largest value\n    int largestValue = array[0];\n    for (int i = 1; i < array.length; i++) {\n        if (array[i] > largestValue) {\n            largestValue = array[i];\n        }\n    }\n  \n  //Get smallest value\n    int smallestValue = array[0];\n    for (int i = 1; i < array.length; i++) {\n        if (array[i] < smallestValue) {\n            smallestValue = array[i];\n        }\n    }\n  \n  //Return the difference\n  return largestValue - smallestValue;\n}""}"
932,4.5,2.0,2.5,3.5,2017-04-28 02:58:29.357357,49,516,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""// Return the button\npublic int getID() {\n    return id;\n}\n"",""rating"":1},""code"":""public int returnLargestDifferenceBetweenElements(int[] array){\n  //Get largest value\n    int largestValue = array[0];\n    for (int i = 1; i < array.length; i++) {\n        if (array[i] > largestValue) {\n            largestValue = array[i];\n        }\n    }\n  \n  //Get smallest value\n    int smallestValue = array[0];\n    for (int i = 1; i < array.length; i++) {\n        if (array[i] < smallestValue) {\n            smallestValue = array[i];\n        }\n    }\n  \n  //Return the difference\n  return largestValue - smallestValue;\n}""}"
933,4.5,2.0,2.5,3.5,2017-04-28 02:58:34.630127,49,517,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""/**\n      Gets the number of elements in this set.\n      @return the number of elements\n   */\npublic int size() {\n    return currentSize;\n}\n"",""rating"":1},""code"":""public int returnLargestDifferenceBetweenElements(int[] array){\n  //Get largest value\n    int largestValue = array[0];\n    for (int i = 1; i < array.length; i++) {\n        if (array[i] > largestValue) {\n            largestValue = array[i];\n        }\n    }\n  \n  //Get smallest value\n    int smallestValue = array[0];\n    for (int i = 1; i < array.length; i++) {\n        if (array[i] < smallestValue) {\n            smallestValue = array[i];\n        }\n    }\n  \n  //Return the difference\n  return largestValue - smallestValue;\n}""}"
934,4.5,2.0,2.5,3.5,2017-04-28 02:58:40.458504,49,518,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static <E extends Comparable<E>> E max(E[] a) {\n    E largest = a[0];\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":2},""code"":""public int returnLargestDifferenceBetweenElements(int[] array){\n  //Get largest value\n    int largestValue = array[0];\n    for (int i = 1; i < array.length; i++) {\n        if (array[i] > largestValue) {\n            largestValue = array[i];\n        }\n    }\n  \n  //Get smallest value\n    int smallestValue = array[0];\n    for (int i = 1; i < array.length; i++) {\n        if (array[i] < smallestValue) {\n            smallestValue = array[i];\n        }\n    }\n  \n  //Return the difference\n  return largestValue - smallestValue;\n}""}"
935,1.0,1.0,1.0,1.0,2017-04-28 02:59:58.407055,49,519,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""/** Compute the magnitude of a complex number */\npublic double magnitude() {\n    return Math.sqrt(x * x + y * y);\n}\n"",""rating"":1},""code"":""public double calculateTax(Person person){\n  \n}""}"
936,1.0,1.0,1.0,1.0,2017-04-28 03:00:02.499743,49,520,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""/**\n      Gets the product price.\n      @return the unit price\n   */\npublic double getPrice() {\n    return price;\n}\n"",""rating"":1},""code"":""public double calculateTax(Person person){\n  \n}""}"
937,1.0,1.0,1.0,1.0,2017-04-28 03:00:06.888072,49,521,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", targetDate = \""Jan 1, 2012\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""public double calculateTax(Person person){\n  \n}""}"
938,1.0,1.0,1.0,1.0,2017-04-28 03:00:14.506304,49,522,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""public Product(float price) {\n    this.price = price;\n    tax = (float) (price * 0.20);\n}\n"",""rating"":4},""code"":""public double calculateTax(Person person){\n  \n}""}"
939,1.0,1.0,1.0,3.5,2017-04-28 03:01:15.330993,49,,"public double calculateTax(Person person){
  //Return 0 if veteran_id is null or empty
}"
940,1.0,1.0,1.0,3.5,2017-04-28 03:01:24.612128,49,523,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""/**\n     * Return the standard deviation of all the items that have been entered.\n     * The return value is Double.NaN if no numbers have been entered.\n     */\npublic double getStandardDeviation() {\n    double mean = getMean();\n    return Math.sqrt(squareSum / count - mean * mean);\n}\n"",""rating"":2},""code"":""public double calculateTax(Person person){\n  //Return 0 if veteran_id is null or empty\n}""}"
941,1.0,1.0,1.0,3.5,2017-04-28 03:02:07.605167,49,,"public double calculateTax(Person person){
  // Check the type of Person
}"
942,1.0,1.0,3.0,3.5,2017-04-28 03:02:09.750803,49,,"public double calculateTax(Person person){
  // Check the type of Person
}"
943,1.0,1.0,4.0,3.5,2017-04-28 03:02:48.565124,49,,"public double calculateTax(Person person){
  // Check the type of Person, it's a polymorphic type
}"
944,1.0,1.0,4.5,3.5,2017-04-28 03:02:49.198260,49,,"public double calculateTax(Person person){
  // Check the type of Person, it's a polymorphic type
}"
945,1.0,1.0,4.5,3.5,2017-04-28 03:03:05.348422,49,524,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""/**\n      Gets the balance of a bank account.\n      @param accountNumber the account number\n      @return the account balance\n   */\npublic double getBalance(int accountNumber) {\n    BankAccount account = accounts[accountNumber];\n    return account.getBalance();\n}\n"",""rating"":1},""code"":""public double calculateTax(Person person){\n  // Check the type of Person, it's a polymorphic type\n}""}"
946,1.0,4.0,4.5,3.5,2017-04-28 03:03:08.089978,49,,"public double calculateTax(Person person){
  // Check the type of Person, it's a polymorphic type
}"
947,1.0,4.0,4.5,5.0,2017-04-28 03:03:10.499310,49,,"public double calculateTax(Person person){
  // Check the type of Person, it's a polymorphic type
}"
948,1.0,4.0,4.0,5.0,2017-04-28 03:03:11.353548,49,,"public double calculateTax(Person person){
  // Check the type of Person, it's a polymorphic type
}"
949,1.0,3.0,4.0,5.0,2017-04-28 03:03:12.633784,49,,"public double calculateTax(Person person){
  // Check the type of Person, it's a polymorphic type
}"
950,1.0,3.0,4.0,1.0,2017-04-28 03:03:20.794691,49,,"public double calculateTax(Person person){
  // Check the type of Person, it's a polymorphic type
}"
951,1.0,3.0,4.0,0.5,2017-04-28 03:03:22.845142,49,,"public double calculateTax(Person person){
  // Check the type of Person, it's a polymorphic type
}"
952,1.0,3.0,3.0,0.5,2017-04-28 03:03:53.958655,49,,"public double calculateTax(Person person){
  // Check the type of Person, it's a polymorphic type
  if (typeof(person)){
    
  }
}"
953,1.0,3.0,3.0,1.5,2017-04-28 03:03:54.631068,49,,"public double calculateTax(Person person){
  // Check the type of Person, it's a polymorphic type
  if (typeof(person)){
    
  }
}"
954,1.0,3.0,3.0,1.0,2017-04-28 03:04:02.350228,49,,"public double calculateTax(Person person){
  // Check the type of Person, it's a polymorphic type
  if (typeof(person)){
    
  }
}"
955,1.0,3.0,4.5,1.0,2017-04-28 03:04:04.438693,49,,"public double calculateTax(Person person){
  // Check the type of Person, it's a polymorphic type
  if (typeof(person)){
    
  }
}"
956,1.0,3.0,5.0,1.0,2017-04-28 03:04:06.332036,49,,"public double calculateTax(Person person){
  // Check the type of Person, it's a polymorphic type
  if (typeof(person)){
    
  }
}"
957,1.0,3.0,5.0,1.0,2017-04-28 03:04:25.409857,49,525,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""public static void main(String[] args) {\n    String input = JOptionPane.showInputDialog(\""Enter price:\"");\n    double price = Double.parseDouble(input);\n    final double TAX_RATE = 8.5;\n    price = price * (1 + TAX_RATE / 100);\n    JOptionPane.showMessageDialog(null, \""Price after tax: \"" + price);\n}\n"",""rating"":3},""code"":""public double calculateTax(Person person){\n  // Check the type of Person, it's a polymorphic type\n  if (typeof(person)){\n    \n  }\n}""}"
958,1.0,1.5,5.0,1.0,2017-04-28 03:04:30.945626,49,,"public double calculateTax(Person person){
  // Check the type of Person, it's a polymorphic type
  if (typeof(person)){
    
  }
}"
959,0.0,1.5,5.0,1.0,2017-04-28 03:04:32.896670,49,,"public double calculateTax(Person person){
  // Check the type of Person, it's a polymorphic type
  if (typeof(person)){
    
  }
}"
960,0.0,1.5,5.0,0.0,2017-04-28 03:04:36.847248,49,,"public double calculateTax(Person person){
  // Check the type of Person, it's a polymorphic type
  if (typeof(person)){
    
  }
}"
961,0.0,1.5,4.0,0.0,2017-04-28 03:06:05.226843,49,,"public double calculateTax(Person person){
  // Check the type of Person, it's a polymorphic type
  if (person instanceof Employee){
    
  }
}"
962,0.0,1.5,4.0,0.0,2017-04-28 03:06:16.185168,49,526,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""/**\n      Checks that the tree with the given node is a red-black tree, and throws an\n      exception if a structural error is found.\n      @param n the root of the subtree to check\n      @param isRoot true if this is the root of the tree\n      @return the black depth of this subtree \n   */\nprivate static int checkRedBlack(RedBlackTree.Node n, boolean isRoot) {\n    if (n == null) {\n        return 0;\n    }\n    int nleft = checkRedBlack(n.left, false);\n    int nright = checkRedBlack(n.right, false);\n    if (nleft != nright) {\n        throw new IllegalStateException(\""Left and right children of \"" + n.data + \"" have different black depths\"");\n    }\n    if (n.parent == null) {\n        if (!isRoot) {\n            throw new IllegalStateException(n.data + \"" is not root and has no parent\"");\n        }\n        if (n.color != RedBlackTree.BLACK) {\n            throw new IllegalStateException(\""Root \"" + n.data + \"" is not black\"");\n        }\n    } else {\n        if (isRoot) {\n            throw new IllegalStateException(n.data + \"" is root and has a parent\"");\n        }\n        if (n.color == RedBlackTree.RED && n.parent.color == RedBlackTree.RED) {\n            throw new IllegalStateException(\""Parent of red \"" + n.data + \"" is red\"");\n        }\n    }\n    if (n.left != null && n.left.parent != n) {\n        throw new IllegalStateException(\""Left child of \"" + n.data + \"" has bad parent link\"");\n    }\n    if (n.right != null && n.right.parent != n) {\n        throw new IllegalStateException(\""Right child of \"" + n.data + \"" has bad parent link\"");\n    }\n    if (n.color != RedBlackTree.RED && n.color != RedBlackTree.BLACK) {\n        throw new IllegalStateException(n.data + \"" has color \"" + n.color);\n    }\n    return n.color + nleft;\n}\n"",""rating"":1},""code"":""public double calculateTax(Person person){\n  // Check the type of Person, it's a polymorphic type\n  if (person instanceof Employee){\n    \n  }\n}""}"
963,0.0,1.5,4.0,2.0,2017-04-28 03:06:23.713850,49,,"public double calculateTax(Person person){
  // Check the type of Person, it's a polymorphic type
  if (person instanceof Employee){
    
  }
}"
964,1.0,1.5,4.0,2.0,2017-04-28 03:06:25.034556,49,,"public double calculateTax(Person person){
  // Check the type of Person, it's a polymorphic type
  if (person instanceof Employee){
    
  }
}"
965,1.0,1.5,2.5,2.0,2017-04-28 03:06:28.729968,49,,"public double calculateTax(Person person){
  // Check the type of Person, it's a polymorphic type
  if (person instanceof Employee){
    
  }
}"
966,1.0,1.5,3.0,2.0,2017-04-28 03:06:29.127307,49,,"public double calculateTax(Person person){
  // Check the type of Person, it's a polymorphic type
  if (person instanceof Employee){
    
  }
}"
967,5.0,1.5,3.0,2.0,2017-04-28 03:07:40.846372,49,,"public double calculateTax(Person person){
  // Check the type of Person, it's a polymorphic type
  if (person instanceof Employee){
      
  } else if (person instanceof BusinessOwner){
    return person.getProfit() * 0.1;
  } else if (person instanceof Veteran){ 
    return 0;
  } else{
    
  }
}"
968,3.5,1.5,3.0,2.0,2017-04-28 03:07:41.372545,49,,"public double calculateTax(Person person){
  // Check the type of Person, it's a polymorphic type
  if (person instanceof Employee){
      
  } else if (person instanceof BusinessOwner){
    return person.getProfit() * 0.1;
  } else if (person instanceof Veteran){ 
    return 0;
  } else{
    
  }
}"
969,3.5,1.5,3.0,2.0,2017-04-28 03:07:41.888182,49,,"public double calculateTax(Person person){
  // Check the type of Person, it's a polymorphic type
  if (person instanceof Employee){
      
  } else if (person instanceof BusinessOwner){
    return person.getProfit() * 0.1;
  } else if (person instanceof Veteran){ 
    return 0;
  } else{
    
  }
}"
970,3.5,1.5,3.0,2.0,2017-04-28 03:07:50.150618,49,527,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""public static void main(String[] args) {\n    String input = JOptionPane.showInputDialog(\""Enter price:\"");\n    double price = Double.parseDouble(input);\n    final double TAX_RATE = 8.5;\n    price = price * (1 + TAX_RATE / 100);\n    JOptionPane.showMessageDialog(null, \""Price after tax: \"" + price);\n}\n"",""rating"":3},""code"":""public double calculateTax(Person person){\n  // Check the type of Person, it's a polymorphic type\n  if (person instanceof Employee){\n      \n  } else if (person instanceof BusinessOwner){\n    return person.getProfit() * 0.1;\n  } else if (person instanceof Veteran){ \n    return 0;\n  } else{\n    \n  }\n}""}"
971,3.0,1.5,3.0,2.0,2017-04-28 03:09:36.366099,49,,"public double calculateTax(Person person){
  // Check the type of Person, it's a polymorphic type
  if (person instanceof Employee){
    double salary = person.getSalary();
    if (salary < 10000){
      return salary * 0.02;
    }
    return salary * 0.05; 
  } else if (person instanceof BusinessOwner){
    return person.getProfit() * 0.1;
  } else if (person instanceof Veteran){ 
    return 0;
  } else{
    return (person.getSalary() + person.getProfit()) * 0.05;
  }
}"
972,2.5,1.5,3.0,2.0,2017-04-28 03:09:36.842691,49,,"public double calculateTax(Person person){
  // Check the type of Person, it's a polymorphic type
  if (person instanceof Employee){
    double salary = person.getSalary();
    if (salary < 10000){
      return salary * 0.02;
    }
    return salary * 0.05; 
  } else if (person instanceof BusinessOwner){
    return person.getProfit() * 0.1;
  } else if (person instanceof Veteran){ 
    return 0;
  } else{
    return (person.getSalary() + person.getProfit()) * 0.05;
  }
}"
973,2.5,1.5,3.0,5.0,2017-04-28 03:10:45.231914,49,,"public double calculateTax(Person person){
  // Check the type of Person, it's a polymorphic type
  if (person instanceof Employee){
    //Salary is 2% under 10k and 5% over
    double salary = person.getSalary();
    if (salary < 10000){
      return salary * 0.02;
    }
    return salary * 0.05; 
  } else if (person instanceof BusinessOwner){
    //Business owners have 10% tax on profit
    return person.getProfit() * 0.1;
  } else if (person instanceof Veteran){ 
    //Veterans have no tax
    return 0;
  } else{
    //Throw exception
  }
}"
974,2.5,1.5,3.0,5.0,2017-04-28 03:10:59.000708,49,528,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""public static void main(String[] args) {\n    double sum = 0;\n    int count = 0;\n    double salary = 0;\n    System.out.print(\""Enter salaries, -1 to finish: \"");\n    Scanner in = new Scanner(System.in);\n    while (salary != -1) {\n        salary = in.nextDouble();\n        if (salary != -1) {\n            sum = sum + salary;\n            count++;\n        }\n    }\n    if (count > 0) {\n        double average = sum / count;\n        System.out.println(\""Average salary: \"" + average);\n       // Process data until the sentinel is entered \n\n    } else {\n        System.out.println(\""No data\"");\n    }\n}\n       // Compute and print the average\n\n"",""rating"":2},""code"":""public double calculateTax(Person person){\n  // Check the type of Person, it's a polymorphic type\n  if (person instanceof Employee){\n    //Salary is 2% under 10k and 5% over\n    double salary = person.getSalary();\n    if (salary < 10000){\n      return salary * 0.02;\n    }\n    return salary * 0.05; \n  } else if (person instanceof BusinessOwner){\n    //Business owners have 10% tax on profit\n    return person.getProfit() * 0.1;\n  } else if (person instanceof Veteran){ \n    //Veterans have no tax\n    return 0;\n  } else{\n    //Throw exception\n  }\n}""}"
975,2.5,1.5,3.0,5.0,2017-04-28 03:11:02.707065,49,529,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""String valueAsString() {\n    return \""\"" + owner.getDisplay().getMaxIterations();\n}\n"",""rating"":1},""code"":""public double calculateTax(Person person){\n  // Check the type of Person, it's a polymorphic type\n  if (person instanceof Employee){\n    //Salary is 2% under 10k and 5% over\n    double salary = person.getSalary();\n    if (salary < 10000){\n      return salary * 0.02;\n    }\n    return salary * 0.05; \n  } else if (person instanceof BusinessOwner){\n    //Business owners have 10% tax on profit\n    return person.getProfit() * 0.1;\n  } else if (person instanceof Veteran){ \n    //Veterans have no tax\n    return 0;\n  } else{\n    //Throw exception\n  }\n}""}"
976,2.5,1.5,3.0,5.0,2017-04-28 03:11:04.518955,49,530,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""/**\n      Computes the change due and resets the machine for the next customer.\n      @return the change due to the customer\n   */\npublic double giveChange() {\n    double change = payment - purchase - get;\n    purchase = 0;\n    payment = 0;\n    return change;\n}\n"",""rating"":2},""code"":""public double calculateTax(Person person){\n  // Check the type of Person, it's a polymorphic type\n  if (person instanceof Employee){\n    //Salary is 2% under 10k and 5% over\n    double salary = person.getSalary();\n    if (salary < 10000){\n      return salary * 0.02;\n    }\n    return salary * 0.05; \n  } else if (person instanceof BusinessOwner){\n    //Business owners have 10% tax on profit\n    return person.getProfit() * 0.1;\n  } else if (person instanceof Veteran){ \n    //Veterans have no tax\n    return 0;\n  } else{\n    //Throw exception\n  }\n}""}"
977,2.5,1.5,3.0,4.5,2017-04-28 03:11:07.631697,49,,"public double calculateTax(Person person){
  // Check the type of Person, it's a polymorphic type
  if (person instanceof Employee){
    //Salary is 2% under 10k and 5% over
    double salary = person.getSalary();
    if (salary < 10000){
      return salary * 0.02;
    }
    return salary * 0.05; 
  } else if (person instanceof BusinessOwner){
    //Business owners have 10% tax on profit
    return person.getProfit() * 0.1;
  } else if (person instanceof Veteran){ 
    //Veterans have no tax
    return 0;
  } else{
    //Throw exception
  }
}"
978,2.5,1.5,1.5,4.5,2017-04-28 03:11:08.484941,49,,"public double calculateTax(Person person){
  // Check the type of Person, it's a polymorphic type
  if (person instanceof Employee){
    //Salary is 2% under 10k and 5% over
    double salary = person.getSalary();
    if (salary < 10000){
      return salary * 0.02;
    }
    return salary * 0.05; 
  } else if (person instanceof BusinessOwner){
    //Business owners have 10% tax on profit
    return person.getProfit() * 0.1;
  } else if (person instanceof Veteran){ 
    //Veterans have no tax
    return 0;
  } else{
    //Throw exception
  }
}"
979,2.5,4.5,1.5,4.5,2017-04-28 03:11:10.846732,49,,"public double calculateTax(Person person){
  // Check the type of Person, it's a polymorphic type
  if (person instanceof Employee){
    //Salary is 2% under 10k and 5% over
    double salary = person.getSalary();
    if (salary < 10000){
      return salary * 0.02;
    }
    return salary * 0.05; 
  } else if (person instanceof BusinessOwner){
    //Business owners have 10% tax on profit
    return person.getProfit() * 0.1;
  } else if (person instanceof Veteran){ 
    //Veterans have no tax
    return 0;
  } else{
    //Throw exception
  }
}"
980,2.5,2.0,1.5,4.5,2017-04-28 03:11:17.422491,49,,"public double calculateTax(Person person){
  // Check the type of Person, it's a polymorphic type
  if (person instanceof Employee){
    //Salary is 2% under 10k and 5% over
    double salary = person.getSalary();
    if (salary < 10000){
      return salary * 0.02;
    }
    return salary * 0.05; 
  } else if (person instanceof BusinessOwner){
    //Business owners have 10% tax on profit
    return person.getProfit() * 0.1;
  } else if (person instanceof Veteran){ 
    //Veterans have no tax
    return 0;
  } else{
    //Throw exception
  }
}"
981,2.5,5.0,1.5,4.5,2017-04-28 03:11:20.086980,49,,"public double calculateTax(Person person){
  // Check the type of Person, it's a polymorphic type
  if (person instanceof Employee){
    //Salary is 2% under 10k and 5% over
    double salary = person.getSalary();
    if (salary < 10000){
      return salary * 0.02;
    }
    return salary * 0.05; 
  } else if (person instanceof BusinessOwner){
    //Business owners have 10% tax on profit
    return person.getProfit() * 0.1;
  } else if (person instanceof Veteran){ 
    //Veterans have no tax
    return 0;
  } else{
    //Throw exception
  }
}"
982,2.5,5.0,1.5,4.5,2017-04-28 03:11:26.142856,49,531,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""public double getTax() {\n    double tax1 = 0;\n    double tax2 = 0;\n    if (status == SINGLE) {\n        if (income <= RATE1_SINGLE_LIMIT) {\n            tax1 = RATE1 * income;\n        } else {\n            tax1 = RATE1 * RATE1_SINGLE_LIMIT;\n            tax2 = RATE2 * (income - RATE1_SINGLE_LIMIT);\n        }\n    } else {\n        if (income <= RATE1_MARRIED_LIMIT) {\n            tax1 = RATE1 * income;\n        } else {\n            tax1 = RATE1 * RATE1_MARRIED_LIMIT;\n            tax2 = RATE2 * (income - RATE1_MARRIED_LIMIT);\n        }\n    }\n    return tax1 + tax2;\n}\n"",""rating"":4},""code"":""public double calculateTax(Person person){\n  // Check the type of Person, it's a polymorphic type\n  if (person instanceof Employee){\n    //Salary is 2% under 10k and 5% over\n    double salary = person.getSalary();\n    if (salary < 10000){\n      return salary * 0.02;\n    }\n    return salary * 0.05; \n  } else if (person instanceof BusinessOwner){\n    //Business owners have 10% tax on profit\n    return person.getProfit() * 0.1;\n  } else if (person instanceof Veteran){ \n    //Veterans have no tax\n    return 0;\n  } else{\n    //Throw exception\n  }\n}""}"
983,2.5,4.5,1.5,4.5,2017-04-28 03:11:37.834710,49,,"public double calculateTax(Person person){
  // Check the type of Person, it's a polymorphic type
  if (person instanceof Employee){
    //Salary is 2% under 10k and 5% over
    double salary = person.getSalary();
    if (salary < 10000){
      return salary * 0.02;
    }
    return salary * 0.05; 
  } else if (person instanceof BusinessOwner){
    //Business owners have 10% tax on profit
    return person.getProfit() * 0.1;
  } else if (person instanceof Veteran){ 
    //Veterans have no tax
    return 0;
  } else{
    //Throw exception
  }
}"
984,2.5,4.0,1.5,4.5,2017-04-28 03:11:40.785407,49,,"public double calculateTax(Person person){
  // Check the type of Person, it's a polymorphic type
  if (person instanceof Employee){
    //Salary is 2% under 10k and 5% over
    double salary = person.getSalary();
    if (salary < 10000){
      return salary * 0.02;
    }
    return salary * 0.05; 
  } else if (person instanceof BusinessOwner){
    //Business owners have 10% tax on profit
    return person.getProfit() * 0.1;
  } else if (person instanceof Veteran){ 
    //Veterans have no tax
    return 0;
  } else{
    //Throw exception
  }
}"
985,1.0,4.0,1.5,4.5,2017-04-28 03:11:42.096777,49,,"public double calculateTax(Person person){
  // Check the type of Person, it's a polymorphic type
  if (person instanceof Employee){
    //Salary is 2% under 10k and 5% over
    double salary = person.getSalary();
    if (salary < 10000){
      return salary * 0.02;
    }
    return salary * 0.05; 
  } else if (person instanceof BusinessOwner){
    //Business owners have 10% tax on profit
    return person.getProfit() * 0.1;
  } else if (person instanceof Veteran){ 
    //Veterans have no tax
    return 0;
  } else{
    //Throw exception
  }
}"
986,4.0,4.0,1.5,4.5,2017-04-28 03:11:48.225410,49,,"public double calculateTax(Person person){
  // Check the type of Person, it's a polymorphic type
  if (person instanceof Employee){
    //Salary is 2% under 10k and 5% over
    double salary = person.getSalary();
    if (salary < 10000){
      return salary * 0.02;
    }
    return salary * 0.05; 
  } else if (person instanceof BusinessOwner){
    //Business owners have 10% tax on profit
    return person.getProfit() * 0.1;
  } else if (person instanceof Veteran){ 
    //Veterans have no tax
    return 0;
  } else{
    //Throw exception
  }
}"
987,2.5,4.0,1.5,4.5,2017-04-28 03:11:57.441287,49,,"public double calculateTax(Person person){
  // Check the type of Person, it's a polymorphic type
  if (person instanceof Employee){
    //Salary is 2% under 10k and 5% over
    double salary = person.getSalary();
    if (salary < 10000){
      return salary * 0.02;
    }
    return salary * 0.05; 
  } else if (person instanceof BusinessOwner){
    //Business owners have 10% tax on profit
    return person.getProfit() * 0.1;
  } else if (person instanceof Veteran){ 
    //Veterans have no tax
    return 0;
  } else{
    //Throw exception
  }
}"
988,2.5,4.0,1.5,4.5,2017-04-28 03:12:12.543445,49,532,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""public double getAverageScore(int studentId) {\n    double total = 0;\n    for (double x : scores) {\n        total = total + x;\n    }\n    return total / scores.size();\n}\n"",""rating"":1},""code"":""public double calculateTax(Person person){\n  // Check the type of Person, it's a polymorphic type\n  if (person instanceof Employee){\n    //Salary is 2% under 10k and 5% over\n    double salary = person.getSalary();\n    if (salary < 10000){\n      return salary * 0.02;\n    }\n    return salary * 0.05; \n  } else if (person instanceof BusinessOwner){\n    //Business owners have 10% tax on profit\n    return person.getProfit() * 0.1;\n  } else if (person instanceof Veteran){ \n    //Veterans have no tax\n    return 0;\n  } else{\n    //Throw exception\n    throw new Exception(\""Unknown person type\"");\n  }\n}""}"
989,2.5,4.0,1.5,4.5,2017-04-28 03:12:18.602631,49,533,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""/**\n      Computes the sum of the scores\n      @return the total score\n   */\npublic double sum() {\n    double total = 0;\n    for (double score : scores) {\n        total = total + score;\n    }\n    return total;\n}\n"",""rating"":1},""code"":""public double calculateTax(Person person){\n  // Check the type of Person, it's a polymorphic type\n  if (person instanceof Employee){\n    //Salary is 2% under 10k and 5% over\n    double salary = person.getSalary();\n    if (salary < 10000){\n      return salary * 0.02;\n    }\n    return salary * 0.05; \n  } else if (person instanceof BusinessOwner){\n    //Business owners have 10% tax on profit\n    return person.getProfit() * 0.1;\n  } else if (person instanceof Veteran){ \n    //Veterans have no tax\n    return 0;\n  } else{\n    //Throw exception\n    throw new Exception(\""Unknown person type\"");\n  }\n}""}"
990,2.5,1.0,1.0,1.0,2017-04-29 14:36:49.743037,53,,"system.out.println(""the arry of no's are"");
int a[3]=7,4,1;
int i=0;
for(i=0;i<=2;i++)
{
  int val=int[i];
  int val1=int[i+1];
  int diff=val-val1;
  if(diff<0)
  {
    diff=2*diff-diff;
    int temp=diff;
   }
  if(temp>diff)
    system.out.println(""largest difference is""+temp);
  else
    system.out.println(""largest difference is""+diff);
}"
991,2.5,4.0,1.0,1.0,2017-04-29 14:36:50.303029,53,,"system.out.println(""the arry of no's are"");
int a[3]=7,4,1;
int i=0;
for(i=0;i<=2;i++)
{
  int val=int[i];
  int val1=int[i+1];
  int diff=val-val1;
  if(diff<0)
  {
    diff=2*diff-diff;
    int temp=diff;
   }
  if(temp>diff)
    system.out.println(""largest difference is""+temp);
  else
    system.out.println(""largest difference is""+diff);
}"
992,2.5,4.0,2.0,1.0,2017-04-29 14:36:51.562674,53,,"system.out.println(""the arry of no's are"");
int a[3]=7,4,1;
int i=0;
for(i=0;i<=2;i++)
{
  int val=int[i];
  int val1=int[i+1];
  int diff=val-val1;
  if(diff<0)
  {
    diff=2*diff-diff;
    int temp=diff;
   }
  if(temp>diff)
    system.out.println(""largest difference is""+temp);
  else
    system.out.println(""largest difference is""+diff);
}"
993,2.5,4.0,3.0,1.0,2017-04-29 14:36:52.742428,53,,"system.out.println(""the arry of no's are"");
int a[3]=7,4,1;
int i=0;
for(i=0;i<=2;i++)
{
  int val=int[i];
  int val1=int[i+1];
  int diff=val-val1;
  if(diff<0)
  {
    diff=2*diff-diff;
    int temp=diff;
   }
  if(temp>diff)
    system.out.println(""largest difference is""+temp);
  else
    system.out.println(""largest difference is""+diff);
}"
994,2.5,4.0,3.0,3.0,2017-04-29 14:36:54.622271,53,,"system.out.println(""the arry of no's are"");
int a[3]=7,4,1;
int i=0;
for(i=0;i<=2;i++)
{
  int val=int[i];
  int val1=int[i+1];
  int diff=val-val1;
  if(diff<0)
  {
    diff=2*diff-diff;
    int temp=diff;
   }
  if(temp>diff)
    system.out.println(""largest difference is""+temp);
  else
    system.out.println(""largest difference is""+diff);
}"
995,5.0,4.0,3.0,3.0,2017-04-29 14:38:33.722675,53,,"system.out.println(""the arry of no's are"");
int a[3]=7,4,1;
int i=0;
for(i=0;i<=2;i++)
{
  int val=int[i];
  int val1=int[i+1];
  int diff=val-val1;
  if(diff<0)
  {
    diff=2*diff-diff;
    int temp=diff;
   }
  if(temp>diff)
    system.out.println(""largest difference is""+temp);
  else
    system.out.println(""largest difference is""+diff);
}"
996,5.0,4.5,3.0,3.0,2017-04-29 14:38:33.777086,53,,"system.out.println(""the arry of no's are"");
int a[3]=7,4,1;
int i=0;
for(i=0;i<=2;i++)
{
  int val=int[i];
  int val1=int[i+1];
  int diff=val-val1;
  if(diff<0)
  {
    diff=2*diff-diff;
    int temp=diff;
   }
  if(temp>diff)
    system.out.println(""largest difference is""+temp);
  else
    system.out.println(""largest difference is""+diff);
}"
997,5.0,4.5,5.0,3.0,2017-04-29 14:38:34.422444,53,,"system.out.println(""the arry of no's are"");
int a[3]=7,4,1;
int i=0;
for(i=0;i<=2;i++)
{
  int val=int[i];
  int val1=int[i+1];
  int diff=val-val1;
  if(diff<0)
  {
    diff=2*diff-diff;
    int temp=diff;
   }
  if(temp>diff)
    system.out.println(""largest difference is""+temp);
  else
    system.out.println(""largest difference is""+diff);
}"
998,5.0,4.5,5.0,5.0,2017-04-29 14:38:35.602325,53,,"system.out.println(""the arry of no's are"");
int a[3]=7,4,1;
int i=0;
for(i=0;i<=2;i++)
{
  int val=int[i];
  int val1=int[i+1];
  int diff=val-val1;
  if(diff<0)
  {
    diff=2*diff-diff;
    int temp=diff;
   }
  if(temp>diff)
    system.out.println(""largest difference is""+temp);
  else
    system.out.println(""largest difference is""+diff);
}"
999,1.0,1.0,1.0,1.0,2017-04-29 15:41:25.036032,54,534,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""/** This Paint object only uses opaque colors */\npublic int getTransparency() {\n    return OPAQUE;\n}\n"",""rating"":1},""code"":""public int tax(Person p) {\n  \n}""}"
1000,1.0,1.0,1.0,1.0,2017-04-29 15:41:28.258487,54,535,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""public int hashCode() {\n    return title.hashCode();\n}\n"",""rating"":1},""code"":""public int tax(Person p) {\n  \n}""}"
1001,1.0,1.0,1.0,1.0,2017-04-29 15:41:36.806860,54,536,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""public int compareTo(Person other) {\n    return name.compareTo(other.name);\n}\n"",""rating"":1},""code"":""public int tax(Person p) {\n  \n}""}"
1002,1.0,1.0,1.0,1.0,2017-04-29 15:42:26.631709,54,537,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""/** This Paint object only uses opaque colors */\npublic int getTransparency() {\n    return OPAQUE;\n}\n"",""rating"":1},""code"":""public int calculateTax(Person p) {\n  \n}""}"
1003,1.0,1.0,1.0,1.0,2017-04-29 15:43:25.363242,54,538,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String[] args) {\n    double price = 9.95;\n    double taxRate = 8.25;\n    double tax = Financial.percentOf(price, taxRate);\n    System.out.printf(\""Tax: %.2f\\n\"", tax);\n}\n"",""rating"":3},""code"":""public int calculateTax(Person p) {\n  \n}""}"
1004,1.0,1.0,1.0,1.0,2017-04-29 15:44:32.708208,54,539,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""public int calculateTax(Person p) {\n  \n}""}"
1005,1.0,1.0,1.0,1.0,2017-04-29 21:53:34.787647,55,540,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""int getPlayer() {\n    return playerID;\n}\n"",""rating"":1},""code"":""int arrayToDiff(int[] array){\n  int diff = 0;\n  for (int i = 0; i < array.length; i++)\n}""}"
1006,1.0,1.0,1.0,1.0,2017-04-29 21:53:36.047301,55,541,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""public String toString() {\n    return Arrays.toString(queens);\n}\n"",""rating"":1},""code"":""int arrayToDiff(int[] array){\n  int diff = 0;\n  for (int i = 0; i < array.length; i++)\n}""}"
1007,1.0,1.0,1.0,1.0,2017-04-29 21:53:40.766648,55,542,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""public static void main(String[] args) {\n    /** The date at the end of the last century */\n    LocalDate endofCentury = LocalDate.of(2000, 12, 31);\n    LocalDate now = LocalDate.now();\n    Period diff = Period.between(endofCentury, now);\n    System.out.printf(\""The 21st century (up to %s) is %s old%n\"", now, diff);\n    System.out.printf(\""The 21st century is %d years, %d months and %d days old\"", diff.getYears(), diff.getMonths(), diff.getDays());\n}\n"",""rating"":3},""code"":""int arrayToDiff(int[] array){\n  int diff = 0;\n  for (int i = 0; i < array.length; i++)\n}""}"
1008,1.0,1.0,1.0,2.0,2017-04-29 21:54:53.911048,55,,"int arrayToDiff(int[] array){
  int diff = 0;
  for (int i = 0; i < array.length-1; i++){
    int diffA = array[i] - array[i+1];
    int diffB = array[i+1] - array[i];
    
  }
}"
1009,1.0,1.5,1.0,2.0,2017-04-29 21:54:58.397645,55,,"int arrayToDiff(int[] array){
  int diff = 0;
  for (int i = 0; i < array.length-1; i++){
    int diffA = array[i] - array[i+1];
    int diffB = array[i+1] - array[i];
    
  }
}"
1010,1.0,1.5,1.0,2.0,2017-04-29 21:55:09.458950,55,543,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""/**\n      Finds a value in an array, using the linear search \n      algorithm.\n      @param a the array to search\n      @param value the value to find\n      @return the index at which the value occurs, or -1\n      if it does not occur in the array\n   */\npublic static int search(int[] a, int value) {\n    for (int i = 0; i < a.length; i++) {\n        if (a[i] == value) {\n            return i;\n        }\n    }\n    return -1;\n}\n"",""rating"":3},""code"":""int arrayToDiff(int[] array){\n  int diff = 0;\n  for (int i = 0; i < array.length-1; i++){\n    int diffA = array[i] - array[i+1];\n    int diffB = array[i+1] - array[i];\n    \n  }\n}""}"
1011,1.0,1.0,1.0,2.0,2017-04-29 21:55:10.851873,55,,"int arrayToDiff(int[] array){
  int diff = 0;
  for (int i = 0; i < array.length-1; i++){
    int diffA = array[i] - array[i+1];
    int diffB = array[i+1] - array[i];
    
  }
}"
1012,1.0,1.0,1.0,2.0,2017-04-29 21:55:34.090099,55,544,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""/**\n      Computes the largest value of an array.\n      @param a the array\n      @return the largest value in a\n   */\npublic static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":5},""code"":""int arrayToDiff(int[] array){\n  int diff = 0;\n  for (int i = 0; i < array.length; i++){\n        \n  }\n}""}"
1013,1.0,1.0,1.0,2.0,2017-04-29 21:56:39.461340,55,545,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""// pre: list != null, list.length > 0\n// post: return index of minimum element of array\npublic static int findMin(int[] list) {\n    assert list != null && list.length > 0 : \""failed precondition\"";\n    int indexOfMin = 0;\n    for (int i = 1; i < list.length; i++) {\n        if (list[i] < list[indexOfMin]) {\n            indexOfMin = i;\n        }\n    }\n    return indexOfMin;\n}\n"",""rating"":5},""code"":""int arrayToDiff(int[] array){\n  int big = max(array)\n    \n}\n\npublic static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n}""}"
1014,1.0,1.0,1.0,2.0,2017-04-29 21:56:51.832596,55,546,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""public static void main(String[] args) {\n    /** The date at the end of the last century */\n    LocalDate endofCentury = LocalDate.of(2000, 12, 31);\n    LocalDate now = LocalDate.now();\n    Period diff = Period.between(endofCentury, now);\n    System.out.printf(\""The 21st century (up to %s) is %s old%n\"", now, diff);\n    System.out.printf(\""The 21st century is %d years, %d months and %d days old\"", diff.getYears(), diff.getMonths(), diff.getDays());\n}\n"",""rating"":1},""code"":""int arrayToDiff(int[] array){\n  int big = max(array)\n  int small \n}\n\npublic static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n}\n\npublic static int findMin(int[] list) {\n    assert list != null && list.length > 0 : \""failed precondition\"";\n    int indexOfMin = 0;\n    for (int i = 1; i < list.length; i++) {\n        if (list[i] < list[indexOfMin]) {\n            indexOfMin = i;\n        }\n    }\n    return indexOfMin;\n}""}"
1015,1.0,1.0,1.0,2.0,2017-04-29 21:57:37.561196,55,547,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""public T[] toArray(Object[] data) {\n    return null;\n}\n"",""rating"":3},""code"":""int arrayToDiff(int[] array){\n  int big = max(array);\n  int small = findMin(array);\n  return big-small\n}\n\npublic static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n}\n\npublic static int findMin(int[] list) {\n    assert list != null && list.length > 0 : \""failed precondition\"";\n    int indexOfMin = 0;\n    for (int i = 1; i < list.length; i++) {\n        if (list[i] < list[indexOfMin]) {\n            indexOfMin = i;\n        }\n    }\n    return list[indexOfMin];\n}""}"
1016,1.0,1.0,1.0,2.0,2017-04-29 21:57:39.770078,55,548,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""public String toString() {\n    return Arrays.toString(queens);\n}\n"",""rating"":3},""code"":""int arrayToDiff(int[] array){\n  int big = max(array);\n  int small = findMin(array);\n  return big-small\n}\n\npublic static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n}\n\npublic static int findMin(int[] list) {\n    assert list != null && list.length > 0 : \""failed precondition\"";\n    int indexOfMin = 0;\n    for (int i = 1; i < list.length; i++) {\n        if (list[i] < list[indexOfMin]) {\n            indexOfMin = i;\n        }\n    }\n    return list[indexOfMin];\n}""}"
1017,1.0,1.0,1.0,2.0,2017-04-29 21:57:41.568817,55,549,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent2(int[] a) {\n    // O(n log(n))\n    Arrays.sort(a);\n    int[] counts = new int[a.length];\n    int count = 0;\n    for (// O(n)\n    int i = 0; // O(n)\n    i < a.length; // O(n)\n    i++) {\n        count++;\n        if (i == a.length - 1 || a[i] != a[i + 1]) {\n            counts[i] = count;\n            count = 0;\n        }\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":5},""code"":""int arrayToDiff(int[] array){\n  int big = max(array);\n  int small = findMin(array);\n  return big-small\n}\n\npublic static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n}\n\npublic static int findMin(int[] list) {\n    assert list != null && list.length > 0 : \""failed precondition\"";\n    int indexOfMin = 0;\n    for (int i = 1; i < list.length; i++) {\n        if (list[i] < list[indexOfMin]) {\n            indexOfMin = i;\n        }\n    }\n    return list[indexOfMin];\n}""}"
1018,1.0,1.0,1.0,2.0,2017-04-29 21:57:45.022779,55,550,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""/**\n      Finds a value in an array, using the linear search \n      algorithm.\n      @param a the array to search\n      @param value the value to find\n      @return the index at which the value occurs, or -1\n      if it does not occur in the array\n   */\npublic static int search(int[] a, int value) {\n    for (int i = 0; i < a.length; i++) {\n        if (a[i] == value) {\n            return i;\n        }\n    }\n    return -1;\n}\n"",""rating"":4},""code"":""int arrayToDiff(int[] array){\n  int big = max(array);\n  int small = findMin(array);\n  return big-small\n}\n\npublic static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n}\n\npublic static int findMin(int[] list) {\n    assert list != null && list.length > 0 : \""failed precondition\"";\n    int indexOfMin = 0;\n    for (int i = 1; i < list.length; i++) {\n        if (list[i] < list[indexOfMin]) {\n            indexOfMin = i;\n        }\n    }\n    return list[indexOfMin];\n}""}"
1019,1.0,1.0,1.0,2.0,2017-04-29 21:57:54.297281,55,551,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""// END main\n// THE FOLLOWING METHODS ARE NOT YET IMPLEMENTED!\npublic Object[] toArray() {\n    return null;\n}\n"",""rating"":2},""code"":""int arrayToDiff(int[] array){\n  int big = max(array);\n  int small = findMin(array);\n  return big-small\n}\n\npublic static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n}\n\npublic static int findMin(int[] list) {\n    assert list != null && list.length > 0 : \""failed precondition\"";\n    int indexOfMin = 0;\n    for (int i = 1; i < list.length; i++) {\n        if (list[i] < list[indexOfMin]) {\n            indexOfMin = i;\n        }\n    }\n    return list[indexOfMin];\n}""}"
1020,1.0,1.0,1.0,1.0,2017-04-29 21:58:48.653599,55,552,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""public int compareTo(Person other) {\n    return name.compareTo(other.name);\n}\n"",""rating"":2},""code"":""int sallaryCalc(Person per){\n  \n}""}"
1021,1.0,1.0,1.0,1.0,2017-04-29 21:58:51.049668,55,553,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""int getCount() {\n    return count;\n}\n"",""rating"":2},""code"":""int sallaryCalc(Person per){\n  \n}""}"
1022,1.0,1.0,1.0,1.0,2017-04-29 21:58:52.766401,55,554,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""public static void main(String[] args) {\n    Calc client = new CalcService().getCalcPort();\n    System.out.println(client.add(2, 2));\n}\n"",""rating"":3},""code"":""int sallaryCalc(Person per){\n  \n}""}"
1023,1.0,1.0,1.0,1.0,2017-04-29 21:59:14.025635,55,,"int sallaryCalc(Person per){
  //read their sallary
}"
1024,1.0,1.0,1.0,3.0,2017-04-29 21:59:14.701478,55,,"int sallaryCalc(Person per){
  //read their sallary
}"
1025,1.0,1.0,1.0,3.0,2017-04-29 21:59:20.872300,55,555,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""public static void main(String[] args) {\n    BigNumCalc calc = new BigNumCalc();\n    System.out.println(calc.calculate(testInput));\n}\n"",""rating"":3},""code"":""int sallaryCalc(Person per){\n  //read their sallary\n}""}"
1026,1.0,1.0,1.0,3.0,2017-04-29 21:59:22.287288,55,556,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""int countEmptyBlock(int r, int c) {\n    // Find the size of one empty region on the board; recursive routine called by obviousBlockExists.\n    if (blockCheck[r][c] == blockCheckCt || board.getColor(r, c) != null)\n        return 0;\n    int c1 = c, c2 = c;\n    while (c1 > 0 && blockCheck[r][c1 - 1] < blockCheckCt && board.getColor(r, c1 - 1) == null) c1--;\n    while (c2 < cols - 1 && blockCheck[r][c2 + 1] < blockCheckCt && board.getColor(r, c2 + 1) == null) c2++;\n    for (int i = c1; i <= c2; i++) blockCheck[r][i] = blockCheckCt;\n    int ct = c2 - c1 + 1;\n    if (r > 0)\n        for (int i = c1; i <= c2; i++) ct += countEmptyBlock(r - 1, i);\n    if (r < rows - 1)\n        for (int i = c1; i <= c2; i++) ct += countEmptyBlock(r + 1, i);\n    return ct;\n}\n"",""rating"":2},""code"":""int sallaryCalc(Person per){\n  //read their sallary\n}""}"
1027,1.0,1.0,1.0,3.0,2017-04-29 21:59:24.671561,55,557,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""int getSize() {\n    // Return the number of items on the queue.\n    return size;\n}\n"",""rating"":4},""code"":""int sallaryCalc(Person per){\n  //read their sallary\n}""}"
1028,1.0,1.0,1.0,3.0,2017-04-29 21:59:25.301648,55,558,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""/**\n         * Return the contents of the square in the specified row and column.\n         */\nint pieceAt(int row, int col) {\n    return board[row][col];\n}\n"",""rating"":4},""code"":""int sallaryCalc(Person per){\n  //read their sallary\n}""}"
1029,1.0,1.0,1.0,3.0,2017-04-29 21:59:27.411972,55,559,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""public static void main(String[] args) {\n    Calc client = new CalcService().getCalcPort();\n    System.out.println(client.add(2, 2));\n}\n"",""rating"":3},""code"":""int sallaryCalc(Person per){\n  //read their sallary\n}""}"
1030,1.0,1.0,1.0,3.0,2017-04-29 21:59:29.126550,55,560,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""public CalcInterface() {\n    super.setTitle(\""Calc\"");\n    initGUI();\n}\n"",""rating"":3},""code"":""int sallaryCalc(Person per){\n  //read their sallary\n}""}"
1031,1.0,1.0,1.0,3.0,2017-04-29 21:59:29.764036,55,561,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""/** Construct a SimpleCalcScanner by name */\npublic SimpleCalcScanner(String fileName) throws IOException {\n    this(new FileReader(fileName));\n}\n"",""rating"":3},""code"":""int sallaryCalc(Person per){\n  //read their sallary\n}""}"
1032,1.0,1.0,1.0,3.0,2017-04-29 21:59:30.593319,55,562,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""/**\n       * Return the contents of the square in the specified row and column.\n       */\nint pieceAt(int row, int col) {\n    return board[row][col];\n}\n"",""rating"":3},""code"":""int sallaryCalc(Person per){\n  //read their sallary\n}""}"
1033,1.0,1.0,1.0,3.0,2017-04-29 21:59:42.092463,55,563,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""public int add(int a, int b) {\n    System.out.println(\""CalcImpl.add()\"");\n    return a + b;\n}\n"",""rating"":2},""code"":""int sallaryCalc(Person per){\n  //read their salary\n}""}"
1034,1.0,1.0,1.0,3.0,2017-04-29 21:59:46.756146,55,564,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""int countEmptyBlock(int r, int c) {\n    // Find the size of one empty region on the board; recursive routine called by obviousBlockExists.\n    if (blockCheck[r][c] == blockCheckCt || board.getColor(r, c) != null)\n        return 0;\n    int c1 = c, c2 = c;\n    while (c1 > 0 && blockCheck[r][c1 - 1] < blockCheckCt && board.getColor(r, c1 - 1) == null) c1--;\n    while (c2 < cols - 1 && blockCheck[r][c2 + 1] < blockCheckCt && board.getColor(r, c2 + 1) == null) c2++;\n    for (int i = c1; i <= c2; i++) blockCheck[r][i] = blockCheckCt;\n    int ct = c2 - c1 + 1;\n    if (r > 0)\n        for (int i = c1; i <= c2; i++) ct += countEmptyBlock(r - 1, i);\n    if (r < rows - 1)\n        for (int i = c1; i <= c2; i++) ct += countEmptyBlock(r + 1, i);\n    return ct;\n}\n"",""rating"":3},""code"":""int sallaryCalc(Person per){\n  //read their salary\n}""}"
1035,1.0,1.0,1.0,3.0,2017-04-29 21:59:48.662307,55,565,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""int getPlayer() {\n    return playerID;\n}\n"",""rating"":1},""code"":""int sallaryCalc(Person per){\n  //read their salary\n}""}"
1036,1.0,1.0,1.0,3.0,2017-04-29 21:59:50.765105,55,566,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""public static void main(String[] args) {\n    Calc client = new CalcService().getCalcPort();\n    System.out.println(client.add(2, 2));\n}\n"",""rating"":3},""code"":""int sallaryCalc(Person per){\n  //read their salary\n}""}"
