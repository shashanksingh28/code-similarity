weightid,signature,structure,concepts,language,time,user_id,vote_id,code
1,1.0,3.0,1.0,1.0,2017-05-06 05:03:13.156225,3,,"public static int Taxreturn(Person P){
  
}"
2,1.0,3.0,1.0,2.5,2017-05-06 05:03:13.937092,3,,"public static int Taxreturn(Person P){
  
}"
3,1.0,3.0,1.0,2.5,2017-05-06 05:03:20.421223,3,1,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""// pre: num >= 2\npublic static int numFactors(int num) {\n    assert num >= 2 : \""failed precondition. num must be >= 2. num: \"" + num;\n    int result = 0;\n    final double SQRT = Math.sqrt(num);\n    for (int i = 1; i < SQRT; i++) {\n        if (num % i == 0) {\n            result += 2;\n        }\n    }\n    if (num % SQRT == 0)\n        result++;\n    return result;\n}\n"",""rating"":2},""code"":""public static int Taxreturn(Person P){\n  \n}""}"
4,1.0,3.0,1.0,2.5,2017-05-06 05:03:21.826333,3,2,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""public static int getRadius() {\n    return radius;\n}\n"",""rating"":1},""code"":""public static int Taxreturn(Person P){\n  \n}""}"
5,1.0,3.0,1.0,2.5,2017-05-06 05:03:23.005640,3,3,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String[] unuxed) {\n    new ButtonDemo().setVisible(true);\n}\n"",""rating"":1},""code"":""public static int Taxreturn(Person P){\n  \n}""}"
6,1.0,3.0,1.0,2.5,2017-05-06 05:04:02.090173,3,4,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""/**\n      Constructs a manager with a given name, annual salary and weekly bonus.\n      @param name the name of this employee\n      @param salary the annual salary\n      @param bonus the weekly bonus\n    */\npublic Manager(String name, double salary, double bonus) {\n    super(name, salary);\n    weeklyBonus = bonus;\n}\n"",""rating"":3},""code"":""public static int Taxreturn(Person P){\n  /*Write a java method that takes a person and returns their tax as below:\n1. For employees, if salary < $10,000, 2% of salary, else 5%\n2. For business owners, 10% of their profit\n3. 0 for veterans\n  */ \n}""}"
7,1.0,3.0,1.0,2.5,2017-05-06 05:04:07.100785,3,5,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", targetDate = \""Jan 1, 2012\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":3},""code"":""public static int Taxreturn(Person P){\n  /*Write a java method that takes a person and returns their tax as below:\n1. For employees, if salary < $10,000, 2% of salary, else 5%\n2. For business owners, 10% of their profit\n3. 0 for veterans\n  */ \n}""}"
8,1.0,3.0,1.0,2.5,2017-05-06 05:04:12.775046,3,6,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""public static void main(String[] args) {\n    Employee[] staff = new Employee[3];\n    staff[0] = new HourlyEmployee(\""Morgan, Harry\"", 30);\n    staff[1] = new SalariedEmployee(\""Lin, Sally\"", 52000);\n    staff[2] = new Manager(\""Smith, Mary\"", 104000, 50);\n    Scanner in = new Scanner(System.in);\n    for (Employee e : staff) {\n        System.out.print(\""Hours worked by \"" + e.getName() + \"": \"");\n        int hours = in.nextInt();\n        System.out.println(\""Salary: \"" + e.weeklyPay(hours));\n    }\n}\n"",""rating"":3},""code"":""public static int Taxreturn(Person P){\n  /*Write a java method that takes a person and returns their tax as below:\n1. For employees, if salary < $10,000, 2% of salary, else 5%\n2. For business owners, 10% of their profit\n3. 0 for veterans\n  */ \n}""}"
9,1.0,3.0,1.0,2.5,2017-05-06 05:04:18.612653,3,7,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""/**\n      Constructs an employee with an empty name.\n   */\npublic Employee() {\n    name = \""\"";\n}\n"",""rating"":2},""code"":""public static int Taxreturn(Person P){\n  /*Write a java method that takes a person and returns their tax as below:\n1. For employees, if salary < $10,000, 2% of salary, else 5%\n2. For business owners, 10% of their profit\n3. 0 for veterans\n  */ \n}""}"
10,1.0,3.0,1.0,2.5,2017-05-06 05:04:19.525797,3,8,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Sets the name of this employee.\n      @param employeeName the new name \n   */\npublic void setName(String employeeName) {\n    name = employeeName;\n}\n"",""rating"":2},""code"":""public static int Taxreturn(Person P){\n  /*Write a java method that takes a person and returns their tax as below:\n1. For employees, if salary < $10,000, 2% of salary, else 5%\n2. For business owners, 10% of their profit\n3. 0 for veterans\n  */ \n}""}"
11,2.5,3.0,1.0,2.5,2017-05-06 05:05:47.985710,3,,"public static int Taxreturn(Person P){
  /*Write a java method that takes a person and returns their tax as below:
1. For employees, if salary < $10,000, 2% of salary, else 5%
2. For business owners, 10% of their profit
3. 0 for veterans
  */ 
  if(p.getSalary()){
    
  }
  
}"
12,2.5,3.0,1.0,2.5,2017-05-06 05:06:20.200205,3,9,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""/**\n      Finds a value in an array, using the linear search \n      algorithm.\n      @param a the array to search\n      @param value the value to find\n      @return the index at which the value occurs, or -1\n      if it does not occur in the array\n   */\npublic static int search(int[] a, int value) {\n    for (int i = 0; i < a.length; i++) {\n        if (a[i] == value) {\n            return i;\n        }\n    }\n    return -1;\n}\n"",""rating"":3},""code"":""public static int Taxreturn(Person P){\n  /*Write a java method that takes a person and returns their tax as below:\n1. For employees, if salary < $10,000, 2% of salary, else 5%\n2. For business owners, 10% of their profit\n3. 0 for veterans\n  */ \n  if(p.getSalary()){\n    return p.getSalary();\n  }\n  \n}""}"
13,2.5,3.0,1.0,2.5,2017-05-06 05:06:21.511829,3,10,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""/**\n      Constructs a manager with a given name, annual salary and weekly bonus.\n      @param name the name of this employee\n      @param salary the annual salary\n      @param bonus the weekly bonus\n    */\npublic Manager(String name, double salary, double bonus) {\n    super(name, salary);\n    weeklyBonus = bonus;\n}\n"",""rating"":3},""code"":""public static int Taxreturn(Person P){\n  /*Write a java method that takes a person and returns their tax as below:\n1. For employees, if salary < $10,000, 2% of salary, else 5%\n2. For business owners, 10% of their profit\n3. 0 for veterans\n  */ \n  if(p.getSalary()){\n    return p.getSalary();\n  }\n  \n}""}"
14,2.5,3.0,1.0,2.5,2017-05-06 05:06:23.270248,3,11,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""/**\n    * Return the index of the first item in list for which the predicate is true, if any.\n    * If there is no such item, return -1.\n    */\npublic static <T> int find(ArrayList<T> list, Predicate<T> pred) {\n    // \n    for (int i = 0; i < list.size(); i++) {\n        T item = list.get(i);\n        if (pred.test(item))\n            return i;\n    }\n    return -1;\n}\n"",""rating"":2},""code"":""public static int Taxreturn(Person P){\n  /*Write a java method that takes a person and returns their tax as below:\n1. For employees, if salary < $10,000, 2% of salary, else 5%\n2. For business owners, 10% of their profit\n3. 0 for veterans\n  */ \n  if(p.getSalary()){\n    return p.getSalary();\n  }\n  \n}""}"
15,2.5,3.0,1.0,2.5,2017-05-06 05:06:24.745644,3,12,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""/**\n      Finds a value in a range of a sorted array, using the binary\n      search algorithm.\n      @param a the array in which to search\n      @param low the low index of the range\n      @param high the high index of the range\n      @param value the value to find\n      @return the index at which the value occurs, or -1\n      if it does not occur in the array\n   */\npublic static int search(int[] a, int low, int high, int value) {\n    if (low <= high) {\n        int mid = (low + high) / 2;\n        if (a[mid] == value) {\n            return mid;\n        } else if (a[mid] < value) {\n            return search(a, mid + 1, high, value);\n        } else {\n            return search(a, low, mid - 1, value);\n        }\n    } else {\n        return -1;\n    }\n}\n"",""rating"":2},""code"":""public static int Taxreturn(Person P){\n  /*Write a java method that takes a person and returns their tax as below:\n1. For employees, if salary < $10,000, 2% of salary, else 5%\n2. For business owners, 10% of their profit\n3. 0 for veterans\n  */ \n  if(p.getSalary()){\n    return p.getSalary();\n  }\n  \n}""}"
16,2.5,3.0,1.0,2.5,2017-05-06 05:06:28.708002,3,13,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""/**\n     * Like getRed, but returns the green component of the color.\n     */\npublic static int getGreen(int row, int col) {\n    if (canvas == null)\n        return 0;\n    if (row < 0 || row >= mosaicRows || col < 0 || col >= mosaicCols) {\n        throw new IllegalArgumentException(\""(row,col) = (\"" + row + \"",\"" + col + \"") is not in the mosaic.\"");\n    }\n    return canvas.getGreen(row, col);\n}\n"",""rating"":2},""code"":""public static int Taxreturn(Person P){\n  /*Write a java method that takes a person and returns their tax as below:\n1. For employees, if salary < $10,000, 2% of salary, else 5%\n2. For business owners, 10% of their profit\n3. 0 for veterans\n  */ \n  if(p.getSalary()){\n    return p.getSalary();\n  }\n  \n}""}"
17,2.5,3.0,1.0,2.5,2017-05-06 05:06:30.181378,3,14,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Constructs a salaried employee with a given name and annual salary.\n      @param name the name of this employee\n      @param salary the annual salary\n    */\npublic SalariedEmployee(String name, double salary) {\n    setName(name);\n    annualSalary = salary;\n}\n"",""rating"":3},""code"":""public static int Taxreturn(Person P){\n  /*Write a java method that takes a person and returns their tax as below:\n1. For employees, if salary < $10,000, 2% of salary, else 5%\n2. For business owners, 10% of their profit\n3. 0 for veterans\n  */ \n  if(p.getSalary()){\n    return p.getSalary();\n  }\n  \n}""}"
18,2.5,3.0,1.0,2.5,2017-05-06 05:06:31.634161,3,15,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""/**\n     * Like getRed, but returns the blue component of the color.\n     */\npublic static int getBlue(int row, int col) {\n    if (canvas == null)\n        return 0;\n    if (row < 0 || row >= mosaicRows || col < 0 || col >= mosaicCols) {\n        throw new IllegalArgumentException(\""(row,col) = (\"" + row + \"",\"" + col + \"") is not in the mosaic.\"");\n    }\n    return canvas.getBlue(row, col);\n}\n"",""rating"":2},""code"":""public static int Taxreturn(Person P){\n  /*Write a java method that takes a person and returns their tax as below:\n1. For employees, if salary < $10,000, 2% of salary, else 5%\n2. For business owners, 10% of their profit\n3. 0 for veterans\n  */ \n  if(p.getSalary()){\n    return p.getSalary();\n  }\n  \n}""}"
19,2.5,3.0,1.0,2.5,2017-05-06 05:06:33.469180,3,16,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""/**\n      Gets the name of this employee.\n      @return the name \n   */\npublic String getName() {\n    return name;\n}\n"",""rating"":2},""code"":""public static int Taxreturn(Person P){\n  /*Write a java method that takes a person and returns their tax as below:\n1. For employees, if salary < $10,000, 2% of salary, else 5%\n2. For business owners, 10% of their profit\n3. 0 for veterans\n  */ \n  if(p.getSalary()){\n    return p.getSalary();\n  }\n  \n}""}"
20,1.0,1.0,1.0,1.0,2017-05-06 05:09:28.414213,3,17,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent2(int[] a) {\n    // O(n log(n))\n    Arrays.sort(a);\n    int[] counts = new int[a.length];\n    int count = 0;\n    for (// O(n)\n    int i = 0; // O(n)\n    i < a.length; // O(n)\n    i++) {\n        count++;\n        if (i == a.length - 1 || a[i] != a[i + 1]) {\n            counts[i] = count;\n            count = 0;\n        }\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":4},""code"":""public static KillArray(int[] IntAr){\n  int a;\n  for (i=0; i<IntAr.length; i++){\n    \n  }\n  return a;\n}""}"
21,1.0,1.0,1.0,1.0,2017-05-06 05:09:30.696950,3,18,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""/**\n      Sorts an array, using selection sort.\n      @param a the array to sort\n   */\npublic static void sort(int[] a) {\n    for (int i = 0; i < a.length - 1; i++) {\n        int minPos = minimumPosition(a, i);\n        ArrayUtil.swap(a, minPos, i);\n    }\n}\n"",""rating"":4},""code"":""public static KillArray(int[] IntAr){\n  int a;\n  for (i=0; i<IntAr.length; i++){\n    \n  }\n  return a;\n}""}"
22,1.0,1.0,1.0,1.0,2017-05-06 05:09:32.064215,3,19,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""// pre: list != null, list.length > 0\n// post: return index of minimum element of array\npublic static int findMin(int[] list) {\n    assert list != null && list.length > 0 : \""failed precondition\"";\n    int indexOfMin = 0;\n    for (int i = 1; i < list.length; i++) {\n        if (list[i] < list[indexOfMin]) {\n            indexOfMin = i;\n        }\n    }\n    return indexOfMin;\n}\n"",""rating"":5},""code"":""public static KillArray(int[] IntAr){\n  int a;\n  for (i=0; i<IntAr.length; i++){\n    \n  }\n  return a;\n}""}"
23,1.0,1.0,1.0,1.0,2017-05-06 05:09:32.973728,3,20,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""public String toString() {\n    return Arrays.toString(queens);\n}\n"",""rating"":2},""code"":""public static KillArray(int[] IntAr){\n  int a;\n  for (i=0; i<IntAr.length; i++){\n    \n  }\n  return a;\n}""}"
24,1.0,1.0,1.0,1.0,2017-05-06 05:09:37.397494,3,21,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""public String checkYourself(String stringGuess) {\n    int guess = Integer.parseInt(stringGuess);\n    String result = \""miss\"";\n    for (int cell : locationCells) {\n        if (guess == cell) {\n            result = \""hit\"";\n            numOfHits++;\n            break;\n        }\n    }\n    if (numOfHits == locationCells.length) {\n        result = \""kill\"";\n    }\n    System.out.println(result);\n    return result;\n}\n"",""rating"":2},""code"":""public static KillArray(int[] IntAr){\n  int a;\n  for (i=0; i<IntAr.length; i++){\n    \n  }\n  return a;\n}""}"
25,1.0,1.0,1.0,1.0,2017-05-06 05:09:38.398477,3,22,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""public void run() {\n    Random myNextKill = new Random(System.currentTimeMillis() % 100);\n    for (int i = 0; i < 100; i++) {\n        int index = myNextKill.nextInt(StocksOrderProcessor.MAX_NUMBER_OF_ORDERS);\n        boolean cancel = ordersToProcess.get(index).cancel(true);\n        if (cancel) {\n            System.out.println(\""Cancel Order Succeeded: \"" + index);\n        } else {\n            System.out.println(\""Cancel Order Failed: \"" + index);\n        }\n        try {\n            Thread.sleep(myNextKill.nextInt(100));\n        } catch (InterruptedException ex) {\n            ex.printStackTrace();\n        }\n    }\n}\n"",""rating"":2},""code"":""public static KillArray(int[] IntAr){\n  int a;\n  for (i=0; i<IntAr.length; i++){\n    \n  }\n  return a;\n}""}"
26,1.0,1.0,1.0,1.0,2017-05-06 05:09:40.140279,3,23,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""/**\n      Sorts an array, using selection sort.\n      @param a the array to sort\n   */\npublic static void sort(int[] a) {\n    int n = a.length - 1;\n    for (int i = (n - 1) / 2; i >= 0; i--) {\n        fixHeap(a, i, n);\n    }\n    while (n > 0) {\n        ArrayUtil.swap(a, 0, n);\n        n--;\n        fixHeap(a, 0, n);\n    }\n}\n"",""rating"":4},""code"":""public static KillArray(int[] IntAr){\n  int a;\n  for (i=0; i<IntAr.length; i++){\n    \n  }\n  return a;\n}""}"
27,1.0,1.0,1.0,1.0,2017-05-06 05:09:41.684005,3,24,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""/**\n      Computes the largest value of an array.\n      @param a the array\n      @return the largest value in a\n   */\npublic static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":4},""code"":""public static KillArray(int[] IntAr){\n  int a;\n  for (i=0; i<IntAr.length; i++){\n    \n  }\n  return a;\n}""}"
28,1.0,1.0,1.0,1.0,2017-05-06 05:09:42.945723,3,25,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""public String checkYourself(String userInput) {\n    String result = \""miss\"";\n    int index = locationCells.indexOf(userInput);\n    if (index >= 0) {\n        locationCells.remove(index);\n        if (locationCells.isEmpty()) {\n            result = \""kill\"";\n        } else {\n            result = \""hit\"";\n        }\n    }\n    return result;\n}\n"",""rating"":2},""code"":""public static KillArray(int[] IntAr){\n  int a;\n  for (i=0; i<IntAr.length; i++){\n    \n  }\n  return a;\n}""}"
29,1.0,1.0,1.0,1.0,2017-05-06 05:09:44.439464,3,26,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""private void maybeKillParent() {\n    if (parent == null)\n        return;\n    if (parent instanceof Frame) {\n        ((Frame) parent).setVisible(true);\n        ((Frame) parent).dispose();\n    }\n    if (parent instanceof JInternalFrame) {\n        ((JInternalFrame) parent).setVisible(true);\n        ((JInternalFrame) parent).dispose();\n    }\n}\n"",""rating"":2},""code"":""public static KillArray(int[] IntAr){\n  int a;\n  for (i=0; i<IntAr.length; i++){\n    \n  }\n  return a;\n}""}"
30,1.0,3.0,1.0,1.0,2017-05-06 05:09:46.861743,3,,"public static KillArray(int[] IntAr){
  int a;
  for (i=0; i<IntAr.length; i++){
    
  }
  return a;
}"
31,1.0,3.0,3.0,1.0,2017-05-06 05:09:47.846613,3,,"public static KillArray(int[] IntAr){
  int a;
  for (i=0; i<IntAr.length; i++){
    
  }
  return a;
}"
32,1.0,3.0,3.0,1.0,2017-05-06 05:09:51.031653,3,27,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""/**\n      Sorts an array, using selection sort.\n      @param a the array to sort\n   */\npublic static void sort(int[] a) {\n    for (int i = 0; i < a.length - 1; i++) {\n        int minPos = minimumPosition(a, i);\n        ArrayUtil.swap(a, minPos, i);\n    }\n}\n"",""rating"":4},""code"":""public static KillArray(int[] IntAr){\n  int a;\n  for (i=0; i<IntAr.length; i++){\n    \n  }\n  return a;\n}""}"
33,1.0,3.0,3.0,1.0,2017-05-06 05:09:53.480950,3,28,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""// pre: list != null, list.length > 0\n// post: return index of minimum element of array\npublic static int findMin(int[] list) {\n    assert list != null && list.length > 0 : \""failed precondition\"";\n    int indexOfMin = 0;\n    for (int i = 1; i < list.length; i++) {\n        if (list[i] < list[indexOfMin]) {\n            indexOfMin = i;\n        }\n    }\n    return indexOfMin;\n}\n"",""rating"":2},""code"":""public static KillArray(int[] IntAr){\n  int a;\n  for (i=0; i<IntAr.length; i++){\n    \n  }\n  return a;\n}""}"
34,1.0,3.0,3.0,1.0,2017-05-06 05:09:54.424145,3,29,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""/**\n      Sorts an array, using selection sort.\n      @param a the array to sort\n   */\npublic static void sort(int[] a) {\n    for (int i = 0; i < a.length - 1; i++) {\n        int minPos = minimumPosition(a, i);\n        ArrayUtil.swap(a, minPos, i);\n    }\n}\n"",""rating"":1},""code"":""public static KillArray(int[] IntAr){\n  int a;\n  for (i=0; i<IntAr.length; i++){\n    \n  }\n  return a;\n}""}"
35,1.0,3.0,3.0,1.0,2017-05-06 05:09:56.574964,3,30,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""// pre: list != null\n// post: adds one to every element of list\npublic static void addOne(int[] list) {\n    for (int i = 0; i < list.length; i++) {\n        list[i]++;\n    }\n}\n"",""rating"":2},""code"":""public static KillArray(int[] IntAr){\n  int a;\n  for (i=0; i<IntAr.length; i++){\n    \n  }\n  return a;\n}""}"
36,1.0,3.0,3.0,1.0,2017-05-06 05:09:57.862887,3,31,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""public String checkYourself(String userInput) {\n    String result = \""miss\"";\n    int index = locationCells.indexOf(userInput);\n    if (index >= 0) {\n        locationCells.remove(index);\n        if (locationCells.isEmpty()) {\n            result = \""kill\"";\n        } else {\n            result = \""hit\"";\n        }\n    }\n    return result;\n}\n"",""rating"":2},""code"":""public static KillArray(int[] IntAr){\n  int a;\n  for (i=0; i<IntAr.length; i++){\n    \n  }\n  return a;\n}""}"
37,3.0,1.0,1.0,1.0,2017-05-06 07:00:24.644558,5,,"public double tax(Person person) {
  double salary = person.getSalary();
  double profit = person.getProfit();
  if (person.veteran_id == null) {
    return 0.0
  } else if {
    
  }
  
}"
38,1.0,1.0,1.0,1.0,2017-05-06 07:00:26.874434,5,,"public double tax(Person person) {
  double salary = person.getSalary();
  double profit = person.getProfit();
  if (person.veteran_id == null) {
    return 0.0
  } else if {
    
  }
  
}"
39,1.0,1.0,1.0,1.0,2017-05-06 07:08:06.282000,5,32,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""public double weeklyPay(int hoursWorked) {\n    double pay = hoursWorked * hourlyWage;\n    if (hoursWorked > 40) {\n        // Add overtime\n        pay = pay + ((hoursWorked - 40) * 0.5) * hourlyWage;\n    }\n    return pay;\n}\n"",""rating"":3},""code"":""private double tax (Employee employee) {\n    double salary = employee.getSalary();\n    if (salary < 10000) {\n        return salary * .02;\n    } else {\n        return salary * .05;\n    }\n}\n\nprivate double tax(BusinessOwner businessOwner) {\n    double profit = businessOwner.getProfit();\n    return profit * .10;\n}\n\nprivate double tax(Veteran veteran) {\n    return 0;\n}""}"
40,1.0,1.0,1.0,1.0,2017-05-06 07:08:15.040513,5,33,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""/**\n      Computes the total amount due.\n      @return the amount due\n   */\nprivate double getAmountDue() {\n    double amountDue = 0;\n    for (LineItem item : items) {\n        amountDue = amountDue + item.getTotalPrice();\n    }\n    return amountDue;\n}\n"",""rating"":2},""code"":""private double tax (Employee employee) {\n    double salary = employee.getSalary();\n    if (salary < 10000) {\n        return salary * .02;\n    } else {\n        return salary * .05;\n    }\n}\n\nprivate double tax(BusinessOwner businessOwner) {\n    double profit = businessOwner.getProfit();\n    return profit * .10;\n}\n\nprivate double tax(Veteran veteran) {\n    return 0;\n}""}"
41,1.0,1.0,1.0,1.0,2017-05-06 07:08:32.841386,5,34,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""/**\n      Constructs a manager with a given name, annual salary and weekly bonus.\n      @param name the name of this employee\n      @param salary the annual salary\n      @param bonus the weekly bonus\n    */\npublic Manager(String name, double salary, double bonus) {\n    super(name, salary);\n    weeklyBonus = bonus;\n}\n"",""rating"":1},""code"":""private double tax (Employee employee) {\n    double salary = employee.getSalary();\n    if (salary < 10000) {\n        return salary * .02;\n    } else {\n        return salary * .05;\n    }\n}\n\nprivate double tax(BusinessOwner businessOwner) {\n    double profit = businessOwner.getProfit();\n    return profit * .10;\n}\n\nprivate double tax(Veteran veteran) {\n    return 0;\n}""}"
42,1.0,1.0,1.0,1.0,2017-05-06 07:17:10.236802,5,35,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""private double tax (Person person) {\n    if (person instanceof Employee) {\n        double salary = ((Employee) person).getSalary();\n        if (salary > 10000) {\n            return salary * 0.02;\n        } else {\n            return salary * 0.05;\n        }\n    } else if (person instanceof BusinessOwner) {\n        double profit = ((BusinessOwner) person).getProfit();\n        return profit * 0.1;\n    } else {\n        return 0;\n    }\n}""}"
43,1.0,1.0,1.0,1.0,2017-05-06 07:17:17.348801,5,36,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""public double weeklyPay(int hoursWorked) {\n    final int WEEKS_PER_YEAR = 52;\n    return annualSalary / WEEKS_PER_YEAR;\n}\n"",""rating"":1},""code"":""private double tax (Person person) {\n    if (person instanceof Employee) {\n        double salary = ((Employee) person).getSalary();\n        if (salary > 10000) {\n            return salary * 0.02;\n        } else {\n            return salary * 0.05;\n        }\n    } else if (person instanceof BusinessOwner) {\n        double profit = ((BusinessOwner) person).getProfit();\n        return profit * 0.1;\n    } else {\n        return 0;\n    }\n}""}"
44,1.0,1.0,1.0,1.0,2017-05-06 07:22:17.707129,5,37,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""public double getTax() {\n    double tax1 = 0;\n    double tax2 = 0;\n    if (status == SINGLE) {\n        if (income <= RATE1_SINGLE_LIMIT) {\n            tax1 = RATE1 * income;\n        } else {\n            tax1 = RATE1 * RATE1_SINGLE_LIMIT;\n            tax2 = RATE2 * (income - RATE1_SINGLE_LIMIT);\n        }\n    } else {\n        if (income <= RATE1_MARRIED_LIMIT) {\n            tax1 = RATE1 * income;\n        } else {\n            tax1 = RATE1 * RATE1_MARRIED_LIMIT;\n            tax2 = RATE2 * (income - RATE1_MARRIED_LIMIT);\n        }\n    }\n    return tax1 + tax2;\n}\n"",""rating"":3},""code"":""public double tax(Person person) {\n        if (person instanceof Employee) {\n            double salary = ((Employee) person).getSalary();\n            if (salary > 10000) {\n                return salary * 0.02;\n            } else {\n                return salary * 0.05;\n            }\n        } else if (person instanceof BusinessOwner) {\n            double profit = ((BusinessOwner) person).getProfit();\n            return profit * 0.1;\n        } else {\n          return 0;\n        }    \n    }""}"
45,1.0,1.0,1.0,1.0,2017-05-06 07:22:29.823874,5,38,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""public double weeklyPay(int hoursWorked) {\n    final int WEEKS_PER_YEAR = 52;\n    return annualSalary / WEEKS_PER_YEAR;\n}\n"",""rating"":1},""code"":""public double tax(Person person) {\n        if (person instanceof Employee) {\n            double salary = ((Employee) person).getSalary();\n            if (salary > 10000) {\n                return salary * 0.02;\n            } else {\n                return salary * 0.05;\n            }\n        } else if (person instanceof BusinessOwner) {\n            double profit = ((BusinessOwner) person).getProfit();\n            return profit * 0.1;\n        } else {\n          return 0;\n        }    \n    }""}"
46,1.0,1.0,1.0,1.0,2017-05-06 07:22:32.664343,5,39,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""public double weeklyPay(int hoursWorked) {\n    double pay = hoursWorked * hourlyWage;\n    if (hoursWorked > 40) {\n        // Add overtime\n        pay = pay + ((hoursWorked - 40) * 0.5) * hourlyWage;\n    }\n    return pay;\n}\n"",""rating"":2},""code"":""public double tax(Person person) {\n        if (person instanceof Employee) {\n            double salary = ((Employee) person).getSalary();\n            if (salary > 10000) {\n                return salary * 0.02;\n            } else {\n                return salary * 0.05;\n            }\n        } else if (person instanceof BusinessOwner) {\n            double profit = ((BusinessOwner) person).getProfit();\n            return profit * 0.1;\n        } else {\n          return 0;\n        }    \n    }""}"
47,1.0,1.0,1.0,1.0,2017-05-06 07:22:36.531930,5,40,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""public Product(float price) {\n    this.price = price;\n    tax = (float) (price * 0.20);\n}\n"",""rating"":3},""code"":""public double tax(Person person) {\n        if (person instanceof Employee) {\n            double salary = ((Employee) person).getSalary();\n            if (salary > 10000) {\n                return salary * 0.02;\n            } else {\n                return salary * 0.05;\n            }\n        } else if (person instanceof BusinessOwner) {\n            double profit = ((BusinessOwner) person).getProfit();\n            return profit * 0.1;\n        } else {\n          return 0;\n        }    \n    }""}"
48,1.0,1.0,1.0,1.0,2017-05-06 07:22:52.166053,5,41,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String[] args) {\n    String input = JOptionPane.showInputDialog(\""Enter price:\"");\n    double price = Double.parseDouble(input);\n    final double TAX_RATE = 8.5;\n    price = price * (1 + TAX_RATE / 100);\n    JOptionPane.showMessageDialog(null, \""Price after tax: \"" + price);\n}\n"",""rating"":2},""code"":""public double tax(Person person) {\n        if (person instanceof Employee) {\n            double salary = ((Employee) person).getSalary();\n            if (salary > 10000) {\n                return salary * 0.02;\n            } else {\n                return salary * 0.05;\n            }\n        } else if (person instanceof BusinessOwner) {\n            double profit = ((BusinessOwner) person).getProfit();\n            return profit * 0.1;\n        } else {\n          return 0;\n        }    \n    }""}"
49,1.0,1.0,1.0,1.0,2017-05-06 07:26:26.130240,5,42,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":2},""code"":""public double tax(Person person) {\n        if (person instanceof Employee) {\n            double salary = ((Employee) person).getSalary();\n            if (salary > 10000) {\n                return salary * 0.02;\n            } else {\n                return salary * 0.05;\n            }\n        } else if (person instanceof BusinessOwner) {\n            double profit = ((BusinessOwner) person).getProfit();\n            return profit * 0.1;\n        } else {\n          return 0;\n        }    \n    }""}"
50,1.0,1.0,1.0,1.0,2017-05-06 07:26:28.265563,5,43,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""/**\n      Computes the sum of the scores\n      @return the total score\n   */\npublic double sum() {\n    double total = 0;\n    for (double score : scores) {\n        total = total + score;\n    }\n    return total;\n}\n"",""rating"":1},""code"":""public double tax(Person person) {\n        if (person instanceof Employee) {\n            double salary = ((Employee) person).getSalary();\n            if (salary > 10000) {\n                return salary * 0.02;\n            } else {\n                return salary * 0.05;\n            }\n        } else if (person instanceof BusinessOwner) {\n            double profit = ((BusinessOwner) person).getProfit();\n            return profit * 0.1;\n        } else {\n          return 0;\n        }    \n    }""}"
51,1.0,1.0,1.0,1.0,2017-05-06 07:26:36.463125,5,44,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", targetDate = \""Jan 1, 2012\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":2},""code"":""public double tax(Person person) {\n        if (person instanceof Employee) {\n            double salary = ((Employee) person).getSalary();\n            if (salary > 10000) {\n                return salary * 0.02;\n            } else {\n                return salary * 0.05;\n            }\n        } else if (person instanceof BusinessOwner) {\n            double profit = ((BusinessOwner) person).getProfit();\n            return profit * 0.1;\n        } else {\n          return 0;\n        }    \n    }""}"
52,1.0,1.0,1.0,1.0,2017-05-06 07:26:40.505947,5,45,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""public static void main(String[] args) {\n    double sum = 0;\n    int count = 0;\n    double salary = 0;\n    System.out.print(\""Enter salaries, -1 to finish: \"");\n    Scanner in = new Scanner(System.in);\n    while (salary != -1) {\n        salary = in.nextDouble();\n        if (salary != -1) {\n            sum = sum + salary;\n            count++;\n        }\n    }\n    if (count > 0) {\n        double average = sum / count;\n        System.out.println(\""Average salary: \"" + average);\n       // Process data until the sentinel is entered \n\n    } else {\n        System.out.println(\""No data\"");\n    }\n}\n       // Compute and print the average\n\n"",""rating"":1},""code"":""public double tax(Person person) {\n        if (person instanceof Employee) {\n            double salary = ((Employee) person).getSalary();\n            if (salary > 10000) {\n                return salary * 0.02;\n            } else {\n                return salary * 0.05;\n            }\n        } else if (person instanceof BusinessOwner) {\n            double profit = ((BusinessOwner) person).getProfit();\n            return profit * 0.1;\n        } else {\n          return 0;\n        }    \n    }""}"
53,2.5,1.0,1.0,1.0,2017-05-06 07:26:49.897051,5,,"public double tax(Person person) {
        if (person instanceof Employee) {
            double salary = ((Employee) person).getSalary();
            if (salary > 10000) {
                return salary * 0.02;
            } else {
                return salary * 0.05;
            }
        } else if (person instanceof BusinessOwner) {
            double profit = ((BusinessOwner) person).getProfit();
            return profit * 0.1;
        } else {
          return 0;
        }    
    }"
54,2.5,4.0,1.0,1.0,2017-05-06 07:26:51.263540,5,,"public double tax(Person person) {
        if (person instanceof Employee) {
            double salary = ((Employee) person).getSalary();
            if (salary > 10000) {
                return salary * 0.02;
            } else {
                return salary * 0.05;
            }
        } else if (person instanceof BusinessOwner) {
            double profit = ((BusinessOwner) person).getProfit();
            return profit * 0.1;
        } else {
          return 0;
        }    
    }"
55,2.5,4.0,4.0,1.0,2017-05-06 07:26:53.159226,5,,"public double tax(Person person) {
        if (person instanceof Employee) {
            double salary = ((Employee) person).getSalary();
            if (salary > 10000) {
                return salary * 0.02;
            } else {
                return salary * 0.05;
            }
        } else if (person instanceof BusinessOwner) {
            double profit = ((BusinessOwner) person).getProfit();
            return profit * 0.1;
        } else {
          return 0;
        }    
    }"
56,2.5,4.0,4.0,5.0,2017-05-06 07:27:06.923006,5,,"public double tax(Person person) {
        if (person instanceof Employee) {
            double salary = ((Employee) person).getSalary();
            if (salary > 10000) {
                return salary * 0.02;
            } else {
                return salary * 0.05;
            }
        } else if (person instanceof BusinessOwner) {
            double profit = ((BusinessOwner) person).getProfit();
            return profit * 0.1;
        } else {
          return 0;
        }    
    }"
57,2.5,4.0,4.0,4.0,2017-05-06 07:27:11.124831,5,,"public double tax(Person person) {
        if (person instanceof Employee) {
            double salary = ((Employee) person).getSalary();
            if (salary > 10000) {
                return salary * 0.02;
            } else {
                return salary * 0.05;
            }
        } else if (person instanceof BusinessOwner) {
            double profit = ((BusinessOwner) person).getProfit();
            return profit * 0.1;
        } else {
          return 0;
        }    
    }"
58,2.5,4.0,5.0,4.0,2017-05-06 07:27:12.553359,5,,"public double tax(Person person) {
        if (person instanceof Employee) {
            double salary = ((Employee) person).getSalary();
            if (salary > 10000) {
                return salary * 0.02;
            } else {
                return salary * 0.05;
            }
        } else if (person instanceof BusinessOwner) {
            double profit = ((BusinessOwner) person).getProfit();
            return profit * 0.1;
        } else {
          return 0;
        }    
    }"
59,2.5,4.0,5.0,4.0,2017-05-06 07:27:33.046576,5,46,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""public Product(float price) {\n    this.price = price;\n    tax = (float) (price * 0.20);\n}\n"",""rating"":3},""code"":""public double tax(Person person) {\n        if (person instanceof Employee) {\n            double salary = ((Employee) person).getSalary();\n            if (salary > 10000) {\n                return salary * 0.02;\n            } else {\n                return salary * 0.05;\n            }\n        } else if (person instanceof BusinessOwner) {\n            double profit = ((BusinessOwner) person).getProfit();\n            return profit * 0.1;\n        } else {\n          return 0;\n        }    \n    }""}"
60,1.0,3.0,1.0,1.0,2017-05-06 07:40:59.346711,5,,"int maxDifference(int array[]) {
  int maxDiff = array[1] - array[0];
  int min = array[0];
  int arrayLen = array.length;
  int i;
  for(i = 1; i < arrayLen; i++) {
    if (array[i] - min > maxDiff)
      maxDiff = array[i] - min
    if (array[i] < min)
      min = array[i];
  }
  return maxDiff;
}"
61,1.0,3.0,1.0,1.0,2017-05-06 07:42:58.371172,5,47,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""Task(int min, int max) {\n    this.min = min;\n    this.max = max;\n}\n"",""rating"":2},""code"":""int maxDifference(int array[]) {\n  int maxDiff = array[1] - array[0];\n  int min = array[0];\n  int arrayLen = array.length;\n  int i;\n  for(i = 1; i < arrayLen; i++) {\n    if (array[i] - min > maxDiff)\n      maxDiff = array[i] - min;\n    if (array[i] < min)\n      min = array[i];\n  }\n  return maxDiff;\n}""}"
62,1.0,3.0,4.5,1.0,2017-05-06 07:43:01.210962,5,,"int maxDifference(int array[]) {
  int maxDiff = array[1] - array[0];
  int min = array[0];
  int arrayLen = array.length;
  int i;
  for(i = 1; i < arrayLen; i++) {
    if (array[i] - min > maxDiff)
      maxDiff = array[i] - min;
    if (array[i] < min)
      min = array[i];
  }
  return maxDiff;
}"
63,1.0,3.0,4.5,1.0,2017-05-06 07:43:07.442571,5,48,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent1(int[] a) {\n    int[] counts = new int[a.length];\n    for (// O(n*n)\n    int i = 0; // O(n*n)\n    i < a.length; // O(n*n)\n    i++) {\n        // O(n) in each iteration\n        counts[i] = count(a, a[i]);\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":1},""code"":""int maxDifference(int array[]) {\n  int maxDiff = array[1] - array[0];\n  int min = array[0];\n  int arrayLen = array.length;\n  int i;\n  for(i = 1; i < arrayLen; i++) {\n    if (array[i] - min > maxDiff)\n      maxDiff = array[i] - min;\n    if (array[i] < min)\n      min = array[i];\n  }\n  return maxDiff;\n}""}"
64,1.0,3.0,4.5,1.0,2017-05-06 07:43:21.836097,5,49,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""public CountPrimesThread(int min, int max) {\n    this.min = min;\n    this.max = max;\n}\n"",""rating"":1},""code"":""int maxDifference(int array[]) {\n  int maxDiff = array[1] - array[0];\n  int min = array[0];\n  int arrayLen = array.length;\n  int i;\n  for(i = 1; i < arrayLen; i++) {\n    if (array[i] - min > maxDiff)\n      maxDiff = array[i] - min;\n    if (array[i] < min)\n      min = array[i];\n  }\n  return maxDiff;\n}""}"
65,1.0,3.0,4.5,1.0,2017-05-06 07:43:36.182923,5,50,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""// pre: list != null, list.length > 0\n// post: return index of minimum element of array\npublic static int findMin(int[] list) {\n    assert list != null && list.length > 0 : \""failed precondition\"";\n    int indexOfMin = 0;\n    for (int i = 1; i < list.length; i++) {\n        if (list[i] < list[indexOfMin]) {\n            indexOfMin = i;\n        }\n    }\n    return indexOfMin;\n}\n"",""rating"":3},""code"":""int maxDifference(int array[]) {\n  int maxDiff = array[1] - array[0];\n  int min = array[0];\n  int arrayLen = array.length;\n  int i;\n  for(i = 1; i < arrayLen; i++) {\n    if (array[i] - min > maxDiff)\n      maxDiff = array[i] - min;\n    if (array[i] < min)\n      min = array[i];\n  }\n  return maxDiff;\n}""}"
66,1.0,3.0,4.5,1.0,2017-05-06 07:43:44.522683,5,51,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""/**\n      Computes the largest value of an array.\n      @param a the array\n      @return the largest value in a\n   */\npublic static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":4},""code"":""int maxDifference(int array[]) {\n  int maxDiff = array[1] - array[0];\n  int min = array[0];\n  int arrayLen = array.length;\n  int i;\n  for(i = 1; i < arrayLen; i++) {\n    if (array[i] - min > maxDiff)\n      maxDiff = array[i] - min;\n    if (array[i] < min)\n      min = array[i];\n  }\n  return maxDiff;\n}""}"
67,1.0,3.0,4.5,1.0,2017-05-06 07:44:04.069255,5,52,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""public void run() {\n    count = countPrimes(min, max);\n    System.out.println(\""There are \"" + count + \"" primes between \"" + min + \"" and \"" + max);\n    addToTotal(count);\n}\n"",""rating"":1},""code"":""public static int maxDifference(int array[]) {\n  int maxDiff = array[1] - array[0];\n  int min = array[0];\n  int arrayLen = array.length;\n  int i;\n  for(i = 1; i < arrayLen; i++) {\n    if (array[i] - min > maxDiff)\n      maxDiff = array[i] - min;\n    if (array[i] < min)\n      min = array[i];\n  }\n  return maxDiff;\n}""}"
68,1.0,3.0,4.5,1.0,2017-05-06 07:44:08.095693,5,53,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent2(int[] a) {\n    // O(n log(n))\n    Arrays.sort(a);\n    int[] counts = new int[a.length];\n    int count = 0;\n    for (// O(n)\n    int i = 0; // O(n)\n    i < a.length; // O(n)\n    i++) {\n        count++;\n        if (i == a.length - 1 || a[i] != a[i + 1]) {\n            counts[i] = count;\n            count = 0;\n        }\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":3},""code"":""public static int maxDifference(int array[]) {\n  int maxDiff = array[1] - array[0];\n  int min = array[0];\n  int arrayLen = array.length;\n  int i;\n  for(i = 1; i < arrayLen; i++) {\n    if (array[i] - min > maxDiff)\n      maxDiff = array[i] - min;\n    if (array[i] < min)\n      min = array[i];\n  }\n  return maxDiff;\n}""}"
69,1.0,3.0,4.5,1.0,2017-05-06 07:44:14.836520,5,54,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""/**\n      Finds the smallest element in a tail range of the array.\n      @param a the array to sort\n      @param from the first position in a to compare\n      @return the position of the smallest element in the\n      range a[from] . . . a[a.length - 1]\n   */\nprivate static int minimumPosition(int[] a, int from) {\n    int minPos = from;\n    for (int i = from + 1; i < a.length; i++) {\n        if (a[i] < a[minPos]) {\n            minPos = i;\n        }\n    }\n    return minPos;\n}\n"",""rating"":5},""code"":""public static int maxDifference(int array[]) {\n  int maxDiff = array[1] - array[0];\n  int min = array[0];\n  int arrayLen = array.length;\n  int i;\n  for(i = 1; i < arrayLen; i++) {\n    if (array[i] - min > maxDiff)\n      maxDiff = array[i] - min;\n    if (array[i] < min)\n      min = array[i];\n  }\n  return maxDiff;\n}""}"
70,1.0,3.0,4.5,1.0,2017-05-06 07:44:17.378659,5,55,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""Task(int min, int max) {\n    this.min = min;\n    this.max = max;\n}\n"",""rating"":2},""code"":""public static int maxDifference(int array[]) {\n  int maxDiff = array[1] - array[0];\n  int min = array[0];\n  int arrayLen = array.length;\n  int i;\n  for(i = 1; i < arrayLen; i++) {\n    if (array[i] - min > maxDiff)\n      maxDiff = array[i] - min;\n    if (array[i] < min)\n      min = array[i];\n  }\n  return maxDiff;\n}""}"
71,1.0,3.0,4.5,1.0,2017-05-06 07:44:19.687325,5,56,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public void setLength(int len) {\n    length = len;\n}\n"",""rating"":1},""code"":""public static int maxDifference(int array[]) {\n  int maxDiff = array[1] - array[0];\n  int min = array[0];\n  int arrayLen = array.length;\n  int i;\n  for(i = 1; i < arrayLen; i++) {\n    if (array[i] - min > maxDiff)\n      maxDiff = array[i] - min;\n    if (array[i] < min)\n      min = array[i];\n  }\n  return maxDiff;\n}""}"
72,1.0,3.0,4.5,1.0,2017-05-06 07:44:21.742586,5,57,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""public CountDivisorsThread(int min, int max) {\n    this.min = min;\n    this.max = max;\n}\n"",""rating"":1},""code"":""public static int maxDifference(int array[]) {\n  int maxDiff = array[1] - array[0];\n  int min = array[0];\n  int arrayLen = array.length;\n  int i;\n  for(i = 1; i < arrayLen; i++) {\n    if (array[i] - min > maxDiff)\n      maxDiff = array[i] - min;\n    if (array[i] < min)\n      min = array[i];\n  }\n  return maxDiff;\n}""}"
73,1.0,3.0,4.5,2.5,2017-05-06 07:44:24.406846,5,,"public static int maxDifference(int array[]) {
  int maxDiff = array[1] - array[0];
  int min = array[0];
  int arrayLen = array.length;
  int i;
  for(i = 1; i < arrayLen; i++) {
    if (array[i] - min > maxDiff)
      maxDiff = array[i] - min;
    if (array[i] < min)
      min = array[i];
  }
  return maxDiff;
}"
74,1.0,4.0,4.5,2.5,2017-05-06 07:44:26.040082,5,,"public static int maxDifference(int array[]) {
  int maxDiff = array[1] - array[0];
  int min = array[0];
  int arrayLen = array.length;
  int i;
  for(i = 1; i < arrayLen; i++) {
    if (array[i] - min > maxDiff)
      maxDiff = array[i] - min;
    if (array[i] < min)
      min = array[i];
  }
  return maxDiff;
}"
75,2.0,4.0,4.5,2.5,2017-05-06 07:44:28.022677,5,,"public static int maxDifference(int array[]) {
  int maxDiff = array[1] - array[0];
  int min = array[0];
  int arrayLen = array.length;
  int i;
  for(i = 1; i < arrayLen; i++) {
    if (array[i] - min > maxDiff)
      maxDiff = array[i] - min;
    if (array[i] < min)
      min = array[i];
  }
  return maxDiff;
}"
76,2.0,4.0,4.5,2.5,2017-05-06 07:44:49.209588,5,58,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""// pre: list != null, list.length > 0\n// post: return index of minimum element of array\npublic static int findMin(int[] list) {\n    assert list != null && list.length > 0 : \""failed precondition\"";\n    int indexOfMin = 0;\n    for (int i = 1; i < list.length; i++) {\n        if (list[i] < list[indexOfMin]) {\n            indexOfMin = i;\n        }\n    }\n    return indexOfMin;\n}\n"",""rating"":2},""code"":""public static int maxDifference(int array[]) {\n  int maxDiff = array[1] - array[0];\n  int min = array[0];\n  int arrayLen = array.length;\n  int i;\n  for(i = 1; i < arrayLen; i++) {\n    if (array[i] - min > maxDiff)\n      maxDiff = array[i] - min;\n    if (array[i] < min)\n      min = array[i];\n  }\n  return maxDiff;\n}""}"
77,2.0,4.0,4.5,2.5,2017-05-06 07:44:57.149423,5,59,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent1(int[] a) {\n    int[] counts = new int[a.length];\n    for (// O(n*n)\n    int i = 0; // O(n*n)\n    i < a.length; // O(n*n)\n    i++) {\n        // O(n) in each iteration\n        counts[i] = count(a, a[i]);\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":4},""code"":""public static int maxDifference(int array[]) {\n  int maxDiff = array[1] - array[0];\n  int min = array[0];\n  int arrayLen = array.length;\n  int i;\n  for(i = 1; i < arrayLen; i++) {\n    if (array[i] - min > maxDiff)\n      maxDiff = array[i] - min;\n    if (array[i] < min)\n      min = array[i];\n  }\n  return maxDiff;\n}""}"
78,2.0,4.0,4.5,2.5,2017-05-06 07:45:03.003299,5,60,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent2(int[] a) {\n    // O(n log(n))\n    Arrays.sort(a);\n    int[] counts = new int[a.length];\n    int count = 0;\n    for (// O(n)\n    int i = 0; // O(n)\n    i < a.length; // O(n)\n    i++) {\n        count++;\n        if (i == a.length - 1 || a[i] != a[i + 1]) {\n            counts[i] = count;\n            count = 0;\n        }\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":5},""code"":""public static int maxDifference(int array[]) {\n  int maxDiff = array[1] - array[0];\n  int min = array[0];\n  int arrayLen = array.length;\n  int i;\n  for(i = 1; i < arrayLen; i++) {\n    if (array[i] - min > maxDiff)\n      maxDiff = array[i] - min;\n    if (array[i] < min)\n      min = array[i];\n  }\n  return maxDiff;\n}""}"
79,2.0,4.0,4.5,2.5,2017-05-06 07:45:05.368259,5,61,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""// pre: list != null\n// post: return sum of elements\n// use traditional for loop\npublic static int sumListOld(int[] list) {\n    int total = 0;\n    for (int i = 0; i < list.length; i++) {\n        total += list[i];\n        System.out.println(list[i]);\n    }\n    return total;\n}\n"",""rating"":4},""code"":""public static int maxDifference(int array[]) {\n  int maxDiff = array[1] - array[0];\n  int min = array[0];\n  int arrayLen = array.length;\n  int i;\n  for(i = 1; i < arrayLen; i++) {\n    if (array[i] - min > maxDiff)\n      maxDiff = array[i] - min;\n    if (array[i] < min)\n      min = array[i];\n  }\n  return maxDiff;\n}""}"
80,2.0,4.0,4.5,2.5,2017-05-06 07:45:06.652227,5,62,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public void setLength(int len) {\n    length = len;\n}\n"",""rating"":1},""code"":""public static int maxDifference(int array[]) {\n  int maxDiff = array[1] - array[0];\n  int min = array[0];\n  int arrayLen = array.length;\n  int i;\n  for(i = 1; i < arrayLen; i++) {\n    if (array[i] - min > maxDiff)\n      maxDiff = array[i] - min;\n    if (array[i] < min)\n      min = array[i];\n  }\n  return maxDiff;\n}""}"
81,2.0,4.0,4.5,2.5,2017-05-06 07:45:08.066380,5,63,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""public CountPrimesThread(int min, int max) {\n    this.min = min;\n    this.max = max;\n}\n"",""rating"":1},""code"":""public static int maxDifference(int array[]) {\n  int maxDiff = array[1] - array[0];\n  int min = array[0];\n  int arrayLen = array.length;\n  int i;\n  for(i = 1; i < arrayLen; i++) {\n    if (array[i] - min > maxDiff)\n      maxDiff = array[i] - min;\n    if (array[i] < min)\n      min = array[i];\n  }\n  return maxDiff;\n}""}"
82,2.0,4.0,4.5,2.5,2017-05-06 07:45:08.885253,5,64,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""Task(int min, int max) {\n    this.min = min;\n    this.max = max;\n}\n"",""rating"":1},""code"":""public static int maxDifference(int array[]) {\n  int maxDiff = array[1] - array[0];\n  int min = array[0];\n  int arrayLen = array.length;\n  int i;\n  for(i = 1; i < arrayLen; i++) {\n    if (array[i] - min > maxDiff)\n      maxDiff = array[i] - min;\n    if (array[i] < min)\n      min = array[i];\n  }\n  return maxDiff;\n}""}"
83,2.0,4.0,4.5,2.5,2017-05-06 07:45:11.163346,5,65,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""public void run() {\n    count = countPrimes(min, max);\n    System.out.println(\""There are \"" + count + \"" primes between \"" + min + \"" and \"" + max);\n    addToTotal(count);\n}\n"",""rating"":1},""code"":""public static int maxDifference(int array[]) {\n  int maxDiff = array[1] - array[0];\n  int min = array[0];\n  int arrayLen = array.length;\n  int i;\n  for(i = 1; i < arrayLen; i++) {\n    if (array[i] - min > maxDiff)\n      maxDiff = array[i] - min;\n    if (array[i] < min)\n      min = array[i];\n  }\n  return maxDiff;\n}""}"
84,2.0,4.0,4.5,2.5,2017-05-06 07:45:11.999448,5,66,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""public CountDivisorsThread(int min, int max) {\n    this.min = min;\n    this.max = max;\n}\n"",""rating"":1},""code"":""public static int maxDifference(int array[]) {\n  int maxDiff = array[1] - array[0];\n  int min = array[0];\n  int arrayLen = array.length;\n  int i;\n  for(i = 1; i < arrayLen; i++) {\n    if (array[i] - min > maxDiff)\n      maxDiff = array[i] - min;\n    if (array[i] < min)\n      min = array[i];\n  }\n  return maxDiff;\n}""}"
85,4.0,4.0,4.5,2.5,2017-05-06 07:45:15.097143,5,,"public static int maxDifference(int array[]) {
  int maxDiff = array[1] - array[0];
  int min = array[0];
  int arrayLen = array.length;
  int i;
  for(i = 1; i < arrayLen; i++) {
    if (array[i] - min > maxDiff)
      maxDiff = array[i] - min;
    if (array[i] < min)
      min = array[i];
  }
  return maxDiff;
}"
86,4.0,4.0,4.5,2.5,2017-05-06 07:45:25.174947,5,67,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""public CountDivisorsThread(int min, int max) {\n    this.min = min;\n    this.max = max;\n}\n"",""rating"":2},""code"":""public static int maxDifference(int array[]) {\n  int maxDiff = array[1] - array[0];\n  int min = array[0];\n  int arrayLen = array.length;\n  int i;\n  for(i = 1; i < arrayLen; i++) {\n    if (array[i] - min > maxDiff)\n      maxDiff = array[i] - min;\n    if (array[i] < min)\n      min = array[i];\n  }\n  return maxDiff;\n}""}"
87,4.0,4.0,4.5,2.5,2017-05-06 07:45:29.442840,5,68,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent1(int[] a) {\n    int[] counts = new int[a.length];\n    for (// O(n*n)\n    int i = 0; // O(n*n)\n    i < a.length; // O(n*n)\n    i++) {\n        // O(n) in each iteration\n        counts[i] = count(a, a[i]);\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":4},""code"":""public static int maxDifference(int array[]) {\n  int maxDiff = array[1] - array[0];\n  int min = array[0];\n  int arrayLen = array.length;\n  int i;\n  for(i = 1; i < arrayLen; i++) {\n    if (array[i] - min > maxDiff)\n      maxDiff = array[i] - min;\n    if (array[i] < min)\n      min = array[i];\n  }\n  return maxDiff;\n}""}"
88,4.0,4.0,4.5,2.5,2017-05-06 07:45:31.451651,5,69,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""Task(int min, int max) {\n    this.min = min;\n    this.max = max;\n}\n"",""rating"":1},""code"":""public static int maxDifference(int array[]) {\n  int maxDiff = array[1] - array[0];\n  int min = array[0];\n  int arrayLen = array.length;\n  int i;\n  for(i = 1; i < arrayLen; i++) {\n    if (array[i] - min > maxDiff)\n      maxDiff = array[i] - min;\n    if (array[i] < min)\n      min = array[i];\n  }\n  return maxDiff;\n}""}"
89,4.0,4.0,4.5,2.5,2017-05-06 07:45:33.369096,5,70,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent2(int[] a) {\n    // O(n log(n))\n    Arrays.sort(a);\n    int[] counts = new int[a.length];\n    int count = 0;\n    for (// O(n)\n    int i = 0; // O(n)\n    i < a.length; // O(n)\n    i++) {\n        count++;\n        if (i == a.length - 1 || a[i] != a[i + 1]) {\n            counts[i] = count;\n            count = 0;\n        }\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":3},""code"":""public static int maxDifference(int array[]) {\n  int maxDiff = array[1] - array[0];\n  int min = array[0];\n  int arrayLen = array.length;\n  int i;\n  for(i = 1; i < arrayLen; i++) {\n    if (array[i] - min > maxDiff)\n      maxDiff = array[i] - min;\n    if (array[i] < min)\n      min = array[i];\n  }\n  return maxDiff;\n}""}"
90,4.0,4.0,4.5,2.5,2017-05-06 07:45:37.189795,5,71,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""/**\n      Computes the largest value of an array.\n      @param a the array\n      @return the largest value in a\n   */\npublic static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":4},""code"":""public static int maxDifference(int array[]) {\n  int maxDiff = array[1] - array[0];\n  int min = array[0];\n  int arrayLen = array.length;\n  int i;\n  for(i = 1; i < arrayLen; i++) {\n    if (array[i] - min > maxDiff)\n      maxDiff = array[i] - min;\n    if (array[i] < min)\n      min = array[i];\n  }\n  return maxDiff;\n}""}"
91,4.0,4.0,4.5,2.5,2017-05-06 07:45:38.430747,5,72,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""// pre: list != null\n// post: return sum of elements\n// use traditional for loop\npublic static int sumListOld(int[] list) {\n    int total = 0;\n    for (int i = 0; i < list.length; i++) {\n        total += list[i];\n        System.out.println(list[i]);\n    }\n    return total;\n}\n"",""rating"":2},""code"":""public static int maxDifference(int array[]) {\n  int maxDiff = array[1] - array[0];\n  int min = array[0];\n  int arrayLen = array.length;\n  int i;\n  for(i = 1; i < arrayLen; i++) {\n    if (array[i] - min > maxDiff)\n      maxDiff = array[i] - min;\n    if (array[i] < min)\n      min = array[i];\n  }\n  return maxDiff;\n}""}"
92,5.0,1.0,1.0,1.0,2017-05-06 14:15:49.769002,10,,"import java.util.Arrays;

public class HelloWorld {
   public static void main(String args[]) throws Exception {
      int array[] = { 2, 5, -2, 6, -3, 8, 0, -7, -9, 4 };
      Arrays.sort(array);
      printArray(""Sorted array"", array);
      int index = Arrays.binarySearch(array, 2);
      int firstNum = array[0];
      int lastNum = array[array.length-1];

      System.out.println(""Found 2 @ "" + (lastNum-firstNum));
   }
   private static void printArray(String message, int array[]) {
      System.out.println(message + "": [length: "" + array.length + ""]"");
      
      for (int i = 0; i < array.length; i++) {
         if(i != 0) {
            System.out.print("", "");
         }
         System.out.print(array[i]);                     
      }
      System.out.println();
   }
}"
93,5.0,3.5,1.0,1.0,2017-05-06 14:15:50.737334,10,,"import java.util.Arrays;

public class HelloWorld {
   public static void main(String args[]) throws Exception {
      int array[] = { 2, 5, -2, 6, -3, 8, 0, -7, -9, 4 };
      Arrays.sort(array);
      printArray(""Sorted array"", array);
      int index = Arrays.binarySearch(array, 2);
      int firstNum = array[0];
      int lastNum = array[array.length-1];

      System.out.println(""Found 2 @ "" + (lastNum-firstNum));
   }
   private static void printArray(String message, int array[]) {
      System.out.println(message + "": [length: "" + array.length + ""]"");
      
      for (int i = 0; i < array.length; i++) {
         if(i != 0) {
            System.out.print("", "");
         }
         System.out.print(array[i]);                     
      }
      System.out.println();
   }
}"
94,5.0,3.5,3.0,1.0,2017-05-06 14:15:51.859706,10,,"import java.util.Arrays;

public class HelloWorld {
   public static void main(String args[]) throws Exception {
      int array[] = { 2, 5, -2, 6, -3, 8, 0, -7, -9, 4 };
      Arrays.sort(array);
      printArray(""Sorted array"", array);
      int index = Arrays.binarySearch(array, 2);
      int firstNum = array[0];
      int lastNum = array[array.length-1];

      System.out.println(""Found 2 @ "" + (lastNum-firstNum));
   }
   private static void printArray(String message, int array[]) {
      System.out.println(message + "": [length: "" + array.length + ""]"");
      
      for (int i = 0; i < array.length; i++) {
         if(i != 0) {
            System.out.print("", "");
         }
         System.out.print(array[i]);                     
      }
      System.out.println();
   }
}"
95,5.0,3.5,3.0,5.0,2017-05-06 14:15:57.546021,10,,"import java.util.Arrays;

public class HelloWorld {
   public static void main(String args[]) throws Exception {
      int array[] = { 2, 5, -2, 6, -3, 8, 0, -7, -9, 4 };
      Arrays.sort(array);
      printArray(""Sorted array"", array);
      int index = Arrays.binarySearch(array, 2);
      int firstNum = array[0];
      int lastNum = array[array.length-1];

      System.out.println(""Found 2 @ "" + (lastNum-firstNum));
   }
   private static void printArray(String message, int array[]) {
      System.out.println(message + "": [length: "" + array.length + ""]"");
      
      for (int i = 0; i < array.length; i++) {
         if(i != 0) {
            System.out.print("", "");
         }
         System.out.print(array[i]);                     
      }
      System.out.println();
   }
}"
96,3.0,3.5,3.0,5.0,2017-05-06 14:15:59.076583,10,,"import java.util.Arrays;

public class HelloWorld {
   public static void main(String args[]) throws Exception {
      int array[] = { 2, 5, -2, 6, -3, 8, 0, -7, -9, 4 };
      Arrays.sort(array);
      printArray(""Sorted array"", array);
      int index = Arrays.binarySearch(array, 2);
      int firstNum = array[0];
      int lastNum = array[array.length-1];

      System.out.println(""Found 2 @ "" + (lastNum-firstNum));
   }
   private static void printArray(String message, int array[]) {
      System.out.println(message + "": [length: "" + array.length + ""]"");
      
      for (int i = 0; i < array.length; i++) {
         if(i != 0) {
            System.out.print("", "");
         }
         System.out.print(array[i]);                     
      }
      System.out.println();
   }
}"
97,4.5,3.5,3.0,5.0,2017-05-06 14:16:48.721886,10,,"import java.util.Arrays;

public class HelloWorld {
   public static void main(String args[]) throws Exception {
      int array[] = { 2, 5, -2, 6, -3, 8, 0, -7, -9, 4 };
      Arrays.sort(array);
      printArray(""Sorted array"", array);
      int index = Arrays.binarySearch(array, 2);
      int firstNum = array[0];
      int lastNum = array[array.length-1];

      System.out.println(""Found 2 @ "" + (lastNum-firstNum));
   }
   private static void printArray(String message, int array[]) {
      System.out.println(message + "": [length: "" + array.length + ""]"");
      
      for (int i = 0; i < array.length; i++) {
         if(i != 0) {
            System.out.print("", "");
         }
         System.out.print(array[i]);                     
      }
      System.out.println();
   }
}"
98,2.5,3.5,3.0,5.0,2017-05-06 14:18:22.068480,10,,"public class HelloWorld {
   public static void main(String args[]) throws Exception {
      int array[] = { 2, 5, -2, 6, -3, 8, 0, -7, -9, 4 };
      Arrays.sort(array);
      printArray(""Sorted array"", array);
      int index = Arrays.binarySearch(array, 2);
      int firstNum = array[0];
      int lastNum = array[array.length-1];

      System.out.println(""Found 2 @ "" + (lastNum-firstNum));
   }
   private static void printArray(String message, int array[]) {
      System.out.println(message + "": [length: "" + array.length + ""]"");
      
      for (int i = 0; i < array.length; i++) {
         if(i != 0) {
            System.out.print("", "");
         }
         System.out.print(array[i]);                     
      }
      System.out.println();
   }
}"
99,1.5,1.0,1.0,1.0,2017-05-06 18:49:44.411329,15,,"/* Inline function */
int getSalary(Person p) {
  if ( p instance of Veteran) {
    return 0;
  }
  if ( p instance of BusinessOwner) {
    return ( (p.getProfit()/10.0);
  }
  if ( p instance of Person ) {
    double employeeSalary = p.getSalary();
    if( employeeSalary < 10000) {
      return (employeeSalary/50.0);
    } else {
      return (employeeSalary/20.0);
    }
  }    
}"
100,1.5,0.0,1.0,1.0,2017-05-06 18:49:46.120978,15,,"/* Inline function */
int getSalary(Person p) {
  if ( p instance of Veteran) {
    return 0;
  }
  if ( p instance of BusinessOwner) {
    return ( (p.getProfit()/10.0);
  }
  if ( p instance of Person ) {
    double employeeSalary = p.getSalary();
    if( employeeSalary < 10000) {
      return (employeeSalary/50.0);
    } else {
      return (employeeSalary/20.0);
    }
  }    
}"
101,1.5,0.0,0.0,1.0,2017-05-06 18:49:48.214787,15,,"/* Inline function */
int getSalary(Person p) {
  if ( p instance of Veteran) {
    return 0;
  }
  if ( p instance of BusinessOwner) {
    return ( (p.getProfit()/10.0);
  }
  if ( p instance of Person ) {
    double employeeSalary = p.getSalary();
    if( employeeSalary < 10000) {
      return (employeeSalary/50.0);
    } else {
      return (employeeSalary/20.0);
    }
  }    
}"
102,1.5,0.0,0.0,0.0,2017-05-06 18:49:50.376670,15,,"/* Inline function */
int getSalary(Person p) {
  if ( p instance of Veteran) {
    return 0;
  }
  if ( p instance of BusinessOwner) {
    return ( (p.getProfit()/10.0);
  }
  if ( p instance of Person ) {
    double employeeSalary = p.getSalary();
    if( employeeSalary < 10000) {
      return (employeeSalary/50.0);
    } else {
      return (employeeSalary/20.0);
    }
  }    
}"
103,1.5,0.0,0.0,2.0,2017-05-06 18:49:52.168598,15,,"/* Inline function */
int getSalary(Person p) {
  if ( p instance of Veteran) {
    return 0;
  }
  if ( p instance of BusinessOwner) {
    return ( (p.getProfit()/10.0);
  }
  if ( p instance of Person ) {
    double employeeSalary = p.getSalary();
    if( employeeSalary < 10000) {
      return (employeeSalary/50.0);
    } else {
      return (employeeSalary/20.0);
    }
  }    
}"
104,1.5,0.0,0.0,0.0,2017-05-06 18:49:57.716594,15,,"/* Inline function */
int getSalary(Person p) {
  if ( p instance of Veteran) {
    return 0;
  }
  if ( p instance of BusinessOwner) {
    return ( (p.getProfit()/10.0);
  }
  if ( p instance of Person ) {
    double employeeSalary = p.getSalary();
    if( employeeSalary < 10000) {
      return (employeeSalary/50.0);
    } else {
      return (employeeSalary/20.0);
    }
  }    
}"
105,3.0,0.0,0.0,0.0,2017-05-06 18:50:01.751862,15,,"/* Inline function */
int getSalary(Person p) {
  if ( p instance of Veteran) {
    return 0;
  }
  if ( p instance of BusinessOwner) {
    return ( (p.getProfit()/10.0);
  }
  if ( p instance of Person ) {
    double employeeSalary = p.getSalary();
    if( employeeSalary < 10000) {
      return (employeeSalary/50.0);
    } else {
      return (employeeSalary/20.0);
    }
  }    
}"
106,3.0,1.0,0.0,0.0,2017-05-06 18:50:05.663992,15,,"/* Inline function */
int getSalary(Person p) {
  if ( p instance of Veteran) {
    return 0;
  }
  if ( p instance of BusinessOwner) {
    return ( (p.getProfit()/10.0);
  }
  if ( p instance of Person ) {
    double employeeSalary = p.getSalary();
    if( employeeSalary < 10000) {
      return (employeeSalary/50.0);
    } else {
      return (employeeSalary/20.0);
    }
  }    
}"
107,3.0,1.0,3.0,0.0,2017-05-06 18:50:08.414380,15,,"/* Inline function */
int getSalary(Person p) {
  if ( p instance of Veteran) {
    return 0;
  }
  if ( p instance of BusinessOwner) {
    return ( (p.getProfit()/10.0);
  }
  if ( p instance of Person ) {
    double employeeSalary = p.getSalary();
    if( employeeSalary < 10000) {
      return (employeeSalary/50.0);
    } else {
      return (employeeSalary/20.0);
    }
  }    
}"
108,3.0,1.0,3.0,1.5,2017-05-06 18:50:10.668611,15,,"/* Inline function */
int getSalary(Person p) {
  if ( p instance of Veteran) {
    return 0;
  }
  if ( p instance of BusinessOwner) {
    return ( (p.getProfit()/10.0);
  }
  if ( p instance of Person ) {
    double employeeSalary = p.getSalary();
    if( employeeSalary < 10000) {
      return (employeeSalary/50.0);
    } else {
      return (employeeSalary/20.0);
    }
  }    
}"
109,1.0,3.0,1.0,1.0,2017-05-06 19:45:40.845263,16,,"//method takes in an argument of type int array
//the highest value and lowest value are derived from the array
//next the absolute value of the difference 
//between max and min is computed
"
110,1.0,3.0,1.0,1.0,2017-05-06 19:47:37.253242,16,73,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""public static <E extends Comparable<? super E>> E max(ArrayList<E> a) // public static <E extends Comparable<E>> E max(ArrayList<E> a) \n// doesn't work with Student array list\n{\n    E largest = a.get(0);\n    for (int i = 1; i < a.size(); i++) {\n        if (a.get(i).compareTo(largest) > 0) {\n            largest = a.get(i);\n        }\n    }\n    return largest;\n}\n"",""rating"":3},""code"":""//method takes in an argument of type int array\n//the highest value and lowest value are derived from the array\n//next the absolute value of the difference \n//between max and min is computed\npublic int largestDifference(int[] values){\n  int min;\n  int max;\n  for(int i=0;i<values.length;i++){\n    \n  }\n}""}"
111,1.0,3.0,1.0,1.0,2017-05-06 19:47:48.472535,16,74,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static <E extends Comparable<E>> E max(E[] a) {\n    E largest = a[0];\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":4},""code"":""//method takes in an argument of type int array\n//the highest value and lowest value are derived from the array\n//next the absolute value of the difference \n//between max and min is computed\npublic int largestDifference(int[] values){\n  int min;\n  int max;\n  for(int i=0;i<values.length;i++){\n    \n  }\n}""}"
112,1.0,3.0,1.0,1.0,2017-05-06 19:48:32.586612,16,75,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""/**\n     * Computes and returns the value of this hand in the game\n     * of Blackjack.\n     */\npublic int getBlackjackValue() {\n    // The value computed for the hand.\n    int val;\n    // This will be set to true if the\n    boolean ace;\n    //   hand contains an ace.\n    // Number of cards in the hand.\n    int cards;\n    val = 0;\n    ace = false;\n    // (method defined in class Hand.)\n    cards = getCardCount();\n    for (int i = 0; i < cards; i++) {\n        // Add the value of the i-th card in the hand.\n        // The i-th card; \n        Card card;\n        // The blackjack value of the i-th card.\n        int cardVal;\n        card = getCard(i);\n        // The normal value, 1 to 13.\n        cardVal = card.getValue();\n        if (cardVal > 10) {\n            // For a Jack, Queen, or King.\n            cardVal = 10;\n        }\n        if (cardVal == 1) {\n            // There is at least one ace.\n            ace = true;\n        }\n         // Now, val is the value of the hand, counting any ace as 1.\n\n         // If there is an ace, and if changing its value from 1 to \n\n         // 11 would leave the score less than or equal to 21,\n\n         // then do so by adding the extra 10 points to val. \n\n        val = val + cardVal;\n    }\n    if (ace == true && val + 10 <= 21)\n        val = val + 10;\n    return val;\n}\n"",""rating"":1},""code"":""//method takes in an argument of type int array\n//the highest value and lowest value are derived from the array\n//next the absolute value of the difference \n//between max and min is computed\npublic int largestDifference(int[] values){\n  int min;\n  int max;\n  for(int i=0;i<values.length;i++){\n    \n  }\n}""}"
113,1.0,3.0,1.0,1.0,2017-05-06 19:48:39.632746,16,76,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""// pre: list != null, list.length > 0\n// post: return index of minimum element of array\npublic static int findMin(int[] list) {\n    assert list != null && list.length > 0 : \""failed precondition\"";\n    int indexOfMin = 0;\n    for (int i = 1; i < list.length; i++) {\n        if (list[i] < list[indexOfMin]) {\n            indexOfMin = i;\n        }\n    }\n    return indexOfMin;\n}\n"",""rating"":3},""code"":""//method takes in an argument of type int array\n//the highest value and lowest value are derived from the array\n//next the absolute value of the difference \n//between max and min is computed\npublic int largestDifference(int[] values){\n  int min;\n  int max;\n  for(int i=0;i<values.length;i++){\n    \n  }\n}""}"
114,1.0,3.0,1.0,1.0,2017-05-06 19:48:55.713844,16,77,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""public int run() {\n    MutableInteger list[] = new MutableInteger[MAX];\n    for (int i = 0; i < list.length; i++) {\n        list[i] = new MutableInteger(i);\n    }\n    int sum = 0;\n    for (int i = 0; i < list.length; i++) {\n        sum += list[i].getValue();\n    }\n    return sum;\n}\n"",""rating"":1},""code"":""//method takes in an argument of type int array\n//the highest value and lowest value are derived from the array\n//next the absolute value of the difference \n//between max and min is computed\npublic int largestDifference(int[] values){\n  int min;\n  int max;\n  for(int i=0;i<values.length;i++){\n    \n  }\n}""}"
115,1.0,3.0,1.0,1.0,2017-05-06 19:49:09.284032,16,78,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""Task(int min, int max) {\n    this.min = min;\n    this.max = max;\n}\n"",""rating"":1},""code"":""//method takes in an argument of type int array\n//the highest value and lowest value are derived from the array\n//next the absolute value of the difference \n//between max and min is computed\npublic int largestDifference(int[] values){\n  int min;\n  int max;\n  for(int i=0;i<values.length;i++){\n    \n  }\n}""}"
116,1.0,3.0,1.0,1.0,2017-05-06 19:49:13.371715,16,79,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""public int run() {\n    ArrayList<MutableInteger> list = new ArrayList<>();\n    for (int i = 0; i < MAX; i++) {\n        list.add(new MutableInteger(i));\n    }\n    int sum = 0;\n    for (int i = 0; i < MAX; i++) {\n        sum += ((MutableInteger) list.get(i)).getValue();\n    }\n    return sum;\n}\n"",""rating"":1},""code"":""//method takes in an argument of type int array\n//the highest value and lowest value are derived from the array\n//next the absolute value of the difference \n//between max and min is computed\npublic int largestDifference(int[] values){\n  int min;\n  int max;\n  for(int i=0;i<values.length;i++){\n    \n  }\n}""}"
117,1.0,3.0,1.0,1.0,2017-05-06 19:49:23.153751,16,80,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""/**\n         * Return the largest item that has been entered.\n         * The return value will be -infinity if no numbers have been entered. \n         */\npublic double getMax() {\n    return max;\n}\n"",""rating"":1},""code"":""//method takes in an argument of type int array\n//the highest value and lowest value are derived from the array\n//next the absolute value of the difference \n//between max and min is computed\npublic int largestDifference(int[] values){\n  int min;\n  int max;\n  for(int i=0;i<values.length;i++){\n    \n  }\n}""}"
118,1.0,5.0,1.0,1.0,2017-05-06 19:49:29.138839,16,,"//method takes in an argument of type int array
//the highest value and lowest value are derived from the array
//next the absolute value of the difference 
//between max and min is computed
public int largestDifference(int[] values){
  int min;
  int max;
  for(int i=0;i<values.length;i++){
    
  }
}"
119,1.0,5.0,1.0,1.0,2017-05-06 19:49:38.048700,16,81,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""public static <E extends Comparable<? super E>> E max(ArrayList<E> a) // public static <E extends Comparable<E>> E max(ArrayList<E> a) \n// doesn't work with Student array list\n{\n    E largest = a.get(0);\n    for (int i = 1; i < a.size(); i++) {\n        if (a.get(i).compareTo(largest) > 0) {\n            largest = a.get(i);\n        }\n    }\n    return largest;\n}\n"",""rating"":3},""code"":""//method takes in an argument of type int array\n//the highest value and lowest value are derived from the array\n//next the absolute value of the difference \n//between max and min is computed\npublic int largestDifference(int[] values){\n  int min;\n  int max;\n  for(int i=0;i<values.length;i++){\n    \n  }\n}""}"
120,1.0,5.0,1.0,1.0,2017-05-06 19:49:41.011091,16,82,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""public int run() {\n    MutableInteger list[] = new MutableInteger[MAX];\n    for (int i = 0; i < list.length; i++) {\n        list[i] = new MutableInteger(i);\n    }\n    int sum = 0;\n    for (int i = 0; i < list.length; i++) {\n        sum += list[i].getValue();\n    }\n    return sum;\n}\n"",""rating"":1},""code"":""//method takes in an argument of type int array\n//the highest value and lowest value are derived from the array\n//next the absolute value of the difference \n//between max and min is computed\npublic int largestDifference(int[] values){\n  int min;\n  int max;\n  for(int i=0;i<values.length;i++){\n    \n  }\n}""}"
121,1.0,5.0,1.0,1.0,2017-05-06 19:49:43.201542,16,83,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""Task(int min, int max) {\n    this.min = min;\n    this.max = max;\n}\n"",""rating"":1},""code"":""//method takes in an argument of type int array\n//the highest value and lowest value are derived from the array\n//next the absolute value of the difference \n//between max and min is computed\npublic int largestDifference(int[] values){\n  int min;\n  int max;\n  for(int i=0;i<values.length;i++){\n    \n  }\n}""}"
122,1.0,5.0,1.0,1.0,2017-05-06 19:49:51.667308,16,84,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""// pre: list != null, list.length > 0\n// post: return index of minimum element of array\npublic static int findMin(int[] list) {\n    assert list != null && list.length > 0 : \""failed precondition\"";\n    int indexOfMin = 0;\n    for (int i = 1; i < list.length; i++) {\n        if (list[i] < list[indexOfMin]) {\n            indexOfMin = i;\n        }\n    }\n    return indexOfMin;\n}\n"",""rating"":4},""code"":""//method takes in an argument of type int array\n//the highest value and lowest value are derived from the array\n//next the absolute value of the difference \n//between max and min is computed\npublic int largestDifference(int[] values){\n  int min;\n  int max;\n  for(int i=0;i<values.length;i++){\n    \n  }\n}""}"
123,1.0,5.0,1.0,1.0,2017-05-06 19:49:53.857629,16,85,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""/**\n         * Return the largest item that has been entered.\n         * The return value will be -infinity if no numbers have been entered. \n         */\npublic double getMax() {\n    return max;\n}\n"",""rating"":1},""code"":""//method takes in an argument of type int array\n//the highest value and lowest value are derived from the array\n//next the absolute value of the difference \n//between max and min is computed\npublic int largestDifference(int[] values){\n  int min;\n  int max;\n  for(int i=0;i<values.length;i++){\n    \n  }\n}""}"
124,1.0,5.0,1.0,1.0,2017-05-06 19:49:57.043610,16,86,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""// pre: list != null\n// post: return sum of elements\n// use traditional for loop\npublic static int sumListOld(int[] list) {\n    int total = 0;\n    for (int i = 0; i < list.length; i++) {\n        total += list[i];\n        System.out.println(list[i]);\n    }\n    return total;\n}\n"",""rating"":1},""code"":""//method takes in an argument of type int array\n//the highest value and lowest value are derived from the array\n//next the absolute value of the difference \n//between max and min is computed\npublic int largestDifference(int[] values){\n  int min;\n  int max;\n  for(int i=0;i<values.length;i++){\n    \n  }\n}""}"
125,1.0,5.0,1.0,1.0,2017-05-06 19:50:04.887887,16,87,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static <E extends Comparable<E>> E max(E[] a) {\n    E largest = a[0];\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":3},""code"":""//method takes in an argument of type int array\n//the highest value and lowest value are derived from the array\n//next the absolute value of the difference \n//between max and min is computed\npublic int largestDifference(int[] values){\n  int min;\n  int max;\n  for(int i=0;i<values.length;i++){\n    \n  }\n}""}"
126,1.0,1.0,3.0,1.0,2017-05-06 19:56:40.566452,16,,"public int getTax(Person p){
  if(p instanceof BusinessOwner){
    
  }
}"
127,1.0,1.0,3.0,1.0,2017-05-06 19:56:57.372711,16,88,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""public int getY() {\n    return y;\n}\n"",""rating"":1},""code"":""public int getTax(Person p){\n  if(p instanceof BusinessOwner){\n    \n  }\n}""}"
128,1.0,1.0,3.0,1.0,2017-05-06 19:57:12.952750,16,89,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", targetDate = \""Jan 1, 2012\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""public int getTax(Person p){\n  if(p instanceof BusinessOwner){\n    \n  }\n}""}"
129,1.0,1.0,3.0,1.0,2017-05-06 19:57:15.667254,16,90,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""public int getTax(Person p){\n  if(p instanceof BusinessOwner){\n    \n  }\n}""}"
130,1.0,1.0,3.0,1.0,2017-05-06 19:57:16.895215,16,91,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""public int getX() {\n    return x;\n}\n"",""rating"":1},""code"":""public int getTax(Person p){\n  if(p instanceof BusinessOwner){\n    \n  }\n}""}"
131,1.0,1.0,3.0,1.0,2017-05-06 19:57:19.906740,16,92,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""public static void main(String[] args) {\n    double price = 9.95;\n    double taxRate = 8.25;\n    double tax = Financial.percentOf(price, taxRate);\n    System.out.printf(\""Tax: %.2f\\n\"", tax);\n}\n"",""rating"":1},""code"":""public int getTax(Person p){\n  if(p instanceof BusinessOwner){\n    \n  }\n}""}"
132,1.0,1.0,3.0,1.0,2017-05-06 19:57:29.517523,16,93,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""/** As above, but with a default value */\npublic int getInt(String key, int defaultValue) {\n    try {\n        return getInt(key);\n    } catch (MissingResourceException e) {\n        if (e instanceof MalformedResourceException)\n            System.err.println(\""WARNING: \"" + e.getMessage());\n        return defaultValue;\n    }\n}\n"",""rating"":1},""code"":""public int getTax(Person p){\n  if(p instanceof BusinessOwner){\n    \n  }\n}""}"
133,1.0,1.0,3.0,1.0,2017-05-06 19:57:37.431089,16,94,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""public static void main(String[] args) {\n    String input = JOptionPane.showInputDialog(\""Enter price:\"");\n    double price = Double.parseDouble(input);\n    final double TAX_RATE = 8.5;\n    price = price * (1 + TAX_RATE / 100);\n    JOptionPane.showMessageDialog(null, \""Price after tax: \"" + price);\n}\n"",""rating"":1},""code"":""public int getTax(Person p){\n  if(p instanceof BusinessOwner){\n    \n  }\n}""}"
134,1.0,1.0,3.0,1.0,2017-05-06 19:57:38.376978,16,95,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""public int compareTo(Person other) {\n    return name.compareTo(other.name);\n}\n"",""rating"":1},""code"":""public int getTax(Person p){\n  if(p instanceof BusinessOwner){\n    \n  }\n}""}"
135,1.0,2.5,3.0,1.0,2017-05-06 20:01:15.009200,16,,"public int getTax(Person p){
  if(p instanceof BusinessOwner){
    return p.getProfit * .1;
  } else if (p instanceof Employee){
    if(p.getSalary() < 10000){
      return p.getSalary() * .02;
    } else {
      return p.getSalary() * .05;
    }
  } else if (p instanceof Veteran){
    return 0;
  } else {
    return null; //or maybe -1
  }
}"
136,1.0,2.5,3.0,1.0,2017-05-06 20:01:23.831287,16,96,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String[] args) {\n    String input = JOptionPane.showInputDialog(\""Enter price:\"");\n    double price = Double.parseDouble(input);\n    final double TAX_RATE = 8.5;\n    price = price * (1 + TAX_RATE / 100);\n    JOptionPane.showMessageDialog(null, \""Price after tax: \"" + price);\n}\n"",""rating"":1},""code"":""public int getTax(Person p){\n  if(p instanceof BusinessOwner){\n    return p.getProfit * .1;\n  } else if (p instanceof Employee){\n    if(p.getSalary() < 10000){\n      return p.getSalary() * .02;\n    } else {\n      return p.getSalary() * .05;\n    }\n  } else if (p instanceof Veteran){\n    return 0;\n  } else {\n    return null; //or maybe -1\n  }\n}""}"
137,1.0,2.5,3.0,1.0,2017-05-06 20:01:27.988410,16,97,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""/** As above, but with a default value */\npublic int getInt(String key, int defaultValue) {\n    try {\n        return getInt(key);\n    } catch (MissingResourceException e) {\n        if (e instanceof MalformedResourceException)\n            System.err.println(\""WARNING: \"" + e.getMessage());\n        return defaultValue;\n    }\n}\n"",""rating"":1},""code"":""public int getTax(Person p){\n  if(p instanceof BusinessOwner){\n    return p.getProfit * .1;\n  } else if (p instanceof Employee){\n    if(p.getSalary() < 10000){\n      return p.getSalary() * .02;\n    } else {\n      return p.getSalary() * .05;\n    }\n  } else if (p instanceof Veteran){\n    return 0;\n  } else {\n    return null; //or maybe -1\n  }\n}""}"
138,1.0,2.5,3.0,1.0,2017-05-06 20:01:30.591224,16,98,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""public int compareTo(Event other) {\n    if (time < other.time) {\n        return -1;\n    } else if (time > other.time) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n"",""rating"":1},""code"":""public int getTax(Person p){\n  if(p instanceof BusinessOwner){\n    return p.getProfit * .1;\n  } else if (p instanceof Employee){\n    if(p.getSalary() < 10000){\n      return p.getSalary() * .02;\n    } else {\n      return p.getSalary() * .05;\n    }\n  } else if (p instanceof Veteran){\n    return 0;\n  } else {\n    return null; //or maybe -1\n  }\n}""}"
139,1.0,2.5,3.0,1.0,2017-05-06 20:01:32.779102,16,99,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""/**\n      Computes the size of this tree.\n      @return the number of nodes in the tree\n   */\npublic int size() {\n    if (root == null) {\n        return 0;\n    } else {\n        return root.size();\n    }\n}\n"",""rating"":1},""code"":""public int getTax(Person p){\n  if(p instanceof BusinessOwner){\n    return p.getProfit * .1;\n  } else if (p instanceof Employee){\n    if(p.getSalary() < 10000){\n      return p.getSalary() * .02;\n    } else {\n      return p.getSalary() * .05;\n    }\n  } else if (p instanceof Veteran){\n    return 0;\n  } else {\n    return null; //or maybe -1\n  }\n}""}"
140,1.0,2.5,3.0,1.0,2017-05-06 20:01:34.747137,16,100,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""private void maybeKillParent() {\n    if (parent == null)\n        return;\n    if (parent instanceof Frame) {\n        ((Frame) parent).setVisible(true);\n        ((Frame) parent).dispose();\n    }\n    if (parent instanceof JInternalFrame) {\n        ((JInternalFrame) parent).setVisible(true);\n        ((JInternalFrame) parent).dispose();\n    }\n}\n"",""rating"":1},""code"":""public int getTax(Person p){\n  if(p instanceof BusinessOwner){\n    return p.getProfit * .1;\n  } else if (p instanceof Employee){\n    if(p.getSalary() < 10000){\n      return p.getSalary() * .02;\n    } else {\n      return p.getSalary() * .05;\n    }\n  } else if (p instanceof Veteran){\n    return 0;\n  } else {\n    return null; //or maybe -1\n  }\n}""}"
141,1.0,2.5,3.0,1.0,2017-05-06 20:01:37.341838,16,101,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""public int getTax(Person p){\n  if(p instanceof BusinessOwner){\n    return p.getProfit * .1;\n  } else if (p instanceof Employee){\n    if(p.getSalary() < 10000){\n      return p.getSalary() * .02;\n    } else {\n      return p.getSalary() * .05;\n    }\n  } else if (p instanceof Veteran){\n    return 0;\n  } else {\n    return null; //or maybe -1\n  }\n}""}"
142,1.0,2.5,3.0,1.0,2017-05-06 20:01:40.608527,16,102,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", targetDate = \""Jan 1, 2012\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""public int getTax(Person p){\n  if(p instanceof BusinessOwner){\n    return p.getProfit * .1;\n  } else if (p instanceof Employee){\n    if(p.getSalary() < 10000){\n      return p.getSalary() * .02;\n    } else {\n      return p.getSalary() * .05;\n    }\n  } else if (p instanceof Veteran){\n    return 0;\n  } else {\n    return null; //or maybe -1\n  }\n}""}"
143,1.0,2.5,3.0,1.0,2017-05-06 20:01:43.839869,16,103,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""public Product(float price) {\n    this.price = price;\n    tax = (float) (price * 0.20);\n}\n"",""rating"":1},""code"":""public int getTax(Person p){\n  if(p instanceof BusinessOwner){\n    return p.getProfit * .1;\n  } else if (p instanceof Employee){\n    if(p.getSalary() < 10000){\n      return p.getSalary() * .02;\n    } else {\n      return p.getSalary() * .05;\n    }\n  } else if (p instanceof Veteran){\n    return 0;\n  } else {\n    return null; //or maybe -1\n  }\n}""}"
144,1.0,1.0,1.0,1.0,2017-05-06 22:59:22.288727,17,104,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""public double weeklyPay(int hoursWorked) {\n    double pay = hoursWorked * hourlyWage;\n    if (hoursWorked > 40) {\n        // Add overtime\n        pay = pay + ((hoursWorked - 40) * 0.5) * hourlyWage;\n    }\n    return pay;\n}\n"",""rating"":2},""code"":""public double totaltax(Person[] people ){\n  \n}""}"
145,1.0,1.0,1.0,1.0,2017-05-06 22:59:23.975420,17,105,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""/**\n      Computes the change due and resets the machine for the next customer.\n      @return the change due to the customer\n   */\npublic double giveChange() {\n    double change = payment - purchase;\n    purchase = 0;\n    payment = 0;\n    return change;\n}\n"",""rating"":2},""code"":""public double totaltax(Person[] people ){\n  \n}""}"
146,1.0,1.0,1.0,1.0,2017-05-06 23:01:00.457713,17,106,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""/** \n      Gets the value that the user entered. \n      @return the value in the text field of the keypad\n   */\npublic double getValue() {\n    return Double.parseDouble(display.getText());\n}\n"",""rating"":1},""code"":""public double totaltax(Person[] people ){\n  //loop through people\n  //\n}""}"
147,1.0,1.0,1.0,1.0,2017-05-06 23:01:20.693937,17,107,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""public static void main(String[] unuxed) {\n    new ButtonDemo().setVisible(true);\n}\n"",""rating"":1},""code"":""public double totaltax(Person[] people ){\n  //loop through people\n  //\n}""}"
148,1.0,1.0,1.0,1.0,2017-05-06 23:01:35.804674,17,108,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""public void run() {\n    System.out.println(\""Client receive thread started.\"");\n    try {\n        while (!closed) {\n            Object obj = in.readObject();\n            if (obj instanceof DisconnectMessage) {\n                close();\n                serverShutdown(((DisconnectMessage) obj).message);\n            } else if (obj instanceof StatusMessage) {\n                StatusMessage msg = (StatusMessage) obj;\n                connectedPlayerIDs = msg.players;\n                if (msg.connecting)\n                    playerConnected(msg.playerID);\n                else\n                    playerDisconnected(msg.playerID);\n            } else\n                messageReceived(obj);\n        }\n    } catch (IOException e) {\n        if (!closed) {\n            closedByError(\""IO error occurred while waiting to receive  message.\"");\n            System.out.println(\""Client receive thread terminated by IOException: \"" + e);\n        }\n    } catch (Exception e) {\n        if (!closed) {\n            closedByError(\""Unexpected internal error in receive thread: \"" + e);\n            System.out.println(\""\\nUnexpected error shuts down client receive thread:\"");\n            e.printStackTrace();\n        }\n    } finally {\n        System.out.println(\""Client receive thread terminated.\"");\n    }\n}\n"",""rating"":1},""code"":""public double totaltax(Person[] people ){\n  //loop through people\n  //\n}""}"
149,1.0,1.0,1.0,1.0,2017-05-06 23:01:44.510074,17,109,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""/**\n         * Draws a card as a 80 by 100 rectangle with upper left corner at (x,y).\n         * The card is drawn in the graphics context g.  If card is null, then\n         * a face-down card is drawn.  (The cards are rather primitive!)\n         */\nvoid drawCard(Graphics g, Card card, int x, int y) {\n    if (card == null) {\n        // Draw a face-down card\n        g.setColor(Color.BLUE);\n        g.fillRect(x, y, 80, 100);\n        g.setColor(Color.WHITE);\n        g.drawRect(x + 3, y + 3, 73, 93);\n        g.drawRect(x + 4, y + 4, 71, 91);\n    } else {\n        g.setColor(Color.WHITE);\n        g.fillRect(x, y, 80, 100);\n        g.setColor(Color.GRAY);\n        g.drawRect(x, y, 79, 99);\n        g.drawRect(x + 1, y + 1, 77, 97);\n        if (card.getSuit() == Card.DIAMONDS || card.getSuit() == Card.HEARTS)\n            g.setColor(Color.RED);\n        else\n            g.setColor(Color.BLACK);\n        g.drawString(card.getValueAsString(), x + 10, y + 30);\n        g.drawString(\""of\"", x + 10, y + 50);\n        g.drawString(card.getSuitAsString(), x + 10, y + 70);\n    }\n}\n"",""rating"":1},""code"":""public double totaltax(Person[] people ){\n  //loop through people\n  //\n}""}"
150,1.0,1.0,1.0,1.0,2017-05-06 23:01:56.790952,17,110,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""/** Called when the user clicks */\npublic void processMouseEvent(MouseEvent e) {\n    if (e.getID() == MouseEvent.MOUSE_PRESSED) {\n        // remember click position\n        last_x = (short) e.getX();\n        last_y = (short) e.getY();\n    } else\n        super.processMouseEvent(e);\n}\n"",""rating"":1},""code"":""public double totaltax(Person[] people ){\n  //loop through people\n  //\n}""}"
151,1.0,1.0,1.0,1.0,2017-05-06 23:02:05.182499,17,111,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""/**\n      Computes the pay for one week of work.\n      @param hoursWorked the number of hours worked in the week\n      @return the pay for the given number of hours\n   */\npublic double weeklyPay(int hoursWorked) {\n    return 0;\n}\n"",""rating"":3},""code"":""public double totaltax(Person[] people ){\n  //loop through people\n  //\n}""}"
152,1.0,1.0,1.0,1.0,2017-05-06 23:02:21.193224,17,112,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""public double getAverageScore(int studentId) {\n    double total = 0;\n    for (double x : scores) {\n        total = total + x;\n    }\n    return total / scores.size();\n}\n"",""rating"":1},""code"":""public double totaltax(Person[] people ){\n  //loop through people\n  //\n}""}"
153,1.0,1.0,1.0,1.0,2017-05-06 23:02:23.534183,17,113,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""public float getPreferredSpan(int axis) {\n    return 0.0f;\n}\n"",""rating"":1},""code"":""public double totaltax(Person[] people ){\n  //loop through people\n  //\n}""}"
154,1.0,1.0,1.0,1.0,2017-05-06 23:03:15.191527,17,114,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""/**\n   * This convenience method checks whether the specified person is here.\n   * If so, it returns their name.  If not it throws a NotThere exception\n   **/\nprotected String verifyPresence(RemoteMudPerson who) throws NotThere {\n    int i = people.indexOf(who);\n    if (i == -1)\n        throw new NotThere();\n    else\n        return (String) names.elementAt(i);\n}\n"",""rating"":1},""code"":""public double totaltax(Person person ){\n  //loop through people\n  //\n}""}"
155,1.0,1.0,1.0,1.0,2017-05-06 23:03:16.640242,17,115,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""/**\n      Computes the pay for one week of work.\n      @param hoursWorked the number of hours worked in the week\n      @return the pay for the given number of hours\n   */\npublic double weeklyPay(int hoursWorked) {\n    return 0;\n}\n"",""rating"":3},""code"":""public double totaltax(Person person ){\n  //loop through people\n  //\n}""}"
156,1.0,1.0,1.0,1.0,2017-05-06 23:03:43.515287,17,116,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""/** \n   * This remote method returns a RemoteMudPerson object corresponding to\n   * the specified name, or throws an exception if no such person is here \n   **/\npublic RemoteMudPerson getPerson(String name) throws RemoteException, NoSuchPerson {\n    synchronized (names) {\n        // What about when there are 2 of the same name?\n        int i = names.indexOf(name);\n        if (i == -1)\n            throw new NoSuchPerson();\n        return (RemoteMudPerson) people.elementAt(i);\n    }\n}\n"",""rating"":1},""code"":""public double totaltax(Person person ){\n  //loop through people\n  //\n}""}"
157,1.0,1.0,1.0,1.0,2017-05-06 23:03:47.812671,17,117,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""public SAXLister(String[] args) throws SAXException, IOException {\n    XMLReader parser = XMLReaderFactory.createXMLReader();\n    parser.setContentHandler(new PeopleHandler());\n    parser.parse(args.length == 1 ? args[0] : \""xml/people.xml\"");\n}\n"",""rating"":1},""code"":""public double totaltax(Person person ){\n  //loop through people\n  //\n}""}"
158,1.0,1.0,1.0,1.0,2017-05-06 23:03:53.947547,17,118,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""/** \n   * An accessor method.  Returns the real part of the complex number.\n   * Note that there is no setReal() method to set the real part.  This means\n   * that the ComplexNumber class is \""immutable\"".\n   **/\npublic double real() {\n    return x;\n}\n"",""rating"":1},""code"":""public double totaltax(Person person ){\n  //loop through people\n  //\n}""}"
159,1.0,1.0,1.0,1.0,2017-05-06 23:03:55.595545,17,119,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""/**\n     * Return the average of all the items that have been entered.\n     * The return value is Double.NaN if no numbers have been entered.\n     */\npublic double getMean() {\n    return sum / count;\n}\n"",""rating"":1},""code"":""public double totaltax(Person person ){\n  //loop through people\n  //\n}""}"
160,1.0,1.0,1.0,1.0,2017-05-06 23:04:03.849294,17,120,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""/** \n     * This remote method returns a RemoteMudPerson object corresponding to\n     * the specified name, or throws an exception if no such person is here \n     **/\npublic RemoteMudPerson getPerson(String name) throws RemoteException, NoSuchPerson {\n    synchronized (names) {\n        // What about when there are 2 of the same name?\n        int i = names.indexOf(name);\n        if (i == -1)\n            throw new NoSuchPerson();\n        return (RemoteMudPerson) people.elementAt(i);\n    }\n}\n"",""rating"":1},""code"":""public double totaltax(Person person ){\n  //loop through people\n  //\n}""}"
161,1.0,1.0,1.0,1.0,2017-05-06 23:04:07.245680,17,121,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""/**\n      Gets the associated value.\n      @return the value associated with the country\n   */\npublic double getValue() {\n    return value;\n}\n"",""rating"":1},""code"":""public double totaltax(Person person ){\n  //loop through people\n  //\n}""}"
162,1.0,1.0,1.0,1.0,2017-05-06 23:07:04.672243,17,122,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""/** Return the person's name.  Not a remote method */\npublic String getName() {\n    return name;\n}\n"",""rating"":2},""code"":""public double totaltax(Person person){\n  \t//Determine what type of person they are\n\tif(person instanceof Employee){\n      \n    } \n}""}"
163,1.0,1.0,1.0,1.0,2017-05-06 23:07:10.174876,17,123,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""/**\n      Gets the minimum score of this student.\n      @return the minimum score, or 0 if there are no scores.\n   */\npublic double minimum() {\n    if (scoresSize == 0) {\n        return 0;\n    }\n    double smallest = scores[0];\n    for (int i = 1; i < scoresSize; i++) {\n        if (scores[i] < smallest) {\n            smallest = scores[i];\n        }\n    }\n    return smallest;\n}\n"",""rating"":1},""code"":""public double totaltax(Person person){\n  \t//Determine what type of person they are\n\tif(person instanceof Employee){\n      \n    } \n}""}"
164,1.0,1.0,1.0,1.0,2017-05-06 23:07:26.894266,17,124,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""public String getType() {\n    return type;\n}\n"",""rating"":3},""code"":""public double totaltax(Person person){\n  \t//Determine what type of person they are\n\tif(person instanceof Employee){\n      \n    } \n}""}"
165,1.0,1.0,1.0,1.0,2017-05-06 23:07:45.757329,17,125,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""/**\n      Combines two values with an operator.\n      @param value1 the first value\n      @param value2 the second value\n      @param op an operator (+, -, *, /, or =)\n   */\npublic double calculate(double value1, double value2, String op) {\n    if (op.equals(\""+\"")) {\n        return value1 + value2;\n    } else if (op.equals(\""-\"")) {\n        return value1 - value2;\n    } else if (op.equals(\""*\"")) {\n        return value1 * value2;\n    } else if (op.equals(\""/\"")) {\n        return value1 / value2;\n    } else // \""=\""\n    {\n        return value2;\n    }\n}\n"",""rating"":2},""code"":""public double totaltax(Person person){\n  \t//Determine what type of person they are\n\tif(person instanceof Employee){\n      \n    } \n}""}"
166,1.0,1.0,1.0,1.0,2017-05-06 23:08:00.100801,17,126,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""/** Return a resource of type double */\npublic double getDouble(String key) throws MissingResourceException {\n    String s = bundle.getString(key);\n    try {\n        return Double.parseDouble(s);\n    } catch (NumberFormatException e) {\n        throw new MalformedResourceException(\""double\"", key);\n    }\n}\n"",""rating"":1},""code"":""public double totaltax(Person person){\n  \t//Determine what type of person they are\n\tif(person instanceof Employee){\n      \n    } \n}""}"
167,1.0,1.0,1.0,1.0,2017-05-06 23:08:03.798062,17,127,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""/** Set the person's name.  Not a remote method */\npublic void setName(String n) {\n    name = n;\n}\n"",""rating"":2},""code"":""public double totaltax(Person person){\n  \t//Determine what type of person they are\n\tif(person instanceof Employee){\n      \n    } \n}""}"
168,1.0,1.0,1.0,1.0,2017-05-06 23:12:02.745620,17,128,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""/** Return the person's name.  Not a remote method */\npublic String getName() {\n    return name;\n}\n"",""rating"":1},""code"":""public double totaltaxdue(Person person){\n  \t//Determine what type of person they are\n\tif(person instanceof Employee){\n      if(person.getSalary()<10000){\n        return (person.getSalary() * .02);\n      }\n      else {\n        return (person.getSalary() * .05);\n      }\n    }\n  \tif(person instanceof BusinessOwner) {\n      return (person.getProfit()*.1);\n    }\n}""}"
169,1.0,1.0,1.0,1.0,2017-05-06 23:12:11.606604,17,129,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""/**\n      Constructs a Person object\n      @param aName the name of the person\n   */\npublic Person(String aName) {\n    name = aName;\n}\n"",""rating"":1},""code"":""public double totaltaxdue(Person person){\n  \t//Determine what type of person they are\n\tif(person instanceof Employee){\n      if(person.getSalary()<10000){\n        return (person.getSalary() * .02);\n      }\n      else {\n        return (person.getSalary() * .05);\n      }\n    }\n  \tif(person instanceof BusinessOwner) {\n      return (person.getProfit()*.1);\n    }\n}""}"
170,1.0,1.0,1.0,1.0,2017-05-06 23:12:21.170099,17,130,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""public String getType() {\n    return type;\n}\n"",""rating"":1},""code"":""public double totaltaxdue(Person person){\n  \t//Determine what type of person they are\n\tif(person instanceof Employee){\n      if(person.getSalary()<10000){\n        return (person.getSalary() * .02);\n      }\n      else {\n        return (person.getSalary() * .05);\n      }\n    }\n  \tif(person instanceof BusinessOwner) {\n      return (person.getProfit()*.1);\n    }\n}""}"
171,1.0,1.0,1.0,1.0,2017-05-06 23:12:27.791231,17,131,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""/** Set the person's name.  Not a remote method */\npublic void setName(String n) {\n    name = n;\n}\n"",""rating"":1},""code"":""public double totaltaxdue(Person person){\n  \t//Determine what type of person they are\n\tif(person instanceof Employee){\n      if(person.getSalary()<10000){\n        return (person.getSalary() * .02);\n      }\n      else {\n        return (person.getSalary() * .05);\n      }\n    }\n  \tif(person instanceof BusinessOwner) {\n      return (person.getProfit()*.1);\n    }\n}""}"
172,1.0,1.0,1.0,1.0,2017-05-06 23:12:32.152422,17,132,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""/**\n      Gets the final score for this student.\n      @return the sum of the scores, with the lowest score dropped if \n      there are at least two scores, or 0 if there are no scores.\n   */\npublic double finalScore() {\n    if (scoresSize == 0) {\n        return 0;\n    } else if (scoresSize == 1) {\n        return scores[0];\n    } else {\n        return sum() - minimum();\n    }\n}\n"",""rating"":1},""code"":""public double totaltaxdue(Person person){\n  \t//Determine what type of person they are\n\tif(person instanceof Employee){\n      if(person.getSalary()<10000){\n        return (person.getSalary() * .02);\n      }\n      else {\n        return (person.getSalary() * .05);\n      }\n    }\n  \tif(person instanceof BusinessOwner) {\n      return (person.getProfit()*.1);\n    }\n}""}"
173,1.0,1.0,1.0,1.0,2017-05-06 23:12:36.091999,17,133,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""/**\n      Gets the final score for this student.\n      @return the sum of the scores, with the lowest score dropped.\n   */\npublic double finalScore() {\n    if (scoresSize == 0) {\n        return 0;\n    } else {\n        return sum() - minimum();\n    }\n}\n"",""rating"":1},""code"":""public double totaltaxdue(Person person){\n  \t//Determine what type of person they are\n\tif(person instanceof Employee){\n      if(person.getSalary()<10000){\n        return (person.getSalary() * .02);\n      }\n      else {\n        return (person.getSalary() * .05);\n      }\n    }\n  \tif(person instanceof BusinessOwner) {\n      return (person.getProfit()*.1);\n    }\n}""}"
174,1.0,1.0,1.0,1.0,2017-05-06 23:12:44.700507,17,134,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""/**\n     * Skips whitespace characters and then reads a value of type double from input.\n     * Any characters that remain on the line are saved for subsequent input operations.\n     * An error occurs if an attempt is made to read past end-of-file,\n     * or if an IOException is thrown when an attempt is made to read data from the\n     * input source, or if a value of the correct type is not found in the input.\n     */\npublic double getDouble() throws IOException {\n    double x = 0.0;\n    while (true) {\n        String str = readRealString();\n        if (str == null) {\n            errorMessage(\""Floating point number not found.\"", \""Real number in the range \"" + (-Double.MAX_VALUE) + \"" to \"" + Double.MAX_VALUE);\n        } else {\n            try {\n                x = Double.parseDouble(str);\n            } catch (NumberFormatException e) {\n                errorMessage(\""Illegal floating point input, \"" + str + \"".\"", \""Real number in the range \"" + (-Double.MAX_VALUE) + \"" to \"" + Double.MAX_VALUE);\n                continue;\n            }\n            if (Double.isInfinite(x)) {\n                errorMessage(\""Floating point input outside of legal range, \"" + str + \"".\"", \""Real number in the range \"" + (-Double.MAX_VALUE) + \"" to \"" + Double.MAX_VALUE);\n                continue;\n            }\n            break;\n        }\n    }\n    return x;\n}\n"",""rating"":1},""code"":""public double totaltaxdue(Person person){\n  \t//Determine what type of person they are\n\tif(person instanceof Employee){\n      if(person.getSalary()<10000){\n        return (person.getSalary() * .02);\n      }\n      else {\n        return (person.getSalary() * .05);\n      }\n    }\n  \tif(person instanceof BusinessOwner) {\n      return (person.getProfit()*.1);\n    }\n}""}"
175,2.5,1.0,1.0,1.0,2017-05-06 23:13:06.482535,17,,"public double totaltaxdue(Person person){
  	//Determine what type of person they are
	if(person instanceof Employee){
      if(person.getSalary()<10000){
        return (person.getSalary() * .02);
      }
      else {
        return (person.getSalary() * .05);
      }
    }
  	if(person instanceof BusinessOwner) {
      return (person.getProfit()*.1);
    }
}"
176,2.5,1.5,1.0,1.0,2017-05-06 23:13:37.604093,17,,"public double totaltaxdue(Person person){
  	//Determine what type of person they are
	if(person instanceof Employee){
      if(person.getSalary()<10000){
        return (person.getSalary() * .02);
      }
      else {
        return (person.getSalary() * .05);
      }
    }
  	if(person instanceof BusinessOwner) {
      return (person.getProfit()*.1);
    }
}"
177,2.5,1.5,1.0,1.0,2017-05-06 23:15:58.638552,17,135,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""/**\n      Gets the final score for this student.\n      @return the sum of the scores, with the lowest score dropped.\n   */\npublic double finalScore() {\n    if (scoresSize == 0) {\n        return 0;\n    } else {\n        return sum() - minimum();\n    }\n}\n"",""rating"":1},""code"":""public double totaltaxdue(Person person){\n  \t//Determine what type of person they are\n\tif(person instanceof Employee){\n      if(person.getSalary()<10000){\n        return (person.getSalary() * .02);\n      }\n      else {\n        return (person.getSalary() * .05);\n      }\n    }\n  \tif(person instanceof BusinessOwner) {\n      return (person.getProfit()*.1);\n    }\n  \tif(person instanceof Veteran){\n      return (0);\n    }\n  \t//if we've reached this point and haven't found the \n  \t//type of person, we're going to throw an exception\n  \t//so it doesn't fail silently\n}""}"
178,2.5,1.5,1.0,1.0,2017-05-06 23:16:04.859452,17,136,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""public void run() {\n    // Loop through the recipients\n    for (int i = 0; i < recipients.size(); i++) {\n        RemoteMudPerson person = (RemoteMudPerson) recipients.elementAt(i);\n        // Try to send the message to each one.\n        try {\n            person.tell(message);\n        }// failed, and silently remove them from this place.\n         catch (RemoteException e) {\n            try {\n                MudPlace.this.exit(person, null);\n            } catch (Exception ex) {\n            }\n        }\n    }\n}\n           // If it fails, assume that that person's client or network has\n\n"",""rating"":1},""code"":""public double totaltaxdue(Person person){\n  \t//Determine what type of person they are\n\tif(person instanceof Employee){\n      if(person.getSalary()<10000){\n        return (person.getSalary() * .02);\n      }\n      else {\n        return (person.getSalary() * .05);\n      }\n    }\n  \tif(person instanceof BusinessOwner) {\n      return (person.getProfit()*.1);\n    }\n  \tif(person instanceof Veteran){\n      return (0);\n    }\n  \t//if we've reached this point and haven't found the \n  \t//type of person, we're going to throw an exception\n  \t//so it doesn't fail silently\n}""}"
179,2.5,1.5,1.0,1.0,2017-05-06 23:17:46.790951,17,137,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""/** Have we reached the end of the scribble path yet? */\npublic boolean isDone() {\n    return i >= numPoints;\n}\n"",""rating"":1},""code"":""public double totaltaxdue(Person person) throws Exception{\n  \t//Determine what type of person they are\n\tif(person instanceof Employee){\n      if(person.getSalary()<10000){\n        return (person.getSalary() * .02);\n      }\n      else {\n        return (person.getSalary() * .05);\n      }\n    }\n  \tif(person instanceof BusinessOwner) {\n      return (person.getProfit()*.1);\n    }\n  \tif(person instanceof Veteran){\n      return (0);\n    }\n  \t//if we've reached this point and haven't found the \n  \t//type of person, we're going to throw an exception\n  \t//so it doesn't fail silently\n  \tthrow new Exception();\n}""}"
180,2.5,1.5,1.0,1.0,2017-05-06 23:17:48.772505,17,138,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""/**\n      Gets the final score for this student.\n      @return the sum of the scores, with the lowest score dropped if \n      there are at least two scores, or 0 if there are no scores.\n   */\npublic double finalScore() {\n    if (scoresSize == 0) {\n        return 0;\n    } else if (scoresSize == 1) {\n        return scores[0];\n    } else {\n        return sum() - minimum();\n    }\n}\n"",""rating"":1},""code"":""public double totaltaxdue(Person person) throws Exception{\n  \t//Determine what type of person they are\n\tif(person instanceof Employee){\n      if(person.getSalary()<10000){\n        return (person.getSalary() * .02);\n      }\n      else {\n        return (person.getSalary() * .05);\n      }\n    }\n  \tif(person instanceof BusinessOwner) {\n      return (person.getProfit()*.1);\n    }\n  \tif(person instanceof Veteran){\n      return (0);\n    }\n  \t//if we've reached this point and haven't found the \n  \t//type of person, we're going to throw an exception\n  \t//so it doesn't fail silently\n  \tthrow new Exception();\n}""}"
181,1.0,1.0,1.0,1.0,2017-05-06 23:21:57.038505,17,139,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""Task(int min, int max) {\n    this.min = min;\n    this.max = max;\n}\n"",""rating"":2},""code"":""public int largestDifferenceInArray(int[] ints){\n  //loop through all the ints and store the min\n  //and the max from that array\n  \n  //after the min and the max have been determined,\n  //return max - min\n}""}"
182,1.0,1.0,1.0,1.0,2017-05-06 23:22:13.396854,17,140,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""// pre: list != null, list.length > 0\n// post: return index of minimum element of array\npublic static int findMin(int[] list) {\n    assert list != null && list.length > 0 : \""failed precondition\"";\n    int indexOfMin = 0;\n    for (int i = 1; i < list.length; i++) {\n        if (list[i] < list[indexOfMin]) {\n            indexOfMin = i;\n        }\n    }\n    return indexOfMin;\n}\n"",""rating"":4},""code"":""public int largestDifferenceInArray(int[] ints){\n  //loop through all the ints and store the min\n  //and the max from that array\n  \n  //after the min and the max have been determined,\n  //return max - min\n}""}"
183,1.0,1.0,1.0,1.0,2017-05-06 23:23:04.378040,17,141,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""/**\n     * Returns the current maximum number of iterations to be used in the Mandelbrot computation loop.\n     */\npublic int getMaxIterations() {\n    return maxIterations;\n}\n"",""rating"":1},""code"":""public int largestDifferenceInArray(int[] ints){\n  //loop through all the ints and store the min\n  //and the max from that array\n  \n  //after the min and the max have been determined,\n  //return max - min\n}""}"
184,1.0,1.0,1.0,1.0,2017-05-06 23:23:11.118412,17,142,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""public int run() {\n    ArrayList<MutableInteger> list = new ArrayList<>();\n    for (int i = 0; i < MAX; i++) {\n        list.add(new MutableInteger(i));\n    }\n    int sum = 0;\n    for (int i = 0; i < MAX; i++) {\n        sum += ((MutableInteger) list.get(i)).getValue();\n    }\n    return sum;\n}\n"",""rating"":1},""code"":""public int largestDifferenceInArray(int[] ints){\n  //loop through all the ints and store the min\n  //and the max from that array\n  \n  //after the min and the max have been determined,\n  //return max - min\n}""}"
185,1.0,1.0,1.0,1.0,2017-05-06 23:23:26.059330,17,143,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static <E extends Comparable<E>> E max(E[] a) {\n    E largest = a[0];\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":3},""code"":""public int largestDifferenceInArray(int[] ints){\n  //loop through all the ints and store the min\n  //and the max from that array\n  \n  //after the min and the max have been determined,\n  //return max - min\n}""}"
186,1.0,1.0,1.0,1.0,2017-05-06 23:28:00.785998,17,144,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""// pre: list != null, list.length > 0\n// post: return index of minimum element of array\npublic static int findMin(int[] list) {\n    assert list != null && list.length > 0 : \""failed precondition\"";\n    int indexOfMin = 0;\n    for (int i = 1; i < list.length; i++) {\n        if (list[i] < list[indexOfMin]) {\n            indexOfMin = i;\n        }\n    }\n    return indexOfMin;\n}\n"",""rating"":4},""code"":""public int largestDifferenceInArray(int[] ints){\n  //if the array has one or fewer elements, return zero\n\tif(ints.length < 2) {\n      return 0;\n    }\n  \n  \tint max = ints[0];\n  \tint min = ints[0];\n  //loop through all the ints and store the min\n  //and the max from that array\n    for (int i = 1; i < ints.length; i++) {\n      if (ints[i] > max) {\n          max = ints[i];\n      }\n    }\n  \n  //after the min and the max have been determined,\n  //return max - min\n}""}"
187,1.0,1.0,1.0,1.0,2017-05-06 23:28:24.813176,17,145,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""/**\n     * Creates an ArrayList that contains several integers chosen at\n     * random from a specified range of values.  All the integers\n     * in the list are different.\n     * @param count  the number of random integers to be created\n     * @param max  the integers are chosen in the range 1 to max, inclusive\n     * @return an ArrayList containing the integers.  The integers are\n     *    random and are in a random order.\n     * @throws IllegalArgumentException if max is greater than count.  In\n     *    that case there are fewer than count different integers in the\n     *    range 1 to max.\n     */\npublic static ArrayList<Integer> makeRandomInts(int count, int max) {\n    if (count > max) {\n        throw new IllegalArgumentException(\""Can't have \"" + count + \"" different integers in the range  1 to \"" + max);\n    }\n    ArrayList<Integer> numbers = new ArrayList<Integer>();\n    while (numbers.size() < count) {\n        int num = (int) (Math.random() * max) + 1;\n        if (numbers.indexOf(num) == -1)\n            numbers.add(num);\n    }\n    return numbers;\n}\n"",""rating"":2},""code"":""public int largestDifferenceInArray(int[] ints){\n  //if the array has one or fewer elements, return zero\n\tif(ints.length < 2) {\n      return 0;\n    }\n  \n  \tint max = ints[0];\n  \tint min = ints[0];\n  //loop through all the ints and store the min\n  //and the max from that array\n    for (int i = 1; i < ints.length; i++) {\n      if (ints[i] > max) {\n          max = ints[i];\n      }\n    }\n  \n  //after the min and the max have been determined,\n  //return max - min\n}""}"
188,1.0,1.0,1.0,1.0,2017-05-06 23:28:36.686486,17,146,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""/**\n      Finds the smallest element in a tail range of the array.\n      @param a the array to sort\n      @param from the first position in a to compare\n      @return the position of the smallest element in the\n      range a[from] . . . a[a.length - 1]\n   */\nprivate static int minimumPosition(int[] a, int from) {\n    int minPos = from;\n    for (int i = from + 1; i < a.length; i++) {\n        if (a[i] < a[minPos]) {\n            minPos = i;\n        }\n    }\n    return minPos;\n}\n"",""rating"":2},""code"":""public int largestDifferenceInArray(int[] ints){\n  //if the array has one or fewer elements, return zero\n\tif(ints.length < 2) {\n      return 0;\n    }\n  \n  \tint max = ints[0];\n  \tint min = ints[0];\n  //loop through all the ints and store the min\n  //and the max from that array\n    for (int i = 1; i < ints.length; i++) {\n      if (ints[i] > max) {\n          max = ints[i];\n      }\n    }\n  \n  //after the min and the max have been determined,\n  //return max - min\n}""}"
189,1.0,1.0,1.0,1.0,2017-05-06 23:28:50.904886,17,147,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""Task(int min, int max) {\n    this.min = min;\n    this.max = max;\n}\n"",""rating"":2},""code"":""public int largestDifferenceInArray(int[] ints){\n  //if the array has one or fewer elements, return zero\n\tif(ints.length < 2) {\n      return 0;\n    }\n  \n  \tint max = ints[0];\n  \tint min = ints[0];\n  //loop through all the ints and store the min\n  //and the max from that array\n    for (int i = 1; i < ints.length; i++) {\n      if (ints[i] > max) {\n          max = ints[i];\n      }\n    }\n  \n  //after the min and the max have been determined,\n  //return max - min\n}""}"
190,1.0,1.0,1.0,1.0,2017-05-06 23:29:03.497105,17,148,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""public int run() {\n    ArrayList<MutableInteger> list = new ArrayList<>();\n    for (int i = 0; i < MAX; i++) {\n        list.add(new MutableInteger(i));\n    }\n    int sum = 0;\n    for (int i = 0; i < MAX; i++) {\n        sum += ((MutableInteger) list.get(i)).getValue();\n    }\n    return sum;\n}\n"",""rating"":2},""code"":""public int largestDifferenceInArray(int[] ints){\n  //if the array has one or fewer elements, return zero\n\tif(ints.length < 2) {\n      return 0;\n    }\n  \n  \tint max = ints[0];\n  \tint min = ints[0];\n  //loop through all the ints and store the min\n  //and the max from that array\n    for (int i = 1; i < ints.length; i++) {\n      if (ints[i] > max) {\n          max = ints[i];\n      }\n    }\n  \n  //after the min and the max have been determined,\n  //return max - min\n}""}"
191,1.0,1.0,1.0,1.0,2017-05-06 23:29:22.784784,17,149,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static <E extends Comparable<E>> E max(E[] a) {\n    E largest = a[0];\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":2},""code"":""public int largestDifferenceInArray(int[] ints){\n  //if the array has one or fewer elements, return zero\n\tif(ints.length < 2) {\n      return 0;\n    }\n  \n  \tint max = ints[0];\n  \tint min = ints[0];\n  //loop through all the ints and store the min\n  //and the max from that array\n    for (int i = 1; i < ints.length; i++) {\n      if (ints[i] > max) {\n          max = ints[i];\n      }\n    }\n  \n  //after the min and the max have been determined,\n  //return max - min\n}""}"
192,1.0,1.0,1.0,2.5,2017-05-06 23:29:36.190290,17,,"public int largestDifferenceInArray(int[] ints){
  //if the array has one or fewer elements, return zero
	if(ints.length < 2) {
      return 0;
    }
  
  	int max = ints[0];
  	int min = ints[0];
  //loop through all the ints and store the min
  //and the max from that array
    for (int i = 1; i < ints.length; i++) {
      if (ints[i] > max) {
          max = ints[i];
      }
    }
  
  //after the min and the max have been determined,
  //return max - min
}"
193,1.0,1.0,1.0,2.5,2017-05-06 23:29:54.973697,17,150,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""// pre: list != null, list.length > 0\n// post: return index of minimum element of array\npublic static int findMin(int[] list) {\n    assert list != null && list.length > 0 : \""failed precondition\"";\n    int indexOfMin = 0;\n    for (int i = 1; i < list.length; i++) {\n        if (list[i] < list[indexOfMin]) {\n            indexOfMin = i;\n        }\n    }\n    return indexOfMin;\n}\n"",""rating"":4},""code"":""public int largestDifferenceInArray(int[] ints){\n  //if the array has one or fewer elements, return zero\n\tif(ints.length < 2) {\n      return 0;\n    }\n  \n  \tint max = ints[0];\n  \tint min = ints[0];\n  //loop through all the ints and store the min\n  //and the max from that array\n    for (int i = 1; i < ints.length; i++) {\n      if (ints[i] > max) {\n          max = ints[i];\n      }\n    }\n  \n  //after the min and the max have been determined,\n  //return max - min\n}""}"
194,1.0,1.0,1.0,2.5,2017-05-06 23:30:06.550290,17,151,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""/**\n      Finds the smallest element in a tail range of the array.\n      @param a the array to sort\n      @param from the first position in a to compare\n      @return the position of the smallest element in the\n      range a[from] . . . a[a.length - 1]\n   */\nprivate static int minimumPosition(int[] a, int from) {\n    int minPos = from;\n    for (int i = from + 1; i < a.length; i++) {\n        if (a[i] < a[minPos]) {\n            minPos = i;\n        }\n    }\n    return minPos;\n}\n"",""rating"":3},""code"":""public int largestDifferenceInArray(int[] ints){\n  //if the array has one or fewer elements, return zero\n\tif(ints.length < 2) {\n      return 0;\n    }\n  \n  \tint max = ints[0];\n  \tint min = ints[0];\n  //loop through all the ints and store the min\n  //and the max from that array\n    for (int i = 1; i < ints.length; i++) {\n      if (ints[i] > max) {\n          max = ints[i];\n      }\n    }\n  \n  //after the min and the max have been determined,\n  //return max - min\n}""}"
195,1.0,1.0,1.0,1.0,2017-05-07 02:16:05.538886,21,152,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""/**\n      Constructs an employee with an empty name.\n   */\npublic Employee() {\n    name = \""\"";\n}\n"",""rating"":1},""code"":""public double getTax(Person p) {\n  if(p.getClass().equals(Employee.getClass())) {\n    double income = ((Employee) p).getSalary();\n    return income < 10000 ? 0.02 * income : 0.05 * income;\n  }\n  else if(p.getClass().equals(BusinessOwner.getClass()))\n    return ((BusinessOwner) p).getProfit() * 0.10;\n  else if(p.getClass().equals(Veteran.getClass()))\n    return 0;\n  else\n    return -1;\n}""}"
196,1.0,1.0,1.0,1.0,2017-05-07 02:16:21.805316,21,153,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Gets the name of this employee.\n      @return the name \n   */\npublic String getName() {\n    return name;\n}\n"",""rating"":1},""code"":""public double getTax(Person p) {\n  if(p.getClass().equals(Employee.getClass())) {\n    double income = ((Employee) p).getSalary();\n    return income < 10000 ? 0.02 * income : 0.05 * income;\n  }\n  else if(p.getClass().equals(BusinessOwner.getClass()))\n    return ((BusinessOwner) p).getProfit() * 0.10;\n  else if(p.getClass().equals(Veteran.getClass()))\n    return 0;\n  else\n    return -1;\n}""}"
197,1.0,1.0,1.0,1.0,2017-05-07 02:16:47.021348,21,154,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""/**\n     * Return the standard deviation of all the items that have been entered.\n     * The return value is Double.NaN if no numbers have been entered.\n     */\npublic double getStandardDeviation() {\n    double mean = getMean();\n    return Math.sqrt(squareSum / count - mean * mean);\n}\n"",""rating"":1},""code"":""public double getTax(Person p) {\n  if(p.getClass().equals(Employee.getClass())) {\n    double income = ((Employee) p).getSalary();\n    return income < 10000 ? 0.02 * income : 0.05 * income;\n  }\n  else if(p.getClass().equals(BusinessOwner.getClass()))\n    return ((BusinessOwner) p).getProfit() * 0.10;\n  else if(p.getClass().equals(Veteran.getClass()))\n    return 0;\n  else\n    return -1;\n}""}"
198,1.0,1.0,1.0,1.0,2017-05-07 02:16:48.848256,21,155,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""/**\n      Sets the name of this employee.\n      @param employeeName the new name \n   */\npublic void setName(String employeeName) {\n    name = employeeName;\n}\n"",""rating"":3},""code"":""public double getTax(Person p) {\n  if(p.getClass().equals(Employee.getClass())) {\n    double income = ((Employee) p).getSalary();\n    return income < 10000 ? 0.02 * income : 0.05 * income;\n  }\n  else if(p.getClass().equals(BusinessOwner.getClass()))\n    return ((BusinessOwner) p).getProfit() * 0.10;\n  else if(p.getClass().equals(Veteran.getClass()))\n    return 0;\n  else\n    return -1;\n}""}"
199,1.0,1.0,1.0,1.0,2017-05-07 02:16:55.566628,21,156,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""/**\n         * Return the standard deviation of all the items that have been entered.\n         * The return value is Double.NaN if no numbers have been entered.\n         */\npublic double getStandardDeviation() {\n    double mean = getMean();\n    return Math.sqrt(squareSum / count - mean * mean);\n}\n"",""rating"":3},""code"":""public double getTax(Person p) {\n  if(p.getClass().equals(Employee.getClass())) {\n    double income = ((Employee) p).getSalary();\n    return income < 10000 ? 0.02 * income : 0.05 * income;\n  }\n  else if(p.getClass().equals(BusinessOwner.getClass()))\n    return ((BusinessOwner) p).getProfit() * 0.10;\n  else if(p.getClass().equals(Veteran.getClass()))\n    return 0;\n  else\n    return -1;\n}""}"
200,1.0,1.0,1.0,1.0,2017-05-07 02:16:56.704078,21,157,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    System.out.print(\""Please enter your income: \"");\n    double income = in.nextDouble();\n    System.out.print(\""Are you married? (Y/N) \"");\n    String input = in.next();\n    int status;\n    if (input.equals(\""Y\"")) {\n        status = TaxReturn.MARRIED;\n    } else {\n        status = TaxReturn.SINGLE;\n    }\n    TaxReturn aTaxReturn = new TaxReturn(income, status);\n    System.out.println(\""Tax: \"" + aTaxReturn.getTax());\n}\n"",""rating"":1},""code"":""public double getTax(Person p) {\n  if(p.getClass().equals(Employee.getClass())) {\n    double income = ((Employee) p).getSalary();\n    return income < 10000 ? 0.02 * income : 0.05 * income;\n  }\n  else if(p.getClass().equals(BusinessOwner.getClass()))\n    return ((BusinessOwner) p).getProfit() * 0.10;\n  else if(p.getClass().equals(Veteran.getClass()))\n    return 0;\n  else\n    return -1;\n}""}"
201,1.0,1.0,1.0,1.0,2017-05-07 02:16:59.605366,21,158,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", targetDate = \""Jan 1, 2012\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""public double getTax(Person p) {\n  if(p.getClass().equals(Employee.getClass())) {\n    double income = ((Employee) p).getSalary();\n    return income < 10000 ? 0.02 * income : 0.05 * income;\n  }\n  else if(p.getClass().equals(BusinessOwner.getClass()))\n    return ((BusinessOwner) p).getProfit() * 0.10;\n  else if(p.getClass().equals(Veteran.getClass()))\n    return 0;\n  else\n    return -1;\n}""}"
202,1.0,1.0,1.0,1.0,2017-05-07 02:17:01.770470,21,159,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""public double getAverageScore(int studentId) {\n    double total = 0;\n    for (double x : scores) {\n        total = total + x;\n    }\n    return total / scores.size();\n}\n"",""rating"":1},""code"":""public double getTax(Person p) {\n  if(p.getClass().equals(Employee.getClass())) {\n    double income = ((Employee) p).getSalary();\n    return income < 10000 ? 0.02 * income : 0.05 * income;\n  }\n  else if(p.getClass().equals(BusinessOwner.getClass()))\n    return ((BusinessOwner) p).getProfit() * 0.10;\n  else if(p.getClass().equals(Veteran.getClass()))\n    return 0;\n  else\n    return -1;\n}""}"
203,1.0,1.0,1.0,1.0,2017-05-07 02:17:04.157285,21,160,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""public double getTax() {\n    double tax1 = 0;\n    double tax2 = 0;\n    if (status == SINGLE) {\n        if (income <= RATE1_SINGLE_LIMIT) {\n            tax1 = RATE1 * income;\n        } else {\n            tax1 = RATE1 * RATE1_SINGLE_LIMIT;\n            tax2 = RATE2 * (income - RATE1_SINGLE_LIMIT);\n        }\n    } else {\n        if (income <= RATE1_MARRIED_LIMIT) {\n            tax1 = RATE1 * income;\n        } else {\n            tax1 = RATE1 * RATE1_MARRIED_LIMIT;\n            tax2 = RATE2 * (income - RATE1_MARRIED_LIMIT);\n        }\n    }\n    return tax1 + tax2;\n}\n"",""rating"":1},""code"":""public double getTax(Person p) {\n  if(p.getClass().equals(Employee.getClass())) {\n    double income = ((Employee) p).getSalary();\n    return income < 10000 ? 0.02 * income : 0.05 * income;\n  }\n  else if(p.getClass().equals(BusinessOwner.getClass()))\n    return ((BusinessOwner) p).getProfit() * 0.10;\n  else if(p.getClass().equals(Veteran.getClass()))\n    return 0;\n  else\n    return -1;\n}""}"
204,1.0,1.0,1.0,1.0,2017-05-07 02:17:06.211268,21,161,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""/**\n      Gets the surface area of this pyramid.\n      @return the surface area, not including the base\n   */\npublic double getSurfaceArea() {\n    double sideLength = Math.sqrt(height * height + baseLength * baseLength / 4);\n    return 2 * baseLength * sideLength;\n}\n"",""rating"":1},""code"":""public double getTax(Person p) {\n  if(p.getClass().equals(Employee.getClass())) {\n    double income = ((Employee) p).getSalary();\n    return income < 10000 ? 0.02 * income : 0.05 * income;\n  }\n  else if(p.getClass().equals(BusinessOwner.getClass()))\n    return ((BusinessOwner) p).getProfit() * 0.10;\n  else if(p.getClass().equals(Veteran.getClass()))\n    return 0;\n  else\n    return -1;\n}""}"
205,1.0,1.0,1.0,1.0,2017-05-07 02:18:30.901367,21,,"public double getTax(Person p) {
  if(p.getClass().equals(Employee.getClass())) {
    double income = ((Employee) p).getSalary();
    return income < 10000 ? 0.02 * income : 0.05 * income;
  }
  else if(p.getClass().equals(BusinessOwner.getClass()))
    return ((BusinessOwner) p).getProfit() * 0.10;
  else if(p.getClass().equals(Veteran.getClass()))
    return 0;
  else
    return -1;
}"
206,2.5,1.0,1.0,1.0,2017-05-07 02:18:35.365284,21,,"public double getTax(Person p) {
  if(p.getClass().equals(Employee.getClass())) {
    double income = ((Employee) p).getSalary();
    return income < 10000 ? 0.02 * income : 0.05 * income;
  }
  else if(p.getClass().equals(BusinessOwner.getClass()))
    return ((BusinessOwner) p).getProfit() * 0.10;
  else if(p.getClass().equals(Veteran.getClass()))
    return 0;
  else
    return -1;
}"
207,2.5,1.0,1.0,2.5,2017-05-07 02:18:44.423050,21,,"public double getTax(Person p) {
  if(p.getClass().equals(Employee.getClass())) {
    double income = ((Employee) p).getSalary();
    return income < 10000 ? 0.02 * income : 0.05 * income;
  }
  else if(p.getClass().equals(BusinessOwner.getClass()))
    return ((BusinessOwner) p).getProfit() * 0.10;
  else if(p.getClass().equals(Veteran.getClass()))
    return 0;
  else
    return -1;
}"
208,2.5,1.0,1.0,2.5,2017-05-07 02:19:00.252473,21,162,"{""qId"":2,""reco"":{""rank"":2,""source"":1,""text"":""/**\n      Processes the sales tax due.\n      @return the sales tax due\n   */\npublic double getSalesTax() {\n    return taxablePurchase * taxRate / 100;\n}\n"",""rating"":2},""code"":""public double getTax(Person p) {\n  if(p.getClass().equals(Employee.getClass())) {\n    double income = ((Employee) p).getSalary();\n    return income < 10000 ? 0.02 * income : 0.05 * income;\n  }\n  else if(p.getClass().equals(BusinessOwner.getClass()))\n    return ((BusinessOwner) p).getProfit() * 0.10;\n  else if(p.getClass().equals(Veteran.getClass()))\n    return 0;\n  else\n    return -1;\n}""}"
209,2.5,1.0,1.0,2.5,2017-05-07 02:19:09.595671,21,163,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    System.out.print(\""Please enter your income: \"");\n    double income = in.nextDouble();\n    System.out.print(\""Are you married? (Y/N) \"");\n    String input = in.next();\n    int status;\n    if (input.equals(\""Y\"")) {\n        status = TaxReturn.MARRIED;\n    } else {\n        status = TaxReturn.SINGLE;\n    }\n    TaxReturn aTaxReturn = new TaxReturn(income, status);\n    System.out.println(\""Tax: \"" + aTaxReturn.getTax());\n}\n"",""rating"":1},""code"":""public double getTax(Person p) {\n  if(p.getClass().equals(Employee.getClass())) {\n    double income = ((Employee) p).getSalary();\n    return income < 10000 ? 0.02 * income : 0.05 * income;\n  }\n  else if(p.getClass().equals(BusinessOwner.getClass()))\n    return ((BusinessOwner) p).getProfit() * 0.10;\n  else if(p.getClass().equals(Veteran.getClass()))\n    return 0;\n  else\n    return -1;\n}""}"
210,2.5,1.0,1.0,2.5,2017-05-07 02:19:14.191893,21,164,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""public double getTax() {\n    double tax1 = 0;\n    double tax2 = 0;\n    if (status == SINGLE) {\n        if (income <= RATE1_SINGLE_LIMIT) {\n            tax1 = RATE1 * income;\n        } else {\n            tax1 = RATE1 * RATE1_SINGLE_LIMIT;\n            tax2 = RATE2 * (income - RATE1_SINGLE_LIMIT);\n        }\n    } else {\n        if (income <= RATE1_MARRIED_LIMIT) {\n            tax1 = RATE1 * income;\n        } else {\n            tax1 = RATE1 * RATE1_MARRIED_LIMIT;\n            tax2 = RATE2 * (income - RATE1_MARRIED_LIMIT);\n        }\n    }\n    return tax1 + tax2;\n}\n"",""rating"":2},""code"":""public double getTax(Person p) {\n  if(p.getClass().equals(Employee.getClass())) {\n    double income = ((Employee) p).getSalary();\n    return income < 10000 ? 0.02 * income : 0.05 * income;\n  }\n  else if(p.getClass().equals(BusinessOwner.getClass()))\n    return ((BusinessOwner) p).getProfit() * 0.10;\n  else if(p.getClass().equals(Veteran.getClass()))\n    return 0;\n  else\n    return -1;\n}""}"
211,2.5,1.0,1.0,2.5,2017-05-07 02:19:18.519913,21,165,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Gets the name of this employee.\n      @return the name \n   */\npublic String getName() {\n    return name;\n}\n"",""rating"":4},""code"":""public double getTax(Person p) {\n  if(p.getClass().equals(Employee.getClass())) {\n    double income = ((Employee) p).getSalary();\n    return income < 10000 ? 0.02 * income : 0.05 * income;\n  }\n  else if(p.getClass().equals(BusinessOwner.getClass()))\n    return ((BusinessOwner) p).getProfit() * 0.10;\n  else if(p.getClass().equals(Veteran.getClass()))\n    return 0;\n  else\n    return -1;\n}""}"
212,2.5,1.0,1.0,2.5,2017-05-07 02:19:20.771496,21,166,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", targetDate = \""Jan 1, 2012\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":2},""code"":""public double getTax(Person p) {\n  if(p.getClass().equals(Employee.getClass())) {\n    double income = ((Employee) p).getSalary();\n    return income < 10000 ? 0.02 * income : 0.05 * income;\n  }\n  else if(p.getClass().equals(BusinessOwner.getClass()))\n    return ((BusinessOwner) p).getProfit() * 0.10;\n  else if(p.getClass().equals(Veteran.getClass()))\n    return 0;\n  else\n    return -1;\n}""}"
213,2.5,1.0,1.0,2.5,2017-05-07 02:19:23.872536,21,167,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""/**\n         * Return the standard deviation of all the items that have been entered.\n         * The return value is Double.NaN if no numbers have been entered.\n         */\npublic double getStandardDeviation() {\n    double mean = getMean();\n    return Math.sqrt(squareSum / count - mean * mean);\n}\n"",""rating"":2},""code"":""public double getTax(Person p) {\n  if(p.getClass().equals(Employee.getClass())) {\n    double income = ((Employee) p).getSalary();\n    return income < 10000 ? 0.02 * income : 0.05 * income;\n  }\n  else if(p.getClass().equals(BusinessOwner.getClass()))\n    return ((BusinessOwner) p).getProfit() * 0.10;\n  else if(p.getClass().equals(Veteran.getClass()))\n    return 0;\n  else\n    return -1;\n}""}"
214,2.5,1.0,1.0,2.5,2017-05-07 02:19:25.851473,21,168,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""/**\n      Constructs an employee with an empty name.\n   */\npublic Employee() {\n    name = \""\"";\n}\n"",""rating"":4},""code"":""public double getTax(Person p) {\n  if(p.getClass().equals(Employee.getClass())) {\n    double income = ((Employee) p).getSalary();\n    return income < 10000 ? 0.02 * income : 0.05 * income;\n  }\n  else if(p.getClass().equals(BusinessOwner.getClass()))\n    return ((BusinessOwner) p).getProfit() * 0.10;\n  else if(p.getClass().equals(Veteran.getClass()))\n    return 0;\n  else\n    return -1;\n}""}"
215,2.5,1.0,1.0,2.5,2017-05-07 02:19:30.405230,21,169,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""/**\n     * Return the standard deviation of all the items that have been entered.\n     * The return value is Double.NaN if no numbers have been entered.\n     */\npublic double getStandardDeviation() {\n    double mean = getMean();\n    return Math.sqrt(squareSum / count - mean * mean);\n}\n"",""rating"":2},""code"":""public double getTax(Person p) {\n  if(p.getClass().equals(Employee.getClass())) {\n    double income = ((Employee) p).getSalary();\n    return income < 10000 ? 0.02 * income : 0.05 * income;\n  }\n  else if(p.getClass().equals(BusinessOwner.getClass()))\n    return ((BusinessOwner) p).getProfit() * 0.10;\n  else if(p.getClass().equals(Veteran.getClass()))\n    return 0;\n  else\n    return -1;\n}""}"
216,2.5,1.0,1.0,2.5,2017-05-07 02:19:32.904782,21,170,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""/**\n      Sets the name of this employee.\n      @param employeeName the new name \n   */\npublic void setName(String employeeName) {\n    name = employeeName;\n}\n"",""rating"":4},""code"":""public double getTax(Person p) {\n  if(p.getClass().equals(Employee.getClass())) {\n    double income = ((Employee) p).getSalary();\n    return income < 10000 ? 0.02 * income : 0.05 * income;\n  }\n  else if(p.getClass().equals(BusinessOwner.getClass()))\n    return ((BusinessOwner) p).getProfit() * 0.10;\n  else if(p.getClass().equals(Veteran.getClass()))\n    return 0;\n  else\n    return -1;\n}""}"
217,2.5,2.0,1.0,2.5,2017-05-07 02:19:43.302472,21,,"public double getTax(Person p) {
  if(p.getClass().equals(Employee.getClass())) {
    double income = ((Employee) p).getSalary();
    return income < 10000 ? 0.02 * income : 0.05 * income;
  }
  else if(p.getClass().equals(BusinessOwner.getClass()))
    return ((BusinessOwner) p).getProfit() * 0.10;
  else if(p.getClass().equals(Veteran.getClass()))
    return 0;
  else
    return -1;
}"
218,2.5,2.0,2.0,2.5,2017-05-07 02:19:44.143282,21,,"public double getTax(Person p) {
  if(p.getClass().equals(Employee.getClass())) {
    double income = ((Employee) p).getSalary();
    return income < 10000 ? 0.02 * income : 0.05 * income;
  }
  else if(p.getClass().equals(BusinessOwner.getClass()))
    return ((BusinessOwner) p).getProfit() * 0.10;
  else if(p.getClass().equals(Veteran.getClass()))
    return 0;
  else
    return -1;
}"
219,2.5,2.0,2.0,2.5,2017-05-07 02:20:00.733015,21,171,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""/**\n      Sets the name of this employee.\n      @param employeeName the new name \n   */\npublic void setName(String employeeName) {\n    name = employeeName;\n}\n"",""rating"":3},""code"":""public double getTax(Person p) {\n  if(p.getClass().equals(Employee.getClass())) {\n    double income = ((Employee) p).getSalary();\n    return income < 10000 ? 0.02 * income : 0.05 * income;\n  }\n  else if(p.getClass().equals(BusinessOwner.getClass()))\n    return ((BusinessOwner) p).getProfit() * 0.10;\n  else if(p.getClass().equals(Veteran.getClass()))\n    return 0;\n  else\n    return -1;\n}""}"
220,2.5,2.0,2.0,2.5,2017-05-07 02:20:04.411448,21,172,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""public double getTax() {\n    double tax1 = 0;\n    double tax2 = 0;\n    if (status == SINGLE) {\n        if (income <= RATE1_SINGLE_LIMIT) {\n            tax1 = RATE1 * income;\n        } else {\n            tax1 = RATE1 * RATE1_SINGLE_LIMIT;\n            tax2 = RATE2 * (income - RATE1_SINGLE_LIMIT);\n        }\n    } else {\n        if (income <= RATE1_MARRIED_LIMIT) {\n            tax1 = RATE1 * income;\n        } else {\n            tax1 = RATE1 * RATE1_MARRIED_LIMIT;\n            tax2 = RATE2 * (income - RATE1_MARRIED_LIMIT);\n        }\n    }\n    return tax1 + tax2;\n}\n"",""rating"":3},""code"":""public double getTax(Person p) {\n  if(p.getClass().equals(Employee.getClass())) {\n    double income = ((Employee) p).getSalary();\n    return income < 10000 ? 0.02 * income : 0.05 * income;\n  }\n  else if(p.getClass().equals(BusinessOwner.getClass()))\n    return ((BusinessOwner) p).getProfit() * 0.10;\n  else if(p.getClass().equals(Veteran.getClass()))\n    return 0;\n  else\n    return -1;\n}""}"
221,2.5,2.0,2.0,2.5,2017-05-07 02:20:10.203153,21,173,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Gets the name of this employee.\n      @return the name \n   */\npublic String getName() {\n    return name;\n}\n"",""rating"":3},""code"":""public double getTax(Person p) {\n  if(p.getClass().equals(Employee.getClass())) {\n    double income = ((Employee) p).getSalary();\n    return income < 10000 ? 0.02 * income : 0.05 * income;\n  }\n  else if(p.getClass().equals(BusinessOwner.getClass()))\n    return ((BusinessOwner) p).getProfit() * 0.10;\n  else if(p.getClass().equals(Veteran.getClass()))\n    return 0;\n  else\n    return -1;\n}""}"
222,2.5,2.0,2.0,2.5,2017-05-07 02:20:17.957813,21,174,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""/**\n      Constructs an employee with an empty name.\n   */\npublic Employee() {\n    name = \""\"";\n}\n"",""rating"":3},""code"":""public double getTax(Person p) {\n  if(p.getClass().equals(Employee.getClass())) {\n    double income = ((Employee) p).getSalary();\n    return income < 10000 ? 0.02 * income : 0.05 * income;\n  }\n  else if(p.getClass().equals(BusinessOwner.getClass()))\n    return ((BusinessOwner) p).getProfit() * 0.10;\n  else if(p.getClass().equals(Veteran.getClass()))\n    return 0;\n  else\n    return -1;\n}""}"
223,2.5,2.0,2.0,2.5,2017-05-07 02:20:55.905860,21,175,"{""qId"":2,""reco"":{""rank"":3,""source"":1,""text"":""/**\n     * Return the standard deviation of all the items that have been entered.\n     * The return value is Double.NaN if no numbers have been entered.\n     */\npublic double getStandardDeviation() {\n    double mean = getMean();\n    return Math.sqrt(squareSum / count - mean * mean);\n}\n"",""rating"":3},""code"":""public double getTax(Person p) {\n  if(p.getClass().equals(Employee.getClass())) {\n    double income = ((Employee) p).getSalary();\n    return income < 10000 ? 0.02 * income : 0.05 * income;\n  }\n  else if(p.getClass().equals(BusinessOwner.getClass()))\n    return ((BusinessOwner) p).getProfit() * 0.10;\n  else if(p.getClass().equals(Veteran.getClass()))\n    return 0;\n  else // return -1 on none of these\n    return -1;\n}""}"
224,2.5,2.0,2.0,2.5,2017-05-07 02:21:00.803711,21,176,"{""qId"":2,""reco"":{""rank"":4,""source"":0,""text"":""/**\n      Constructs an employee with an empty name.\n   */\npublic Employee() {\n    name = \""\"";\n}\n"",""rating"":3},""code"":""public double getTax(Person p) {\n  if(p.getClass().equals(Employee.getClass())) {\n    double income = ((Employee) p).getSalary();\n    return income < 10000 ? 0.02 * income : 0.05 * income;\n  }\n  else if(p.getClass().equals(BusinessOwner.getClass()))\n    return ((BusinessOwner) p).getProfit() * 0.10;\n  else if(p.getClass().equals(Veteran.getClass()))\n    return 0;\n  else // return -1 on none of these\n    return -1;\n}""}"
225,2.5,2.0,2.0,2.5,2017-05-07 02:21:03.255170,21,177,"{""qId"":2,""reco"":{""rank"":5,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":3},""code"":""public double getTax(Person p) {\n  if(p.getClass().equals(Employee.getClass())) {\n    double income = ((Employee) p).getSalary();\n    return income < 10000 ? 0.02 * income : 0.05 * income;\n  }\n  else if(p.getClass().equals(BusinessOwner.getClass()))\n    return ((BusinessOwner) p).getProfit() * 0.10;\n  else if(p.getClass().equals(Veteran.getClass()))\n    return 0;\n  else // return -1 on none of these\n    return -1;\n}""}"
226,2.5,2.0,2.0,2.5,2017-05-07 02:21:04.669035,21,178,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""/**\n      Sets the name of this employee.\n      @param employeeName the new name \n   */\npublic void setName(String employeeName) {\n    name = employeeName;\n}\n"",""rating"":3},""code"":""public double getTax(Person p) {\n  if(p.getClass().equals(Employee.getClass())) {\n    double income = ((Employee) p).getSalary();\n    return income < 10000 ? 0.02 * income : 0.05 * income;\n  }\n  else if(p.getClass().equals(BusinessOwner.getClass()))\n    return ((BusinessOwner) p).getProfit() * 0.10;\n  else if(p.getClass().equals(Veteran.getClass()))\n    return 0;\n  else // return -1 on none of these\n    return -1;\n}""}"
227,2.5,2.0,2.0,2.5,2017-05-07 02:21:08.245728,21,179,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""public double getTax() {\n    double tax1 = 0;\n    double tax2 = 0;\n    if (status == SINGLE) {\n        if (income <= RATE1_SINGLE_LIMIT) {\n            tax1 = RATE1 * income;\n        } else {\n            tax1 = RATE1 * RATE1_SINGLE_LIMIT;\n            tax2 = RATE2 * (income - RATE1_SINGLE_LIMIT);\n        }\n    } else {\n        if (income <= RATE1_MARRIED_LIMIT) {\n            tax1 = RATE1 * income;\n        } else {\n            tax1 = RATE1 * RATE1_MARRIED_LIMIT;\n            tax2 = RATE2 * (income - RATE1_MARRIED_LIMIT);\n        }\n    }\n    return tax1 + tax2;\n}\n"",""rating"":3},""code"":""public double getTax(Person p) {\n  if(p.getClass().equals(Employee.getClass())) {\n    double income = ((Employee) p).getSalary();\n    return income < 10000 ? 0.02 * income : 0.05 * income;\n  }\n  else if(p.getClass().equals(BusinessOwner.getClass()))\n    return ((BusinessOwner) p).getProfit() * 0.10;\n  else if(p.getClass().equals(Veteran.getClass()))\n    return 0;\n  else // return -1 on none of these\n    return -1;\n}""}"
228,2.5,2.0,2.0,2.5,2017-05-07 02:21:12.008933,21,180,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""/**\n      Gets the name of this employee.\n      @return the name \n   */\npublic String getName() {\n    return name;\n}\n"",""rating"":3},""code"":""public double getTax(Person p) {\n  if(p.getClass().equals(Employee.getClass())) {\n    double income = ((Employee) p).getSalary();\n    return income < 10000 ? 0.02 * income : 0.05 * income;\n  }\n  else if(p.getClass().equals(BusinessOwner.getClass()))\n    return ((BusinessOwner) p).getProfit() * 0.10;\n  else if(p.getClass().equals(Veteran.getClass()))\n    return 0;\n  else // return -1 on none of these\n    return -1;\n}""}"
229,1.0,1.0,1.0,1.0,2017-05-07 02:24:49.490735,21,181,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent2(int[] a) {\n    // O(n log(n))\n    Arrays.sort(a);\n    int[] counts = new int[a.length];\n    int count = 0;\n    for (// O(n)\n    int i = 0; // O(n)\n    i < a.length; // O(n)\n    i++) {\n        count++;\n        if (i == a.length - 1 || a[i] != a[i + 1]) {\n            counts[i] = count;\n            count = 0;\n        }\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":3},""code"":""public int largestDifference(int[] a) {\n  Arrays.sort(a);\n  int difference = -1;\n  for(int i = 1; i < a.length; i++) {\n    int largest_difference = a[i] - a[i - 1];\n    if(largest_difference > difference)\n      difference = largest_difference;\n  }\n  return largest_difference;\n    \n}""}"
230,1.0,1.0,1.0,1.0,2017-05-07 02:25:01.366622,21,182,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""public static <E extends Comparable<? super E>> E max(ArrayList<E> a) // public static <E extends Comparable<E>> E max(ArrayList<E> a) \n// doesn't work with Student array list\n{\n    E largest = a.get(0);\n    for (int i = 1; i < a.size(); i++) {\n        if (a.get(i).compareTo(largest) > 0) {\n            largest = a.get(i);\n        }\n    }\n    return largest;\n}\n"",""rating"":3},""code"":""public int largestDifference(int[] a) {\n  Arrays.sort(a);\n  int difference = -1;\n  for(int i = 1; i < a.length; i++) {\n    int largest_difference = a[i] - a[i - 1];\n    if(largest_difference > difference)\n      difference = largest_difference;\n  }\n  return largest_difference;\n    \n}""}"
231,1.0,1.0,1.0,1.0,2017-05-07 02:25:07.600869,21,183,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent1(int[] a) {\n    int[] counts = new int[a.length];\n    for (// O(n*n)\n    int i = 0; // O(n*n)\n    i < a.length; // O(n*n)\n    i++) {\n        // O(n) in each iteration\n        counts[i] = count(a, a[i]);\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":3},""code"":""public int largestDifference(int[] a) {\n  Arrays.sort(a);\n  int difference = -1;\n  for(int i = 1; i < a.length; i++) {\n    int largest_difference = a[i] - a[i - 1];\n    if(largest_difference > difference)\n      difference = largest_difference;\n  }\n  return largest_difference;\n    \n}""}"
232,1.0,1.0,1.0,1.0,2017-05-07 02:25:11.185708,21,184,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""// pre: list != null, list.length > 0\n// post: return index of minimum element of array\npublic static int findMin(int[] list) {\n    assert list != null && list.length > 0 : \""failed precondition\"";\n    int indexOfMin = 0;\n    for (int i = 1; i < list.length; i++) {\n        if (list[i] < list[indexOfMin]) {\n            indexOfMin = i;\n        }\n    }\n    return indexOfMin;\n}\n"",""rating"":3},""code"":""public int largestDifference(int[] a) {\n  Arrays.sort(a);\n  int difference = -1;\n  for(int i = 1; i < a.length; i++) {\n    int largest_difference = a[i] - a[i - 1];\n    if(largest_difference > difference)\n      difference = largest_difference;\n  }\n  return largest_difference;\n    \n}""}"
233,1.0,1.0,1.0,1.0,2017-05-07 02:25:18.486620,21,185,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static <E extends Comparable<E>> E max(E[] a) {\n    E largest = a[0];\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":3},""code"":""public int largestDifference(int[] a) {\n  Arrays.sort(a);\n  int difference = -1;\n  for(int i = 1; i < a.length; i++) {\n    int largest_difference = a[i] - a[i - 1];\n    if(largest_difference > difference)\n      difference = largest_difference;\n  }\n  return largest_difference;\n    \n}""}"
234,1.0,1.0,1.0,1.0,2017-05-07 02:25:24.612937,21,186,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""/**\n         * Return the largest item that has been entered.\n         * The return value will be -infinity if no numbers have been entered. \n         */\npublic double getMax() {\n    return max;\n}\n"",""rating"":3},""code"":""public int largestDifference(int[] a) {\n  Arrays.sort(a);\n  int difference = -1;\n  for(int i = 1; i < a.length; i++) {\n    int largest_difference = a[i] - a[i - 1];\n    if(largest_difference > difference)\n      difference = largest_difference;\n  }\n  return largest_difference;\n    \n}""}"
235,1.0,1.0,1.0,1.0,2017-05-07 02:25:32.673101,21,187,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""public int run() {\n    ArrayList<MutableInteger> list = new ArrayList<>();\n    for (int i = 0; i < MAX; i++) {\n        list.add(new MutableInteger(i));\n    }\n    int sum = 0;\n    for (int i = 0; i < MAX; i++) {\n        sum += ((MutableInteger) list.get(i)).getValue();\n    }\n    return sum;\n}\n"",""rating"":1},""code"":""public int largestDifference(int[] a) {\n  Arrays.sort(a);\n  int difference = -1;\n  for(int i = 1; i < a.length; i++) {\n    int largest_difference = a[i] - a[i - 1];\n    if(largest_difference > difference)\n      difference = largest_difference;\n  }\n  return largest_difference;\n    \n}""}"
236,2.0,1.0,1.0,1.0,2017-05-07 02:25:48.147116,21,,"public int largestDifference(int[] a) {
  Arrays.sort(a);
  int difference = -1;
  for(int i = 1; i < a.length; i++) {
    int largest_difference = a[i] - a[i - 1];
    if(largest_difference > difference)
      difference = largest_difference;
  }
  return largest_difference;
    
}"
237,2.0,2.0,1.0,1.0,2017-05-07 02:25:48.912648,21,,"public int largestDifference(int[] a) {
  Arrays.sort(a);
  int difference = -1;
  for(int i = 1; i < a.length; i++) {
    int largest_difference = a[i] - a[i - 1];
    if(largest_difference > difference)
      difference = largest_difference;
  }
  return largest_difference;
    
}"
238,2.0,2.0,2.0,1.0,2017-05-07 02:25:50.624332,21,,"public int largestDifference(int[] a) {
  Arrays.sort(a);
  int difference = -1;
  for(int i = 1; i < a.length; i++) {
    int largest_difference = a[i] - a[i - 1];
    if(largest_difference > difference)
      difference = largest_difference;
  }
  return largest_difference;
    
}"
239,2.0,2.0,2.0,2.0,2017-05-07 02:25:51.241368,21,,"public int largestDifference(int[] a) {
  Arrays.sort(a);
  int difference = -1;
  for(int i = 1; i < a.length; i++) {
    int largest_difference = a[i] - a[i - 1];
    if(largest_difference > difference)
      difference = largest_difference;
  }
  return largest_difference;
    
}"
240,2.0,2.0,2.0,2.0,2017-05-07 02:26:02.385746,21,188,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent2(int[] a) {\n    // O(n log(n))\n    Arrays.sort(a);\n    int[] counts = new int[a.length];\n    int count = 0;\n    for (// O(n)\n    int i = 0; // O(n)\n    i < a.length; // O(n)\n    i++) {\n        count++;\n        if (i == a.length - 1 || a[i] != a[i + 1]) {\n            counts[i] = count;\n            count = 0;\n        }\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":3},""code"":""public int largestDifference(int[] a) {\n  Arrays.sort(a);\n  int difference = -1;\n  for(int i = 1; i < a.length; i++) {\n    int largest_difference = a[i] - a[i - 1];\n    if(largest_difference > difference)\n      difference = largest_difference;\n  }\n  return largest_difference;\n    \n}""}"
241,2.0,2.0,2.0,2.0,2017-05-07 02:26:09.861442,21,189,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""/**\n      Returns the most frequently occurring value in an array.\n      @param a an array\n      @return the most frequently occurring value in a\n   */\npublic static int mostFrequent1(int[] a) {\n    int[] counts = new int[a.length];\n    for (// O(n*n)\n    int i = 0; // O(n*n)\n    i < a.length; // O(n*n)\n    i++) {\n        // O(n) in each iteration\n        counts[i] = count(a, a[i]);\n    }\n    // O(n)\n    int highestFrequency = max(counts);\n    // O(n)\n    int highestFrequencyIndex = search(counts, highestFrequency);\n    return a[highestFrequencyIndex];\n}\n"",""rating"":3},""code"":""public int largestDifference(int[] a) {\n  Arrays.sort(a);\n  int difference = -1;\n  for(int i = 1; i < a.length; i++) {\n    int largest_difference = a[i] - a[i - 1];\n    if(largest_difference > difference)\n      difference = largest_difference;\n  }\n  return largest_difference;\n    \n}""}"
242,2.0,2.0,2.0,2.0,2017-05-07 02:26:13.391526,21,190,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""public int run() {\n    ArrayList<MutableInteger> list = new ArrayList<>();\n    for (int i = 0; i < MAX; i++) {\n        list.add(new MutableInteger(i));\n    }\n    int sum = 0;\n    for (int i = 0; i < MAX; i++) {\n        sum += ((MutableInteger) list.get(i)).getValue();\n    }\n    return sum;\n}\n"",""rating"":2},""code"":""public int largestDifference(int[] a) {\n  Arrays.sort(a);\n  int difference = -1;\n  for(int i = 1; i < a.length; i++) {\n    int largest_difference = a[i] - a[i - 1];\n    if(largest_difference > difference)\n      difference = largest_difference;\n  }\n  return largest_difference;\n    \n}""}"
243,2.0,2.0,2.0,2.0,2017-05-07 02:26:15.590572,21,191,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static <E extends Comparable<E>> E max(E[] a) {\n    E largest = a[0];\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":3},""code"":""public int largestDifference(int[] a) {\n  Arrays.sort(a);\n  int difference = -1;\n  for(int i = 1; i < a.length; i++) {\n    int largest_difference = a[i] - a[i - 1];\n    if(largest_difference > difference)\n      difference = largest_difference;\n  }\n  return largest_difference;\n    \n}""}"
244,2.0,2.0,2.0,2.0,2017-05-07 02:26:17.583004,21,192,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""public void paintComponent(Graphics graph) {\n    int increment = samples.length / getWidth();\n    final int LARGEST = 32767;\n    int x = 0;\n    for (int i = 0; i < samples.length; i = i + increment) {\n        int value = samples[i];\n        value = Math.min(LARGEST, value);\n        value = Math.max(-LARGEST, value);\n        int height = getHeight() / 2;\n        int y = height - samples[i] * height / LARGEST;\n        graph.drawLine(x, y, x, height);\n        x++;\n    }\n}\n"",""rating"":1},""code"":""public int largestDifference(int[] a) {\n  Arrays.sort(a);\n  int difference = -1;\n  for(int i = 1; i < a.length; i++) {\n    int largest_difference = a[i] - a[i - 1];\n    if(largest_difference > difference)\n      difference = largest_difference;\n  }\n  return largest_difference;\n    \n}""}"
245,2.0,2.0,2.0,2.0,2017-05-07 02:26:19.654681,21,193,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""/**\n         * Return the largest item that has been entered.\n         * The return value will be -infinity if no numbers have been entered. \n         */\npublic double getMax() {\n    return max;\n}\n"",""rating"":3},""code"":""public int largestDifference(int[] a) {\n  Arrays.sort(a);\n  int difference = -1;\n  for(int i = 1; i < a.length; i++) {\n    int largest_difference = a[i] - a[i - 1];\n    if(largest_difference > difference)\n      difference = largest_difference;\n  }\n  return largest_difference;\n    \n}""}"
246,2.0,2.0,2.0,2.0,2017-05-07 02:26:22.084974,21,194,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""public static <E extends Comparable<? super E>> E max(ArrayList<E> a) // public static <E extends Comparable<E>> E max(ArrayList<E> a) \n// doesn't work with Student array list\n{\n    E largest = a.get(0);\n    for (int i = 1; i < a.size(); i++) {\n        if (a.get(i).compareTo(largest) > 0) {\n            largest = a.get(i);\n        }\n    }\n    return largest;\n}\n"",""rating"":2},""code"":""public int largestDifference(int[] a) {\n  Arrays.sort(a);\n  int difference = -1;\n  for(int i = 1; i < a.length; i++) {\n    int largest_difference = a[i] - a[i - 1];\n    if(largest_difference > difference)\n      difference = largest_difference;\n  }\n  return largest_difference;\n    \n}""}"
247,2.0,2.0,2.0,2.0,2017-05-07 02:26:25.124650,21,195,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""// pre: list != null, list.length > 0\n// post: return index of minimum element of array\npublic static int findMin(int[] list) {\n    assert list != null && list.length > 0 : \""failed precondition\"";\n    int indexOfMin = 0;\n    for (int i = 1; i < list.length; i++) {\n        if (list[i] < list[indexOfMin]) {\n            indexOfMin = i;\n        }\n    }\n    return indexOfMin;\n}\n"",""rating"":3},""code"":""public int largestDifference(int[] a) {\n  Arrays.sort(a);\n  int difference = -1;\n  for(int i = 1; i < a.length; i++) {\n    int largest_difference = a[i] - a[i - 1];\n    if(largest_difference > difference)\n      difference = largest_difference;\n  }\n  return largest_difference;\n    \n}""}"
248,2.5,1.0,1.0,1.0,2017-05-07 07:54:07.800464,24,,"  int largestDiff(int arr[], int arr_size) 
    {
        int max_diff = arr[1] - arr[0];
        int min_element = arr[0];
        int i;
        for (i = 1; i < arr_size; i++) 
        {
            if (arr[i] - min_element > max_diff)
                max_diff = arr[i] - min_element;
            if (arr[i] < min_element)
                min_element = arr[i];
        }
        return max_diff;
    }"
249,4.0,1.0,1.0,1.0,2017-05-07 07:54:08.795996,24,,"  int largestDiff(int arr[], int arr_size) 
    {
        int max_diff = arr[1] - arr[0];
        int min_element = arr[0];
        int i;
        for (i = 1; i < arr_size; i++) 
        {
            if (arr[i] - min_element > max_diff)
                max_diff = arr[i] - min_element;
            if (arr[i] < min_element)
                min_element = arr[i];
        }
        return max_diff;
    }"
250,4.0,2.5,1.0,1.0,2017-05-07 07:54:17.905796,24,,"  int largestDiff(int arr[], int arr_size) 
    {
        int max_diff = arr[1] - arr[0];
        int min_element = arr[0];
        int i;
        for (i = 1; i < arr_size; i++) 
        {
            if (arr[i] - min_element > max_diff)
                max_diff = arr[i] - min_element;
            if (arr[i] < min_element)
                min_element = arr[i];
        }
        return max_diff;
    }"
251,4.0,2.5,1.0,1.0,2017-05-07 07:55:10.078767,24,196,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""Task(int min, int max) {\n    this.min = min;\n    this.max = max;\n}\n"",""rating"":1},""code"":""  int largestDiff(int arr[], int arr_size) \n    {\n        int max_diff = arr[1] - arr[0];\n        int min_element = arr[0];\n        int i;\n        for (i = 1; i < arr_size; i++) \n        {\n            if (arr[i] - min_element > max_diff)\n                max_diff = arr[i] - min_element;\n            if (arr[i] < min_element)\n                min_element = arr[i];\n        }\n        return max_diff;\n    }""}"
252,4.0,2.5,1.0,1.0,2017-05-07 07:55:25.378827,24,197,"{""qId"":1,""reco"":{""rank"":5,""source"":0,""text"":""public static <E extends Comparable<? super E>> E max(ArrayList<E> a) // public static <E extends Comparable<E>> E max(ArrayList<E> a) \n// doesn't work with Student array list\n{\n    E largest = a.get(0);\n    for (int i = 1; i < a.size(); i++) {\n        if (a.get(i).compareTo(largest) > 0) {\n            largest = a.get(i);\n        }\n    }\n    return largest;\n}\n"",""rating"":2},""code"":""  int largestDiff(int arr[], int arr_size) \n    {\n        int max_diff = arr[1] - arr[0];\n        int min_element = arr[0];\n        int i;\n        for (i = 1; i < arr_size; i++) \n        {\n            if (arr[i] - min_element > max_diff)\n                max_diff = arr[i] - min_element;\n            if (arr[i] < min_element)\n                min_element = arr[i];\n        }\n        return max_diff;\n    }""}"
253,4.0,2.5,1.0,1.0,2017-05-07 07:55:42.018917,24,198,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""/**\n      Computes the largest value of an array.\n      @param a the array\n      @return the largest value in a\n   */\npublic static int max(int[] values) {\n    int largest = values[0];\n    for (int i = 1; i < values.length; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":1},""code"":""  int largestDiff(int arr[], int arr_size) \n    {\n        int max_diff = arr[1] - arr[0];\n        int min_element = arr[0];\n        int i;\n        for (i = 1; i < arr_size; i++) \n        {\n            if (arr[i] - min_element > max_diff)\n                max_diff = arr[i] - min_element;\n            if (arr[i] < min_element)\n                min_element = arr[i];\n        }\n        return max_diff;\n    }""}"
254,4.0,2.5,1.0,1.0,2017-05-07 07:56:12.407686,24,199,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""public static int minWasted(int[] items, int itemNum, int capLeft) {\n    int result = 0;\n    if (itemNum >= items.length)\n        result = capLeft;\n    else if (capLeft == 0)\n        result = 0;\n    else {\n        int minWithout = minWasted(items, itemNum + 1, capLeft);\n        if (capLeft <= items[itemNum]) {\n            int minWith = minWasted(items, itemNum + 1, capLeft - items[itemNum]);\n            result = Math.min(minWith, minWithout);\n        } else\n            result = minWithout;\n    }\n    return result;\n}\n"",""rating"":2},""code"":""  int largestDiff(int arr[], int arr_size) \n    {\n        int max_diff = arr[1] - arr[0];\n        int min_element = arr[0];\n        int i;\n        for (i = 1; i < arr_size; i++) \n        {\n            if (arr[i] - min_element > max_diff)\n                max_diff = arr[i] - min_element;\n            if (arr[i] < min_element)\n                min_element = arr[i];\n        }\n        return max_diff;\n    }""}"
255,4.0,2.5,1.0,1.0,2017-05-07 07:56:23.999949,24,200,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""/**\n      Finds the smallest element in a tail range of the array.\n      @param a the array to sort\n      @param from the first position in a to compare\n      @return the position of the smallest element in the\n      range a[from] . . . a[a.length - 1]\n   */\nprivate static int minimumPosition(int[] a, int from) {\n    int minPos = from;\n    for (int i = from + 1; i < a.length; i++) {\n        if (a[i] < a[minPos]) {\n            minPos = i;\n        }\n    }\n    return minPos;\n}\n"",""rating"":1},""code"":""  int largestDiff(int arr[], int arr_size) \n    {\n        int max_diff = arr[1] - arr[0];\n        int min_element = arr[0];\n        int i;\n        for (i = 1; i < arr_size; i++) \n        {\n            if (arr[i] - min_element > max_diff)\n                max_diff = arr[i] - min_element;\n            if (arr[i] < min_element)\n                min_element = arr[i];\n        }\n        return max_diff;\n    }""}"
256,4.0,2.5,1.0,1.0,2017-05-07 07:56:28.246903,24,201,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""/**\n         * Return the largest item that has been entered.\n         * The return value will be -infinity if no numbers have been entered. \n         */\npublic double getMax() {\n    return max;\n}\n"",""rating"":1},""code"":""  int largestDiff(int arr[], int arr_size) \n    {\n        int max_diff = arr[1] - arr[0];\n        int min_element = arr[0];\n        int i;\n        for (i = 1; i < arr_size; i++) \n        {\n            if (arr[i] - min_element > max_diff)\n                max_diff = arr[i] - min_element;\n            if (arr[i] < min_element)\n                min_element = arr[i];\n        }\n        return max_diff;\n    }""}"
257,4.0,2.5,1.0,1.0,2017-05-07 07:56:32.094223,24,202,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""/**\n         * Return the contents of the square in the specified row and column.\n         */\nint pieceAt(int row, int col) {\n    return board[row][col];\n}\n"",""rating"":1},""code"":""  int largestDiff(int arr[], int arr_size) \n    {\n        int max_diff = arr[1] - arr[0];\n        int min_element = arr[0];\n        int i;\n        for (i = 1; i < arr_size; i++) \n        {\n            if (arr[i] - min_element > max_diff)\n                max_diff = arr[i] - min_element;\n            if (arr[i] < min_element)\n                min_element = arr[i];\n        }\n        return max_diff;\n    }""}"
258,4.0,2.5,1.0,1.0,2017-05-07 07:56:36.640785,24,203,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static <E extends Comparable<E>> E max(E[] a) {\n    E largest = a[0];\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":1},""code"":""  int largestDiff(int arr[], int arr_size) \n    {\n        int max_diff = arr[1] - arr[0];\n        int min_element = arr[0];\n        int i;\n        for (i = 1; i < arr_size; i++) \n        {\n            if (arr[i] - min_element > max_diff)\n                max_diff = arr[i] - min_element;\n            if (arr[i] < min_element)\n                min_element = arr[i];\n        }\n        return max_diff;\n    }""}"
259,4.0,2.5,1.0,1.0,2017-05-07 07:56:39.960476,24,204,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""/**\n       * Return the contents of the square in the specified row and column.\n       */\nint pieceAt(int row, int col) {\n    return board[row][col];\n}\n"",""rating"":1},""code"":""  int largestDiff(int arr[], int arr_size) \n    {\n        int max_diff = arr[1] - arr[0];\n        int min_element = arr[0];\n        int i;\n        for (i = 1; i < arr_size; i++) \n        {\n            if (arr[i] - min_element > max_diff)\n                max_diff = arr[i] - min_element;\n            if (arr[i] < min_element)\n                min_element = arr[i];\n        }\n        return max_diff;\n    }""}"
260,4.0,2.5,2.0,1.0,2017-05-07 07:57:17.347967,24,,"  int largestDiff(int arr[], int arr_size) 
    {
        int max_diff = arr[1] - arr[0];
        int min_element = arr[0];
        int i;
        for (i = 1; i < arr_size; i++) 
        {
            if (arr[i] - min_element > max_diff)
                max_diff = arr[i] - min_element;
            if (arr[i] < min_element)
                min_element = arr[i];
        }
        return max_diff;
    }"
261,4.0,2.5,2.0,2.0,2017-05-07 07:57:18.896532,24,,"  int largestDiff(int arr[], int arr_size) 
    {
        int max_diff = arr[1] - arr[0];
        int min_element = arr[0];
        int i;
        for (i = 1; i < arr_size; i++) 
        {
            if (arr[i] - min_element > max_diff)
                max_diff = arr[i] - min_element;
            if (arr[i] < min_element)
                min_element = arr[i];
        }
        return max_diff;
    }"
262,4.0,2.5,2.0,2.0,2017-05-07 07:57:32.240604,24,205,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""Task(int min, int max) {\n    this.min = min;\n    this.max = max;\n}\n"",""rating"":1},""code"":""  int largestDiff(int arr[], int arr_size) \n    {\n        int max_diff = arr[1] - arr[0];\n        int min_element = arr[0];\n        int i;\n        for (i = 1; i < arr_size; i++) \n        {\n            if (arr[i] - min_element > max_diff)\n                max_diff = arr[i] - min_element;\n            if (arr[i] < min_element)\n                min_element = arr[i];\n        }\n        return max_diff;\n    }""}"
263,4.0,2.5,2.0,2.0,2017-05-07 07:57:33.371893,24,206,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""public static <E extends Comparable<? super E>> E max(ArrayList<E> a) // public static <E extends Comparable<E>> E max(ArrayList<E> a) \n// doesn't work with Student array list\n{\n    E largest = a.get(0);\n    for (int i = 1; i < a.size(); i++) {\n        if (a.get(i).compareTo(largest) > 0) {\n            largest = a.get(i);\n        }\n    }\n    return largest;\n}\n"",""rating"":1},""code"":""  int largestDiff(int arr[], int arr_size) \n    {\n        int max_diff = arr[1] - arr[0];\n        int min_element = arr[0];\n        int i;\n        for (i = 1; i < arr_size; i++) \n        {\n            if (arr[i] - min_element > max_diff)\n                max_diff = arr[i] - min_element;\n            if (arr[i] < min_element)\n                min_element = arr[i];\n        }\n        return max_diff;\n    }""}"
264,4.0,2.5,2.0,2.0,2017-05-07 07:57:38.477998,24,207,"{""qId"":1,""reco"":{""rank"":1,""source"":1,""text"":""int countEmptyBlock(int r, int c) {\n    // Find the size of one empty region on the board; recursive routine called by obviousBlockExists.\n    if (blockCheck[r][c] == blockCheckCt || board.getColor(r, c) != null)\n        return 0;\n    int c1 = c, c2 = c;\n    while (c1 > 0 && blockCheck[r][c1 - 1] < blockCheckCt && board.getColor(r, c1 - 1) == null) c1--;\n    while (c2 < cols - 1 && blockCheck[r][c2 + 1] < blockCheckCt && board.getColor(r, c2 + 1) == null) c2++;\n    for (int i = c1; i <= c2; i++) blockCheck[r][i] = blockCheckCt;\n    int ct = c2 - c1 + 1;\n    if (r > 0)\n        for (int i = c1; i <= c2; i++) ct += countEmptyBlock(r - 1, i);\n    if (r < rows - 1)\n        for (int i = c1; i <= c2; i++) ct += countEmptyBlock(r + 1, i);\n    return ct;\n}\n"",""rating"":1},""code"":""  int largestDiff(int arr[], int arr_size) \n    {\n        int max_diff = arr[1] - arr[0];\n        int min_element = arr[0];\n        int i;\n        for (i = 1; i < arr_size; i++) \n        {\n            if (arr[i] - min_element > max_diff)\n                max_diff = arr[i] - min_element;\n            if (arr[i] < min_element)\n                min_element = arr[i];\n        }\n        return max_diff;\n    }""}"
265,4.0,2.5,2.0,2.0,2017-05-07 07:57:42.063430,24,208,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""/**\n         * Return the largest item that has been entered.\n         * The return value will be -infinity if no numbers have been entered. \n         */\npublic double getMax() {\n    return max;\n}\n"",""rating"":1},""code"":""  int largestDiff(int arr[], int arr_size) \n    {\n        int max_diff = arr[1] - arr[0];\n        int min_element = arr[0];\n        int i;\n        for (i = 1; i < arr_size; i++) \n        {\n            if (arr[i] - min_element > max_diff)\n                max_diff = arr[i] - min_element;\n            if (arr[i] < min_element)\n                min_element = arr[i];\n        }\n        return max_diff;\n    }""}"
266,4.0,2.5,2.0,2.0,2017-05-07 07:57:46.652839,24,209,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static <E extends Comparable<E>> E max(E[] a) {\n    E largest = a[0];\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":1},""code"":""  int largestDiff(int arr[], int arr_size) \n    {\n        int max_diff = arr[1] - arr[0];\n        int min_element = arr[0];\n        int i;\n        for (i = 1; i < arr_size; i++) \n        {\n            if (arr[i] - min_element > max_diff)\n                max_diff = arr[i] - min_element;\n            if (arr[i] < min_element)\n                min_element = arr[i];\n        }\n        return max_diff;\n    }""}"
267,4.0,2.5,2.0,2.0,2017-05-07 07:57:48.632975,24,210,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""public static int minWasted(int[] items, int itemNum, int capLeft) {\n    int result = 0;\n    if (itemNum >= items.length)\n        result = capLeft;\n    else if (capLeft == 0)\n        result = 0;\n    else {\n        int minWithout = minWasted(items, itemNum + 1, capLeft);\n        if (capLeft <= items[itemNum]) {\n            int minWith = minWasted(items, itemNum + 1, capLeft - items[itemNum]);\n            result = Math.min(minWith, minWithout);\n        } else\n            result = minWithout;\n    }\n    return result;\n}\n"",""rating"":1},""code"":""  int largestDiff(int arr[], int arr_size) \n    {\n        int max_diff = arr[1] - arr[0];\n        int min_element = arr[0];\n        int i;\n        for (i = 1; i < arr_size; i++) \n        {\n            if (arr[i] - min_element > max_diff)\n                max_diff = arr[i] - min_element;\n            if (arr[i] < min_element)\n                min_element = arr[i];\n        }\n        return max_diff;\n    }""}"
268,4.0,2.5,2.0,2.0,2017-05-07 07:57:52.825216,24,211,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""/**\n     * Count the primes between min and max, inclusive.\n     */\nprivate static int countPrimes(int min, int max) {\n    int count = 0;\n    for (int i = min; i <= max; i++) if (isPrime(i))\n        count++;\n    return count;\n}\n"",""rating"":1},""code"":""  int largestDiff(int arr[], int arr_size) \n    {\n        int max_diff = arr[1] - arr[0];\n        int min_element = arr[0];\n        int i;\n        for (i = 1; i < arr_size; i++) \n        {\n            if (arr[i] - min_element > max_diff)\n                max_diff = arr[i] - min_element;\n            if (arr[i] < min_element)\n                min_element = arr[i];\n        }\n        return max_diff;\n    }""}"
269,4.0,2.5,2.0,2.0,2017-05-07 07:57:59.767926,24,212,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""/**\n      Finds the smallest element in a tail range of the array.\n      @param a the array to sort\n      @param from the first position in a to compare\n      @return the position of the smallest element in the\n      range a[from] . . . a[a.length - 1]\n   */\nprivate static int minimumPosition(int[] a, int from) {\n    int minPos = from;\n    for (int i = from + 1; i < a.length; i++) {\n        if (a[i] < a[minPos]) {\n            minPos = i;\n        }\n    }\n    return minPos;\n}\n"",""rating"":1},""code"":""  int largestDiff(int arr[], int arr_size) \n    {\n        int max_diff = arr[1] - arr[0];\n        int min_element = arr[0];\n        int i;\n        for (i = 1; i < arr_size; i++) \n        {\n            if (arr[i] - min_element > max_diff)\n                max_diff = arr[i] - min_element;\n            if (arr[i] < min_element)\n                min_element = arr[i];\n        }\n        return max_diff;\n    }""}"
270,3.5,1.0,1.0,1.0,2017-05-07 08:17:18.969768,24,," class Person{
        String name;
        int age;
    }
    class Employee extends Person{
        double getSalary(double salary){
        if(salary<10000){
         return (salary*(2/100));
	}	
	elseif(salary >10000){
	return (salary*(5/100));
	}
}
    }
    class BusinessOwner extends Person {
        double getProfit(double profit){
	return (profit*(10/100));
	}
    }
    class Veteran extends Person{
        String veteran_id=0;
	
    }
"
271,3.5,4.0,1.0,1.0,2017-05-07 08:17:19.119838,24,," class Person{
        String name;
        int age;
    }
    class Employee extends Person{
        double getSalary(double salary){
        if(salary<10000){
         return (salary*(2/100));
	}	
	elseif(salary >10000){
	return (salary*(5/100));
	}
}
    }
    class BusinessOwner extends Person {
        double getProfit(double profit){
	return (profit*(10/100));
	}
    }
    class Veteran extends Person{
        String veteran_id=0;
	
    }
"
272,3.5,4.0,2.5,1.0,2017-05-07 08:17:20.352146,24,," class Person{
        String name;
        int age;
    }
    class Employee extends Person{
        double getSalary(double salary){
        if(salary<10000){
         return (salary*(2/100));
	}	
	elseif(salary >10000){
	return (salary*(5/100));
	}
}
    }
    class BusinessOwner extends Person {
        double getProfit(double profit){
	return (profit*(10/100));
	}
    }
    class Veteran extends Person{
        String veteran_id=0;
	
    }
"
273,3.5,4.0,2.5,3.0,2017-05-07 08:17:21.413704,24,," class Person{
        String name;
        int age;
    }
    class Employee extends Person{
        double getSalary(double salary){
        if(salary<10000){
         return (salary*(2/100));
	}	
	elseif(salary >10000){
	return (salary*(5/100));
	}
}
    }
    class BusinessOwner extends Person {
        double getProfit(double profit){
	return (profit*(10/100));
	}
    }
    class Veteran extends Person{
        String veteran_id=0;
	
    }
"
274,3.5,4.0,2.5,2.5,2017-05-07 08:17:51.986819,24,," class Person{
        String name;
        int age;
    }
    class Employee extends Person{
        double getSalary(double salary){
        if(salary<10000){
         return (salary*(2/100));
	}	
	elseif(salary >10000){
	return (salary*(5/100));
	}
}
    }
    class BusinessOwner extends Person {
        double getProfit(double profit){
	return (profit*(10/100));
	}
    }
    class Veteran extends Person{
        String veteran_id=0;
	
    }
"
275,3.0,4.0,2.5,2.5,2017-05-07 08:18:08.966941,24,," class Person{
        String name;
        int age;
    }
    class Employee extends Person{
        double getSalary(double salary){
        if(salary<10000){
         return (salary*(2/100));
	}	
	elseif(salary >10000){
	return (salary*(5/100));
	}
}
    }
    class BusinessOwner extends Person {
        double getProfit(double profit){
	return (profit*(10/100));
	}
    }
    class Veteran extends Person{
        String veteran_id=0;
	
    }
"
276,3.0,3.5,2.5,2.5,2017-05-07 08:18:17.521162,24,," class Person{
        String name;
        int age;
    }
    class Employee extends Person{
        double getSalary(double salary){
        if(salary<10000){
         return (salary*(2/100));
	}	
	elseif(salary >10000){
	return (salary*(5/100));
	}
}
    }
    class BusinessOwner extends Person {
        double getProfit(double profit){
	return (profit*(10/100));
	}
    }
    class Veteran extends Person{
        String veteran_id=0;
	
    }
"
277,3.0,3.5,5.0,2.5,2017-05-07 08:18:19.474986,24,," class Person{
        String name;
        int age;
    }
    class Employee extends Person{
        double getSalary(double salary){
        if(salary<10000){
         return (salary*(2/100));
	}	
	elseif(salary >10000){
	return (salary*(5/100));
	}
}
    }
    class BusinessOwner extends Person {
        double getProfit(double profit){
	return (profit*(10/100));
	}
    }
    class Veteran extends Person{
        String veteran_id=0;
	
    }
"
278,3.0,3.5,3.5,2.5,2017-05-07 08:18:21.224086,24,," class Person{
        String name;
        int age;
    }
    class Employee extends Person{
        double getSalary(double salary){
        if(salary<10000){
         return (salary*(2/100));
	}	
	elseif(salary >10000){
	return (salary*(5/100));
	}
}
    }
    class BusinessOwner extends Person {
        double getProfit(double profit){
	return (profit*(10/100));
	}
    }
    class Veteran extends Person{
        String veteran_id=0;
	
    }
"
279,3.0,3.5,2.5,2.5,2017-05-07 08:18:22.838122,24,," class Person{
        String name;
        int age;
    }
    class Employee extends Person{
        double getSalary(double salary){
        if(salary<10000){
         return (salary*(2/100));
	}	
	elseif(salary >10000){
	return (salary*(5/100));
	}
}
    }
    class BusinessOwner extends Person {
        double getProfit(double profit){
	return (profit*(10/100));
	}
    }
    class Veteran extends Person{
        String veteran_id=0;
	
    }
"
280,2.0,3.5,2.5,2.5,2017-05-07 08:18:32.765256,24,," class Person{
        String name;
        int age;
    }
    class Employee extends Person{
        double getSalary(double salary){
        if(salary<10000){
         return (salary*(2/100));
	}	
	elseif(salary >10000){
	return (salary*(5/100));
	}
}
    }
    class BusinessOwner extends Person {
        double getProfit(double profit){
	return (profit*(10/100));
	}
    }
    class Veteran extends Person{
        String veteran_id=0;
	
    }
"
281,2.0,2.0,2.5,2.5,2017-05-07 08:18:33.933232,24,," class Person{
        String name;
        int age;
    }
    class Employee extends Person{
        double getSalary(double salary){
        if(salary<10000){
         return (salary*(2/100));
	}	
	elseif(salary >10000){
	return (salary*(5/100));
	}
}
    }
    class BusinessOwner extends Person {
        double getProfit(double profit){
	return (profit*(10/100));
	}
    }
    class Veteran extends Person{
        String veteran_id=0;
	
    }
"
282,2.0,2.0,3.0,2.5,2017-05-07 08:18:35.931931,24,," class Person{
        String name;
        int age;
    }
    class Employee extends Person{
        double getSalary(double salary){
        if(salary<10000){
         return (salary*(2/100));
	}	
	elseif(salary >10000){
	return (salary*(5/100));
	}
}
    }
    class BusinessOwner extends Person {
        double getProfit(double profit){
	return (profit*(10/100));
	}
    }
    class Veteran extends Person{
        String veteran_id=0;
	
    }
"
283,5.0,1.0,1.0,1.0,2017-05-07 15:50:14.277660,28,,"public int largestDifference(int[] a) {
  return 10;
}"
284,5.0,1.0,1.0,1.0,2017-05-07 15:50:30.599015,28,213,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""public static <E extends Comparable<? super E>> E max(ArrayList<E> a) // public static <E extends Comparable<E>> E max(ArrayList<E> a) \n// doesn't work with Student array list\n{\n    E largest = a.get(0);\n    for (int i = 1; i < a.size(); i++) {\n        if (a.get(i).compareTo(largest) > 0) {\n            largest = a.get(i);\n        }\n    }\n    return largest;\n}\n"",""rating"":3},""code"":""public int largestDifference(int[] a) {\n  return 10;\n}""}"
285,5.0,1.0,1.0,1.0,2017-05-07 15:50:35.921376,28,214,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""/**\n         * Return the largest item that has been entered.\n         * The return value will be -infinity if no numbers have been entered. \n         */\npublic double getMax() {\n    return max;\n}\n"",""rating"":1},""code"":""public int largestDifference(int[] a) {\n  return 10;\n}""}"
286,5.0,1.0,1.0,1.0,2017-05-07 15:50:41.487214,28,215,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static <E extends Comparable<E>> E max(E[] a) {\n    E largest = a[0];\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":3},""code"":""public int largestDifference(int[] a) {\n  return 10;\n}""}"
287,5.0,1.0,1.0,1.0,2017-05-07 15:52:18.510145,28,216,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""/** Return an element of the array */\npublic int get(int index) throws ArrayIndexOutOfBoundsException {\n    if (index >= size)\n        throw new ArrayIndexOutOfBoundsException(index);\n    else\n        return data[index];\n}\n"",""rating"":1},""code"":""public int largestDifference(int[] a) {\n  //Finds the largest difference between the array elements\n  \n}""}"
288,5.0,1.0,1.0,1.0,2017-05-07 15:52:22.835991,28,217,"{""qId"":1,""reco"":{""rank"":4,""source"":0,""text"":""public static void main(String[] args) {\n    final int LENGTH = 100;\n    double[] values = new double[LENGTH];\n    int currentSize = 0;\n    // Read inputs\n    System.out.println(\""Please enter values, Q to quit:\"");\n    Scanner in = new Scanner(System.in);\n    while (in.hasNextDouble() && currentSize < values.length) {\n        values[currentSize] = in.nextDouble();\n        currentSize++;\n    }\n    // Find the largest value\n    double largest = values[0];\n    for (int i = 1; i < currentSize; i++) {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    }\n    for (int i = 0; i < currentSize; i++) {\n        System.out.print(values[i]);\n        if (values[i] == largest) {\n            System.out.print(\"" <== largest value\"");\n        }\n        System.out.println();\n    }\n}\n       // Print all values, marking the largest\n\n"",""rating"":3},""code"":""public int largestDifference(int[] a) {\n  //Finds the largest difference between the array elements\n  \n}""}"
289,5.0,1.0,1.0,1.0,2017-05-07 15:52:27.801177,28,218,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static <E extends Comparable<E>> E max(E[] a) {\n    E largest = a[0];\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":3},""code"":""public int largestDifference(int[] a) {\n  //Finds the largest difference between the array elements\n  \n}""}"
290,5.0,1.0,1.0,1.0,2017-05-07 15:52:29.860469,28,219,"{""qId"":1,""reco"":{""rank"":4,""source"":1,""text"":""/** Return an element of the array */\npublic int elementAt(int index) throws ArrayIndexOutOfBoundsException {\n    if (index >= size)\n        throw new ArrayIndexOutOfBoundsException(index);\n    else\n        return nums[index];\n}\n"",""rating"":1},""code"":""public int largestDifference(int[] a) {\n  //Finds the largest difference between the array elements\n  \n}""}"
291,5.0,1.0,5.0,1.0,2017-05-07 15:53:38.227778,28,,"public int largestDifference(int[] a) {
  //Finds the largest difference between the array elements
  int smallest = Integer.Maximum;
  int largest = Integer.Minimum;
  for(int i=0; i< a.length; i++) {
   if(a[i]) < smallest) {
     smallest = a[i];
   } 
    if(a[i] > largest) {
      largest = a[i];
    }
  }
  return largest - smallest;
}"
292,5.0,1.0,5.0,5.0,2017-05-07 15:53:41.294652,28,,"public int largestDifference(int[] a) {
  //Finds the largest difference between the array elements
  int smallest = Integer.Maximum;
  int largest = Integer.Minimum;
  for(int i=0; i< a.length; i++) {
   if(a[i]) < smallest) {
     smallest = a[i];
   } 
    if(a[i] > largest) {
      largest = a[i];
    }
  }
  return largest - smallest;
}"
293,2.5,1.0,5.0,5.0,2017-05-07 15:54:01.797476,28,,"public int largestDifference(int[] a) {
  //Finds the largest difference between the array elements
  int smallest = Integer.Maximum;
  int largest = Integer.Minimum;
  for(int i=0; i< a.length; i++) {
   if(a[i]) < smallest) {
     smallest = a[i];
   } 
    if(a[i] > largest) {
      largest = a[i];
    }
  }
  return largest - smallest;
}"
294,2.5,1.0,5.0,5.0,2017-05-07 15:54:08.941981,28,220,"{""qId"":1,""reco"":{""rank"":3,""source"":0,""text"":""public static <E extends Comparable<? super E>> E max(ArrayList<E> a) // public static <E extends Comparable<E>> E max(ArrayList<E> a) \n// doesn't work with Student array list\n{\n    E largest = a.get(0);\n    for (int i = 1; i < a.size(); i++) {\n        if (a.get(i).compareTo(largest) > 0) {\n            largest = a.get(i);\n        }\n    }\n    return largest;\n}\n"",""rating"":2},""code"":""public int largestDifference(int[] a) {\n  //Finds the largest difference between the array elements\n  int smallest = Integer.Maximum;\n  int largest = Integer.Minimum;\n  for(int i=0; i< a.length; i++) {\n   if(a[i]) < smallest) {\n     smallest = a[i];\n   } \n    if(a[i] > largest) {\n      largest = a[i];\n    }\n  }\n  return largest - smallest;\n}""}"
295,2.5,1.0,5.0,5.0,2017-05-07 15:54:18.790084,28,221,"{""qId"":1,""reco"":{""rank"":2,""source"":0,""text"":""public static void main(String[] args) {\n    ArrayList<Double> values = new ArrayList<Double>();\n    // Read inputs\n    System.out.println(\""Please enter values, Q to quit:\"");\n    Scanner in = new Scanner(System.in);\n    while (in.hasNextDouble()) {\n        values.add(in.nextDouble());\n    }\n    // Find the largest value\n    double largest = values.get(0);\n    for (int i = 1; i < values.size(); i++) {\n        if (values.get(i) > largest) {\n            largest = values.get(i);\n        }\n    }\n    for (double element : values) {\n        System.out.print(element);\n        if (element == largest) {\n            System.out.print(\"" <== largest value\"");\n        }\n        System.out.println();\n    }\n}\n       // Print all values, marking the largest\n\n"",""rating"":3},""code"":""public int largestDifference(int[] a) {\n  //Finds the largest difference between the array elements\n  int smallest = Integer.Maximum;\n  int largest = Integer.Minimum;\n  for(int i=0; i< a.length; i++) {\n   if(a[i]) < smallest) {\n     smallest = a[i];\n   } \n    if(a[i] > largest) {\n      largest = a[i];\n    }\n  }\n  return largest - smallest;\n}""}"
296,2.5,1.0,5.0,5.0,2017-05-07 15:54:25.864030,28,222,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""// pre: list != null, list.length > 0\n// post: return index of minimum element of array\npublic static int findMin(int[] list) {\n    assert list != null && list.length > 0 : \""failed precondition\"";\n    int indexOfMin = 0;\n    for (int i = 1; i < list.length; i++) {\n        if (list[i] < list[indexOfMin]) {\n            indexOfMin = i;\n        }\n    }\n    return indexOfMin;\n}\n"",""rating"":1},""code"":""public int largestDifference(int[] a) {\n  //Finds the largest difference between the array elements\n  int smallest = Integer.Maximum;\n  int largest = Integer.Minimum;\n  for(int i=0; i< a.length; i++) {\n   if(a[i]) < smallest) {\n     smallest = a[i];\n   } \n    if(a[i] > largest) {\n      largest = a[i];\n    }\n  }\n  return largest - smallest;\n}""}"
297,2.5,5.0,5.0,5.0,2017-05-07 15:54:30.988597,28,,"public int largestDifference(int[] a) {
  //Finds the largest difference between the array elements
  int smallest = Integer.Maximum;
  int largest = Integer.Minimum;
  for(int i=0; i< a.length; i++) {
   if(a[i]) < smallest) {
     smallest = a[i];
   } 
    if(a[i] > largest) {
      largest = a[i];
    }
  }
  return largest - smallest;
}"
298,5.0,5.0,5.0,5.0,2017-05-07 15:54:32.645196,28,,"public int largestDifference(int[] a) {
  //Finds the largest difference between the array elements
  int smallest = Integer.Maximum;
  int largest = Integer.Minimum;
  for(int i=0; i< a.length; i++) {
   if(a[i]) < smallest) {
     smallest = a[i];
   } 
    if(a[i] > largest) {
      largest = a[i];
    }
  }
  return largest - smallest;
}"
299,5.0,5.0,5.0,5.0,2017-05-07 15:56:00.256249,28,223,"{""qId"":1,""reco"":{""rank"":5,""source"":1,""text"":""/** Return an element of the array */\npublic int get(int index) throws ArrayIndexOutOfBoundsException {\n    if (index >= size)\n        throw new ArrayIndexOutOfBoundsException(index);\n    else\n        return data[index];\n}\n"",""rating"":1},""code"":""//Finds the largest difference between the array elements\npublic int largestDifference(int[] a) {\n  //Finds the largest difference between the array elements\n  int smallest = Integer.Maximum;\n  int largest = Integer.Minimum;\n  //Finds the largest and smallest number in the array\n  for(int i=0; i< a.length; i++) {\n   if(a[i]) < smallest) {\n     smallest = a[i];\n   } \n    if(a[i] > largest) {\n      largest = a[i];\n    }\n  }\n  return largest - smallest;\n}""}"
300,5.0,5.0,5.0,5.0,2017-05-07 15:56:11.322739,28,224,"{""qId"":1,""reco"":{""rank"":3,""source"":1,""text"":""/**\n      Gets the position of the minimum score.\n      @return the position of the smallest element of values, or -1\n      if there are no scores.\n   */\npublic int minimumPosition() {\n    if (scoresSize == 0) {\n        return -1;\n    }\n    int smallestPosition = 0;\n    for (int i = 1; i < scoresSize; i++) {\n        if (scores[i] < scores[smallestPosition]) {\n            smallestPosition = i;\n        }\n    }\n    return smallestPosition;\n}\n"",""rating"":3},""code"":""//Finds the largest difference between the array elements\npublic int largestDifference(int[] a) {\n  //Finds the largest difference between the array elements\n  int smallest = Integer.Maximum;\n  int largest = Integer.Minimum;\n  //Finds the largest and smallest number in the array\n  for(int i=0; i< a.length; i++) {\n   if(a[i]) < smallest) {\n     smallest = a[i];\n   } \n    if(a[i] > largest) {\n      largest = a[i];\n    }\n  }\n  return largest - smallest;\n}""}"
301,5.0,5.0,5.0,5.0,2017-05-07 15:56:15.370118,28,225,"{""qId"":1,""reco"":{""rank"":1,""source"":0,""text"":""public static <E extends Comparable<E>> E max(E[] a) {\n    E largest = a[0];\n    for (int i = 1; i < a.length; i++) {\n        if (a[i].compareTo(largest) > 0) {\n            largest = a[i];\n        }\n    }\n    return largest;\n}\n"",""rating"":3},""code"":""//Finds the largest difference between the array elements\npublic int largestDifference(int[] a) {\n  //Finds the largest difference between the array elements\n  int smallest = Integer.Maximum;\n  int largest = Integer.Minimum;\n  //Finds the largest and smallest number in the array\n  for(int i=0; i< a.length; i++) {\n   if(a[i]) < smallest) {\n     smallest = a[i];\n   } \n    if(a[i] > largest) {\n      largest = a[i];\n    }\n  }\n  return largest - smallest;\n}""}"
302,5.0,5.0,5.0,5.0,2017-05-07 15:56:22.897177,28,226,"{""qId"":1,""reco"":{""rank"":2,""source"":1,""text"":""/**\n      Gets the position of the minimum score.\n      @return the position of the smallest element of values, or -1\n      if there are no scores.\n   */\npublic int minimumPosition() {\n    if (scores.size() == 0) {\n        return -1;\n    }\n    int smallestPosition = 0;\n    for (int i = 1; i < scores.size(); i++) {\n        if (scores.get(i) < scores.get(smallestPosition)) {\n            smallestPosition = i;\n        }\n    }\n    return smallestPosition;\n}\n"",""rating"":2},""code"":""//Finds the largest difference between the array elements\npublic int largestDifference(int[] a) {\n  //Finds the largest difference between the array elements\n  int smallest = Integer.Maximum;\n  int largest = Integer.Minimum;\n  //Finds the largest and smallest number in the array\n  for(int i=0; i< a.length; i++) {\n   if(a[i]) < smallest) {\n     smallest = a[i];\n   } \n    if(a[i] > largest) {\n      largest = a[i];\n    }\n  }\n  return largest - smallest;\n}""}"
303,1.0,1.0,1.0,1.0,2017-05-07 15:57:33.959850,28,227,"{""qId"":2,""reco"":{""rank"":3,""source"":0,""text"":""public static void main(String[] args) {\n    double price = 9.95;\n    double taxRate = 8.25;\n    double tax = Financial.percentOf(price, taxRate);\n    System.out.printf(\""Tax: %.2f\\n\"", tax);\n}\n"",""rating"":2},""code"":""public int computeTax(Person person) {\n  \n}""}"
304,1.0,1.0,1.0,1.0,2017-05-07 15:57:51.862520,28,228,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""public static void main(String[] args) {\n    String input = JOptionPane.showInputDialog(\""Enter price:\"");\n    double price = Double.parseDouble(input);\n    final double TAX_RATE = 8.5;\n    price = price * (1 + TAX_RATE / 100);\n    JOptionPane.showMessageDialog(null, \""Price after tax: \"" + price);\n}\n"",""rating"":1},""code"":""public int computeTax(Person person) {\n  \n}""}"
305,2.5,1.0,1.0,1.0,2017-05-07 15:58:20.494052,28,,"public int computeTax(Person person) {
  //Computes tax for a person based on the instance of the object
  
 
}"
306,2.5,1.0,1.0,5.0,2017-05-07 15:58:22.241636,28,,"public int computeTax(Person person) {
  //Computes tax for a person based on the instance of the object
  
 
}"
307,2.5,1.0,1.0,5.0,2017-05-07 16:00:00.709622,28,229,"{""qId"":2,""reco"":{""rank"":1,""source"":1,""text"":""/**\n      Processes the sales tax due.\n      @return the sales tax due\n   */\npublic double getSalesTax() {\n    return taxablePurchase * taxRate / 100;\n}\n"",""rating"":2},""code"":""public double computeTax(Person person) {\n  //Computes tax for a person based on the instance of the object\n  if (person instanceof BusinessOwner) {\n    BusinessOwner businessOwner = new BusinessOwner();\n    return businessOwner.getProfit() * .1;\n  }\n \n}""}"
308,2.5,1.0,1.0,5.0,2017-05-07 16:00:07.746939,28,230,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""public double computeTax(Person person) {\n  //Computes tax for a person based on the instance of the object\n  if (person instanceof BusinessOwner) {\n    BusinessOwner businessOwner = new BusinessOwner();\n    return businessOwner.getProfit() * .1;\n  }\n \n}""}"
309,2.5,1.0,1.0,5.0,2017-05-07 16:00:08.545999,28,231,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", targetDate = \""Jan 1, 2012\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""public double computeTax(Person person) {\n  //Computes tax for a person based on the instance of the object\n  if (person instanceof BusinessOwner) {\n    BusinessOwner businessOwner = new BusinessOwner();\n    return businessOwner.getProfit() * .1;\n  }\n \n}""}"
310,2.5,1.0,5.0,5.0,2017-05-07 16:00:17.263879,28,,"public double computeTax(Person person) {
  //Computes tax for a person based on the instance of the object
  if (person instanceof BusinessOwner) {
    BusinessOwner businessOwner = new BusinessOwner();
    return businessOwner.getProfit() * .1;
  }
 
}"
311,2.5,5.0,5.0,5.0,2017-05-07 16:00:18.309791,28,,"public double computeTax(Person person) {
  //Computes tax for a person based on the instance of the object
  if (person instanceof BusinessOwner) {
    BusinessOwner businessOwner = new BusinessOwner();
    return businessOwner.getProfit() * .1;
  }
 
}"
312,2.5,5.0,5.0,5.0,2017-05-07 16:00:24.350658,28,232,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""public double computeTax(Person person) {\n  //Computes tax for a person based on the instance of the object\n  if (person instanceof BusinessOwner) {\n    BusinessOwner businessOwner = new BusinessOwner();\n    return businessOwner.getProfit() * .1;\n  }\n \n}""}"
313,2.5,5.0,5.0,5.0,2017-05-07 16:00:29.241164,28,233,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", targetDate = \""Jan 1, 2012\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""public double computeTax(Person person) {\n  //Computes tax for a person based on the instance of the object\n  if (person instanceof BusinessOwner) {\n    BusinessOwner businessOwner = new BusinessOwner();\n    return businessOwner.getProfit() * .1;\n  }\n \n}""}"
314,2.5,5.0,5.0,5.0,2017-05-07 16:00:30.623688,28,234,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""public double computeTax(Person person) {\n  //Computes tax for a person based on the instance of the object\n  if (person instanceof BusinessOwner) {\n    BusinessOwner businessOwner = new BusinessOwner();\n    return businessOwner.getProfit() * .1;\n  }\n \n}""}"
315,2.5,5.0,5.0,5.0,2017-05-07 16:00:37.265758,28,235,"{""qId"":2,""reco"":{""rank"":4,""source"":1,""text"":""public double getTax() {\n    double tax1 = 0;\n    double tax2 = 0;\n    if (status == SINGLE) {\n        if (income <= RATE1_SINGLE_LIMIT) {\n            tax1 = RATE1 * income;\n        } else {\n            tax1 = RATE1 * RATE1_SINGLE_LIMIT;\n            tax2 = RATE2 * (income - RATE1_SINGLE_LIMIT);\n        }\n    } else {\n        if (income <= RATE1_MARRIED_LIMIT) {\n            tax1 = RATE1 * income;\n        } else {\n            tax1 = RATE1 * RATE1_MARRIED_LIMIT;\n            tax2 = RATE2 * (income - RATE1_MARRIED_LIMIT);\n        }\n    }\n    return tax1 + tax2;\n}\n"",""rating"":3},""code"":""public double computeTax(Person person) {\n  //Computes tax for a person based on the instance of the object\n  if (person instanceof BusinessOwner) {\n    BusinessOwner businessOwner = new BusinessOwner();\n    return businessOwner.getProfit() * .1;\n  }\n \n}""}"
316,5.0,5.0,5.0,5.0,2017-05-07 16:01:12.990656,28,,"public double computeTax(Person person) {
  //Computes tax for a person based on the instance of the object
  if (person instanceof BusinessOwner) {
    BusinessOwner businessOwner = new BusinessOwner();
    return businessOwner.getProfit() * .1;
  }
  if(person instanceof Veteran) {
    return 0;
  }
 
}"
317,5.0,5.0,5.0,5.0,2017-05-07 16:01:22.110445,28,236,"{""qId"":2,""reco"":{""rank"":5,""source"":1,""text"":""public double getTax() {\n    double tax1 = 0;\n    double tax2 = 0;\n    if (status == SINGLE) {\n        if (income <= RATE1_SINGLE_LIMIT) {\n            tax1 = RATE1 * income;\n        } else {\n            tax1 = RATE1 * RATE1_SINGLE_LIMIT;\n            tax2 = RATE2 * (income - RATE1_SINGLE_LIMIT);\n        }\n    } else {\n        if (income <= RATE1_MARRIED_LIMIT) {\n            tax1 = RATE1 * income;\n        } else {\n            tax1 = RATE1 * RATE1_MARRIED_LIMIT;\n            tax2 = RATE2 * (income - RATE1_MARRIED_LIMIT);\n        }\n    }\n    return tax1 + tax2;\n}\n"",""rating"":3},""code"":""public double computeTax(Person person) {\n  //Computes tax for a person based on the instance of the object\n  if (person instanceof BusinessOwner) {\n    BusinessOwner businessOwner = new BusinessOwner();\n    return businessOwner.getProfit() * .1;\n  }\n  if(person instanceof Veteran) {\n    return 0;\n  }\n \n}""}"
318,5.0,5.0,5.0,5.0,2017-05-07 16:01:23.863998,28,237,"{""qId"":2,""reco"":{""rank"":2,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""public double computeTax(Person person) {\n  //Computes tax for a person based on the instance of the object\n  if (person instanceof BusinessOwner) {\n    BusinessOwner businessOwner = new BusinessOwner();\n    return businessOwner.getProfit() * .1;\n  }\n  if(person instanceof Veteran) {\n    return 0;\n  }\n \n}""}"
319,5.0,5.0,5.0,5.0,2017-05-07 16:01:28.205064,28,238,"{""qId"":2,""reco"":{""rank"":1,""source"":0,""text"":""@WorkInProgress\n@Task(description = \""Implement tax computations\"", targetDate = \""Jan 1, 2012\"", estimatedHours = 50, additionalNote = \""This implementation is critical for the final launch\"")\npublic static float ComputeTax(float amount, float rate) {\n    return 0;\n}\n"",""rating"":1},""code"":""public double computeTax(Person person) {\n  //Computes tax for a person based on the instance of the object\n  if (person instanceof BusinessOwner) {\n    BusinessOwner businessOwner = new BusinessOwner();\n    return businessOwner.getProfit() * .1;\n  }\n  if(person instanceof Veteran) {\n    return 0;\n  }\n \n}""}"
