,question,source,rank,rating,code,username,voteid,word_count,gp,size
0,2,0,5,1,"public double calculateTax(Person p){
  
}",2822998,1,5,"2822998public double calculateTax(Person p){
  
}",1
1,2,0,4,3,"public double calculateTax(Person p){
  //Calculates the tax based on the persons occupation
}",2822998,2,13,"2822998public double calculateTax(Person p){
  //Calculates the tax based on the persons occupation
}",3
2,2,1,1,3,"public double calculateTax(Person p){
  //Calculates the tax based on the persons occupation
}",2822998,3,13,"2822998public double calculateTax(Person p){
  //Calculates the tax based on the persons occupation
}",3
3,2,0,2,3,"public double calculateTax(Person p){
  //Calculates the tax based on the persons occupation
}",2822998,4,13,"2822998public double calculateTax(Person p){
  //Calculates the tax based on the persons occupation
}",3
4,2,0,4,3,"public double calculateTax(Person p){
  //Get the class of the Person object
  //Calculates the tax based on that person's occupation
}",2822998,5,20,"2822998public double calculateTax(Person p){
  //Get the class of the Person object
  //Calculates the tax based on that person's occupation
}",1
5,2,1,3,2,"public double calculateTax(Person p){
  //Find the class of the object
  //Calculates the tax based on that person's occupation
  if(p.class==""Employee""){
    if(p.getSalary()<10000){
      return p.getSalary()*0.02;
    }else{
      return p.getSalary()*0.05;
    }
  }else if(p.class==""BusiessOwner""){
    return p.getProfit()*0.1;
  }
  return 0.0;
}",2822998,6,34,"2822998public double calculateTax(Person p){
  //Find the class of the object
  //Calculates the tax based on that person's occupation
  if(p.class==""Employee""){
    if(p.getSalary()<10000){
      return p.getSalary()*0.02;
    }else{
      return p.getSalary()*0.05;
    }
  }else if(p.class==""BusiessOwner""){
    return p.getProfit()*0.1;
  }
  return 0.0;
}",1
6,2,0,5,3,"public double calculateTax(Person p){
  //function for calculating tax based on occupation 

  if(p.class==""Employee""){
    if(p.getSalary()<10000){
      return p.getSalary()*0.02;
    }else{
      return p.getSalary()*0.05;
    }
  }else if(p.class==""BusiessOwner""){
    return p.getProfit()*0.1;
  }
  return 0.0;
}",2822998,7,27,"2822998public double calculateTax(Person p){
  //function for calculating tax based on occupation 

  if(p.class==""Employee""){
    if(p.getSalary()<10000){
      return p.getSalary()*0.02;
    }else{
      return p.getSalary()*0.05;
    }
  }else if(p.class==""BusiessOwner""){
    return p.getProfit()*0.1;
  }
  return 0.0;
}",2
7,2,0,4,3,"public double calculateTax(Person p){
  //function for calculating tax based on occupation 

  if(p.class==""Employee""){
    if(p.getSalary()<10000){
      return p.getSalary()*0.02;
    }else{
      return p.getSalary()*0.05;
    }
  }else if(p.class==""BusiessOwner""){
    return p.getProfit()*0.1;
  }
  return 0.0;
}",2822998,8,27,"2822998public double calculateTax(Person p){
  //function for calculating tax based on occupation 

  if(p.class==""Employee""){
    if(p.getSalary()<10000){
      return p.getSalary()*0.02;
    }else{
      return p.getSalary()*0.05;
    }
  }else if(p.class==""BusiessOwner""){
    return p.getProfit()*0.1;
  }
  return 0.0;
}",2
8,2,0,5,3,"public double calculateTax(Person p){
  //instance Of method
  if(p.class==""Employee""){
    if(p.getSalary()<10000){
      return p.getSalary()*0.02;
    }else{
      return p.getSalary()*0.05;
    }
  }else if(p.class==""BusiessOwner""){
    return p.getProfit()*0.1;
  }
  return 0.0;
}",2822998,9,23,"2822998public double calculateTax(Person p){
  //instance Of method
  if(p.class==""Employee""){
    if(p.getSalary()<10000){
      return p.getSalary()*0.02;
    }else{
      return p.getSalary()*0.05;
    }
  }else if(p.class==""BusiessOwner""){
    return p.getProfit()*0.1;
  }
  return 0.0;
}",1
9,2,0,4,3,"public double calculateTax(Person p){
  //instance Of method
  if(p instanceof Employee){
    Employee e = (Employee)p
    if(p.getSalary()<10000){
      return p.getSalary()*0.02;
    }else{
      return p.getSalary()*0.05;
    }
  }else if(p.class==""BusiessOwner""){
    return p.getProfit()*0.1;
  }
  return 0.0;
}",2822998,10,29,"2822998public double calculateTax(Person p){
  //instance Of method
  if(p instanceof Employee){
    Employee e = (Employee)p
    if(p.getSalary()<10000){
      return p.getSalary()*0.02;
    }else{
      return p.getSalary()*0.05;
    }
  }else if(p.class==""BusiessOwner""){
    return p.getProfit()*0.1;
  }
  return 0.0;
}",1
10,2,1,4,3,"public double calculateTax(Person p){
  //instance Of method
  
  if(p instanceof Employee){
    Employee e = (Employee)p
    if(e.getSalary()<10000){
      return e.getSalary()*0.02;
    }else{
      return e.getSalary()*0.05;
    }
  }else if(p instanceof BusinessOwner){
    BusinessOwner b = (BusinessOwner)p;
    return b.getProfit()*0.1;
  }
  return 0.0;
}",2822998,11,35,"2822998public double calculateTax(Person p){
  //instance Of method
  
  if(p instanceof Employee){
    Employee e = (Employee)p
    if(e.getSalary()<10000){
      return e.getSalary()*0.02;
    }else{
      return e.getSalary()*0.05;
    }
  }else if(p instanceof BusinessOwner){
    BusinessOwner b = (BusinessOwner)p;
    return b.getProfit()*0.1;
  }
  return 0.0;
}",5
11,2,0,4,1,"public double calculateTax(Person p){
  //instance Of method
  
  if(p instanceof Employee){
    Employee e = (Employee)p
    if(e.getSalary()<10000){
      return e.getSalary()*0.02;
    }else{
      return e.getSalary()*0.05;
    }
  }else if(p instanceof BusinessOwner){
    BusinessOwner b = (BusinessOwner)p;
    return b.getProfit()*0.1;
  }
  return 0.0;
}",2822998,12,35,"2822998public double calculateTax(Person p){
  //instance Of method
  
  if(p instanceof Employee){
    Employee e = (Employee)p
    if(e.getSalary()<10000){
      return e.getSalary()*0.02;
    }else{
      return e.getSalary()*0.05;
    }
  }else if(p instanceof BusinessOwner){
    BusinessOwner b = (BusinessOwner)p;
    return b.getProfit()*0.1;
  }
  return 0.0;
}",5
12,2,0,1,1,"public double calculateTax(Person p){
  //instance Of method
  
  if(p instanceof Employee){
    Employee e = (Employee)p
    if(e.getSalary()<10000){
      return e.getSalary()*0.02;
    }else{
      return e.getSalary()*0.05;
    }
  }else if(p instanceof BusinessOwner){
    BusinessOwner b = (BusinessOwner)p;
    return b.getProfit()*0.1;
  }
  return 0.0;
}",2822998,13,35,"2822998public double calculateTax(Person p){
  //instance Of method
  
  if(p instanceof Employee){
    Employee e = (Employee)p
    if(e.getSalary()<10000){
      return e.getSalary()*0.02;
    }else{
      return e.getSalary()*0.05;
    }
  }else if(p instanceof BusinessOwner){
    BusinessOwner b = (BusinessOwner)p;
    return b.getProfit()*0.1;
  }
  return 0.0;
}",5
13,2,0,2,1,"public double calculateTax(Person p){
  //instance Of method
  
  if(p instanceof Employee){
    Employee e = (Employee)p
    if(e.getSalary()<10000){
      return e.getSalary()*0.02;
    }else{
      return e.getSalary()*0.05;
    }
  }else if(p instanceof BusinessOwner){
    BusinessOwner b = (BusinessOwner)p;
    return b.getProfit()*0.1;
  }
  return 0.0;
}",2822998,14,35,"2822998public double calculateTax(Person p){
  //instance Of method
  
  if(p instanceof Employee){
    Employee e = (Employee)p
    if(e.getSalary()<10000){
      return e.getSalary()*0.02;
    }else{
      return e.getSalary()*0.05;
    }
  }else if(p instanceof BusinessOwner){
    BusinessOwner b = (BusinessOwner)p;
    return b.getProfit()*0.1;
  }
  return 0.0;
}",5
14,2,1,2,1,"public double calculateTax(Person p){
  //instance Of method
  
  if(p instanceof Employee){
    Employee e = (Employee)p
    if(e.getSalary()<10000){
      return e.getSalary()*0.02;
    }else{
      return e.getSalary()*0.05;
    }
  }else if(p instanceof BusinessOwner){
    BusinessOwner b = (BusinessOwner)p;
    return b.getProfit()*0.1;
  }
  return 0.0;
}",2822998,15,35,"2822998public double calculateTax(Person p){
  //instance Of method
  
  if(p instanceof Employee){
    Employee e = (Employee)p
    if(e.getSalary()<10000){
      return e.getSalary()*0.02;
    }else{
      return e.getSalary()*0.05;
    }
  }else if(p instanceof BusinessOwner){
    BusinessOwner b = (BusinessOwner)p;
    return b.getProfit()*0.1;
  }
  return 0.0;
}",5
15,1,0,3,3,"public int getMaxDifference(int input[]){

}",2822998,16,5,"2822998public int getMaxDifference(int input[]){

}",1
16,1,1,3,3,"public int getMaxDifference(int input[]){
//function to calculate maximum difference in array
}",2822998,17,12,"2822998public int getMaxDifference(int input[]){
//function to calculate maximum difference in array
}",2
17,1,0,2,3,"public int getMaxDifference(int input[]){
//function to calculate maximum difference in array
}",2822998,18,12,"2822998public int getMaxDifference(int input[]){
//function to calculate maximum difference in array
}",2
18,1,1,3,3,"public int getMaxDifference(int input[]){
// difference of maximum and minimum of the array
  int min=Integer.MAX_VALUE;
  int max = Integer.MIN_VALUE;
  for(int i=0;i<input.length;i++){
    
  }
}",2822998,19,23,"2822998public int getMaxDifference(int input[]){
// difference of maximum and minimum of the array
  int min=Integer.MAX_VALUE;
  int max = Integer.MIN_VALUE;
  for(int i=0;i<input.length;i++){
    
  }
}",2
19,1,0,5,4,"public int getMaxDifference(int input[]){
// difference of maximum and minimum of the array
  int min=Integer.MAX_VALUE;
  int max = Integer.MIN_VALUE;
  for(int i=0;i<input.length;i++){
    
  }
}",2822998,20,23,"2822998public int getMaxDifference(int input[]){
// difference of maximum and minimum of the array
  int min=Integer.MAX_VALUE;
  int max = Integer.MIN_VALUE;
  for(int i=0;i<input.length;i++){
    
  }
}",2
20,1,0,5,2,"public int getMaxDifference(int input[]){
// difference of maximum and minimum of the array
  int min=Integer.MAX_VALUE;
  int max = Integer.MIN_VALUE;
  for(int i=0;i<input.length;i++){
    if(input[i]>max)
      max = input[i];
    else if(input[i]<min)
      min = input[i];
  }
  return max-min;
}",2822998,21,34,"2822998public int getMaxDifference(int input[]){
// difference of maximum and minimum of the array
  int min=Integer.MAX_VALUE;
  int max = Integer.MIN_VALUE;
  for(int i=0;i<input.length;i++){
    if(input[i]>max)
      max = input[i];
    else if(input[i]<min)
      min = input[i];
  }
  return max-min;
}",9
21,1,0,5,2,"public int getMaxDifference(int input[]){
// difference of maximum and minimum of the array
  int min=Integer.MAX_VALUE;
  int max = Integer.MIN_VALUE;
  for(int i=0;i<input.length;i++){
    if(input[i]>max)
      max = input[i];
    else if(input[i]<min)
      min = input[i];
  }
  return max-min;
}",2822998,22,34,"2822998public int getMaxDifference(int input[]){
// difference of maximum and minimum of the array
  int min=Integer.MAX_VALUE;
  int max = Integer.MIN_VALUE;
  for(int i=0;i<input.length;i++){
    if(input[i]>max)
      max = input[i];
    else if(input[i]<min)
      min = input[i];
  }
  return max-min;
}",9
22,1,0,5,1,"public int getMaxDifference(int input[]){
// difference of maximum and minimum of the array
  int min=Integer.MAX_VALUE;
  int max = Integer.MIN_VALUE;
  for(int i=0;i<input.length;i++){
    if(input[i]>max)
      max = input[i];
    else if(input[i]<min)
      min = input[i];
  }
  return max-min;
}",2822998,23,34,"2822998public int getMaxDifference(int input[]){
// difference of maximum and minimum of the array
  int min=Integer.MAX_VALUE;
  int max = Integer.MIN_VALUE;
  for(int i=0;i<input.length;i++){
    if(input[i]>max)
      max = input[i];
    else if(input[i]<min)
      min = input[i];
  }
  return max-min;
}",9
23,1,1,3,1,"public int getMaxDifference(int input[]){
// difference of maximum and minimum of the array
  int min=Integer.MAX_VALUE;
  int max = Integer.MIN_VALUE;
  for(int i=0;i<input.length;i++){
    if(input[i]>max)
      max = input[i];
    else if(input[i]<min)
      min = input[i];
  }
  return max-min;
}",2822998,24,34,"2822998public int getMaxDifference(int input[]){
// difference of maximum and minimum of the array
  int min=Integer.MAX_VALUE;
  int max = Integer.MIN_VALUE;
  for(int i=0;i<input.length;i++){
    if(input[i]>max)
      max = input[i];
    else if(input[i]<min)
      min = input[i];
  }
  return max-min;
}",9
24,1,0,1,1,"public int getMaxDifference(int input[]){
// difference of maximum and minimum of the array
  int min=Integer.MAX_VALUE;
  int max = Integer.MIN_VALUE;
  for(int i=0;i<input.length;i++){
    if(input[i]>max)
      max = input[i];
    else if(input[i]<min)
      min = input[i];
  }
  return max-min;
}",2822998,25,34,"2822998public int getMaxDifference(int input[]){
// difference of maximum and minimum of the array
  int min=Integer.MAX_VALUE;
  int max = Integer.MIN_VALUE;
  for(int i=0;i<input.length;i++){
    if(input[i]>max)
      max = input[i];
    else if(input[i]<min)
      min = input[i];
  }
  return max-min;
}",9
25,1,1,4,1,"public int getMaxDifference(int input[]){
// difference of maximum and minimum of the array
  int min=Integer.MAX_VALUE;
  int max = Integer.MIN_VALUE;
  for(int i=0;i<input.length;i++){
    if(input[i]>max)
      max = input[i];
    else if(input[i]<min)
      min = input[i];
  }
  return max-min;
}",2822998,26,34,"2822998public int getMaxDifference(int input[]){
// difference of maximum and minimum of the array
  int min=Integer.MAX_VALUE;
  int max = Integer.MIN_VALUE;
  for(int i=0;i<input.length;i++){
    if(input[i]>max)
      max = input[i];
    else if(input[i]<min)
      min = input[i];
  }
  return max-min;
}",9
26,1,0,5,2,"public int getMaxDifference(int input[]){
// difference of maximum and minimum of the array
  int min=Integer.MAX_VALUE;
  int max = Integer.MIN_VALUE;
  for(int i=0;i<input.length;i++){
    if(input[i]>max)
      max = input[i];
    else if(input[i]<min)
      min = input[i];
  }
  return max-min;
}",2822998,27,34,"2822998public int getMaxDifference(int input[]){
// difference of maximum and minimum of the array
  int min=Integer.MAX_VALUE;
  int max = Integer.MIN_VALUE;
  for(int i=0;i<input.length;i++){
    if(input[i]>max)
      max = input[i];
    else if(input[i]<min)
      min = input[i];
  }
  return max-min;
}",9
27,1,1,3,1,"public int getMaxDifference(int input[]){
// difference of maximum and minimum of the array
  int min=Integer.MAX_VALUE;
  int max = Integer.MIN_VALUE;
  for(int i=0;i<input.length;i++){
    if(input[i]>max)
      max = input[i];
    else if(input[i]<min)
      min = input[i];
  }
  return max-min;
}",2822998,28,34,"2822998public int getMaxDifference(int input[]){
// difference of maximum and minimum of the array
  int min=Integer.MAX_VALUE;
  int max = Integer.MIN_VALUE;
  for(int i=0;i<input.length;i++){
    if(input[i]>max)
      max = input[i];
    else if(input[i]<min)
      min = input[i];
  }
  return max-min;
}",9
28,1,0,4,1,"public int getMaxDifference(int input[]){
// difference of maximum and minimum of the array
  int min=Integer.MAX_VALUE;
  int max = Integer.MIN_VALUE;
  for(int i=0;i<input.length;i++){
    if(input[i]>max)
      max = input[i];
    else if(input[i]<min)
      min = input[i];
  }
  return max-min;
}",2822998,29,34,"2822998public int getMaxDifference(int input[]){
// difference of maximum and minimum of the array
  int min=Integer.MAX_VALUE;
  int max = Integer.MIN_VALUE;
  for(int i=0;i<input.length;i++){
    if(input[i]>max)
      max = input[i];
    else if(input[i]<min)
      min = input[i];
  }
  return max-min;
}",9
29,1,0,2,1,"int largestDifference(int[] a) {
  
}",4183247,30,5,"4183247int largestDifference(int[] a) {
  
}",1
30,1,0,1,2,"int largestDifference(int[] a) {
  int largest=INTEGER.Minimum;
  int smallest = INTEGER.Maximum;
  for(int i=0; i<a.length; i++) {
    if(a[i] > largest) {
      largest = a[i];
    }
  }
}",4183247,31,25,"4183247int largestDifference(int[] a) {
  int largest=INTEGER.Minimum;
  int smallest = INTEGER.Maximum;
  for(int i=0; i<a.length; i++) {
    if(a[i] > largest) {
      largest = a[i];
    }
  }
}",1
31,1,0,1,2,"int largestDifference(int[] a) {
  int largest=INTEGER.Minimum;
  int smallest = INTEGER.Maximum;
  for(int i=0; i<a.length; i++) {
    if(a[i] > largest) {
      largest = a[i];
    }
    if(a[i] < smallest) {
      smallest = a[i];
    }
  }
  return largest - smallest;
}",4183247,32,37,"4183247int largestDifference(int[] a) {
  int largest=INTEGER.Minimum;
  int smallest = INTEGER.Maximum;
  for(int i=0; i<a.length; i++) {
    if(a[i] > largest) {
      largest = a[i];
    }
    if(a[i] < smallest) {
      smallest = a[i];
    }
  }
  return largest - smallest;
}",2
32,1,0,1,2,"int largestDifference(int[] a) {
  int largest=INTEGER.Minimum;
  int smallest = INTEGER.Maximum;
  for(int i=0; i<a.length; i++) {
    if(a[i] > largest) {
      largest = a[i];
    }
    if(a[i] < smallest) {
      smallest = a[i];
    }
  }
  return largest - smallest;
}",4183247,33,37,"4183247int largestDifference(int[] a) {
  int largest=INTEGER.Minimum;
  int smallest = INTEGER.Maximum;
  for(int i=0; i<a.length; i++) {
    if(a[i] > largest) {
      largest = a[i];
    }
    if(a[i] < smallest) {
      smallest = a[i];
    }
  }
  return largest - smallest;
}",2
33,1,0,2,2,"int largestDifference(int[] a) {
  //Returns the largest difference
  int largest=INTEGER.Minimum;
  int smallest = INTEGER.Maximum;
  for(int i=0; i<a.length; i++) {
    if(a[i] > largest) {
      largest = a[i];
    }
    if(a[i] < smallest) {
      smallest = a[i];
    }
  }
  return largest - smallest;
}",4183247,34,41,"4183247int largestDifference(int[] a) {
  //Returns the largest difference
  int largest=INTEGER.Minimum;
  int smallest = INTEGER.Maximum;
  for(int i=0; i<a.length; i++) {
    if(a[i] > largest) {
      largest = a[i];
    }
    if(a[i] < smallest) {
      smallest = a[i];
    }
  }
  return largest - smallest;
}",3
34,1,0,1,2,"int largestDifference(int[] a) {
  //Returns the largest difference
  int largest=INTEGER.Minimum;
  int smallest = INTEGER.Maximum;
  for(int i=0; i<a.length; i++) {
    if(a[i] > largest) {
      largest = a[i];
    }
    if(a[i] < smallest) {
      smallest = a[i];
    }
  }
  return largest - smallest;
}",4183247,35,41,"4183247int largestDifference(int[] a) {
  //Returns the largest difference
  int largest=INTEGER.Minimum;
  int smallest = INTEGER.Maximum;
  for(int i=0; i<a.length; i++) {
    if(a[i] > largest) {
      largest = a[i];
    }
    if(a[i] < smallest) {
      smallest = a[i];
    }
  }
  return largest - smallest;
}",3
35,1,1,5,2,"int largestDifference(int[] a) {
  //Returns the largest difference
  int largest=INTEGER.Minimum;
  int smallest = INTEGER.Maximum;
  for(int i=0; i<a.length; i++) {
    if(a[i] > largest) {
      largest = a[i];
    }
    if(a[i] < smallest) {
      smallest = a[i];
    }
  }
  return largest - smallest;
}",4183247,36,41,"4183247int largestDifference(int[] a) {
  //Returns the largest difference
  int largest=INTEGER.Minimum;
  int smallest = INTEGER.Maximum;
  for(int i=0; i<a.length; i++) {
    if(a[i] > largest) {
      largest = a[i];
    }
    if(a[i] < smallest) {
      smallest = a[i];
    }
  }
  return largest - smallest;
}",3
36,1,0,1,2,"int largestDifference(int[] a) {
  //Returns the largest difference
  //Takes an int array as input
  int largest=INTEGER.Minimum;
  int smallest = INTEGER.Maximum;
  for(int i=0; i<a.length; i++) {
    if(a[i] > largest) {
      largest = a[i];
    }
    if(a[i] < smallest) {
      smallest = a[i];
    }
  }
  return largest - smallest;
}",4183247,37,47,"4183247int largestDifference(int[] a) {
  //Returns the largest difference
  //Takes an int array as input
  int largest=INTEGER.Minimum;
  int smallest = INTEGER.Maximum;
  for(int i=0; i<a.length; i++) {
    if(a[i] > largest) {
      largest = a[i];
    }
    if(a[i] < smallest) {
      smallest = a[i];
    }
  }
  return largest - smallest;
}",3
37,1,0,4,2,"int largestDifference(int[] a) {
  //Returns the largest difference
  //Takes an int array as input
  int largest=INTEGER.Minimum;
  int smallest = INTEGER.Maximum;
  for(int i=0; i<a.length; i++) {
    if(a[i] > largest) {
      largest = a[i];
    }
    if(a[i] < smallest) {
      smallest = a[i];
    }
  }
  return largest - smallest;
}",4183247,38,47,"4183247int largestDifference(int[] a) {
  //Returns the largest difference
  //Takes an int array as input
  int largest=INTEGER.Minimum;
  int smallest = INTEGER.Maximum;
  for(int i=0; i<a.length; i++) {
    if(a[i] > largest) {
      largest = a[i];
    }
    if(a[i] < smallest) {
      smallest = a[i];
    }
  }
  return largest - smallest;
}",3
38,1,0,3,2,"int largestDifference(int[] a) {
  //Returns the largest difference
  //Takes an int array as input
  int largest=INTEGER.Minimum;
  int smallest = INTEGER.Maximum;
  for(int i=0; i<a.length; i++) {
    if(a[i] > largest) {
      largest = a[i];
    }
    if(a[i] < smallest) {
      smallest = a[i];
    }
  }
  return largest - smallest;
}",4183247,39,47,"4183247int largestDifference(int[] a) {
  //Returns the largest difference
  //Takes an int array as input
  int largest=INTEGER.Minimum;
  int smallest = INTEGER.Maximum;
  for(int i=0; i<a.length; i++) {
    if(a[i] > largest) {
      largest = a[i];
    }
    if(a[i] < smallest) {
      smallest = a[i];
    }
  }
  return largest - smallest;
}",3
39,2,0,5,1,"int getTax(Person person) {
  if(person instanceof Employee) {
    Employee e = (Employee) Person;
    if(e.getSalary() < 10000) {
      return e.getSalary() * .02;
    }
    else {
      return e.getSalary() * 0.05;
    }
  }
}",4183247,40,31,"4183247int getTax(Person person) {
  if(person instanceof Employee) {
    Employee e = (Employee) Person;
    if(e.getSalary() < 10000) {
      return e.getSalary() * .02;
    }
    else {
      return e.getSalary() * 0.05;
    }
  }
}",1
40,2,0,5,1,"int getTax(Person person) {
  //Finds the tax for a person
  if(person instanceof Employee) {
    Employee e = (Employee) Person;
    if(e.getSalary() < 10000) {
      return e.getSalary() * .02;
    }
    else {
      return e.getSalary() * 0.05;
    }
  }
}",4183247,41,37,"4183247int getTax(Person person) {
  //Finds the tax for a person
  if(person instanceof Employee) {
    Employee e = (Employee) Person;
    if(e.getSalary() < 10000) {
      return e.getSalary() * .02;
    }
    else {
      return e.getSalary() * 0.05;
    }
  }
}",1
41,2,0,4,1,"int getTax(Person person) {
  //Returns the tax for a person
  //Takes a Person class as input
  if(person instanceof Employee) {
    Employee e = (Employee) Person;
    if(e.getSalary() < 10000) {
      return e.getSalary() * .02;
    }
    else {
      return e.getSalary() * 0.05;
    }
  }
}",4183247,42,43,"4183247int getTax(Person person) {
  //Returns the tax for a person
  //Takes a Person class as input
  if(person instanceof Employee) {
    Employee e = (Employee) Person;
    if(e.getSalary() < 10000) {
      return e.getSalary() * .02;
    }
    else {
      return e.getSalary() * 0.05;
    }
  }
}",1
42,2,1,3,1,"int getTax(Person person) {
  //Returns the tax for a person
  //Takes a Person class as input
  if(person instanceof Employee) {
    Employee e = (Employee) person;
    if(e.getSalary() < 10000) {
      return e.getSalary() * .02;
    }
    else {
      return e.getSalary() * 0.05;
    }
  }
  
  if(person instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) person;
    return b.getProfit() * 0.10;
  }
  
  if(person instanceof Veteran) {
    return 0;
  }
}",4183247,43,64,"4183247int getTax(Person person) {
  //Returns the tax for a person
  //Takes a Person class as input
  if(person instanceof Employee) {
    Employee e = (Employee) person;
    if(e.getSalary() < 10000) {
      return e.getSalary() * .02;
    }
    else {
      return e.getSalary() * 0.05;
    }
  }
  
  if(person instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) person;
    return b.getProfit() * 0.10;
  }
  
  if(person instanceof Veteran) {
    return 0;
  }
}",13
43,2,0,5,1,"int getTax(Person person) {
  //Returns the tax for a person
  //Takes a Person class as input
  if(person instanceof Employee) {
    Employee e = (Employee) person;
    if(e.getSalary() < 10000) {
      return e.getSalary() * .02;
    }
    else {
      return e.getSalary() * 0.05;
    }
  }
  
  if(person instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) person;
    return b.getProfit() * 0.10;
  }
  
  if(person instanceof Veteran) {
    return 0;
  }
}",4183247,44,64,"4183247int getTax(Person person) {
  //Returns the tax for a person
  //Takes a Person class as input
  if(person instanceof Employee) {
    Employee e = (Employee) person;
    if(e.getSalary() < 10000) {
      return e.getSalary() * .02;
    }
    else {
      return e.getSalary() * 0.05;
    }
  }
  
  if(person instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) person;
    return b.getProfit() * 0.10;
  }
  
  if(person instanceof Veteran) {
    return 0;
  }
}",13
44,2,0,4,1,"int getTax(Person person) {
  //Returns the tax for a person
  //Takes a Person class as input
  if(person instanceof Employee) {
    Employee e = (Employee) person;
    if(e.getSalary() < 10000) {
      return e.getSalary() * .02;
    }
    else {
      return e.getSalary() * 0.05;
    }
  }
  
  if(person instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) person;
    return b.getProfit() * 0.10;
  }
  
  if(person instanceof Veteran) {
    return 0;
  }
}",4183247,45,64,"4183247int getTax(Person person) {
  //Returns the tax for a person
  //Takes a Person class as input
  if(person instanceof Employee) {
    Employee e = (Employee) person;
    if(e.getSalary() < 10000) {
      return e.getSalary() * .02;
    }
    else {
      return e.getSalary() * 0.05;
    }
  }
  
  if(person instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) person;
    return b.getProfit() * 0.10;
  }
  
  if(person instanceof Veteran) {
    return 0;
  }
}",13
45,2,0,5,1,"int getTax(Person person) {
  //Returns the tax for a person
  //Takes a Person class as input
  if(person instanceof Employee) {
    Employee e = (Employee) person;
    if(e.getSalary() < 10000) {
      return e.getSalary() * .02;
    }
    else {
      return e.getSalary() * 0.05;
    }
  }
  
  if(person instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) person;
    return b.getProfit() * 0.10;
  }
  
  if(person instanceof Veteran) {
    return 0;
  }
}",4183247,46,64,"4183247int getTax(Person person) {
  //Returns the tax for a person
  //Takes a Person class as input
  if(person instanceof Employee) {
    Employee e = (Employee) person;
    if(e.getSalary() < 10000) {
      return e.getSalary() * .02;
    }
    else {
      return e.getSalary() * 0.05;
    }
  }
  
  if(person instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) person;
    return b.getProfit() * 0.10;
  }
  
  if(person instanceof Veteran) {
    return 0;
  }
}",13
46,2,0,4,1,"int getTax(Person person) {
  //Returns the tax for a person
  //Takes a Person class as input
  if(person instanceof Employee) {
    Employee e = (Employee) person;
    if(e.getSalary() < 10000) {
      return e.getSalary() * .02;
    }
    else {
      return e.getSalary() * 0.05;
    }
  }
  
  if(person instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) person;
    return b.getProfit() * 0.10;
  }
  
  if(person instanceof Veteran) {
    return 0;
  }
}",4183247,47,64,"4183247int getTax(Person person) {
  //Returns the tax for a person
  //Takes a Person class as input
  if(person instanceof Employee) {
    Employee e = (Employee) person;
    if(e.getSalary() < 10000) {
      return e.getSalary() * .02;
    }
    else {
      return e.getSalary() * 0.05;
    }
  }
  
  if(person instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) person;
    return b.getProfit() * 0.10;
  }
  
  if(person instanceof Veteran) {
    return 0;
  }
}",13
47,2,0,5,1,"int getTax(Person person) {
  //Returns the tax for a person
  //Takes a Person class as input
  if(person instanceof Employee) {
    Employee e = (Employee) person;
    if(e.getSalary() < 10000) {
      return e.getSalary() * .02;
    }
    else {
      return e.getSalary() * 0.05;
    }
  }
  
  if(person instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) person;
    return b.getProfit() * 0.10;
  }
  
  if(person instanceof Veteran) {
    return 0;
  }
}",4183247,48,64,"4183247int getTax(Person person) {
  //Returns the tax for a person
  //Takes a Person class as input
  if(person instanceof Employee) {
    Employee e = (Employee) person;
    if(e.getSalary() < 10000) {
      return e.getSalary() * .02;
    }
    else {
      return e.getSalary() * 0.05;
    }
  }
  
  if(person instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) person;
    return b.getProfit() * 0.10;
  }
  
  if(person instanceof Veteran) {
    return 0;
  }
}",13
48,2,0,4,1,"int getTax(Person person) {
  //Returns the tax for a person
  //Takes a Person class as input
  if(person instanceof Employee) {
    Employee e = (Employee) person;
    if(e.getSalary() < 10000) {
      return e.getSalary() * .02;
    }
    else {
      return e.getSalary() * 0.05;
    }
  }
  
  if(person instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) person;
    return b.getProfit() * 0.10;
  }
  
  if(person instanceof Veteran) {
    return 0;
  }
}",4183247,49,64,"4183247int getTax(Person person) {
  //Returns the tax for a person
  //Takes a Person class as input
  if(person instanceof Employee) {
    Employee e = (Employee) person;
    if(e.getSalary() < 10000) {
      return e.getSalary() * .02;
    }
    else {
      return e.getSalary() * 0.05;
    }
  }
  
  if(person instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) person;
    return b.getProfit() * 0.10;
  }
  
  if(person instanceof Veteran) {
    return 0;
  }
}",13
49,2,0,5,1,"int getTax(Person person) {
  //Returns the tax for a person
  //Takes a Person class as input
  if(person instanceof Employee) {
    Employee e = (Employee) person;
    if(e.getSalary() < 10000) {
      return e.getSalary() * .02;
    }
    else {
      return e.getSalary() * 0.05;
    }
  }
  
  if(person instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) person;
    return b.getProfit() * 0.10;
  }
  
  if(person instanceof Veteran) {
    return 0;
  }
}",4183247,50,64,"4183247int getTax(Person person) {
  //Returns the tax for a person
  //Takes a Person class as input
  if(person instanceof Employee) {
    Employee e = (Employee) person;
    if(e.getSalary() < 10000) {
      return e.getSalary() * .02;
    }
    else {
      return e.getSalary() * 0.05;
    }
  }
  
  if(person instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) person;
    return b.getProfit() * 0.10;
  }
  
  if(person instanceof Veteran) {
    return 0;
  }
}",13
50,2,0,4,1,"int getTax(Person person) {
  //Returns the tax for a person
  //Takes a Person class as input
  if(person instanceof Employee) {
    Employee e = (Employee) person;
    if(e.getSalary() < 10000) {
      return e.getSalary() * .02;
    }
    else {
      return e.getSalary() * 0.05;
    }
  }
  
  if(person instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) person;
    return b.getProfit() * 0.10;
  }
  
  if(person instanceof Veteran) {
    return 0;
  }
}",4183247,51,64,"4183247int getTax(Person person) {
  //Returns the tax for a person
  //Takes a Person class as input
  if(person instanceof Employee) {
    Employee e = (Employee) person;
    if(e.getSalary() < 10000) {
      return e.getSalary() * .02;
    }
    else {
      return e.getSalary() * 0.05;
    }
  }
  
  if(person instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) person;
    return b.getProfit() * 0.10;
  }
  
  if(person instanceof Veteran) {
    return 0;
  }
}",13
51,2,0,5,1,"int getTax(Person person) {
  //Returns the tax for a person
  //Takes a Person class as input
  if(person instanceof Employee) {
    Employee e = (Employee) person;
    if(e.getSalary() < 10000) {
      return e.getSalary() * .02;
    }
    else {
      return e.getSalary() * 0.05;
    }
  }
  
  if(person instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) person;
    return b.getProfit() * 0.10;
  }
  
  if(person instanceof Veteran) {
    return 0;
  }
}",4183247,52,64,"4183247int getTax(Person person) {
  //Returns the tax for a person
  //Takes a Person class as input
  if(person instanceof Employee) {
    Employee e = (Employee) person;
    if(e.getSalary() < 10000) {
      return e.getSalary() * .02;
    }
    else {
      return e.getSalary() * 0.05;
    }
  }
  
  if(person instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) person;
    return b.getProfit() * 0.10;
  }
  
  if(person instanceof Veteran) {
    return 0;
  }
}",13
52,2,0,4,1,"int getTax(Person person) {
  //Returns the tax for a person
  //Takes a Person class as input
  if(person instanceof Employee) {
    Employee e = (Employee) person;
    if(e.getSalary() < 10000) {
      return e.getSalary() * .02;
    }
    else {
      return e.getSalary() * 0.05;
    }
  }
  
  if(person instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) person;
    return b.getProfit() * 0.10;
  }
  
  if(person instanceof Veteran) {
    return 0;
  }
}",4183247,53,64,"4183247int getTax(Person person) {
  //Returns the tax for a person
  //Takes a Person class as input
  if(person instanceof Employee) {
    Employee e = (Employee) person;
    if(e.getSalary() < 10000) {
      return e.getSalary() * .02;
    }
    else {
      return e.getSalary() * 0.05;
    }
  }
  
  if(person instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) person;
    return b.getProfit() * 0.10;
  }
  
  if(person instanceof Veteran) {
    return 0;
  }
}",13
53,2,1,1,1,"int getTax(Person person) {
  //Returns the tax for a person
  //Takes a Person class as input
  if(person instanceof Employee) {
    Employee e = (Employee) person;
    if(e.getSalary() < 10000) {
      return e.getSalary() * .02;
    }
    else {
      return e.getSalary() * 0.05;
    }
  }
  
  if(person instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) person;
    return b.getProfit() * 0.10;
  }
  
  if(person instanceof Veteran) {
    return 0;
  }
}",4183247,54,64,"4183247int getTax(Person person) {
  //Returns the tax for a person
  //Takes a Person class as input
  if(person instanceof Employee) {
    Employee e = (Employee) person;
    if(e.getSalary() < 10000) {
      return e.getSalary() * .02;
    }
    else {
      return e.getSalary() * 0.05;
    }
  }
  
  if(person instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) person;
    return b.getProfit() * 0.10;
  }
  
  if(person instanceof Veteran) {
    return 0;
  }
}",13
54,2,0,4,1,"int getTax(Person person) {
  //Returns the tax for a person
  //Takes a Person class as input
  if(person instanceof Employee) {
    Employee e = (Employee) person;
    if(e.getSalary() < 10000) {
      return e.getSalary() * .02;
    }
    else {
      return e.getSalary() * 0.05;
    }
  }
  
  if(person instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) person;
    return b.getProfit() * 0.10;
  }
  
  if(person instanceof Veteran) {
    return 0;
  }
}",4183247,55,64,"4183247int getTax(Person person) {
  //Returns the tax for a person
  //Takes a Person class as input
  if(person instanceof Employee) {
    Employee e = (Employee) person;
    if(e.getSalary() < 10000) {
      return e.getSalary() * .02;
    }
    else {
      return e.getSalary() * 0.05;
    }
  }
  
  if(person instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) person;
    return b.getProfit() * 0.10;
  }
  
  if(person instanceof Veteran) {
    return 0;
  }
}",13
55,1,1,4,1,"int largestDifference(int[] input) {
  
}",7762477,56,5,"7762477int largestDifference(int[] input) {
  
}",8
56,1,1,2,1,"int largestDifference(int[] input) {
  
}",7762477,57,5,"7762477int largestDifference(int[] input) {
  
}",8
57,1,0,2,3,"int largestDifference(int[] input) {
  
}",7762477,58,5,"7762477int largestDifference(int[] input) {
  
}",8
58,1,0,5,1,"int largestDifference(int[] input) {
  
}",7762477,59,5,"7762477int largestDifference(int[] input) {
  
}",8
59,1,1,3,1,"int largestDifference(int[] input) {
  
}",7762477,60,5,"7762477int largestDifference(int[] input) {
  
}",8
60,1,0,1,2,"int largestDifference(int[] input) {
  int largest = 0;
  for (int i = 1; i < input.length; i++) {
    for(int j = i + 1; j < input.length; j++) {
        if (Math.abs(input[i]-input[j]) > largest) {
            largest = Math.abs(input[i]-input[j]);
        }
    	}
    }
  return largest;
}",7762477,61,43,"7762477int largestDifference(int[] input) {
  int largest = 0;
  for (int i = 1; i < input.length; i++) {
    for(int j = i + 1; j < input.length; j++) {
        if (Math.abs(input[i]-input[j]) > largest) {
            largest = Math.abs(input[i]-input[j]);
        }
    	}
    }
  return largest;
}",8
61,1,0,3,1,"int largestDifference(int[] input) {
  int largest = 0;
  for (int i = 1; i < input.length; i++) {
    for(int j = i + 1; j < input.length; j++) {
        if (Math.abs(input[i]-input[j]) > largest) {
            largest = Math.abs(input[i]-input[j]);
        }
    	}
    }
  return largest;
}",7762477,62,43,"7762477int largestDifference(int[] input) {
  int largest = 0;
  for (int i = 1; i < input.length; i++) {
    for(int j = i + 1; j < input.length; j++) {
        if (Math.abs(input[i]-input[j]) > largest) {
            largest = Math.abs(input[i]-input[j]);
        }
    	}
    }
  return largest;
}",8
62,1,1,3,2,"int largestDifference(int[] input) {
  int largest = 0;
  for (int i = 1; i < input.length; i++) {
    for(int j = i + 1; j < input.length; j++) {
        if (Math.abs(input[i]-input[j]) > largest) {
            largest = Math.abs(input[i]-input[j]);
        }
    	}
    }
  return largest;
}",7762477,63,43,"7762477int largestDifference(int[] input) {
  int largest = 0;
  for (int i = 1; i < input.length; i++) {
    for(int j = i + 1; j < input.length; j++) {
        if (Math.abs(input[i]-input[j]) > largest) {
            largest = Math.abs(input[i]-input[j]);
        }
    	}
    }
  return largest;
}",8
63,1,1,4,2,"int largestDifference(int[] input) {
  int largest = 0;
  for (int i = 1; i < input.length; i++) {
    for(int j = i + 1; j < input.length; j++) {
        if (Math.abs(input[i]-input[j]) > largest) {
            largest = Math.abs(input[i]-input[j]);
        }
    	}
    }
  return largest;
}",7762477,64,43,"7762477int largestDifference(int[] input) {
  int largest = 0;
  for (int i = 1; i < input.length; i++) {
    for(int j = i + 1; j < input.length; j++) {
        if (Math.abs(input[i]-input[j]) > largest) {
            largest = Math.abs(input[i]-input[j]);
        }
    	}
    }
  return largest;
}",8
64,1,0,2,1,"int largestDifference(int[] input) {
  int largest = 0;
  for (int i = 1; i < input.length; i++) {
    for(int j = i + 1; j < input.length; j++) {
        if (Math.abs(input[i]-input[j]) > largest) {
            largest = Math.abs(input[i]-input[j]);
        }
    	}
    }
  return largest;
}",7762477,65,43,"7762477int largestDifference(int[] input) {
  int largest = 0;
  for (int i = 1; i < input.length; i++) {
    for(int j = i + 1; j < input.length; j++) {
        if (Math.abs(input[i]-input[j]) > largest) {
            largest = Math.abs(input[i]-input[j]);
        }
    	}
    }
  return largest;
}",8
65,1,1,3,2,"int largestDifference(int[] input) {
  int largest = 0;
  for (int i = 1; i < input.length; i++) {
    for(int j = i + 1; j < input.length; j++) {
        if (Math.abs(input[i]-input[j]) > largest) {
            largest = Math.abs(input[i]-input[j]);
        }
    	}
    }
  return largest;
}",7762477,66,43,"7762477int largestDifference(int[] input) {
  int largest = 0;
  for (int i = 1; i < input.length; i++) {
    for(int j = i + 1; j < input.length; j++) {
        if (Math.abs(input[i]-input[j]) > largest) {
            largest = Math.abs(input[i]-input[j]);
        }
    	}
    }
  return largest;
}",8
66,1,1,2,1,"int largestDifference(int[] input) {
  int largest = 0;
  for (int i = 1; i < input.length; i++) {
    for(int j = i + 1; j < input.length; j++) {
        if (Math.abs(input[i]-input[j]) > largest) {
            largest = Math.abs(input[i]-input[j]);
        }
    	}
    }
  return largest;
}",7762477,67,43,"7762477int largestDifference(int[] input) {
  int largest = 0;
  for (int i = 1; i < input.length; i++) {
    for(int j = i + 1; j < input.length; j++) {
        if (Math.abs(input[i]-input[j]) > largest) {
            largest = Math.abs(input[i]-input[j]);
        }
    	}
    }
  return largest;
}",8
67,1,1,5,2,"int largestDifference(int[] input) {
  int largest = 0;
  for (int i = 1; i < input.length; i++) {
    for(int j = i + 1; j < input.length; j++) {
        if (Math.abs(input[i]-input[j]) > largest) {
            largest = Math.abs(input[i]-input[j]);
        }
    	}
    }
  return largest;
}",7762477,68,43,"7762477int largestDifference(int[] input) {
  int largest = 0;
  for (int i = 1; i < input.length; i++) {
    for(int j = i + 1; j < input.length; j++) {
        if (Math.abs(input[i]-input[j]) > largest) {
            largest = Math.abs(input[i]-input[j]);
        }
    	}
    }
  return largest;
}",8
68,1,0,3,1,"int largestDifference(int[] input) {
  
}",7762477,69,5,"7762477int largestDifference(int[] input) {
  
}",8
69,1,1,4,1,"int largestDifference(int[] input) {
  
}",7762477,70,5,"7762477int largestDifference(int[] input) {
  
}",8
70,1,0,2,3,"int largestDifference(int[] input) {
  
}",7762477,71,5,"7762477int largestDifference(int[] input) {
  
}",8
71,1,1,5,2,"int largestDifference(int[] input) {
  int largest = 0;
  for (int i = 1; i < input.length; i++) {
    for(int j = i+1; j < input.length; j++) {
      if (Math.abs(input[i]-input[j]) > largest) {
          largest = Math.abs(input[i]-input[j]);
      }
    }
  }
    return largest;
}",7762477,72,41,"7762477int largestDifference(int[] input) {
  int largest = 0;
  for (int i = 1; i < input.length; i++) {
    for(int j = i+1; j < input.length; j++) {
      if (Math.abs(input[i]-input[j]) > largest) {
          largest = Math.abs(input[i]-input[j]);
      }
    }
  }
    return largest;
}",8
72,1,1,4,1,"int largestDifference(int[] input) {
  int largest = 0;
  for (int i = 1; i < input.length; i++) {
    for(int j = i+1; j < input.length; j++) {
      if (Math.abs(input[i]-input[j]) > largest) {
          largest = Math.abs(input[i]-input[j]);
      }
    }
  }
    return largest;
}",7762477,73,41,"7762477int largestDifference(int[] input) {
  int largest = 0;
  for (int i = 1; i < input.length; i++) {
    for(int j = i+1; j < input.length; j++) {
      if (Math.abs(input[i]-input[j]) > largest) {
          largest = Math.abs(input[i]-input[j]);
      }
    }
  }
    return largest;
}",8
73,1,0,2,1,"int largestDifference(int[] input) {
  int largest = 0;
  for (int i = 1; i < input.length; i++) {
    for(int j = i+1; j < input.length; j++) {
      if (Math.abs(input[i]-input[j]) > largest) {
          largest = Math.abs(input[i]-input[j]);
      }
    }
  }
    return largest;
}",7762477,74,41,"7762477int largestDifference(int[] input) {
  int largest = 0;
  for (int i = 1; i < input.length; i++) {
    for(int j = i+1; j < input.length; j++) {
      if (Math.abs(input[i]-input[j]) > largest) {
          largest = Math.abs(input[i]-input[j]);
      }
    }
  }
    return largest;
}",8
74,1,1,2,2,"int largestDifference(int[] input) {
  int largest = 0;
  for (int i = 1; i < input.length; i++) {
    for(int j = i+1; j < input.length; j++) {
      if (Math.abs(input[i]-input[j]) > largest) {
          largest = Math.abs(input[i]-input[j]);
      }
    }
  }
    return largest;
}",7762477,75,41,"7762477int largestDifference(int[] input) {
  int largest = 0;
  for (int i = 1; i < input.length; i++) {
    for(int j = i+1; j < input.length; j++) {
      if (Math.abs(input[i]-input[j]) > largest) {
          largest = Math.abs(input[i]-input[j]);
      }
    }
  }
    return largest;
}",8
75,1,1,3,1,"int largestDifference(int[] input) {
  int largest = 0;
  for (int i = 1; i < input.length; i++) {
    for(int j = i+1; j < input.length; j++) {
      if (Math.abs(input[i]-input[j]) > largest) {
          largest = Math.abs(input[i]-input[j]);
      }
    }
  }
    return largest;
}",7762477,76,41,"7762477int largestDifference(int[] input) {
  int largest = 0;
  for (int i = 1; i < input.length; i++) {
    for(int j = i+1; j < input.length; j++) {
      if (Math.abs(input[i]-input[j]) > largest) {
          largest = Math.abs(input[i]-input[j]);
      }
    }
  }
    return largest;
}",8
76,1,0,4,2,"int largestDifference(int[] input) {
  int largest = 0;
  for (int i = 1; i < input.length; i++) {
    for(int j = i+1; j < input.length; j++) {
      if (Math.abs(input[i]-input[j]) > largest) {
          largest = Math.abs(input[i]-input[j]);
      }
    }
  }
    return largest;
}",7762477,77,41,"7762477int largestDifference(int[] input) {
  int largest = 0;
  for (int i = 1; i < input.length; i++) {
    for(int j = i+1; j < input.length; j++) {
      if (Math.abs(input[i]-input[j]) > largest) {
          largest = Math.abs(input[i]-input[j]);
      }
    }
  }
    return largest;
}",8
77,1,0,1,2,"int largestDifference(int[] input) {
  int largest = 0;
  for (int i = 1; i < input.length; i++) {
    for(int j = i+1; j < input.length; j++) {
      if (Math.abs(input[i]-input[j]) > largest) {
          largest = Math.abs(input[i]-input[j]);
      }
    }
  }
    return largest;
}",7762477,78,41,"7762477int largestDifference(int[] input) {
  int largest = 0;
  for (int i = 1; i < input.length; i++) {
    for(int j = i+1; j < input.length; j++) {
      if (Math.abs(input[i]-input[j]) > largest) {
          largest = Math.abs(input[i]-input[j]);
      }
    }
  }
    return largest;
}",8
78,1,0,3,1,"int largestDifference(int[] input) {
  int largest = 0;
  for (int i = 1; i < input.length; i++) {
    for(int j = i+1; j < input.length; j++) {
      if (Math.abs(input[i]-input[j]) > largest) {
          largest = Math.abs(input[i]-input[j]);
      }
    }
  }
    return largest;
}",7762477,79,41,"7762477int largestDifference(int[] input) {
  int largest = 0;
  for (int i = 1; i < input.length; i++) {
    for(int j = i+1; j < input.length; j++) {
      if (Math.abs(input[i]-input[j]) > largest) {
          largest = Math.abs(input[i]-input[j]);
      }
    }
  }
    return largest;
}",8
79,2,0,4,2,"public double getTax(Person person) {
  
}",7762477,80,6,"7762477public double getTax(Person person) {
  
}",4
80,2,0,2,1,"public double getTax(Person person) {
  
}",7762477,81,6,"7762477public double getTax(Person person) {
  
}",4
81,2,0,2,2,"public double getTax(Person person) {
  
}",7762477,82,6,"7762477public double getTax(Person person) {
  
}",4
82,2,0,3,2,"public double getTax(Person person) {
  
}",7762477,83,6,"7762477public double getTax(Person person) {
  
}",4
83,2,1,5,1,"public double getTax(Person person) {
  if(person instanceof Veteran) {
    return 0;
  }
  if(person instanceof BusinessOwner) {
    
  }
}",7762477,84,18,"7762477public double getTax(Person person) {
  if(person instanceof Veteran) {
    return 0;
  }
  if(person instanceof BusinessOwner) {
    
  }
}",12
84,2,0,2,1,"public double getTax(Person person) {
  if(person instanceof Veteran) {
    return 0;
  }
  if(person instanceof BusinessOwner) {
    
  }
}",7762477,85,18,"7762477public double getTax(Person person) {
  if(person instanceof Veteran) {
    return 0;
  }
  if(person instanceof BusinessOwner) {
    
  }
}",12
85,2,0,5,1,"public double getTax(Person person) {
  if(person instanceof Veteran) {
    return 0;
  }
  if(person instanceof BusinessOwner) {
    
  }
}",7762477,86,18,"7762477public double getTax(Person person) {
  if(person instanceof Veteran) {
    return 0;
  }
  if(person instanceof BusinessOwner) {
    
  }
}",12
86,2,0,3,1,"public double getTax(Person person) {
  if(person instanceof Veteran) {
    return 0;
  }
  if(person instanceof BusinessOwner) {
    
  }
}",7762477,87,18,"7762477public double getTax(Person person) {
  if(person instanceof Veteran) {
    return 0;
  }
  if(person instanceof BusinessOwner) {
    
  }
}",12
87,2,0,4,1,"public double getTax(Person person) {
  if(person instanceof Veteran) {
    return 0;
  }
  if(person instanceof BusinessOwner) {
    
  }
}",7762477,88,18,"7762477public double getTax(Person person) {
  if(person instanceof Veteran) {
    return 0;
  }
  if(person instanceof BusinessOwner) {
    
  }
}",12
88,2,1,4,3,"public double getTax(Person person) {
  if(person instanceof Veteran) {
    return 0;
  }
  if(person instanceof BusinessOwner) {
    
  }
}",7762477,89,18,"7762477public double getTax(Person person) {
  if(person instanceof Veteran) {
    return 0;
  }
  if(person instanceof BusinessOwner) {
    
  }
}",12
89,2,1,1,1,"public double getTax(Person person) {
  if(person instanceof Veteran) {
    return 0;
  }
  if(person instanceof BusinessOwner) {
    
  }
}",7762477,90,18,"7762477public double getTax(Person person) {
  if(person instanceof Veteran) {
    return 0;
  }
  if(person instanceof BusinessOwner) {
    
  }
}",12
90,2,0,1,1,"public double getTax(Person person) {
  if(person instanceof Veteran) {
    return 0;
  }
  if(person instanceof BusinessOwner) {
    
  }
}",7762477,91,18,"7762477public double getTax(Person person) {
  if(person instanceof Veteran) {
    return 0;
  }
  if(person instanceof BusinessOwner) {
    
  }
}",12
91,2,1,5,1,"public double getTax(Person person) {
  if(person instanceof Veteran) {
    return 0;
  }
  if(person instanceof BusinessOwner) {
    
  }
}",7762477,92,18,"7762477public double getTax(Person person) {
  if(person instanceof Veteran) {
    return 0;
  }
  if(person instanceof BusinessOwner) {
    
  }
}",12
92,2,1,3,1,"public double getTax(Person person) {
  if(person instanceof Veteran) {
    return 0;
  }
  if(person instanceof BusinessOwner) {
    
  }
}",7762477,93,18,"7762477public double getTax(Person person) {
  if(person instanceof Veteran) {
    return 0;
  }
  if(person instanceof BusinessOwner) {
    
  }
}",12
93,2,1,3,2,"public double getTax(Person person) {
  if(person instanceof Veteran) {
    return 0;
  }
  if(person instanceof BusinessOwner) {
    
  }
}",7762477,94,18,"7762477public double getTax(Person person) {
  if(person instanceof Veteran) {
    return 0;
  }
  if(person instanceof BusinessOwner) {
    
  }
}",12
94,2,1,4,1,"public double getTax(Person person) {
  if(person instanceof Veteran) {
    return 0;
  }
  if(person instanceof BusinessOwner) {
    
  }
}",7762477,95,18,"7762477public double getTax(Person person) {
  if(person instanceof Veteran) {
    return 0;
  }
  if(person instanceof BusinessOwner) {
    
  }
}",12
95,1,0,2,2,"int largestDifference(int [] a) {
  
}",isabelle,96,6,"isabelleint largestDifference(int [] a) {
  
}",1
96,1,1,5,3,"/**
* Find the largest diffence between the elements in the array.
* This means finding the min and the max element and subtracting the min from the max.
*/
int largestDifference(int [] values) {
  int largest = a[0];
  int smallest = a[0];
  for (int i = 1; i < values.length; i++){
    
  }
  
}",isabelle,97,54,"isabelle/**
* Find the largest diffence between the elements in the array.
* This means finding the min and the max element and subtracting the min from the max.
*/
int largestDifference(int [] values) {
  int largest = a[0];
  int smallest = a[0];
  for (int i = 1; i < values.length; i++){
    
  }
  
}",1
97,1,1,4,2,"/**
* Find the largest diffence between the elements in the array.
* This means finding the min and the max element and subtracting the min from the max.
*/
int largestDifference(int [] values) {
  int largest = a[0];
  int smallest = a[0];
  for (int i = 1; i < values.length; i++){
    if(a[i] > largest) {
      largest = a[i];
    }
    if(a[i] < smallest) {
      smallest = a[i];
    }
    
  }
  
}",isabelle,98,70,"isabelle/**
* Find the largest diffence between the elements in the array.
* This means finding the min and the max element and subtracting the min from the max.
*/
int largestDifference(int [] values) {
  int largest = a[0];
  int smallest = a[0];
  for (int i = 1; i < values.length; i++){
    if(a[i] > largest) {
      largest = a[i];
    }
    if(a[i] < smallest) {
      smallest = a[i];
    }
    
  }
  
}",2
98,1,1,5,3,"/**
* Find the largest diffence between the elements in the array.
* This means finding the min and the max element and subtracting the min from the max.
*/
int largestDifference(int [] values) {
  int largest = a[0];
  int smallest = a[0];
  for (int i = 1; i < values.length; i++){
    if(a[i] > largest) {
      largest = a[i];
    }
    if(a[i] < smallest) {
      smallest = a[i];
    }
    
  }
  
}",isabelle,99,70,"isabelle/**
* Find the largest diffence between the elements in the array.
* This means finding the min and the max element and subtracting the min from the max.
*/
int largestDifference(int [] values) {
  int largest = a[0];
  int smallest = a[0];
  for (int i = 1; i < values.length; i++){
    if(a[i] > largest) {
      largest = a[i];
    }
    if(a[i] < smallest) {
      smallest = a[i];
    }
    
  }
  
}",2
99,1,1,5,3,"/**
* Find the largest diffence between the elements in the array.
* This means finding the min and the max element and subtracting the min from the max.
*/
int largestDifference(int [] values) {
  int largest = a[0];
  int smallest = a[0];
  for (int i = 1; i < values.length; i++){
    if(a[i] > largest) {
      largest = a[i];
    }
    if(a[i] < smallest) {
      smallest = a[i];
    }
  }
  return largest-smallest;
  
}",isabelle,100,72,"isabelle/**
* Find the largest diffence between the elements in the array.
* This means finding the min and the max element and subtracting the min from the max.
*/
int largestDifference(int [] values) {
  int largest = a[0];
  int smallest = a[0];
  for (int i = 1; i < values.length; i++){
    if(a[i] > largest) {
      largest = a[i];
    }
    if(a[i] < smallest) {
      smallest = a[i];
    }
  }
  return largest-smallest;
  
}",6
100,1,1,4,2,"/**
* Find the largest diffence between the elements in the array.
* This means finding the min and the max element and subtracting the min from the max.
*/
int largestDifference(int [] values) {
  int largest = a[0];
  int smallest = a[0];
  for (int i = 1; i < values.length; i++){
    if(a[i] > largest) {
      largest = a[i];
    }
    if(a[i] < smallest) {
      smallest = a[i];
    }
  }
  return largest-smallest;
  
}",isabelle,101,72,"isabelle/**
* Find the largest diffence between the elements in the array.
* This means finding the min and the max element and subtracting the min from the max.
*/
int largestDifference(int [] values) {
  int largest = a[0];
  int smallest = a[0];
  for (int i = 1; i < values.length; i++){
    if(a[i] > largest) {
      largest = a[i];
    }
    if(a[i] < smallest) {
      smallest = a[i];
    }
  }
  return largest-smallest;
  
}",6
101,1,1,5,3,"/**
* Find the largest diffence between the elements in the array.
* This means finding the min and the max element and subtracting the min from the max.
*/
int largestDifference(int [] values) {
  int largest = a[0];
  int smallest = a[0];
  for (int i = 1; i < values.length; i++){
    if(a[i] > largest) {
      largest = a[i];
    }
    if(a[i] < smallest) {
      smallest = a[i];
    }
  }
  return largest-smallest;
  
}",isabelle,102,72,"isabelle/**
* Find the largest diffence between the elements in the array.
* This means finding the min and the max element and subtracting the min from the max.
*/
int largestDifference(int [] values) {
  int largest = a[0];
  int smallest = a[0];
  for (int i = 1; i < values.length; i++){
    if(a[i] > largest) {
      largest = a[i];
    }
    if(a[i] < smallest) {
      smallest = a[i];
    }
  }
  return largest-smallest;
  
}",6
102,1,0,1,2,"/**
* Find the largest diffence between the elements in the array.
* This means finding the min and the max element and subtracting the min from the max.
*/
int largestDifference(int [] values) {
  int largest = a[0];
  int smallest = a[0];
  for (int i = 1; i < values.length; i++){
    if(a[i] > largest) {
      largest = a[i];
    }
    if(a[i] < smallest) {
      smallest = a[i];
    }
  }
  return largest-smallest;
  
}",isabelle,103,72,"isabelle/**
* Find the largest diffence between the elements in the array.
* This means finding the min and the max element and subtracting the min from the max.
*/
int largestDifference(int [] values) {
  int largest = a[0];
  int smallest = a[0];
  for (int i = 1; i < values.length; i++){
    if(a[i] > largest) {
      largest = a[i];
    }
    if(a[i] < smallest) {
      smallest = a[i];
    }
  }
  return largest-smallest;
  
}",6
103,1,0,2,1,"/**
* Find the largest diffence between the elements in the array.
* This means finding the min and the max element and subtracting the min from the max.
*/
int largestDifference(int [] values) {
  int largest = a[0];
  int smallest = a[0];
  for (int i = 1; i < values.length; i++){
    if(a[i] > largest) {
      largest = a[i];
    }
    if(a[i] < smallest) {
      smallest = a[i];
    }
  }
  return largest-smallest;
  
}",isabelle,104,72,"isabelle/**
* Find the largest diffence between the elements in the array.
* This means finding the min and the max element and subtracting the min from the max.
*/
int largestDifference(int [] values) {
  int largest = a[0];
  int smallest = a[0];
  for (int i = 1; i < values.length; i++){
    if(a[i] > largest) {
      largest = a[i];
    }
    if(a[i] < smallest) {
      smallest = a[i];
    }
  }
  return largest-smallest;
  
}",6
104,1,1,4,1,"/**
* Find the largest diffence between the elements in the array.
* This means finding the min and the max element and subtracting the min from the max.
*/
int largestDifference(int [] values) {
  int largest = a[0];
  int smallest = a[0];
  for (int i = 1; i < values.length; i++){
    if(a[i] > largest) {
      largest = a[i];
    }
    if(a[i] < smallest) {
      smallest = a[i];
    }
  }
  return largest-smallest;
  
}",isabelle,105,72,"isabelle/**
* Find the largest diffence between the elements in the array.
* This means finding the min and the max element and subtracting the min from the max.
*/
int largestDifference(int [] values) {
  int largest = a[0];
  int smallest = a[0];
  for (int i = 1; i < values.length; i++){
    if(a[i] > largest) {
      largest = a[i];
    }
    if(a[i] < smallest) {
      smallest = a[i];
    }
  }
  return largest-smallest;
  
}",6
105,2,0,3,1,"/**
* Compute tax for different types of people.
*/
double getTaxForPerson(Person p) {
  
}",isabelle,106,15,"isabelle/**
* Compute tax for different types of people.
*/
double getTaxForPerson(Person p) {
  
}",1
106,2,1,1,3,"/**
* Compute tax for different types of people.
*/
double getTaxForPerson(Person p) {
  double tax = 0;
  if(p instanceof Employee) {
    if(p.getSalary() < 10000){
      tax = p.getSalary * 0.02;
    } else {
      tax = p.getSalary * 0.05;
    }
  }
  
}",isabelle,107,41,"isabelle/**
* Compute tax for different types of people.
*/
double getTaxForPerson(Person p) {
  double tax = 0;
  if(p instanceof Employee) {
    if(p.getSalary() < 10000){
      tax = p.getSalary * 0.02;
    } else {
      tax = p.getSalary * 0.05;
    }
  }
  
}",2
107,2,0,2,1,"/**
* Compute tax for different types of people.
*/
double getTaxForPerson(Person p) {
  double tax = 0;
  if(p instanceof Employee) {
    if(p.getSalary() < 10000){
      tax = p.getSalary * 0.02;
    } else {
      tax = p.getSalary * 0.05;
    }
  }
  
}",isabelle,108,41,"isabelle/**
* Compute tax for different types of people.
*/
double getTaxForPerson(Person p) {
  double tax = 0;
  if(p instanceof Employee) {
    if(p.getSalary() < 10000){
      tax = p.getSalary * 0.02;
    } else {
      tax = p.getSalary * 0.05;
    }
  }
  
}",2
108,2,1,1,3,"/**
* Compute tax for different types of people.
* Tax is 0 for veterans and everyone else.
*/
double getTaxForPerson(Person p) {
  double tax = 0;
  if(p instanceof Employee) {
    if(p.getSalary() < 10000){
      tax = p.getSalary * 0.02;
    } else {
      tax = p.getSalary * 0.05;
    }
  } else if(p instanceof BusinessOwner) {
    tax = p.getProfit * 0.1;
  }
  
}",isabelle,109,61,"isabelle/**
* Compute tax for different types of people.
* Tax is 0 for veterans and everyone else.
*/
double getTaxForPerson(Person p) {
  double tax = 0;
  if(p instanceof Employee) {
    if(p.getSalary() < 10000){
      tax = p.getSalary * 0.02;
    } else {
      tax = p.getSalary * 0.05;
    }
  } else if(p instanceof BusinessOwner) {
    tax = p.getProfit * 0.1;
  }
  
}",1
109,2,1,1,3,"/**
* Compute tax for different types of people.
* Tax is 0 for veterans and everyone else.
*/
double getTaxForPerson(Person p) {
  double tax = 0;
  if(p instanceof Employee) {
    Employee e = (Employee) p;
    if(e.getSalary() < 10000){
      tax = e.getSalary * 0.02;
    } else {
      tax = e.getSalary * 0.05;
    }
  } else if(p instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) p;
    tax = b.getProfit * 0.1;
  }
  
  return tax;
  
}",isabelle,110,73,"isabelle/**
* Compute tax for different types of people.
* Tax is 0 for veterans and everyone else.
*/
double getTaxForPerson(Person p) {
  double tax = 0;
  if(p instanceof Employee) {
    Employee e = (Employee) p;
    if(e.getSalary() < 10000){
      tax = e.getSalary * 0.02;
    } else {
      tax = e.getSalary * 0.05;
    }
  } else if(p instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) p;
    tax = b.getProfit * 0.1;
  }
  
  return tax;
  
}",6
110,2,1,3,3,"/**
* Compute tax for different types of people.
* Tax is 0 for veterans and everyone else.
*/
double getTaxForPerson(Person p) {
  double tax = 0;
  if(p instanceof Employee) {
    Employee e = (Employee) p;
    if(e.getSalary() < 10000){
      tax = e.getSalary * 0.02;
    } else {
      tax = e.getSalary * 0.05;
    }
  } else if(p instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) p;
    tax = b.getProfit * 0.1;
  }
  
  return tax;
  
}",isabelle,111,73,"isabelle/**
* Compute tax for different types of people.
* Tax is 0 for veterans and everyone else.
*/
double getTaxForPerson(Person p) {
  double tax = 0;
  if(p instanceof Employee) {
    Employee e = (Employee) p;
    if(e.getSalary() < 10000){
      tax = e.getSalary * 0.02;
    } else {
      tax = e.getSalary * 0.05;
    }
  } else if(p instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) p;
    tax = b.getProfit * 0.1;
  }
  
  return tax;
  
}",6
111,2,1,1,3,"/**
* Compute tax for different types of people.
* Tax is 0 for veterans and everyone else.
*/
double getTaxForPerson(Person p) {
  double tax = 0;
  if(p instanceof Employee) {
    Employee e = (Employee) p;
    if(e.getSalary() < 10000){
      tax = e.getSalary * 0.02;
    } else {
      tax = e.getSalary * 0.05;
    }
  } else if(p instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) p;
    tax = b.getProfit * 0.1;
  }
  
  return tax;
  
}",isabelle,112,73,"isabelle/**
* Compute tax for different types of people.
* Tax is 0 for veterans and everyone else.
*/
double getTaxForPerson(Person p) {
  double tax = 0;
  if(p instanceof Employee) {
    Employee e = (Employee) p;
    if(e.getSalary() < 10000){
      tax = e.getSalary * 0.02;
    } else {
      tax = e.getSalary * 0.05;
    }
  } else if(p instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) p;
    tax = b.getProfit * 0.1;
  }
  
  return tax;
  
}",6
112,2,1,1,3,"/**
* Compute tax for different types of people.
* Tax is 0 for veterans and everyone else.
*/
double getTaxForPerson(Person p) {
  double tax = 0;
  if(p instanceof Employee) {
    Employee e = (Employee) p;
    if(e.getSalary() < 10000){
      tax = e.getSalary * 0.02;
    } else {
      tax = e.getSalary * 0.05;
    }
  } else if(p instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) p;
    tax = b.getProfit * 0.1;
  }
  
  return tax;
  
}",isabelle,113,73,"isabelle/**
* Compute tax for different types of people.
* Tax is 0 for veterans and everyone else.
*/
double getTaxForPerson(Person p) {
  double tax = 0;
  if(p instanceof Employee) {
    Employee e = (Employee) p;
    if(e.getSalary() < 10000){
      tax = e.getSalary * 0.02;
    } else {
      tax = e.getSalary * 0.05;
    }
  } else if(p instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) p;
    tax = b.getProfit * 0.1;
  }
  
  return tax;
  
}",6
113,2,1,5,3,"/**
* Compute tax for different types of people.
* Tax is 0 for veterans and everyone else.
*/
double getTaxForPerson(Person p) {
  double tax = 0;
  if(p instanceof Employee) {
    Employee e = (Employee) p;
    if(e.getSalary() < 10000){
      tax = e.getSalary * 0.02;
    } else {
      tax = e.getSalary * 0.05;
    }
  } else if(p instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) p;
    tax = b.getProfit * 0.1;
  }
  
  return tax;
  
}",isabelle,114,73,"isabelle/**
* Compute tax for different types of people.
* Tax is 0 for veterans and everyone else.
*/
double getTaxForPerson(Person p) {
  double tax = 0;
  if(p instanceof Employee) {
    Employee e = (Employee) p;
    if(e.getSalary() < 10000){
      tax = e.getSalary * 0.02;
    } else {
      tax = e.getSalary * 0.05;
    }
  } else if(p instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) p;
    tax = b.getProfit * 0.1;
  }
  
  return tax;
  
}",6
114,2,0,2,1,"/**
* Compute tax for different types of people.
* Tax is 0 for veterans and everyone else.
*/
double getTaxForPerson(Person p) {
  double tax = 0;
  if(p instanceof Employee) {
    Employee e = (Employee) p;
    if(e.getSalary() < 10000){
      tax = e.getSalary * 0.02;
    } else {
      tax = e.getSalary * 0.05;
    }
  } else if(p instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) p;
    tax = b.getProfit * 0.1;
  }
  
  return tax;
  
}",isabelle,115,73,"isabelle/**
* Compute tax for different types of people.
* Tax is 0 for veterans and everyone else.
*/
double getTaxForPerson(Person p) {
  double tax = 0;
  if(p instanceof Employee) {
    Employee e = (Employee) p;
    if(e.getSalary() < 10000){
      tax = e.getSalary * 0.02;
    } else {
      tax = e.getSalary * 0.05;
    }
  } else if(p instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) p;
    tax = b.getProfit * 0.1;
  }
  
  return tax;
  
}",6
115,2,1,5,3,"/**
* Compute tax for different types of people.
* Tax is 0 for veterans and everyone else.
*/
double computeTaxForPerson(Person p) {
  double tax = 0;
  if(p instanceof Employee) {
    Employee e = (Employee) p;
    if(e.getSalary() < 10000){
      tax = e.getSalary * 0.02;
    } else {
      tax = e.getSalary * 0.05;
    }
  } else if(p instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) p;
    tax = b.getProfit * 0.1;
  }
  
  return tax;
  
}",isabelle,116,73,"isabelle/**
* Compute tax for different types of people.
* Tax is 0 for veterans and everyone else.
*/
double computeTaxForPerson(Person p) {
  double tax = 0;
  if(p instanceof Employee) {
    Employee e = (Employee) p;
    if(e.getSalary() < 10000){
      tax = e.getSalary * 0.02;
    } else {
      tax = e.getSalary * 0.05;
    }
  } else if(p instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) p;
    tax = b.getProfit * 0.1;
  }
  
  return tax;
  
}",5
116,2,0,5,1,"/**
* Compute tax for different types of people.
* Tax is 0 for veterans and everyone else.
*/
double computeTaxForPerson(Person p) {
  double tax = 0;
  if(p instanceof Employee) {
    Employee e = (Employee) p;
    if(e.getSalary() < 10000){
      tax = e.getSalary * 0.02;
    } else {
      tax = e.getSalary * 0.05;
    }
  } else if(p instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) p;
    tax = b.getProfit * 0.1;
  }
  
  return tax;
  
}",isabelle,117,73,"isabelle/**
* Compute tax for different types of people.
* Tax is 0 for veterans and everyone else.
*/
double computeTaxForPerson(Person p) {
  double tax = 0;
  if(p instanceof Employee) {
    Employee e = (Employee) p;
    if(e.getSalary() < 10000){
      tax = e.getSalary * 0.02;
    } else {
      tax = e.getSalary * 0.05;
    }
  } else if(p instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) p;
    tax = b.getProfit * 0.1;
  }
  
  return tax;
  
}",5
117,2,0,4,1,"/**
* Compute tax for different types of people.
* Tax is 0 for veterans and everyone else.
*/
double computeTaxForPerson(Person p) {
  double tax = 0;
  if(p instanceof Employee) {
    Employee e = (Employee) p;
    if(e.getSalary() < 10000){
      tax = e.getSalary * 0.02;
    } else {
      tax = e.getSalary * 0.05;
    }
  } else if(p instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) p;
    tax = b.getProfit * 0.1;
  }
  
  return tax;
  
}",isabelle,118,73,"isabelle/**
* Compute tax for different types of people.
* Tax is 0 for veterans and everyone else.
*/
double computeTaxForPerson(Person p) {
  double tax = 0;
  if(p instanceof Employee) {
    Employee e = (Employee) p;
    if(e.getSalary() < 10000){
      tax = e.getSalary * 0.02;
    } else {
      tax = e.getSalary * 0.05;
    }
  } else if(p instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) p;
    tax = b.getProfit * 0.1;
  }
  
  return tax;
  
}",5
118,2,0,3,1,"/**
* Compute tax for different types of people.
* Tax is 0 for veterans and everyone else.
*/
double computeTaxForPerson(Person p) {
  double tax = 0;
  if(p instanceof Employee) {
    Employee e = (Employee) p;
    if(e.getSalary() < 10000){
      tax = e.getSalary * 0.02;
    } else {
      tax = e.getSalary * 0.05;
    }
  } else if(p instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) p;
    tax = b.getProfit * 0.1;
  }
  
  return tax;
  
}",isabelle,119,73,"isabelle/**
* Compute tax for different types of people.
* Tax is 0 for veterans and everyone else.
*/
double computeTaxForPerson(Person p) {
  double tax = 0;
  if(p instanceof Employee) {
    Employee e = (Employee) p;
    if(e.getSalary() < 10000){
      tax = e.getSalary * 0.02;
    } else {
      tax = e.getSalary * 0.05;
    }
  } else if(p instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) p;
    tax = b.getProfit * 0.1;
  }
  
  return tax;
  
}",5
119,2,1,5,3,"/**
* Compute tax for different types of people.
* Tax is 0 for veterans and everyone else.
*/
double computeTaxForPerson(Person p) {
  double tax = 0;
  if(p instanceof Employee) {
    Employee e = (Employee) p;
    if(e.getSalary() < 10000){
      tax = e.getSalary * 0.02;
    } else {
      tax = e.getSalary * 0.05;
    }
  } else if(p instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) p;
    tax = b.getProfit * 0.1;
  }
  
  return tax;
  
}",isabelle,120,73,"isabelle/**
* Compute tax for different types of people.
* Tax is 0 for veterans and everyone else.
*/
double computeTaxForPerson(Person p) {
  double tax = 0;
  if(p instanceof Employee) {
    Employee e = (Employee) p;
    if(e.getSalary() < 10000){
      tax = e.getSalary * 0.02;
    } else {
      tax = e.getSalary * 0.05;
    }
  } else if(p instanceof BusinessOwner) {
    BusinessOwner b = (BusinessOwner) p;
    tax = b.getProfit * 0.1;
  }
  
  return tax;
  
}",5
120,2,0,2,2,"double calculateTaxFromSalary(double salary){
  
}",8430193,121,4,"8430193double calculateTaxFromSalary(double salary){
  
}",1
121,2,0,5,2,"double calculateTaxFromPersonSalary(Person person, double salary){
  // Given a person and his/her salary
  // Calculate tax
}",8430193,122,16,"8430193double calculateTaxFromPersonSalary(Person person, double salary){
  // Given a person and his/her salary
  // Calculate tax
}",2
122,2,0,2,1,"double calculateTaxFromPersonSalary(Person person, double salary){
  // Given a person and his/her salary
  // Calculate tax
}",8430193,123,16,"8430193double calculateTaxFromPersonSalary(Person person, double salary){
  // Given a person and his/her salary
  // Calculate tax
}",2
123,2,0,2,2,"double calculateTaxFromPersonSalary(Person person, double salary){
  // Given a person and his/her salary
  // Calculate tax
  // float rate = 0;
  
  //if(person instanceOf Employee){
  //}
}",8430193,124,25,"8430193double calculateTaxFromPersonSalary(Person person, double salary){
  // Given a person and his/her salary
  // Calculate tax
  // float rate = 0;
  
  //if(person instanceOf Employee){
  //}
}",3
124,2,1,5,1,"double calculateTaxFromPersonSalary(Person person, double salary){
  // Given a person and his/her salary
  // Calculate tax
  // float rate = 0;
  
  //if(person instanceOf Employee){
  //}
}",8430193,125,25,"8430193double calculateTaxFromPersonSalary(Person person, double salary){
  // Given a person and his/her salary
  // Calculate tax
  // float rate = 0;
  
  //if(person instanceOf Employee){
  //}
}",3
125,2,0,1,2,"double calculateTaxFromPersonSalary(Person person, double salary){
  // Given a person and his/her salary
  // Calculate tax
  // float rate = 0;
  
  //if(person instanceOf Employee){
  //}
}",8430193,126,25,"8430193double calculateTaxFromPersonSalary(Person person, double salary){
  // Given a person and his/her salary
  // Calculate tax
  // float rate = 0;
  
  //if(person instanceOf Employee){
  //}
}",3
126,2,0,1,2,"double calculateTaxFromPersonSalary(Person person, double salary){
  // Given a person and his/her salary
  // Calculate tax
  // float rate = 0;
  
  //if(person instanceOf Employee){
  // if(salary > 10000){
  // rate = 5;
  //}else{
  //   rate = 2;
//}
  //}
}",8430193,127,39,"8430193double calculateTaxFromPersonSalary(Person person, double salary){
  // Given a person and his/her salary
  // Calculate tax
  // float rate = 0;
  
  //if(person instanceOf Employee){
  // if(salary > 10000){
  // rate = 5;
  //}else{
  //   rate = 2;
//}
  //}
}",4
127,2,0,2,2,"double calculateTaxFromPersonSalary(Person person, double salary){
  // Given a person and his/her salary
  // Calculate tax
  // float rate = 0;
  
  //if(person instanceOf Employee){
  // if(salary > 10000){
  // rate = 5;
  //}else{
  //   rate = 2;
//}
  //}
}",8430193,128,39,"8430193double calculateTaxFromPersonSalary(Person person, double salary){
  // Given a person and his/her salary
  // Calculate tax
  // float rate = 0;
  
  //if(person instanceOf Employee){
  // if(salary > 10000){
  // rate = 5;
  //}else{
  //   rate = 2;
//}
  //}
}",4
128,2,1,3,2,"double calculateTaxFromPersonSalary(Person person, double salary){
  // Given a person and his/her salary
  // Calculate tax
  // float rate = 0;
  
  //if(person instanceOf Employee){
  // if(salary > 10000){
  // rate = 5;
  //}else{
  //   rate = 2;
//}
  //}
}",8430193,129,39,"8430193double calculateTaxFromPersonSalary(Person person, double salary){
  // Given a person and his/her salary
  // Calculate tax
  // float rate = 0;
  
  //if(person instanceOf Employee){
  // if(salary > 10000){
  // rate = 5;
  //}else{
  //   rate = 2;
//}
  //}
}",4
129,2,1,5,2,"double calculateTaxFromPersonSalary(Person person, double salary){
  // Given a person and his/her salary
  // Calculate tax
  // float rate = 0;
  
  //if(person instanceOf Employee){
  // if(salary > 10000){
  // rate = 5;
  //}else{
  //   rate = 2;
//}
  //}
}",8430193,130,39,"8430193double calculateTaxFromPersonSalary(Person person, double salary){
  // Given a person and his/her salary
  // Calculate tax
  // float rate = 0;
  
  //if(person instanceOf Employee){
  // if(salary > 10000){
  // rate = 5;
  //}else{
  //   rate = 2;
//}
  //}
}",4
130,2,0,1,2,"double calculateTaxFromPersonSalary(Person person, double salary){
  // Given a person and his/her salary
  // Calculate tax
  // float rate = 0;
  
  //if(person instanceOf Employee){
  // if(salary > 10000){
  // rate = 5;
  //}else{
  //   rate = 2;
//}
  //}else if(person instanceOf BusinessOwner){
  // rate = 10;
//}
}",8430193,131,47,"8430193double calculateTaxFromPersonSalary(Person person, double salary){
  // Given a person and his/her salary
  // Calculate tax
  // float rate = 0;
  
  //if(person instanceOf Employee){
  // if(salary > 10000){
  // rate = 5;
  //}else{
  //   rate = 2;
//}
  //}else if(person instanceOf BusinessOwner){
  // rate = 10;
//}
}",5
131,2,1,3,1,"double calculateTaxFromPersonSalary(Person person, double salary){
  // Given a person and his/her salary
  // Calculate tax
  // float rate = 0;
  
  //if(person instanceOf Employee){
  // if(salary > 10000){
  // rate = 5;
  //}else{
  //   rate = 2;
//}
  //}else if(person instanceOf BusinessOwner){
  // rate = 10;
//}
}",8430193,132,47,"8430193double calculateTaxFromPersonSalary(Person person, double salary){
  // Given a person and his/her salary
  // Calculate tax
  // float rate = 0;
  
  //if(person instanceOf Employee){
  // if(salary > 10000){
  // rate = 5;
  //}else{
  //   rate = 2;
//}
  //}else if(person instanceOf BusinessOwner){
  // rate = 10;
//}
}",5
132,2,0,2,2,"double calculateTaxFromPersonSalary(Person person, double salary){
  // Given a person and his/her salary
  // Calculate tax
  // float rate = 0;
  
  //if(person instanceOf Employee){
  // if(salary > 10000){
  // rate = 5;
  //}else{
  //   rate = 2;
//}
  //}else if(person instanceOf BusinessOwner){
  // rate = 10;
//}
}",8430193,133,47,"8430193double calculateTaxFromPersonSalary(Person person, double salary){
  // Given a person and his/her salary
  // Calculate tax
  // float rate = 0;
  
  //if(person instanceOf Employee){
  // if(salary > 10000){
  // rate = 5;
  //}else{
  //   rate = 2;
//}
  //}else if(person instanceOf BusinessOwner){
  // rate = 10;
//}
}",5
133,2,0,2,3,"double calculateTaxFromPersonSalary(Person person, double salary){
  // Given a person and his/her salary
  // Calculate tax
  // float rate = 0;
  
  //if(person instanceOf Employee){
  // if(salary > 10000){
  // rate = 5;
  //}else{
  //   rate = 2;
//}
  //}else if(person instanceOf BusinessOwner){
  // rate = 10;
//}
}",8430193,134,47,"8430193double calculateTaxFromPersonSalary(Person person, double salary){
  // Given a person and his/her salary
  // Calculate tax
  // float rate = 0;
  
  //if(person instanceOf Employee){
  // if(salary > 10000){
  // rate = 5;
  //}else{
  //   rate = 2;
//}
  //}else if(person instanceOf BusinessOwner){
  // rate = 10;
//}
}",5
134,2,0,1,1,"double calculateTaxFromPersonSalary(Person person, double salary){
  // Given a person and his/her salary
  // Calculate tax
  // float rate = 0;
  
  //if(person instanceOf Employee){
  // if(salary > 10000){
  // rate = 5;
  //}else{
  //   rate = 2;
//}
  //}else if(person instanceOf BusinessOwner){
  // rate = 10;
//}
}",8430193,135,47,"8430193double calculateTaxFromPersonSalary(Person person, double salary){
  // Given a person and his/her salary
  // Calculate tax
  // float rate = 0;
  
  //if(person instanceOf Employee){
  // if(salary > 10000){
  // rate = 5;
  //}else{
  //   rate = 2;
//}
  //}else if(person instanceOf BusinessOwner){
  // rate = 10;
//}
}",5
135,1,0,2,1,"int largestDifferenceInArray(int[] ar){
  
}",8430193,136,4,"8430193int largestDifferenceInArray(int[] ar){
  
}",2
136,1,0,5,2,"int largestDifferenceInArray(int[] ar){
  
}",8430193,137,4,"8430193int largestDifferenceInArray(int[] ar){
  
}",2
137,1,0,2,3,"int largestDifferenceInArrayElements(int[] ar){
  
}",8430193,138,4,"8430193int largestDifferenceInArrayElements(int[] ar){
  
}",3
138,1,0,2,2,"int largestDifferenceInArrayElements(int[] ar){
  
}",8430193,139,4,"8430193int largestDifferenceInArrayElements(int[] ar){
  
}",3
139,1,0,4,1,"int largestDifferenceInArrayElements(int[] ar){
  
}",8430193,140,4,"8430193int largestDifferenceInArrayElements(int[] ar){
  
}",3
140,1,0,4,2,"int largestDifferenceInArrayElements(int[] ar){
  
  // find max and min element from the array
  
}",8430193,141,13,"8430193int largestDifferenceInArrayElements(int[] ar){
  
  // find max and min element from the array
  
}",2
141,1,1,1,2,"int largestDifferenceInArrayElements(int[] ar){
  
  // find max and min element from the array
  
}",8430193,142,13,"8430193int largestDifferenceInArrayElements(int[] ar){
  
  // find max and min element from the array
  
}",2
142,1,0,4,1,"int largestDifferenceInArrayElements(int[] ar){
  
  // find max and min element from the array
  // returns difference between max and min
  
}",8430193,143,20,"8430193int largestDifferenceInArrayElements(int[] ar){
  
  // find max and min element from the array
  // returns difference between max and min
  
}",2
143,1,1,1,2,"int largestDifferenceInArrayElements(int[] ar){
  
  // find max and min element from the array
  // returns difference between max and min
  
}",8430193,144,20,"8430193int largestDifferenceInArrayElements(int[] ar){
  
  // find max and min element from the array
  // returns difference between max and min
  
}",2
144,1,0,2,2,"int largestDifferenceInArrayElements(int[] ar){
  
  // find maximum element from the array
  // find minimum element from the array
  // returns difference between max and min
  
}",8430193,145,25,"8430193int largestDifferenceInArrayElements(int[] ar){
  
  // find maximum element from the array
  // find minimum element from the array
  // returns difference between max and min
  
}",3
145,1,0,3,2,"int largestDifferenceInArrayElements(int[] ar){
  
  // find maximum element from the array
  // find minimum element from the array
  // returns difference between max and min
  
}",8430193,146,25,"8430193int largestDifferenceInArrayElements(int[] ar){
  
  // find maximum element from the array
  // find minimum element from the array
  // returns difference between max and min
  
}",3
146,1,0,2,2,"int largestDifferenceInArrayElements(int[] ar){
  
  // find maximum element from the array
  // find minimum element from the array
  // returns difference between max and min
  
}",8430193,147,25,"8430193int largestDifferenceInArrayElements(int[] ar){
  
  // find maximum element from the array
  // find minimum element from the array
  // returns difference between max and min
  
}",3
147,1,0,3,4,"public static void main(int []a)
{
  int total=0;
  for(int i=0;a[i];i++)
    
    
    
  
}",1071643,148,11,"1071643public static void main(int []a)
{
  int total=0;
  for(int i=0;a[i];i++)
    
    
    
  
}",10
148,1,0,1,4,"public static void main(int []a)
{
  int total=0;
  for(int i=0;a[i];i++)
    
    
    
  
}",1071643,149,11,"1071643public static void main(int []a)
{
  int total=0;
  for(int i=0;a[i];i++)
    
    
    
  
}",10
149,1,0,2,3,"public static void main(int []a)
{
  int total=0;
  for(int i=0;a[i];i++)
    
    
    
  
}",1071643,150,11,"1071643public static void main(int []a)
{
  int total=0;
  for(int i=0;a[i];i++)
    
    
    
  
}",10
150,1,1,5,4,"public static void main(int []a)
{
  int total=0;
  for(int i=0;a[i];i++)
    
    
    
  
}",1071643,151,11,"1071643public static void main(int []a)
{
  int total=0;
  for(int i=0;a[i];i++)
    
    
    
  
}",10
151,1,1,4,4,"public static void main(int []a)
{
  int total=0;
  for(int i=0;a[i];i++)
    
    
    
  
}",1071643,152,11,"1071643public static void main(int []a)
{
  int total=0;
  for(int i=0;a[i];i++)
    
    
    
  
}",10
152,1,1,3,4,"public static void main(int []a)
{
  int total=0;
  for(int i=0;a[i];i++)
    
    
    
  
}",1071643,153,11,"1071643public static void main(int []a)
{
  int total=0;
  for(int i=0;a[i];i++)
    
    
    
  
}",10
153,1,1,1,4,"public static void main(int []a)
{
  int total=0;
  for(int i=0;a[i];i++)
    
    
    
  
}",1071643,154,11,"1071643public static void main(int []a)
{
  int total=0;
  for(int i=0;a[i];i++)
    
    
    
  
}",10
154,1,1,2,3,"public static void main(int []a)
{
  int total=0;
  for(int i=0;a[i];i++)
    
    
    
  
}",1071643,155,11,"1071643public static void main(int []a)
{
  int total=0;
  for(int i=0;a[i];i++)
    
    
    
  
}",10
155,1,0,4,4,"public static void main(int []a)
{
  int total=0;
  for(int i=0;a[i];i++)
    
    
    
  
}",1071643,156,11,"1071643public static void main(int []a)
{
  int total=0;
  for(int i=0;a[i];i++)
    
    
    
  
}",10
156,1,0,5,4,"public static void main(int []a)
{
  int total=0;
  for(int i=0;a[i];i++)
    
    
    
  
}",1071643,157,11,"1071643public static void main(int []a)
{
  int total=0;
  for(int i=0;a[i];i++)
    
    
    
  
}",10
157,2,0,4,3,"double computeTax(Employee e)
{
  
}",7824879,158,5,"7824879double computeTax(Employee e)
{
  
}",1
158,2,0,1,3,"double computeTax()
{
  Person p;
  Employee e=new Employee();
  if (e.getSalary()<10000)
    tax=e.getSalary()*.02;
  else
    tax=e.getSalary()*.05;
  BusinessOwner bo=new BusinessOwner();
  tax=bo.getProfit()*.1;
  Veterans v=new Veterans();
  tax=0;
}",7824879,159,22,"7824879double computeTax()
{
  Person p;
  Employee e=new Employee();
  if (e.getSalary()<10000)
    tax=e.getSalary()*.02;
  else
    tax=e.getSalary()*.05;
  BusinessOwner bo=new BusinessOwner();
  tax=bo.getProfit()*.1;
  Veterans v=new Veterans();
  tax=0;
}",14
159,2,0,1,3,"double computeTax()
{
  Person p;
  Employee e=new Employee();
  if (e.getSalary()<10000)
    tax=e.getSalary()*.02;
  else
    tax=e.getSalary()*.05;
  BusinessOwner bo=new BusinessOwner();
  tax=bo.getProfit()*.1;
  Veterans v=new Veterans();
  tax=0;
}",7824879,160,22,"7824879double computeTax()
{
  Person p;
  Employee e=new Employee();
  if (e.getSalary()<10000)
    tax=e.getSalary()*.02;
  else
    tax=e.getSalary()*.05;
  BusinessOwner bo=new BusinessOwner();
  tax=bo.getProfit()*.1;
  Veterans v=new Veterans();
  tax=0;
}",14
160,2,0,1,4,"double computeTax()
{
  Person p;
  Employee e=new Employee();
  if (e.getSalary()<10000)
    tax=e.getSalary()*.02;
  else
    tax=e.getSalary()*.05;
  BusinessOwner bo=new BusinessOwner();
  tax=bo.getProfit()*.1;
  Veterans v=new Veterans();
  tax=0;
}",7824879,161,22,"7824879double computeTax()
{
  Person p;
  Employee e=new Employee();
  if (e.getSalary()<10000)
    tax=e.getSalary()*.02;
  else
    tax=e.getSalary()*.05;
  BusinessOwner bo=new BusinessOwner();
  tax=bo.getProfit()*.1;
  Veterans v=new Veterans();
  tax=0;
}",14
161,2,0,2,4,"double computeTax()
{
  Person p;
  Employee e=new Employee();
  if (e.getSalary()<10000)
    tax=e.getSalary()*.02;
  else
    tax=e.getSalary()*.05;
  BusinessOwner bo=new BusinessOwner();
  tax=bo.getProfit()*.1;
  Veterans v=new Veterans();
  tax=0;
}",7824879,162,22,"7824879double computeTax()
{
  Person p;
  Employee e=new Employee();
  if (e.getSalary()<10000)
    tax=e.getSalary()*.02;
  else
    tax=e.getSalary()*.05;
  BusinessOwner bo=new BusinessOwner();
  tax=bo.getProfit()*.1;
  Veterans v=new Veterans();
  tax=0;
}",14
162,2,1,3,3,"double computeTax()
{
  Person p;
  Employee e=new Employee();
  if (e.getSalary()<10000)
    tax=e.getSalary()*.02;
  else
    tax=e.getSalary()*.05;
  BusinessOwner bo=new BusinessOwner();
  tax=bo.getProfit()*.1;
  Veterans v=new Veterans();
  tax=0;
}",7824879,163,22,"7824879double computeTax()
{
  Person p;
  Employee e=new Employee();
  if (e.getSalary()<10000)
    tax=e.getSalary()*.02;
  else
    tax=e.getSalary()*.05;
  BusinessOwner bo=new BusinessOwner();
  tax=bo.getProfit()*.1;
  Veterans v=new Veterans();
  tax=0;
}",14
163,2,0,2,4,"double computeTax()
{
  Person p;
  Employee e=new Employee();
  if (e.getSalary()<10000)
    tax=e.getSalary()*.02;
  else
    tax=e.getSalary()*.05;
  BusinessOwner bo=new BusinessOwner();
  tax=bo.getProfit()*.1;
  Veterans v=new Veterans();
  tax=0;
}",7824879,164,22,"7824879double computeTax()
{
  Person p;
  Employee e=new Employee();
  if (e.getSalary()<10000)
    tax=e.getSalary()*.02;
  else
    tax=e.getSalary()*.05;
  BusinessOwner bo=new BusinessOwner();
  tax=bo.getProfit()*.1;
  Veterans v=new Veterans();
  tax=0;
}",14
164,2,0,2,4,"double computeTax()
{
  Person p;
  Employee e=new Employee();
  if (e.getSalary()<10000)
    tax=e.getSalary()*.02;
  else
    tax=e.getSalary()*.05;
  BusinessOwner bo=new BusinessOwner();
  tax=bo.getProfit()*.1;
  Veterans v=new Veterans();
  tax=0;
}",7824879,165,22,"7824879double computeTax()
{
  Person p;
  Employee e=new Employee();
  if (e.getSalary()<10000)
    tax=e.getSalary()*.02;
  else
    tax=e.getSalary()*.05;
  BusinessOwner bo=new BusinessOwner();
  tax=bo.getProfit()*.1;
  Veterans v=new Veterans();
  tax=0;
}",14
165,2,0,5,2,"double computeTax()
{
  Person p;
  Employee e=new Employee();
  if (e.getSalary()<10000)
    tax=e.getSalary()*.02;
  else
    tax=e.getSalary()*.05;
  BusinessOwner bo=new BusinessOwner();
  tax=bo.getProfit()*.1;
  Veterans v=new Veterans();
  tax=0;
}",7824879,166,22,"7824879double computeTax()
{
  Person p;
  Employee e=new Employee();
  if (e.getSalary()<10000)
    tax=e.getSalary()*.02;
  else
    tax=e.getSalary()*.05;
  BusinessOwner bo=new BusinessOwner();
  tax=bo.getProfit()*.1;
  Veterans v=new Veterans();
  tax=0;
}",14
166,2,0,1,2,"double computeTax()
{
  Person p;
  Employee e=new Employee();
  if (e.getSalary()<10000)
    tax=e.getSalary()*.02;
  else
    tax=e.getSalary()*.05;
  BusinessOwner bo=new BusinessOwner();
  tax=bo.getProfit()*.1;
  Veterans v=new Veterans();
  tax=0;
}",7824879,167,22,"7824879double computeTax()
{
  Person p;
  Employee e=new Employee();
  if (e.getSalary()<10000)
    tax=e.getSalary()*.02;
  else
    tax=e.getSalary()*.05;
  BusinessOwner bo=new BusinessOwner();
  tax=bo.getProfit()*.1;
  Veterans v=new Veterans();
  tax=0;
}",14
167,2,0,2,3,"double computeTax()
{
  Person p;
  Employee e=new Employee();
  if (e.getSalary()<10000)
    tax=e.getSalary()*.02;
  else
    tax=e.getSalary()*.05;
  BusinessOwner bo=new BusinessOwner();
  tax=bo.getProfit()*.1;
  Veterans v=new Veterans();
  tax=0;
}",7824879,168,22,"7824879double computeTax()
{
  Person p;
  Employee e=new Employee();
  if (e.getSalary()<10000)
    tax=e.getSalary()*.02;
  else
    tax=e.getSalary()*.05;
  BusinessOwner bo=new BusinessOwner();
  tax=bo.getProfit()*.1;
  Veterans v=new Veterans();
  tax=0;
}",14
168,2,0,5,2,"double computeTax()
{
  Person p;
  Employee e=new Employee();
  if (e.getSalary()<10000)
    tax=e.getSalary()*.02;
  else
    tax=e.getSalary()*.05;
  BusinessOwner bo=new BusinessOwner();
  tax=bo.getProfit()*.1;
  Veterans v=new Veterans();
  tax=0;
}",7824879,169,22,"7824879double computeTax()
{
  Person p;
  Employee e=new Employee();
  if (e.getSalary()<10000)
    tax=e.getSalary()*.02;
  else
    tax=e.getSalary()*.05;
  BusinessOwner bo=new BusinessOwner();
  tax=bo.getProfit()*.1;
  Veterans v=new Veterans();
  tax=0;
}",14
169,2,0,5,2,"double computeTax()
{
  Person p;
  Employee e=new Employee();
  if (e.getSalary()<10000)
    tax=e.getSalary()*.02;
  else
    tax=e.getSalary()*.05;
  BusinessOwner bo=new BusinessOwner();
  tax=bo.getProfit()*.1;
  Veterans v=new Veterans();
  tax=0;
}",7824879,170,22,"7824879double computeTax()
{
  Person p;
  Employee e=new Employee();
  if (e.getSalary()<10000)
    tax=e.getSalary()*.02;
  else
    tax=e.getSalary()*.05;
  BusinessOwner bo=new BusinessOwner();
  tax=bo.getProfit()*.1;
  Veterans v=new Veterans();
  tax=0;
}",14
170,2,0,1,4,"double computeTax()
{
  Person p;
  Employee e=new Employee();
  if (e.getSalary()<10000)
    tax=e.getSalary()*.02;
  else
    tax=e.getSalary()*.05;
  BusinessOwner bo=new BusinessOwner();
  tax=bo.getProfit()*.1;
  Veterans v=new Veterans();
  tax=0;
}",7824879,171,22,"7824879double computeTax()
{
  Person p;
  Employee e=new Employee();
  if (e.getSalary()<10000)
    tax=e.getSalary()*.02;
  else
    tax=e.getSalary()*.05;
  BusinessOwner bo=new BusinessOwner();
  tax=bo.getProfit()*.1;
  Veterans v=new Veterans();
  tax=0;
}",14
171,2,0,1,4,"double computeTax()
{
  Person p;
  Employee e=new Employee();
  if (e.getSalary()<10000)
    tax=e.getSalary()*.02;
  else
    tax=e.getSalary()*.05;
  BusinessOwner bo=new BusinessOwner();
  tax=bo.getProfit()*.1;
  Veterans v=new Veterans();
  tax=0;
}",7824879,172,22,"7824879double computeTax()
{
  Person p;
  Employee e=new Employee();
  if (e.getSalary()<10000)
    tax=e.getSalary()*.02;
  else
    tax=e.getSalary()*.05;
  BusinessOwner bo=new BusinessOwner();
  tax=bo.getProfit()*.1;
  Veterans v=new Veterans();
  tax=0;
}",14
172,1,0,4,3,"double diffElement(int[] a)
{
  int max=a[0];
  for(int i;i<=a.length;i++)
    if (max<a[i])
     max=a[i];
  int min=0;
  for(int i;i<=a.length;i++)
     if (a[i]<min)
		min=a[i];
  diff=max-min;
  return diff;
}",7824879,173,22,"7824879double diffElement(int[] a)
{
  int max=a[0];
  for(int i;i<=a.length;i++)
    if (max<a[i])
     max=a[i];
  int min=0;
  for(int i;i<=a.length;i++)
     if (a[i]<min)
		min=a[i];
  diff=max-min;
  return diff;
}",15
173,1,0,1,2,"double diffElement(int[] a)
{
  int max=a[0];
  for(int i;i<=a.length;i++)
    if (max<a[i])
     max=a[i];
  int min=0;
  for(int i;i<=a.length;i++)
     if (a[i]<min)
		min=a[i];
  diff=max-min;
  return diff;
}",7824879,174,22,"7824879double diffElement(int[] a)
{
  int max=a[0];
  for(int i;i<=a.length;i++)
    if (max<a[i])
     max=a[i];
  int min=0;
  for(int i;i<=a.length;i++)
     if (a[i]<min)
		min=a[i];
  diff=max-min;
  return diff;
}",15
174,1,0,1,2,"double diffElement(int[] a)
{
  int max=a[0];
  for(int i;i<=a.length;i++)
    if (max<a[i])
     max=a[i];
  int min=0;
  for(int i;i<=a.length;i++)
     if (a[i]<min)
		min=a[i];
  diff=max-min;
  return diff;
}",7824879,175,22,"7824879double diffElement(int[] a)
{
  int max=a[0];
  for(int i;i<=a.length;i++)
    if (max<a[i])
     max=a[i];
  int min=0;
  for(int i;i<=a.length;i++)
     if (a[i]<min)
		min=a[i];
  diff=max-min;
  return diff;
}",15
175,1,1,3,3,"double diffElement(int[] a)
{
  int max=a[0];
  for(int i;i<=a.length;i++)
    if (max<a[i])
     max=a[i];
  int min=0;
  for(int i;i<=a.length;i++)
     if (a[i]<min)
		min=a[i];
  diff=max-min;
  return diff;
}",7824879,176,22,"7824879double diffElement(int[] a)
{
  int max=a[0];
  for(int i;i<=a.length;i++)
    if (max<a[i])
     max=a[i];
  int min=0;
  for(int i;i<=a.length;i++)
     if (a[i]<min)
		min=a[i];
  diff=max-min;
  return diff;
}",15
176,1,1,5,2,"double diffElement(int[] a)
{
  int max=a[0];
  for(int i;i<=a.length;i++)
    if (max<a[i])
     max=a[i];
  int min=0;
  for(int i;i<=a.length;i++)
     if (a[i]<min)
		min=a[i];
  diff=max-min;
  return diff;
}",7824879,177,22,"7824879double diffElement(int[] a)
{
  int max=a[0];
  for(int i;i<=a.length;i++)
    if (max<a[i])
     max=a[i];
  int min=0;
  for(int i;i<=a.length;i++)
     if (a[i]<min)
		min=a[i];
  diff=max-min;
  return diff;
}",15
177,1,1,2,2,"double diffElement(int[] a)
{
  int max=a[0];
  for(int i;i<=a.length;i++)
    if (max<a[i])
     max=a[i];
  int min=0;
  for(int i;i<=a.length;i++)
     if (a[i]<min)
		min=a[i];
  diff=max-min;
  return diff;
}",7824879,178,22,"7824879double diffElement(int[] a)
{
  int max=a[0];
  for(int i;i<=a.length;i++)
    if (max<a[i])
     max=a[i];
  int min=0;
  for(int i;i<=a.length;i++)
     if (a[i]<min)
		min=a[i];
  diff=max-min;
  return diff;
}",15
178,1,1,2,2,"double diffElement(int[] a)
{
  int max=a[0];
  for(int i;i<=a.length;i++)
    if (max<a[i])
     max=a[i];
  int min=0;
  for(int i;i<=a.length;i++)
     if (a[i]<min)
		min=a[i];
  diff=max-min;
  return diff;
}",7824879,179,22,"7824879double diffElement(int[] a)
{
  int max=a[0];
  for(int i;i<=a.length;i++)
    if (max<a[i])
     max=a[i];
  int min=0;
  for(int i;i<=a.length;i++)
     if (a[i]<min)
		min=a[i];
  diff=max-min;
  return diff;
}",15
179,1,1,3,3,"double diffElement(int[] a)
{
  int max=a[0];
  for(int i;i<=a.length;i++)
    if (max<a[i])
     max=a[i];
  int min=0;
  for(int i;i<=a.length;i++)
     if (a[i]<min)
		min=a[i];
  diff=max-min;
  return diff;
}",7824879,180,22,"7824879double diffElement(int[] a)
{
  int max=a[0];
  for(int i;i<=a.length;i++)
    if (max<a[i])
     max=a[i];
  int min=0;
  for(int i;i<=a.length;i++)
     if (a[i]<min)
		min=a[i];
  diff=max-min;
  return diff;
}",15
180,1,1,3,3,"double diffElement(int[] a)
{
  int max=a[0];
  for(int i;i<=a.length;i++)
    if (max<a[i])
     max=a[i];
  int min=0;
  for(int i;i<=a.length;i++)
     if (a[i]<min)
		min=a[i];
  diff=max-min;
  return diff;
}",7824879,181,22,"7824879double diffElement(int[] a)
{
  int max=a[0];
  for(int i;i<=a.length;i++)
    if (max<a[i])
     max=a[i];
  int min=0;
  for(int i;i<=a.length;i++)
     if (a[i]<min)
		min=a[i];
  diff=max-min;
  return diff;
}",15
181,1,0,4,3,"double diffElement(int[] a)
{
  int max=a[0];
  for(int i;i<=a.length;i++)
    if (max<a[i])
     max=a[i];
  int min=0;
  for(int i;i<=a.length;i++)
     if (a[i]<min)
		min=a[i];
  diff=max-min;
  return diff;
}",7824879,182,22,"7824879double diffElement(int[] a)
{
  int max=a[0];
  for(int i;i<=a.length;i++)
    if (max<a[i])
     max=a[i];
  int min=0;
  for(int i;i<=a.length;i++)
     if (a[i]<min)
		min=a[i];
  diff=max-min;
  return diff;
}",15
182,1,0,5,4,"double diffElement(int[] a)
{
  int max=a[0];
  for(int i;i<=a.length;i++)
    if (max<a[i])
     max=a[i];
  int min=0;
  for(int i;i<=a.length;i++)
     if (a[i]<min)
		min=a[i];
  diff=max-min;
  return diff;
}",7824879,183,22,"7824879double diffElement(int[] a)
{
  int max=a[0];
  for(int i;i<=a.length;i++)
    if (max<a[i])
     max=a[i];
  int min=0;
  for(int i;i<=a.length;i++)
     if (a[i]<min)
		min=a[i];
  diff=max-min;
  return diff;
}",15
183,1,0,1,3,"double diffElement(int[] a)
{
  int max=a[0];
  for(int i;i<=a.length;i++)
    if (max<a[i])
     max=a[i];
  int min=0;
  for(int i;i<=a.length;i++)
     if (a[i]<min)
		min=a[i];
  diff=max-min;
  return diff;
}",7824879,184,22,"7824879double diffElement(int[] a)
{
  int max=a[0];
  for(int i;i<=a.length;i++)
    if (max<a[i])
     max=a[i];
  int min=0;
  for(int i;i<=a.length;i++)
     if (a[i]<min)
		min=a[i];
  diff=max-min;
  return diff;
}",15
184,1,0,1,3,"double diffElement(int[] a)
{
  int max=a[0];
  for(int i;i<=a.length;i++)
    if (max<a[i])
     max=a[i];
  int min=0;
  for(int i;i<=a.length;i++)
     if (a[i]<min)
		min=a[i];
  diff=max-min;
  return diff;
}",7824879,185,22,"7824879double diffElement(int[] a)
{
  int max=a[0];
  for(int i;i<=a.length;i++)
    if (max<a[i])
     max=a[i];
  int min=0;
  for(int i;i<=a.length;i++)
     if (a[i]<min)
		min=a[i];
  diff=max-min;
  return diff;
}",15
185,1,0,5,4,"double diffElement(int[] a)
{
  int max=a[0];
  for(int i;i<=a.length;i++)
    if (max<a[i])
     max=a[i];
  int min=0;
  for(int i;i<=a.length;i++)
     if (a[i]<min)
		min=a[i];
  diff=max-min;
  return diff;
}",7824879,186,22,"7824879double diffElement(int[] a)
{
  int max=a[0];
  for(int i;i<=a.length;i++)
    if (max<a[i])
     max=a[i];
  int min=0;
  for(int i;i<=a.length;i++)
     if (a[i]<min)
		min=a[i];
  diff=max-min;
  return diff;
}",15
186,1,0,5,4,"double diffElement(int[] a)
{
  int max=a[0];
  for(int i;i<=a.length;i++)
    if (max<a[i])
     max=a[i];
  int min=0;
  for(int i;i<=a.length;i++)
     if (a[i]<min)
		min=a[i];
  diff=max-min;
  return diff;
}",7824879,187,22,"7824879double diffElement(int[] a)
{
  int max=a[0];
  for(int i;i<=a.length;i++)
    if (max<a[i])
     max=a[i];
  int min=0;
  for(int i;i<=a.length;i++)
     if (a[i]<min)
		min=a[i];
  diff=max-min;
  return diff;
}",15
187,1,1,4,1,"int largestDifference(int a[]){
  
}",4309395,188,4,"4309395int largestDifference(int a[]){
  
}",10
188,1,0,2,5,"int largestDifference(int a[]){
  
}",4309395,189,4,"4309395int largestDifference(int a[]){
  
}",10
189,1,0,1,5,"int largestDifference(int a[]){
  
}",4309395,190,4,"4309395int largestDifference(int a[]){
  
}",10
190,1,0,5,1,"int largestDifference(int a[]){
  
}",4309395,191,4,"4309395int largestDifference(int a[]){
  
}",10
191,1,0,3,1,"int largestDifference(int a[]){
  
}",4309395,192,4,"4309395int largestDifference(int a[]){
  
}",10
192,1,1,1,1,"int largestDifference(int a[]){
  
}",4309395,193,4,"4309395int largestDifference(int a[]){
  
}",10
193,1,0,4,1,"int largestDifference(int a[]){
  
}",4309395,194,4,"4309395int largestDifference(int a[]){
  
}",10
194,1,1,5,1,"int largestDifference(int a[]){
  
}",4309395,195,4,"4309395int largestDifference(int a[]){
  
}",10
195,1,1,3,1,"int largestDifference(int a[]){
  
}",4309395,196,4,"4309395int largestDifference(int a[]){
  
}",10
196,1,1,2,1,"int largestDifference(int a[]){
  
}",4309395,197,4,"4309395int largestDifference(int a[]){
  
}",10
197,1,0,2,3,"int largestDifference(int a[]){
  //compute the largest difference between elements of an array of integers
}",4309395,198,15,"4309395int largestDifference(int a[]){
  //compute the largest difference between elements of an array of integers
}",3
198,1,0,2,5,"int largestDifference(int a[]){
  //compute the largest difference between elements of an array of integers
}",4309395,199,15,"4309395int largestDifference(int a[]){
  //compute the largest difference between elements of an array of integers
}",3
199,1,1,4,5,"int largestDifference(int a[]){
  //compute the largest difference between elements of an array of integers
}",4309395,200,15,"4309395int largestDifference(int a[]){
  //compute the largest difference between elements of an array of integers
}",3
200,2,0,1,3,"int computeTax(Person person){
  //compute tax given salary
}",4309395,201,8,"4309395int computeTax(Person person){
  //compute tax given salary
}",15
201,2,0,5,4,"int computeTax(Person person){
  //compute tax given salary
}",4309395,202,8,"4309395int computeTax(Person person){
  //compute tax given salary
}",15
202,2,0,3,4,"int computeTax(Person person){
  //compute tax given salary
}",4309395,203,8,"4309395int computeTax(Person person){
  //compute tax given salary
}",15
203,2,0,4,2,"int computeTax(Person person){
  //compute tax given salary
}",4309395,204,8,"4309395int computeTax(Person person){
  //compute tax given salary
}",15
204,2,0,1,4,"int computeTax(Person person){
  //compute tax given salary
}",4309395,205,8,"4309395int computeTax(Person person){
  //compute tax given salary
}",15
205,2,0,5,5,"int computeTax(Person person){
  //compute tax given salary
}",4309395,206,8,"4309395int computeTax(Person person){
  //compute tax given salary
}",15
206,2,0,3,5,"int computeTax(Person person){
  //compute tax given salary
}",4309395,207,8,"4309395int computeTax(Person person){
  //compute tax given salary
}",15
207,2,0,5,5,"int computeTax(Person person){
  //compute tax given salary
}",4309395,208,8,"4309395int computeTax(Person person){
  //compute tax given salary
}",15
208,2,0,3,5,"int computeTax(Person person){
  //compute tax given salary
}",4309395,209,8,"4309395int computeTax(Person person){
  //compute tax given salary
}",15
209,2,0,2,4,"int computeTax(Person person){
  //compute tax given salary
}",4309395,210,8,"4309395int computeTax(Person person){
  //compute tax given salary
}",15
210,2,0,1,4,"int computeTax(Person person){
  //compute tax given salary
}",4309395,211,8,"4309395int computeTax(Person person){
  //compute tax given salary
}",15
211,2,0,3,5,"int computeTax(Person person){
  //compute tax given salary
}",4309395,212,8,"4309395int computeTax(Person person){
  //compute tax given salary
}",15
212,2,0,5,5,"int computeTax(Person person){
  //compute tax given salary
}",4309395,213,8,"4309395int computeTax(Person person){
  //compute tax given salary
}",15
213,2,0,5,5,"int computeTax(Person person){
  //compute tax given salary
}",4309395,214,8,"4309395int computeTax(Person person){
  //compute tax given salary
}",15
214,2,0,1,3,"int computeTax(Person person){
  //compute tax given salary
}",4309395,215,8,"4309395int computeTax(Person person){
  //compute tax given salary
}",15
215,2,0,5,5,"private double calculateTax(Person person){
  double taxCal = 0;
  if(person instanceof Employee){
    if(((Employee)person).getSalary()<10000){
      taxCal= (person.getSalary())*0.02;
    }
    else
      taxCal= (person.getSalary())*0.05;
    
  }
  else if(person instanceof BusinessOwner ){
    taxCal= ((BusinessOwner)person.getProfit())*0.10;
  }
  else if(person instanceof Veteran ){
    return taxCal;
  }
  return taxCal;
  
  
}",7307170,216,38,"7307170private double calculateTax(Person person){
  double taxCal = 0;
  if(person instanceof Employee){
    if(((Employee)person).getSalary()<10000){
      taxCal= (person.getSalary())*0.02;
    }
    else
      taxCal= (person.getSalary())*0.05;
    
  }
  else if(person instanceof BusinessOwner ){
    taxCal= ((BusinessOwner)person.getProfit())*0.10;
  }
  else if(person instanceof Veteran ){
    return taxCal;
  }
  return taxCal;
  
  
}",20
216,2,0,4,5,"private double calculateTax(Person person){
  double taxCal = 0;
  if(person instanceof Employee){
    if(((Employee)person).getSalary()<10000){
      taxCal= (person.getSalary())*0.02;
    }
    else
      taxCal= (person.getSalary())*0.05;
    
  }
  else if(person instanceof BusinessOwner ){
    taxCal= ((BusinessOwner)person.getProfit())*0.10;
  }
  else if(person instanceof Veteran ){
    return taxCal;
  }
  return taxCal;
  
  
}",7307170,217,38,"7307170private double calculateTax(Person person){
  double taxCal = 0;
  if(person instanceof Employee){
    if(((Employee)person).getSalary()<10000){
      taxCal= (person.getSalary())*0.02;
    }
    else
      taxCal= (person.getSalary())*0.05;
    
  }
  else if(person instanceof BusinessOwner ){
    taxCal= ((BusinessOwner)person.getProfit())*0.10;
  }
  else if(person instanceof Veteran ){
    return taxCal;
  }
  return taxCal;
  
  
}",20
217,2,0,1,3,"private double calculateTax(Person person){
  double taxCal = 0;
  if(person instanceof Employee){
    if(((Employee)person).getSalary()<10000){
      taxCal= (person.getSalary())*0.02;
    }
    else
      taxCal= (person.getSalary())*0.05;
    
  }
  else if(person instanceof BusinessOwner ){
    taxCal= ((BusinessOwner)person.getProfit())*0.10;
  }
  else if(person instanceof Veteran ){
    return taxCal;
  }
  return taxCal;
  
  
}",7307170,218,38,"7307170private double calculateTax(Person person){
  double taxCal = 0;
  if(person instanceof Employee){
    if(((Employee)person).getSalary()<10000){
      taxCal= (person.getSalary())*0.02;
    }
    else
      taxCal= (person.getSalary())*0.05;
    
  }
  else if(person instanceof BusinessOwner ){
    taxCal= ((BusinessOwner)person.getProfit())*0.10;
  }
  else if(person instanceof Veteran ){
    return taxCal;
  }
  return taxCal;
  
  
}",20
218,2,1,2,5,"private double calculateTax(Person person){
  double taxCal = 0;
  if(person instanceof Employee){
    if(((Employee)person).getSalary()<10000){
      taxCal= (person.getSalary())*0.02;
    }
    else
      taxCal= (person.getSalary())*0.05;
    
  }
  else if(person instanceof BusinessOwner ){
    taxCal= ((BusinessOwner)person.getProfit())*0.10;
  }
  else if(person instanceof Veteran ){
    return taxCal;
  }
  return taxCal;
  
  
}",7307170,219,38,"7307170private double calculateTax(Person person){
  double taxCal = 0;
  if(person instanceof Employee){
    if(((Employee)person).getSalary()<10000){
      taxCal= (person.getSalary())*0.02;
    }
    else
      taxCal= (person.getSalary())*0.05;
    
  }
  else if(person instanceof BusinessOwner ){
    taxCal= ((BusinessOwner)person.getProfit())*0.10;
  }
  else if(person instanceof Veteran ){
    return taxCal;
  }
  return taxCal;
  
  
}",20
219,2,1,1,5,"private double calculateTax(Person person){
  double taxCal = 0;
  if(person instanceof Employee){
    if(((Employee)person).getSalary()<10000){
      taxCal= (person.getSalary())*0.02;
    }
    else
      taxCal= (person.getSalary())*0.05;
    
  }
  else if(person instanceof BusinessOwner ){
    taxCal= ((BusinessOwner)person.getProfit())*0.10;
  }
  else if(person instanceof Veteran ){
    return taxCal;
  }
  return taxCal;
  
  
}",7307170,220,38,"7307170private double calculateTax(Person person){
  double taxCal = 0;
  if(person instanceof Employee){
    if(((Employee)person).getSalary()<10000){
      taxCal= (person.getSalary())*0.02;
    }
    else
      taxCal= (person.getSalary())*0.05;
    
  }
  else if(person instanceof BusinessOwner ){
    taxCal= ((BusinessOwner)person.getProfit())*0.10;
  }
  else if(person instanceof Veteran ){
    return taxCal;
  }
  return taxCal;
  
  
}",20
220,2,1,4,5,"private double calculateTax(Person person){
  double taxCal = 0;
  if(person instanceof Employee){
    if(((Employee)person).getSalary()<10000){
      taxCal= (person.getSalary())*0.02;
    }
    else
      taxCal= (person.getSalary())*0.05;
    
  }
  else if(person instanceof BusinessOwner ){
    taxCal= ((BusinessOwner)person.getProfit())*0.10;
  }
  else if(person instanceof Veteran ){
    return taxCal;
  }
  return taxCal;
  
  
}",7307170,221,38,"7307170private double calculateTax(Person person){
  double taxCal = 0;
  if(person instanceof Employee){
    if(((Employee)person).getSalary()<10000){
      taxCal= (person.getSalary())*0.02;
    }
    else
      taxCal= (person.getSalary())*0.05;
    
  }
  else if(person instanceof BusinessOwner ){
    taxCal= ((BusinessOwner)person.getProfit())*0.10;
  }
  else if(person instanceof Veteran ){
    return taxCal;
  }
  return taxCal;
  
  
}",20
221,2,1,5,5,"private double calculateTax(Person person){
  double taxCal = 0;
  if(person instanceof Employee){
    if(((Employee)person).getSalary()<10000){
      taxCal= (person.getSalary())*0.02;
    }
    else
      taxCal= (person.getSalary())*0.05;
    
  }
  else if(person instanceof BusinessOwner ){
    taxCal= ((BusinessOwner)person.getProfit())*0.10;
  }
  else if(person instanceof Veteran ){
    return taxCal;
  }
  return taxCal;
  
  
}",7307170,222,38,"7307170private double calculateTax(Person person){
  double taxCal = 0;
  if(person instanceof Employee){
    if(((Employee)person).getSalary()<10000){
      taxCal= (person.getSalary())*0.02;
    }
    else
      taxCal= (person.getSalary())*0.05;
    
  }
  else if(person instanceof BusinessOwner ){
    taxCal= ((BusinessOwner)person.getProfit())*0.10;
  }
  else if(person instanceof Veteran ){
    return taxCal;
  }
  return taxCal;
  
  
}",20
222,2,1,3,4,"private double calculateTax(Person person){
  double taxCal = 0;
  if(person instanceof Employee){
    if(((Employee)person).getSalary()<10000){
      taxCal= (person.getSalary())*0.02;
    }
    else
      taxCal= (person.getSalary())*0.05;
    
  }
  else if(person instanceof BusinessOwner ){
    taxCal= ((BusinessOwner)person.getProfit())*0.10;
  }
  else if(person instanceof Veteran ){
    return taxCal;
  }
  return taxCal;
  
  
}",7307170,223,38,"7307170private double calculateTax(Person person){
  double taxCal = 0;
  if(person instanceof Employee){
    if(((Employee)person).getSalary()<10000){
      taxCal= (person.getSalary())*0.02;
    }
    else
      taxCal= (person.getSalary())*0.05;
    
  }
  else if(person instanceof BusinessOwner ){
    taxCal= ((BusinessOwner)person.getProfit())*0.10;
  }
  else if(person instanceof Veteran ){
    return taxCal;
  }
  return taxCal;
  
  
}",20
223,2,0,3,5,"private double calculateTax(Person person){
  double taxCal = 0;
  if(person instanceof Employee){
    if(((Employee)person).getSalary()<10000){
      taxCal= (person.getSalary())*0.02;
    }
    else
      taxCal= (person.getSalary())*0.05;
    
  }
  else if(person instanceof BusinessOwner ){
    taxCal= ((BusinessOwner)person.getProfit())*0.10;
  }
  else if(person instanceof Veteran ){
    return taxCal;
  }
  return taxCal;
  
  
}",7307170,224,38,"7307170private double calculateTax(Person person){
  double taxCal = 0;
  if(person instanceof Employee){
    if(((Employee)person).getSalary()<10000){
      taxCal= (person.getSalary())*0.02;
    }
    else
      taxCal= (person.getSalary())*0.05;
    
  }
  else if(person instanceof BusinessOwner ){
    taxCal= ((BusinessOwner)person.getProfit())*0.10;
  }
  else if(person instanceof Veteran ){
    return taxCal;
  }
  return taxCal;
  
  
}",20
224,2,0,2,3,"private double calculateTax(Person person){
  double taxCal = 0;
  if(person instanceof Employee){
    if(((Employee)person).getSalary()<10000){
      taxCal= (person.getSalary())*0.02;
    }
    else
      taxCal= (person.getSalary())*0.05;
    
  }
  else if(person instanceof BusinessOwner ){
    taxCal= ((BusinessOwner)person.getProfit())*0.10;
  }
  else if(person instanceof Veteran ){
    return taxCal;
  }
  return taxCal;
  
  
}",7307170,225,38,"7307170private double calculateTax(Person person){
  double taxCal = 0;
  if(person instanceof Employee){
    if(((Employee)person).getSalary()<10000){
      taxCal= (person.getSalary())*0.02;
    }
    else
      taxCal= (person.getSalary())*0.05;
    
  }
  else if(person instanceof BusinessOwner ){
    taxCal= ((BusinessOwner)person.getProfit())*0.10;
  }
  else if(person instanceof Veteran ){
    return taxCal;
  }
  return taxCal;
  
  
}",20
225,2,1,5,5,"private double calculateTax(Person person){
  double taxCal = 0;
  if(person instanceof Employee){
    if(((Employee)person).getSalary()<10000){
      taxCal= (person.getSalary())*0.02;
    }
    else
      taxCal= (person.getSalary())*0.05;
    
  }
  else if(person instanceof BusinessOwner ){
    taxCal= ((BusinessOwner)person.getProfit())*0.10;
  }
  else if(person instanceof Veteran ){
    return taxCal;
  }
  return taxCal;
  
  
}",7307170,226,38,"7307170private double calculateTax(Person person){
  double taxCal = 0;
  if(person instanceof Employee){
    if(((Employee)person).getSalary()<10000){
      taxCal= (person.getSalary())*0.02;
    }
    else
      taxCal= (person.getSalary())*0.05;
    
  }
  else if(person instanceof BusinessOwner ){
    taxCal= ((BusinessOwner)person.getProfit())*0.10;
  }
  else if(person instanceof Veteran ){
    return taxCal;
  }
  return taxCal;
  
  
}",20
226,2,0,5,4,"private double calculateTax(Person person){
  double taxCal = 0;
  if(person instanceof Employee){
    if(((Employee)person).getSalary()<10000){
      taxCal= (person.getSalary())*0.02;
    }
    else
      taxCal= (person.getSalary())*0.05;
    
  }
  else if(person instanceof BusinessOwner ){
    taxCal= ((BusinessOwner)person.getProfit())*0.10;
  }
  else if(person instanceof Veteran ){
    return taxCal;
  }
  return taxCal;
  
  
}",7307170,227,38,"7307170private double calculateTax(Person person){
  double taxCal = 0;
  if(person instanceof Employee){
    if(((Employee)person).getSalary()<10000){
      taxCal= (person.getSalary())*0.02;
    }
    else
      taxCal= (person.getSalary())*0.05;
    
  }
  else if(person instanceof BusinessOwner ){
    taxCal= ((BusinessOwner)person.getProfit())*0.10;
  }
  else if(person instanceof Veteran ){
    return taxCal;
  }
  return taxCal;
  
  
}",20
227,2,1,4,5,"private double calculateTax(Person person){
  double taxCal = 0;
  if(person instanceof Employee){
    if(((Employee)person).getSalary()<10000){
      taxCal= (person.getSalary())*0.02;
    }
    else
      taxCal= (person.getSalary())*0.05;
    
  }
  else if(person instanceof BusinessOwner ){
    taxCal= ((BusinessOwner)person.getProfit())*0.10;
  }
  else if(person instanceof Veteran ){
    return taxCal;
  }
  return taxCal;
  
  
}",7307170,228,38,"7307170private double calculateTax(Person person){
  double taxCal = 0;
  if(person instanceof Employee){
    if(((Employee)person).getSalary()<10000){
      taxCal= (person.getSalary())*0.02;
    }
    else
      taxCal= (person.getSalary())*0.05;
    
  }
  else if(person instanceof BusinessOwner ){
    taxCal= ((BusinessOwner)person.getProfit())*0.10;
  }
  else if(person instanceof Veteran ){
    return taxCal;
  }
  return taxCal;
  
  
}",20
228,2,0,1,3,"private double calculateTax(Person person){
  double taxCal = 0;
  if(person instanceof Employee){
    if(((Employee)person).getSalary()<10000){
      taxCal= (person.getSalary())*0.02;
    }
    else
      taxCal= (person.getSalary())*0.05;
    
  }
  else if(person instanceof BusinessOwner ){
    taxCal= ((BusinessOwner)person.getProfit())*0.10;
  }
  else if(person instanceof Veteran ){
    return taxCal;
  }
  return taxCal;
  
  
}",7307170,229,38,"7307170private double calculateTax(Person person){
  double taxCal = 0;
  if(person instanceof Employee){
    if(((Employee)person).getSalary()<10000){
      taxCal= (person.getSalary())*0.02;
    }
    else
      taxCal= (person.getSalary())*0.05;
    
  }
  else if(person instanceof BusinessOwner ){
    taxCal= ((BusinessOwner)person.getProfit())*0.10;
  }
  else if(person instanceof Veteran ){
    return taxCal;
  }
  return taxCal;
  
  
}",20
229,2,0,2,2,"private double calculateTax(Person person){
  double taxCal = 0;
  if(person instanceof Employee){
    if(((Employee)person).getSalary()<10000){
      taxCal= (person.getSalary())*0.02;
    }
    else
      taxCal= (person.getSalary())*0.05;
    
  }
  else if(person instanceof BusinessOwner ){
    taxCal= ((BusinessOwner)person.getProfit())*0.10;
  }
  else if(person instanceof Veteran ){
    return taxCal;
  }
  return taxCal;
  
  
}",7307170,230,38,"7307170private double calculateTax(Person person){
  double taxCal = 0;
  if(person instanceof Employee){
    if(((Employee)person).getSalary()<10000){
      taxCal= (person.getSalary())*0.02;
    }
    else
      taxCal= (person.getSalary())*0.05;
    
  }
  else if(person instanceof BusinessOwner ){
    taxCal= ((BusinessOwner)person.getProfit())*0.10;
  }
  else if(person instanceof Veteran ){
    return taxCal;
  }
  return taxCal;
  
  
}",20
230,2,1,3,5,"private double calculateTax(Person person){
  double taxCal = 0;
  if(person instanceof Employee){
    if(((Employee)person).getSalary()<10000){
      taxCal= (person.getSalary())*0.02;
    }
    else
      taxCal= (person.getSalary())*0.05;
    
  }
  else if(person instanceof BusinessOwner ){
    taxCal= ((BusinessOwner)person.getProfit())*0.10;
  }
  else if(person instanceof Veteran ){
    return taxCal;
  }
  return taxCal;
  
  
}",7307170,231,38,"7307170private double calculateTax(Person person){
  double taxCal = 0;
  if(person instanceof Employee){
    if(((Employee)person).getSalary()<10000){
      taxCal= (person.getSalary())*0.02;
    }
    else
      taxCal= (person.getSalary())*0.05;
    
  }
  else if(person instanceof BusinessOwner ){
    taxCal= ((BusinessOwner)person.getProfit())*0.10;
  }
  else if(person instanceof Veteran ){
    return taxCal;
  }
  return taxCal;
  
  
}",20
231,2,1,2,4,"private double calculateTax(Person person){
  double taxCal = 0;
  if(person instanceof Employee){
    if(((Employee)person).getSalary()<10000){
      taxCal= (person.getSalary())*0.02;
    }
    else
      taxCal= (person.getSalary())*0.05;
    
  }
  else if(person instanceof BusinessOwner ){
    taxCal= ((BusinessOwner)person.getProfit())*0.10;
  }
  else if(person instanceof Veteran ){
    return taxCal;
  }
  return taxCal;
  
  
}",7307170,232,38,"7307170private double calculateTax(Person person){
  double taxCal = 0;
  if(person instanceof Employee){
    if(((Employee)person).getSalary()<10000){
      taxCal= (person.getSalary())*0.02;
    }
    else
      taxCal= (person.getSalary())*0.05;
    
  }
  else if(person instanceof BusinessOwner ){
    taxCal= ((BusinessOwner)person.getProfit())*0.10;
  }
  else if(person instanceof Veteran ){
    return taxCal;
  }
  return taxCal;
  
  
}",20
232,2,0,4,5,"private double calculateTax(Person person){
  double taxCal = 0;
  if(person instanceof Employee){
    if(((Employee)person).getSalary()<10000){
      taxCal= (person.getSalary())*0.02;
    }
    else
      taxCal= (person.getSalary())*0.05;
    
  }
  else if(person instanceof BusinessOwner ){
    taxCal= ((BusinessOwner)person.getProfit())*0.10;
  }
  else if(person instanceof Veteran ){
    return taxCal;
  }
  return taxCal;
  
  
}",7307170,233,38,"7307170private double calculateTax(Person person){
  double taxCal = 0;
  if(person instanceof Employee){
    if(((Employee)person).getSalary()<10000){
      taxCal= (person.getSalary())*0.02;
    }
    else
      taxCal= (person.getSalary())*0.05;
    
  }
  else if(person instanceof BusinessOwner ){
    taxCal= ((BusinessOwner)person.getProfit())*0.10;
  }
  else if(person instanceof Veteran ){
    return taxCal;
  }
  return taxCal;
  
  
}",20
233,2,0,3,5,"private double calculateTax(Person person){
  double taxCal = 0;
  if(person instanceof Employee){
    if(((Employee)person).getSalary()<10000){
      taxCal= (person.getSalary())*0.02;
    }
    else
      taxCal= (person.getSalary())*0.05;
    
  }
  else if(person instanceof BusinessOwner ){
    taxCal= ((BusinessOwner)person.getProfit())*0.10;
  }
  else if(person instanceof Veteran ){
    return taxCal;
  }
  return taxCal;
  
  
}",7307170,234,38,"7307170private double calculateTax(Person person){
  double taxCal = 0;
  if(person instanceof Employee){
    if(((Employee)person).getSalary()<10000){
      taxCal= (person.getSalary())*0.02;
    }
    else
      taxCal= (person.getSalary())*0.05;
    
  }
  else if(person instanceof BusinessOwner ){
    taxCal= ((BusinessOwner)person.getProfit())*0.10;
  }
  else if(person instanceof Veteran ){
    return taxCal;
  }
  return taxCal;
  
  
}",20
234,2,1,1,5,"private double calculateTax(Person person){
  double taxCal = 0;
  if(person instanceof Employee){
    if(((Employee)person).getSalary()<10000){
      taxCal= (person.getSalary())*0.02;
    }
    else
      taxCal= (person.getSalary())*0.05;
    
  }
  else if(person instanceof BusinessOwner ){
    taxCal= ((BusinessOwner)person.getProfit())*0.10;
  }
  else if(person instanceof Veteran ){
    return taxCal;
  }
  return taxCal;
  
  
}",7307170,235,38,"7307170private double calculateTax(Person person){
  double taxCal = 0;
  if(person instanceof Employee){
    if(((Employee)person).getSalary()<10000){
      taxCal= (person.getSalary())*0.02;
    }
    else
      taxCal= (person.getSalary())*0.05;
    
  }
  else if(person instanceof BusinessOwner ){
    taxCal= ((BusinessOwner)person.getProfit())*0.10;
  }
  else if(person instanceof Veteran ){
    return taxCal;
  }
  return taxCal;
  
  
}",20
235,1,1,4,1,"private int diffCalci(int[] numbers){
  int largest = 0;
  int smallest = 0;
 	for(int i=0;i<numbers.length;i++){
      if(numbers[i]>largest )
        largest= numbers[i];
      if(numbers[i]<smallest)
        smallest=numbers[i];
    }
  return largest - smallest;
  
}",7307170,236,26,"7307170private int diffCalci(int[] numbers){
  int largest = 0;
  int smallest = 0;
 	for(int i=0;i<numbers.length;i++){
      if(numbers[i]>largest )
        largest= numbers[i];
      if(numbers[i]<smallest)
        smallest=numbers[i];
    }
  return largest - smallest;
  
}",15
236,1,1,2,2,"private int diffCalci(int[] numbers){
  int largest = 0;
  int smallest = 0;
 	for(int i=0;i<numbers.length;i++){
      if(numbers[i]>largest )
        largest= numbers[i];
      if(numbers[i]<smallest)
        smallest=numbers[i];
    }
  return largest - smallest;
  
}",7307170,237,26,"7307170private int diffCalci(int[] numbers){
  int largest = 0;
  int smallest = 0;
 	for(int i=0;i<numbers.length;i++){
      if(numbers[i]>largest )
        largest= numbers[i];
      if(numbers[i]<smallest)
        smallest=numbers[i];
    }
  return largest - smallest;
  
}",15
237,1,0,4,5,"private int diffCalci(int[] numbers){
  int largest = 0;
  int smallest = 0;
 	for(int i=0;i<numbers.length;i++){
      if(numbers[i]>largest )
        largest= numbers[i];
      if(numbers[i]<smallest)
        smallest=numbers[i];
    }
  return largest - smallest;
  
}",7307170,238,26,"7307170private int diffCalci(int[] numbers){
  int largest = 0;
  int smallest = 0;
 	for(int i=0;i<numbers.length;i++){
      if(numbers[i]>largest )
        largest= numbers[i];
      if(numbers[i]<smallest)
        smallest=numbers[i];
    }
  return largest - smallest;
  
}",15
238,1,0,3,5,"private int diffCalci(int[] numbers){
  int largest = 0;
  int smallest = 0;
 	for(int i=0;i<numbers.length;i++){
      if(numbers[i]>largest )
        largest= numbers[i];
      if(numbers[i]<smallest)
        smallest=numbers[i];
    }
  return largest - smallest;
  
}",7307170,239,26,"7307170private int diffCalci(int[] numbers){
  int largest = 0;
  int smallest = 0;
 	for(int i=0;i<numbers.length;i++){
      if(numbers[i]>largest )
        largest= numbers[i];
      if(numbers[i]<smallest)
        smallest=numbers[i];
    }
  return largest - smallest;
  
}",15
239,1,1,5,1,"private int diffCalci(int[] numbers){
  int largest = 0;
  int smallest = 0;
 	for(int i=0;i<numbers.length;i++){
      if(numbers[i]>largest )
        largest= numbers[i];
      if(numbers[i]<smallest)
        smallest=numbers[i];
    }
  return largest - smallest;
  
}",7307170,240,26,"7307170private int diffCalci(int[] numbers){
  int largest = 0;
  int smallest = 0;
 	for(int i=0;i<numbers.length;i++){
      if(numbers[i]>largest )
        largest= numbers[i];
      if(numbers[i]<smallest)
        smallest=numbers[i];
    }
  return largest - smallest;
  
}",15
240,1,1,1,4,"private int diffCalci(int[] numbers){
  int largest = 0;
  int smallest = 0;
 	for(int i=0;i<numbers.length;i++){
      if(numbers[i]>largest )
        largest= numbers[i];
      if(numbers[i]<smallest)
        smallest=numbers[i];
    }
  return largest - smallest;
  
}",7307170,241,26,"7307170private int diffCalci(int[] numbers){
  int largest = 0;
  int smallest = 0;
 	for(int i=0;i<numbers.length;i++){
      if(numbers[i]>largest )
        largest= numbers[i];
      if(numbers[i]<smallest)
        smallest=numbers[i];
    }
  return largest - smallest;
  
}",15
241,1,0,1,5,"private int diffCalci(int[] numbers){
  int largest = 0;
  int smallest = 0;
 	for(int i=0;i<numbers.length;i++){
      if(numbers[i]>largest )
        largest= numbers[i];
      if(numbers[i]<smallest)
        smallest=numbers[i];
    }
  return largest - smallest;
  
}",7307170,242,26,"7307170private int diffCalci(int[] numbers){
  int largest = 0;
  int smallest = 0;
 	for(int i=0;i<numbers.length;i++){
      if(numbers[i]>largest )
        largest= numbers[i];
      if(numbers[i]<smallest)
        smallest=numbers[i];
    }
  return largest - smallest;
  
}",15
242,1,0,2,5,"private int diffCalci(int[] numbers){
  int largest = 0;
  int smallest = 0;
 	for(int i=0;i<numbers.length;i++){
      if(numbers[i]>largest )
        largest= numbers[i];
      if(numbers[i]<smallest)
        smallest=numbers[i];
    }
  return largest - smallest;
  
}",7307170,243,26,"7307170private int diffCalci(int[] numbers){
  int largest = 0;
  int smallest = 0;
 	for(int i=0;i<numbers.length;i++){
      if(numbers[i]>largest )
        largest= numbers[i];
      if(numbers[i]<smallest)
        smallest=numbers[i];
    }
  return largest - smallest;
  
}",15
243,1,0,3,5,"private int diffCalci(int[] numbers){
  int largest = 0;
  int smallest = 0;
 	for(int i=0;i<numbers.length;i++){
      if(numbers[i]>largest )
        largest= numbers[i];
      if(numbers[i]<smallest)
        smallest=numbers[i];
    }
  return largest - smallest;
  
}",7307170,244,26,"7307170private int diffCalci(int[] numbers){
  int largest = 0;
  int smallest = 0;
 	for(int i=0;i<numbers.length;i++){
      if(numbers[i]>largest )
        largest= numbers[i];
      if(numbers[i]<smallest)
        smallest=numbers[i];
    }
  return largest - smallest;
  
}",15
244,1,0,2,1,"private int diffCalci(int[] numbers){
  int largest = 0;
  int smallest = 0;
 	for(int i=0;i<numbers.length;i++){
      if(numbers[i]>largest )
        largest= numbers[i];
      if(numbers[i]<smallest)
        smallest=numbers[i];
    }
  return largest - smallest;
  
}",7307170,245,26,"7307170private int diffCalci(int[] numbers){
  int largest = 0;
  int smallest = 0;
 	for(int i=0;i<numbers.length;i++){
      if(numbers[i]>largest )
        largest= numbers[i];
      if(numbers[i]<smallest)
        smallest=numbers[i];
    }
  return largest - smallest;
  
}",15
245,1,0,1,5,"private int diffCalci(int[] numbers){
  int largest = 0;
  int smallest = 0;
 	for(int i=0;i<numbers.length;i++){
      if(numbers[i]>largest )
        largest= numbers[i];
      if(numbers[i]<smallest)
        smallest=numbers[i];
    }
  return largest - smallest;
  
}",7307170,246,26,"7307170private int diffCalci(int[] numbers){
  int largest = 0;
  int smallest = 0;
 	for(int i=0;i<numbers.length;i++){
      if(numbers[i]>largest )
        largest= numbers[i];
      if(numbers[i]<smallest)
        smallest=numbers[i];
    }
  return largest - smallest;
  
}",15
246,1,1,1,4,"private int diffCalci(int[] numbers){
  int largest = 0;
  int smallest = 0;
 	for(int i=0;i<numbers.length;i++){
      if(numbers[i]>largest )
        largest= numbers[i];
      if(numbers[i]<smallest)
        smallest=numbers[i];
    }
  return largest - smallest;
  
}",7307170,247,26,"7307170private int diffCalci(int[] numbers){
  int largest = 0;
  int smallest = 0;
 	for(int i=0;i<numbers.length;i++){
      if(numbers[i]>largest )
        largest= numbers[i];
      if(numbers[i]<smallest)
        smallest=numbers[i];
    }
  return largest - smallest;
  
}",15
247,1,1,4,3,"private int diffCalci(int[] numbers){
  int largest = 0;
  int smallest = 0;
 	for(int i=0;i<numbers.length;i++){
      if(numbers[i]>largest )
        largest= numbers[i];
      if(numbers[i]<smallest)
        smallest=numbers[i];
    }
  return largest - smallest;
  
}",7307170,248,26,"7307170private int diffCalci(int[] numbers){
  int largest = 0;
  int smallest = 0;
 	for(int i=0;i<numbers.length;i++){
      if(numbers[i]>largest )
        largest= numbers[i];
      if(numbers[i]<smallest)
        smallest=numbers[i];
    }
  return largest - smallest;
  
}",15
248,1,1,2,4,"private int diffCalci(int[] numbers){
  int largest = 0;
  int smallest = 0;
 	for(int i=0;i<numbers.length;i++){
      if(numbers[i]>largest )
        largest= numbers[i];
      if(numbers[i]<smallest)
        smallest=numbers[i];
    }
  return largest - smallest;
  
}",7307170,249,26,"7307170private int diffCalci(int[] numbers){
  int largest = 0;
  int smallest = 0;
 	for(int i=0;i<numbers.length;i++){
      if(numbers[i]>largest )
        largest= numbers[i];
      if(numbers[i]<smallest)
        smallest=numbers[i];
    }
  return largest - smallest;
  
}",15
249,1,1,5,1,"private int diffCalci(int[] numbers){
  int largest = 0;
  int smallest = 0;
 	for(int i=0;i<numbers.length;i++){
      if(numbers[i]>largest )
        largest= numbers[i];
      if(numbers[i]<smallest)
        smallest=numbers[i];
    }
  return largest - smallest;
  
}",7307170,250,26,"7307170private int diffCalci(int[] numbers){
  int largest = 0;
  int smallest = 0;
 	for(int i=0;i<numbers.length;i++){
      if(numbers[i]>largest )
        largest= numbers[i];
      if(numbers[i]<smallest)
        smallest=numbers[i];
    }
  return largest - smallest;
  
}",15
250,1,0,2,5,"int findLargestDiff (int[] values){
 
  
  int largest = values[0];
    for (int i = 1; i < values.length; i++) {
        if (values[i] > largest) {
            largest = values[i];
        }
    }
  int smallest = values[0];
for (int i = 1; i < values.length; i++) {
        if (values[i] > largest) {
            largest = values[i];
        }
    }
}",1226301,251,53,"1226301int findLargestDiff (int[] values){
 
  
  int largest = values[0];
    for (int i = 1; i < values.length; i++) {
        if (values[i] > largest) {
            largest = values[i];
        }
    }
  int smallest = values[0];
for (int i = 1; i < values.length; i++) {
        if (values[i] > largest) {
            largest = values[i];
        }
    }
}",1
251,1,0,5,2,"int findLargestDiff (int[] values){ 
  
  int largest = values[0];
    for (int i = 1; i < values.length; i++) {
        if (values[i] > largest) {
            largest = values[i];
        }
    }
  int smallest = values[0];
for (int i = 1; i < values.length; i++) {
        if (values[i] < smallest) {
            smallest = values[i];
        }
    }
  return largest-smallest;
}",1226301,252,55,"1226301int findLargestDiff (int[] values){ 
  
  int largest = values[0];
    for (int i = 1; i < values.length; i++) {
        if (values[i] > largest) {
            largest = values[i];
        }
    }
  int smallest = values[0];
for (int i = 1; i < values.length; i++) {
        if (values[i] < smallest) {
            smallest = values[i];
        }
    }
  return largest-smallest;
}",12
252,1,1,4,4,"int findLargestDiff (int[] values){ 
  
  int largest = values[0];
    for (int i = 1; i < values.length; i++) {
        if (values[i] > largest) {
            largest = values[i];
        }
    }
  int smallest = values[0];
for (int i = 1; i < values.length; i++) {
        if (values[i] < smallest) {
            smallest = values[i];
        }
    }
  return largest-smallest;
}",1226301,253,55,"1226301int findLargestDiff (int[] values){ 
  
  int largest = values[0];
    for (int i = 1; i < values.length; i++) {
        if (values[i] > largest) {
            largest = values[i];
        }
    }
  int smallest = values[0];
for (int i = 1; i < values.length; i++) {
        if (values[i] < smallest) {
            smallest = values[i];
        }
    }
  return largest-smallest;
}",12
253,1,1,1,3,"int findLargestDiff (int[] values){ 
  
  int largest = values[0];
    for (int i = 1; i < values.length; i++) {
        if (values[i] > largest) {
            largest = values[i];
        }
    }
  int smallest = values[0];
for (int i = 1; i < values.length; i++) {
        if (values[i] < smallest) {
            smallest = values[i];
        }
    }
  return largest-smallest;
}",1226301,254,55,"1226301int findLargestDiff (int[] values){ 
  
  int largest = values[0];
    for (int i = 1; i < values.length; i++) {
        if (values[i] > largest) {
            largest = values[i];
        }
    }
  int smallest = values[0];
for (int i = 1; i < values.length; i++) {
        if (values[i] < smallest) {
            smallest = values[i];
        }
    }
  return largest-smallest;
}",12
254,1,0,4,1,"int findLargestDiff (int[] values){ 
  
  int largest = values[0];
    for (int i = 1; i < values.length; i++) {
        if (values[i] > largest) {
            largest = values[i];
        }
    }
  int smallest = values[0];
for (int i = 1; i < values.length; i++) {
        if (values[i] < smallest) {
            smallest = values[i];
        }
    }
  return largest-smallest;
}",1226301,255,55,"1226301int findLargestDiff (int[] values){ 
  
  int largest = values[0];
    for (int i = 1; i < values.length; i++) {
        if (values[i] > largest) {
            largest = values[i];
        }
    }
  int smallest = values[0];
for (int i = 1; i < values.length; i++) {
        if (values[i] < smallest) {
            smallest = values[i];
        }
    }
  return largest-smallest;
}",12
255,1,0,3,1,"int findLargestDiff (int[] values){ 
  
  int largest = values[0];
    for (int i = 1; i < values.length; i++) {
        if (values[i] > largest) {
            largest = values[i];
        }
    }
  int smallest = values[0];
for (int i = 1; i < values.length; i++) {
        if (values[i] < smallest) {
            smallest = values[i];
        }
    }
  return largest-smallest;
}",1226301,256,55,"1226301int findLargestDiff (int[] values){ 
  
  int largest = values[0];
    for (int i = 1; i < values.length; i++) {
        if (values[i] > largest) {
            largest = values[i];
        }
    }
  int smallest = values[0];
for (int i = 1; i < values.length; i++) {
        if (values[i] < smallest) {
            smallest = values[i];
        }
    }
  return largest-smallest;
}",12
256,1,1,4,3,"int findLargestDiff (int[] values){ 
  
  int largest = values[0];
    for (int i = 1; i < values.length; i++) {
        if (values[i] > largest) {
            largest = values[i];
        }
    }
  int smallest = values[0];
for (int i = 1; i < values.length; i++) {
        if (values[i] < smallest) {
            smallest = values[i];
        }
    }
  return largest-smallest;
}",1226301,257,55,"1226301int findLargestDiff (int[] values){ 
  
  int largest = values[0];
    for (int i = 1; i < values.length; i++) {
        if (values[i] > largest) {
            largest = values[i];
        }
    }
  int smallest = values[0];
for (int i = 1; i < values.length; i++) {
        if (values[i] < smallest) {
            smallest = values[i];
        }
    }
  return largest-smallest;
}",12
257,1,1,5,3,"int findLargestDiff (int[] values){ 
  
  int largest = values[0];
    for (int i = 1; i < values.length; i++) {
        if (values[i] > largest) {
            largest = values[i];
        }
    }
  int smallest = values[0];
for (int i = 1; i < values.length; i++) {
        if (values[i] < smallest) {
            smallest = values[i];
        }
    }
  return largest-smallest;
}",1226301,258,55,"1226301int findLargestDiff (int[] values){ 
  
  int largest = values[0];
    for (int i = 1; i < values.length; i++) {
        if (values[i] > largest) {
            largest = values[i];
        }
    }
  int smallest = values[0];
for (int i = 1; i < values.length; i++) {
        if (values[i] < smallest) {
            smallest = values[i];
        }
    }
  return largest-smallest;
}",12
258,1,1,3,3,"int findLargestDiff (int[] values){ 
  
  int largest = values[0];
    for (int i = 1; i < values.length; i++) {
        if (values[i] > largest) {
            largest = values[i];
        }
    }
  int smallest = values[0];
for (int i = 1; i < values.length; i++) {
        if (values[i] < smallest) {
            smallest = values[i];
        }
    }
  return largest-smallest;
}",1226301,259,55,"1226301int findLargestDiff (int[] values){ 
  
  int largest = values[0];
    for (int i = 1; i < values.length; i++) {
        if (values[i] > largest) {
            largest = values[i];
        }
    }
  int smallest = values[0];
for (int i = 1; i < values.length; i++) {
        if (values[i] < smallest) {
            smallest = values[i];
        }
    }
  return largest-smallest;
}",12
259,1,0,1,1,"int findLargestDiff (int[] values){ 
  
  int largest = values[0];
    for (int i = 1; i < values.length; i++) {
        if (values[i] > largest) {
            largest = values[i];
        }
    }
  int smallest = values[0];
for (int i = 1; i < values.length; i++) {
        if (values[i] < smallest) {
            smallest = values[i];
        }
    }
  return largest-smallest;
}",1226301,260,55,"1226301int findLargestDiff (int[] values){ 
  
  int largest = values[0];
    for (int i = 1; i < values.length; i++) {
        if (values[i] > largest) {
            largest = values[i];
        }
    }
  int smallest = values[0];
for (int i = 1; i < values.length; i++) {
        if (values[i] < smallest) {
            smallest = values[i];
        }
    }
  return largest-smallest;
}",12
260,1,0,4,1,"int findLargestDiff (int[] values){ 
  
  int largest = values[0];
    for (int i = 1; i < values.length; i++) {
        if (values[i] > largest) {
            largest = values[i];
        }
    }
  int smallest = values[0];
for (int i = 1; i < values.length; i++) {
        if (values[i] < smallest) {
            smallest = values[i];
        }
    }
  return largest-smallest;
}",1226301,261,55,"1226301int findLargestDiff (int[] values){ 
  
  int largest = values[0];
    for (int i = 1; i < values.length; i++) {
        if (values[i] > largest) {
            largest = values[i];
        }
    }
  int smallest = values[0];
for (int i = 1; i < values.length; i++) {
        if (values[i] < smallest) {
            smallest = values[i];
        }
    }
  return largest-smallest;
}",12
261,1,1,2,2,"int findLargestDiff (int[] values){ 
  
  int largest = values[0];
    for (int i = 1; i < values.length; i++) {
        if (values[i] > largest) {
            largest = values[i];
        }
    }
  int smallest = values[0];
for (int i = 1; i < values.length; i++) {
        if (values[i] < smallest) {
            smallest = values[i];
        }
    }
  return largest-smallest;
}",1226301,262,55,"1226301int findLargestDiff (int[] values){ 
  
  int largest = values[0];
    for (int i = 1; i < values.length; i++) {
        if (values[i] > largest) {
            largest = values[i];
        }
    }
  int smallest = values[0];
for (int i = 1; i < values.length; i++) {
        if (values[i] < smallest) {
            smallest = values[i];
        }
    }
  return largest-smallest;
}",12
262,1,0,2,2,"int findLargestDiff (int[] values){ 
  
  int largest = values[0];
    for (int i = 1; i < values.length; i++) {
        if (values[i] > largest) {
            largest = values[i];
        }
    }
  int smallest = values[0];
for (int i = 1; i < values.length; i++) {
        if (values[i] < smallest) {
            smallest = values[i];
        }
    }
  return largest-smallest;
}",1226301,263,55,"1226301int findLargestDiff (int[] values){ 
  
  int largest = values[0];
    for (int i = 1; i < values.length; i++) {
        if (values[i] > largest) {
            largest = values[i];
        }
    }
  int smallest = values[0];
for (int i = 1; i < values.length; i++) {
        if (values[i] < smallest) {
            smallest = values[i];
        }
    }
  return largest-smallest;
}",12
263,2,1,5,1,"public double tax(Person person){
  
}",1226301,264,5,"1226301public double tax(Person person){
  
}",16
264,2,0,1,1,"public double tax(Person person){
  
}",1226301,265,5,"1226301public double tax(Person person){
  
}",16
265,2,1,3,1,"public double tax(Person person){
  
}",1226301,266,5,"1226301public double tax(Person person){
  
}",16
266,2,0,4,1,"public double tax(Person person){
  
}",1226301,267,5,"1226301public double tax(Person person){
  
}",16
267,2,0,3,1,"public double tax(Person person){
  
}",1226301,268,5,"1226301public double tax(Person person){
  
}",16
268,2,1,1,1,"public double tax(Person person){
  
}",1226301,269,5,"1226301public double tax(Person person){
  
}",16
269,2,0,5,1,"public double tax(Person person){
  
}",1226301,270,5,"1226301public double tax(Person person){
  
}",16
270,2,0,2,1,"public double tax(Person person){
  
}",1226301,271,5,"1226301public double tax(Person person){
  
}",16
271,2,1,2,1,"public double tax(Person person){
  
}",1226301,272,5,"1226301public double tax(Person person){
  
}",16
272,2,1,4,1,"public double tax(Person person){
  
}",1226301,273,5,"1226301public double tax(Person person){
  
}",16
273,2,1,5,1,"public double tax(Person person){
  
}",1226301,274,5,"1226301public double tax(Person person){
  
}",16
274,2,0,4,1,"public double tax(Person person){
  
}",1226301,275,5,"1226301public double tax(Person person){
  
}",16
275,2,1,2,1,"public double tax(Person person){
  
}",1226301,276,5,"1226301public double tax(Person person){
  
}",16
276,2,1,3,1,"public double tax(Person person){
  
}",1226301,277,5,"1226301public double tax(Person person){
  
}",16
277,2,1,1,1,"public double tax(Person person){
  
}",1226301,278,5,"1226301public double tax(Person person){
  
}",16
278,2,0,3,1,"public double tax(Person person){
  
}",1226301,279,5,"1226301public double tax(Person person){
  
}",16
279,1,0,4,3,"public int largest(int[] arr) {
  int min = arr[0];
  int max = arr[1];
  
  for (int i = 0; i<arr.length; i++) {
    if (arr[i] < min) min = arr[i];
    if (arr[i] > max) max = arr[i];
  }
  
  return max = min;
}",405068,280,41,"405068public int largest(int[] arr) {
  int min = arr[0];
  int max = arr[1];
  
  for (int i = 0; i<arr.length; i++) {
    if (arr[i] < min) min = arr[i];
    if (arr[i] > max) max = arr[i];
  }
  
  return max = min;
}",15
280,1,1,1,1,"public int largest(int[] arr) {
  int min = arr[0];
  int max = arr[1];
  
  for (int i = 0; i<arr.length; i++) {
    if (arr[i] < min) min = arr[i];
    if (arr[i] > max) max = arr[i];
  }
  
  return max = min;
}",405068,281,41,"405068public int largest(int[] arr) {
  int min = arr[0];
  int max = arr[1];
  
  for (int i = 0; i<arr.length; i++) {
    if (arr[i] < min) min = arr[i];
    if (arr[i] > max) max = arr[i];
  }
  
  return max = min;
}",15
281,1,1,4,1,"public int largest(int[] arr) {
  int min = arr[0];
  int max = arr[1];
  
  for (int i = 0; i<arr.length; i++) {
    if (arr[i] < min) min = arr[i];
    if (arr[i] > max) max = arr[i];
  }
  
  return max = min;
}",405068,282,41,"405068public int largest(int[] arr) {
  int min = arr[0];
  int max = arr[1];
  
  for (int i = 0; i<arr.length; i++) {
    if (arr[i] < min) min = arr[i];
    if (arr[i] > max) max = arr[i];
  }
  
  return max = min;
}",15
282,1,1,2,4,"public int largest(int[] arr) {
  int min = arr[0];
  int max = arr[1];
  
  for (int i = 0; i<arr.length; i++) {
    if (arr[i] < min) min = arr[i];
    if (arr[i] > max) max = arr[i];
  }
  
  return max = min;
}",405068,283,41,"405068public int largest(int[] arr) {
  int min = arr[0];
  int max = arr[1];
  
  for (int i = 0; i<arr.length; i++) {
    if (arr[i] < min) min = arr[i];
    if (arr[i] > max) max = arr[i];
  }
  
  return max = min;
}",15
283,1,0,3,1,"public int largest(int[] arr) {
  int min = arr[0];
  int max = arr[1];
  
  for (int i = 0; i<arr.length; i++) {
    if (arr[i] < min) min = arr[i];
    if (arr[i] > max) max = arr[i];
  }
  
  return max = min;
}",405068,284,41,"405068public int largest(int[] arr) {
  int min = arr[0];
  int max = arr[1];
  
  for (int i = 0; i<arr.length; i++) {
    if (arr[i] < min) min = arr[i];
    if (arr[i] > max) max = arr[i];
  }
  
  return max = min;
}",15
284,1,0,4,4,"public int largest(int[] arr) {
  int min = arr[0];
  int max = arr[1];
  
  for (int i = 0; i<arr.length; i++) {
    if (arr[i] < min) min = arr[i];
    if (arr[i] > max) max = arr[i];
  }
  
  return max = min;
}",405068,285,41,"405068public int largest(int[] arr) {
  int min = arr[0];
  int max = arr[1];
  
  for (int i = 0; i<arr.length; i++) {
    if (arr[i] < min) min = arr[i];
    if (arr[i] > max) max = arr[i];
  }
  
  return max = min;
}",15
285,1,1,5,1,"public int largest(int[] arr) {
  int min = arr[0];
  int max = arr[1];
  
  for (int i = 0; i<arr.length; i++) {
    if (arr[i] < min) min = arr[i];
    if (arr[i] > max) max = arr[i];
  }
  
  return max = min;
}",405068,286,41,"405068public int largest(int[] arr) {
  int min = arr[0];
  int max = arr[1];
  
  for (int i = 0; i<arr.length; i++) {
    if (arr[i] < min) min = arr[i];
    if (arr[i] > max) max = arr[i];
  }
  
  return max = min;
}",15
286,1,0,2,1,"public int largest(int[] arr) {
  int min = arr[0];
  int max = arr[1];
  
  for (int i = 0; i<arr.length; i++) {
    if (arr[i] < min) min = arr[i];
    if (arr[i] > max) max = arr[i];
  }
  
  return max = min;
}",405068,287,41,"405068public int largest(int[] arr) {
  int min = arr[0];
  int max = arr[1];
  
  for (int i = 0; i<arr.length; i++) {
    if (arr[i] < min) min = arr[i];
    if (arr[i] > max) max = arr[i];
  }
  
  return max = min;
}",15
287,1,0,1,4,"public int largest(int[] arr) {
  int min = arr[0];
  int max = arr[1];
  
  for (int i = 0; i<arr.length; i++) {
    if (arr[i] < min) min = arr[i];
    if (arr[i] > max) max = arr[i];
  }
  
  return max = min;
}",405068,288,41,"405068public int largest(int[] arr) {
  int min = arr[0];
  int max = arr[1];
  
  for (int i = 0; i<arr.length; i++) {
    if (arr[i] < min) min = arr[i];
    if (arr[i] > max) max = arr[i];
  }
  
  return max = min;
}",15
288,1,0,2,1,"public int largest(int[] arr) {
  int min = arr[0];
  int max = arr[1];
  
  for (int i = 0; i<arr.length; i++) {
    if (arr[i] < min) min = arr[i];
    if (arr[i] > max) max = arr[i];
  }
  
  return max = min;
}",405068,289,41,"405068public int largest(int[] arr) {
  int min = arr[0];
  int max = arr[1];
  
  for (int i = 0; i<arr.length; i++) {
    if (arr[i] < min) min = arr[i];
    if (arr[i] > max) max = arr[i];
  }
  
  return max = min;
}",15
289,1,1,3,3,"public int largest(int[] arr) {
  int min = arr[0];
  int max = arr[1];
  
  for (int i = 0; i<arr.length; i++) {
    if (arr[i] < min) min = arr[i];
    if (arr[i] > max) max = arr[i];
  }
  
  return max = min;
}",405068,290,41,"405068public int largest(int[] arr) {
  int min = arr[0];
  int max = arr[1];
  
  for (int i = 0; i<arr.length; i++) {
    if (arr[i] < min) min = arr[i];
    if (arr[i] > max) max = arr[i];
  }
  
  return max = min;
}",15
290,1,1,1,1,"public int largest(int[] arr) {
  int min = arr[0];
  int max = arr[1];
  
  for (int i = 0; i<arr.length; i++) {
    if (arr[i] < min) min = arr[i];
    if (arr[i] > max) max = arr[i];
  }
  
  return max = min;
}",405068,291,41,"405068public int largest(int[] arr) {
  int min = arr[0];
  int max = arr[1];
  
  for (int i = 0; i<arr.length; i++) {
    if (arr[i] < min) min = arr[i];
    if (arr[i] > max) max = arr[i];
  }
  
  return max = min;
}",15
291,1,0,3,1,"public int largest(int[] arr) {
  int min = arr[0];
  int max = arr[1];
  
  for (int i = 0; i<arr.length; i++) {
    if (arr[i] < min) min = arr[i];
    if (arr[i] > max) max = arr[i];
  }
  
  return max = min;
}",405068,292,41,"405068public int largest(int[] arr) {
  int min = arr[0];
  int max = arr[1];
  
  for (int i = 0; i<arr.length; i++) {
    if (arr[i] < min) min = arr[i];
    if (arr[i] > max) max = arr[i];
  }
  
  return max = min;
}",15
292,1,0,1,4,"public int largest(int[] arr) {
  int min = arr[0];
  int max = arr[1];
  
  for (int i = 0; i<arr.length; i++) {
    if (arr[i] < min) min = arr[i];
    if (arr[i] > max) max = arr[i];
  }
  
  return max = min;
}",405068,293,41,"405068public int largest(int[] arr) {
  int min = arr[0];
  int max = arr[1];
  
  for (int i = 0; i<arr.length; i++) {
    if (arr[i] < min) min = arr[i];
    if (arr[i] > max) max = arr[i];
  }
  
  return max = min;
}",15
293,1,0,4,4,"public int largest(int[] arr) {
  int min = arr[0];
  int max = arr[1];
  
  for (int i = 0; i<arr.length; i++) {
    if (arr[i] < min) min = arr[i];
    if (arr[i] > max) max = arr[i];
  }
  
  return max = min;
}",405068,294,41,"405068public int largest(int[] arr) {
  int min = arr[0];
  int max = arr[1];
  
  for (int i = 0; i<arr.length; i++) {
    if (arr[i] < min) min = arr[i];
    if (arr[i] > max) max = arr[i];
  }
  
  return max = min;
}",15
294,2,1,5,1,"public double tax(Person p) {
  if (instanceof)
}",405068,295,8,"405068public double tax(Person p) {
  if (instanceof)
}",10
295,2,1,4,1,"public double tax(Person p) {
  if (instanceof)
}",405068,296,8,"405068public double tax(Person p) {
  if (instanceof)
}",10
296,2,0,3,2,"public double tax(Person p) {
  if (instanceof)
}",405068,297,8,"405068public double tax(Person p) {
  if (instanceof)
}",10
297,2,0,4,1,"public double tax(Person p) {
  if (instanceof)
}",405068,298,8,"405068public double tax(Person p) {
  if (instanceof)
}",10
298,2,1,2,1,"public double tax(Person p) {
  if (instanceof)
}",405068,299,8,"405068public double tax(Person p) {
  if (instanceof)
}",10
299,2,0,1,3,"public double tax(Person p) {
  if (instanceof)
}",405068,300,8,"405068public double tax(Person p) {
  if (instanceof)
}",10
300,2,0,2,1,"public double tax(Person p) {
  if (instanceof)
}",405068,301,8,"405068public double tax(Person p) {
  if (instanceof)
}",10
301,2,1,3,1,"public double tax(Person p) {
  if (instanceof)
}",405068,302,8,"405068public double tax(Person p) {
  if (instanceof)
}",10
302,2,1,1,1,"public double tax(Person p) {
  if (instanceof)
}",405068,303,8,"405068public double tax(Person p) {
  if (instanceof)
}",10
303,2,0,5,1,"public double tax(Person p) {
  if (instanceof)
}",405068,304,8,"405068public double tax(Person p) {
  if (instanceof)
}",10
304,2,0,5,1,"public double tax(Person p) {
  if (p instanceof Employee) {
    double sal = p.getSalary();
    return (sal < 10000) : sal * 0.02 ? sal * 0.05;
  } else if (p instanceof BusinessOwner) {
    return p.getProfit() * 0.1;
  } else {
    return 0;
  }
}",405068,305,44,"405068public double tax(Person p) {
  if (p instanceof Employee) {
    double sal = p.getSalary();
    return (sal < 10000) : sal * 0.02 ? sal * 0.05;
  } else if (p instanceof BusinessOwner) {
    return p.getProfit() * 0.1;
  } else {
    return 0;
  }
}",1
305,2,1,1,1,"public double tax(Person p) {
  //if (p instanceof Employee) {
  //  p = (Employee) p;
  //  double sal = p.getSalary();
  //  return (sal < 10000) : sal * 0.02 ? sal * 0.05;
  //} else if (p instanceof BusinessOwner) {
  //  p = (BusinessOwner) p;
  //  return p.getProfit() * 0.1;
  //} else {
    return 0;
  //}
}",405068,306,57,"405068public double tax(Person p) {
  //if (p instanceof Employee) {
  //  p = (Employee) p;
  //  double sal = p.getSalary();
  //  return (sal < 10000) : sal * 0.02 ? sal * 0.05;
  //} else if (p instanceof BusinessOwner) {
  //  p = (BusinessOwner) p;
  //  return p.getProfit() * 0.1;
  //} else {
    return 0;
  //}
}",8
306,2,0,5,2,"public double tax(Person p) {
  //if (p instanceof Employee) {
  //  p = (Employee) p;
  //  double sal = p.getSalary();
  //  return (sal < 10000) : sal * 0.02 ? sal * 0.05;
  //} else if (p instanceof BusinessOwner) {
  //  p = (BusinessOwner) p;
  //  return p.getProfit() * 0.1;
  //} else {
    return 0;
  //}
}",405068,307,57,"405068public double tax(Person p) {
  //if (p instanceof Employee) {
  //  p = (Employee) p;
  //  double sal = p.getSalary();
  //  return (sal < 10000) : sal * 0.02 ? sal * 0.05;
  //} else if (p instanceof BusinessOwner) {
  //  p = (BusinessOwner) p;
  //  return p.getProfit() * 0.1;
  //} else {
    return 0;
  //}
}",8
307,2,0,4,1,"public double tax(Person p) {
  //if (p instanceof Employee) {
  //  p = (Employee) p;
  //  double sal = p.getSalary();
  //  return (sal < 10000) : sal * 0.02 ? sal * 0.05;
  //} else if (p instanceof BusinessOwner) {
  //  p = (BusinessOwner) p;
  //  return p.getProfit() * 0.1;
  //} else {
    return 0;
  //}
}",405068,308,57,"405068public double tax(Person p) {
  //if (p instanceof Employee) {
  //  p = (Employee) p;
  //  double sal = p.getSalary();
  //  return (sal < 10000) : sal * 0.02 ? sal * 0.05;
  //} else if (p instanceof BusinessOwner) {
  //  p = (BusinessOwner) p;
  //  return p.getProfit() * 0.1;
  //} else {
    return 0;
  //}
}",8
308,2,0,2,1,"public double tax(Person p) {
  //if (p instanceof Employee) {
  //  p = (Employee) p;
  //  double sal = p.getSalary();
  //  return (sal < 10000) : sal * 0.02 ? sal * 0.05;
  //} else if (p instanceof BusinessOwner) {
  //  p = (BusinessOwner) p;
  //  return p.getProfit() * 0.1;
  //} else {
    return 0;
  //}
}",405068,309,57,"405068public double tax(Person p) {
  //if (p instanceof Employee) {
  //  p = (Employee) p;
  //  double sal = p.getSalary();
  //  return (sal < 10000) : sal * 0.02 ? sal * 0.05;
  //} else if (p instanceof BusinessOwner) {
  //  p = (BusinessOwner) p;
  //  return p.getProfit() * 0.1;
  //} else {
    return 0;
  //}
}",8
309,2,1,2,1,"public double tax(Person p) {
  //if (p instanceof Employee) {
  //  p = (Employee) p;
  //  double sal = p.getSalary();
  //  return (sal < 10000) : sal * 0.02 ? sal * 0.05;
  //} else if (p instanceof BusinessOwner) {
  //  p = (BusinessOwner) p;
  //  return p.getProfit() * 0.1;
  //} else {
    return 0;
  //}
}",405068,310,57,"405068public double tax(Person p) {
  //if (p instanceof Employee) {
  //  p = (Employee) p;
  //  double sal = p.getSalary();
  //  return (sal < 10000) : sal * 0.02 ? sal * 0.05;
  //} else if (p instanceof BusinessOwner) {
  //  p = (BusinessOwner) p;
  //  return p.getProfit() * 0.1;
  //} else {
    return 0;
  //}
}",8
310,2,1,5,1,"public double tax(Person p) {
  //if (p instanceof Employee) {
  //  p = (Employee) p;
  //  double sal = p.getSalary();
  //  return (sal < 10000) : sal * 0.02 ? sal * 0.05;
  //} else if (p instanceof BusinessOwner) {
  //  p = (BusinessOwner) p;
  //  return p.getProfit() * 0.1;
  //} else {
    return 0;
  //}
}",405068,311,57,"405068public double tax(Person p) {
  //if (p instanceof Employee) {
  //  p = (Employee) p;
  //  double sal = p.getSalary();
  //  return (sal < 10000) : sal * 0.02 ? sal * 0.05;
  //} else if (p instanceof BusinessOwner) {
  //  p = (BusinessOwner) p;
  //  return p.getProfit() * 0.1;
  //} else {
    return 0;
  //}
}",8
311,2,0,3,1,"public double tax(Person p) {
  //if (p instanceof Employee) {
  //  p = (Employee) p;
  //  double sal = p.getSalary();
  //  return (sal < 10000) : sal * 0.02 ? sal * 0.05;
  //} else if (p instanceof BusinessOwner) {
  //  p = (BusinessOwner) p;
  //  return p.getProfit() * 0.1;
  //} else {
    return 0;
  //}
}",405068,312,57,"405068public double tax(Person p) {
  //if (p instanceof Employee) {
  //  p = (Employee) p;
  //  double sal = p.getSalary();
  //  return (sal < 10000) : sal * 0.02 ? sal * 0.05;
  //} else if (p instanceof BusinessOwner) {
  //  p = (BusinessOwner) p;
  //  return p.getProfit() * 0.1;
  //} else {
    return 0;
  //}
}",8
312,2,1,4,1,"public double tax(Person p) {
  //if (p instanceof Employee) {
  //  p = (Employee) p;
  //  double sal = p.getSalary();
  //  return (sal < 10000) : sal * 0.02 ? sal * 0.05;
  //} else if (p instanceof BusinessOwner) {
  //  p = (BusinessOwner) p;
  //  return p.getProfit() * 0.1;
  //} else {
    return 0;
  //}
}",405068,313,57,"405068public double tax(Person p) {
  //if (p instanceof Employee) {
  //  p = (Employee) p;
  //  double sal = p.getSalary();
  //  return (sal < 10000) : sal * 0.02 ? sal * 0.05;
  //} else if (p instanceof BusinessOwner) {
  //  p = (BusinessOwner) p;
  //  return p.getProfit() * 0.1;
  //} else {
    return 0;
  //}
}",8
313,1,1,5,1,"public static int diffLargestAndSmallest(final ArrayList<Integer> list) {
    if (list.isEmpty()) {
        return 0;
    } else {
        return (Collections.max(list) - Collections.min(list)) + 1;
    }
}",7649385,314,23,"7649385public static int diffLargestAndSmallest(final ArrayList<Integer> list) {
    if (list.isEmpty()) {
        return 0;
    } else {
        return (Collections.max(list) - Collections.min(list)) + 1;
    }
}",14
314,1,1,2,3,"public static int diffLargestAndSmallest(final ArrayList<Integer> list) {
    if (list.isEmpty()) {
        return 0;
    } else {
        return (Collections.max(list) - Collections.min(list)) + 1;
    }
}",7649385,315,23,"7649385public static int diffLargestAndSmallest(final ArrayList<Integer> list) {
    if (list.isEmpty()) {
        return 0;
    } else {
        return (Collections.max(list) - Collections.min(list)) + 1;
    }
}",14
315,1,1,3,3,"public static int diffLargestAndSmallest(final ArrayList<Integer> list) {
    if (list.isEmpty()) {
        return 0;
    } else {
        return (Collections.max(list) - Collections.min(list)) + 1;
    }
}",7649385,316,23,"7649385public static int diffLargestAndSmallest(final ArrayList<Integer> list) {
    if (list.isEmpty()) {
        return 0;
    } else {
        return (Collections.max(list) - Collections.min(list)) + 1;
    }
}",14
316,1,1,5,2,"public static int diffLargestAndSmallest(final ArrayList<Integer> list) {
    if (list.isEmpty()) {
        return 0;
    } else {
        return (Collections.max(list) - Collections.min(list)) + 1;
    }
}",7649385,317,23,"7649385public static int diffLargestAndSmallest(final ArrayList<Integer> list) {
    if (list.isEmpty()) {
        return 0;
    } else {
        return (Collections.max(list) - Collections.min(list)) + 1;
    }
}",14
317,1,0,1,2,"public static int diffLargestAndSmallest(final ArrayList<Integer> list) {
    if (list.isEmpty()) {
        return 0;
    } else {
        return (Collections.max(list) - Collections.min(list)) + 1;
    }
}",7649385,318,23,"7649385public static int diffLargestAndSmallest(final ArrayList<Integer> list) {
    if (list.isEmpty()) {
        return 0;
    } else {
        return (Collections.max(list) - Collections.min(list)) + 1;
    }
}",14
318,1,0,4,2,"public static int diffLargestAndSmallest(final ArrayList<Integer> list) {
    if (list.isEmpty()) {
        return 0;
    } else {
        return (Collections.max(list) - Collections.min(list)) + 1;
    }
}",7649385,319,23,"7649385public static int diffLargestAndSmallest(final ArrayList<Integer> list) {
    if (list.isEmpty()) {
        return 0;
    } else {
        return (Collections.max(list) - Collections.min(list)) + 1;
    }
}",14
319,1,0,2,4,"public static int diffLargestAndSmallest(final ArrayList<Integer> list) {
    if (list.isEmpty()) {
        return 0;
    } else {
        return (Collections.max(list) - Collections.min(list)) + 1;
    }
}",7649385,320,23,"7649385public static int diffLargestAndSmallest(final ArrayList<Integer> list) {
    if (list.isEmpty()) {
        return 0;
    } else {
        return (Collections.max(list) - Collections.min(list)) + 1;
    }
}",14
320,1,0,4,4,"public static int diffLargestAndSmallest(final ArrayList<Integer> list) {
    if (list.isEmpty()) {
        return 0;
    } else {
        return (Collections.max(list) - Collections.min(list)) + 1;
    }
}",7649385,321,23,"7649385public static int diffLargestAndSmallest(final ArrayList<Integer> list) {
    if (list.isEmpty()) {
        return 0;
    } else {
        return (Collections.max(list) - Collections.min(list)) + 1;
    }
}",14
321,1,1,2,2,"public static int diffLargestAndSmallest(final ArrayList<Integer> list) {
    if (list.isEmpty()) {
        return 0;
    } else {
        return (Collections.max(list) - Collections.min(list)) + 1;
    }
}",7649385,322,23,"7649385public static int diffLargestAndSmallest(final ArrayList<Integer> list) {
    if (list.isEmpty()) {
        return 0;
    } else {
        return (Collections.max(list) - Collections.min(list)) + 1;
    }
}",14
322,1,0,3,1,"public static int diffLargestAndSmallest(final ArrayList<Integer> list) {
    if (list.isEmpty()) {
        return 0;
    } else {
        return (Collections.max(list) - Collections.min(list)) + 1;
    }
}",7649385,323,23,"7649385public static int diffLargestAndSmallest(final ArrayList<Integer> list) {
    if (list.isEmpty()) {
        return 0;
    } else {
        return (Collections.max(list) - Collections.min(list)) + 1;
    }
}",14
323,1,1,4,3,"public static int diffLargestAndSmallest(final ArrayList<Integer> list) {
    if (list.isEmpty()) {
        return 0;
    } else {
        return (Collections.max(list) - Collections.min(list)) + 1;
    }
}",7649385,324,23,"7649385public static int diffLargestAndSmallest(final ArrayList<Integer> list) {
    if (list.isEmpty()) {
        return 0;
    } else {
        return (Collections.max(list) - Collections.min(list)) + 1;
    }
}",14
324,1,0,2,1,"public static int diffLargestAndSmallest(final ArrayList<Integer> list) {
    if (list.isEmpty()) {
        return 0;
    } else {
        return (Collections.max(list) - Collections.min(list)) + 1;
    }
}",7649385,325,23,"7649385public static int diffLargestAndSmallest(final ArrayList<Integer> list) {
    if (list.isEmpty()) {
        return 0;
    } else {
        return (Collections.max(list) - Collections.min(list)) + 1;
    }
}",14
325,1,1,3,3,"public static int diffLargestAndSmallest(final ArrayList<Integer> list) {
    if (list.isEmpty()) {
        return 0;
    } else {
        return (Collections.max(list) - Collections.min(list)) + 1;
    }
}",7649385,326,23,"7649385public static int diffLargestAndSmallest(final ArrayList<Integer> list) {
    if (list.isEmpty()) {
        return 0;
    } else {
        return (Collections.max(list) - Collections.min(list)) + 1;
    }
}",14
326,1,1,1,2,"public static int diffLargestAndSmallest(final ArrayList<Integer> list) {
    if (list.isEmpty()) {
        return 0;
    } else {
        return (Collections.max(list) - Collections.min(list)) + 1;
    }
}",7649385,327,23,"7649385public static int diffLargestAndSmallest(final ArrayList<Integer> list) {
    if (list.isEmpty()) {
        return 0;
    } else {
        return (Collections.max(list) - Collections.min(list)) + 1;
    }
}",14
327,2,0,4,1,"public double getTax(Person person) {
  // instanceOf operator to identify type of Person object
}",9136014,328,15,"9136014public double getTax(Person person) {
  // instanceOf operator to identify type of Person object
}",1
328,2,1,1,5,"public double getTax(Person person) {
  // instanceof
}",9136014,329,8,"9136014public double getTax(Person person) {
  // instanceof
}",1
329,2,1,2,5,"public double getTax(Person person) {
  if (person instanceof Employee) {
    Employee e = (Employee) person;
  }
}",9136014,330,17,"9136014public double getTax(Person person) {
  if (person instanceof Employee) {
    Employee e = (Employee) person;
  }
}",4
330,2,1,5,5,"public double getTax(Person person) {
  if (person instanceof Employee) {
    Employee e = (Employee) person;
  }
}",9136014,331,17,"9136014public double getTax(Person person) {
  if (person instanceof Employee) {
    Employee e = (Employee) person;
  }
}",4
331,2,1,4,4,"public double getTax(Person person) {
  if (person instanceof Employee) {
    Employee e = (Employee) person;
  }
}",9136014,332,17,"9136014public double getTax(Person person) {
  if (person instanceof Employee) {
    Employee e = (Employee) person;
  }
}",4
332,2,1,3,4,"public double getTax(Person person) {
  if (person instanceof Employee) {
    Employee e = (Employee) person;
  }
}",9136014,333,17,"9136014public double getTax(Person person) {
  if (person instanceof Employee) {
    Employee e = (Employee) person;
  }
}",4
333,2,1,3,1,"public double getTax(Person person) {
  if (person instanceof Employee) {
    Employee e = (Employee) person;
    if (e.getSalary() < 10000) {
      // 2 percent of salary
      return 2 * e.getSalary() / 100;
    }
  }
}",9136014,334,34,"9136014public double getTax(Person person) {
  if (person instanceof Employee) {
    Employee e = (Employee) person;
    if (e.getSalary() < 10000) {
      // 2 percent of salary
      return 2 * e.getSalary() / 100;
    }
  }
}",1
334,2,1,1,5,"public double getTax(Person person) {
  if (person instanceof Employee) {
    Employee e = (Employee) person;
    if (e.getSalary() < 10000) {
      // Percentage of salary
      return 2 * e.getSalary() / 100;
    } else {
      return 5 * e.getSalary() / 100;
    }
  } else if (person instanceof BusinessOwner) {
    return 10 * e.getProfit() / 100;
  } else if (person instanceof Veteran) {
    return 0;
  }
  // null return for int 
  return null;
}",9136014,335,71,"9136014public double getTax(Person person) {
  if (person instanceof Employee) {
    Employee e = (Employee) person;
    if (e.getSalary() < 10000) {
      // Percentage of salary
      return 2 * e.getSalary() / 100;
    } else {
      return 5 * e.getSalary() / 100;
    }
  } else if (person instanceof BusinessOwner) {
    return 10 * e.getProfit() / 100;
  } else if (person instanceof Veteran) {
    return 0;
  }
  // null return for int 
  return null;
}",1
335,2,1,4,2,"public double getTax(Person person) {
  if (person instanceof Employee) {
    Employee e = (Employee) person;
    if (e.getSalary() < 10000) {
      // Percentage of salary
      return 2 * e.getSalary() / 100;
    } else {
      return 5 * e.getSalary() / 100;
    }
  } else if (person instanceof BusinessOwner) {
    return 10 * e.getProfit() / 100;
  } else if (person instanceof Veteran) {
    return 0;
  }
  // null return for double 
  return null;
}",9136014,336,71,"9136014public double getTax(Person person) {
  if (person instanceof Employee) {
    Employee e = (Employee) person;
    if (e.getSalary() < 10000) {
      // Percentage of salary
      return 2 * e.getSalary() / 100;
    } else {
      return 5 * e.getSalary() / 100;
    }
  } else if (person instanceof BusinessOwner) {
    return 10 * e.getProfit() / 100;
  } else if (person instanceof Veteran) {
    return 0;
  }
  // null return for double 
  return null;
}",2
336,2,1,5,1,"public double getTax(Person person) {
  if (person instanceof Employee) {
    Employee e = (Employee) person;
    if (e.getSalary() < 10000) {
      // Percentage of salary
      return 2 * e.getSalary() / 100;
    } else {
      return 5 * e.getSalary() / 100;
    }
  } else if (person instanceof BusinessOwner) {
    return 10 * e.getProfit() / 100;
  } else if (person instanceof Veteran) {
    return 0;
  }
  // null return for double 
  return null;
}",9136014,337,71,"9136014public double getTax(Person person) {
  if (person instanceof Employee) {
    Employee e = (Employee) person;
    if (e.getSalary() < 10000) {
      // Percentage of salary
      return 2 * e.getSalary() / 100;
    } else {
      return 5 * e.getSalary() / 100;
    }
  } else if (person instanceof BusinessOwner) {
    return 10 * e.getProfit() / 100;
  } else if (person instanceof Veteran) {
    return 0;
  }
  // null return for double 
  return null;
}",2
337,2,1,1,3,"public Double getTax(Person person) {
  if (person instanceof Employee) {
    Employee e = (Employee) person;
    if (e.getSalary() < 10000) {
      // Percentage of salary
      return 2 * e.getSalary() / 100;
    } else {
      return 5 * e.getSalary() / 100;
    }
  } else if (person instanceof BusinessOwner) {
    return 10 * e.getProfit() / 100;
  } else if (person instanceof Veteran) {
    return 0;
  }
  // null return for double wrapper class
  return null;
}",9136014,338,73,"9136014public Double getTax(Person person) {
  if (person instanceof Employee) {
    Employee e = (Employee) person;
    if (e.getSalary() < 10000) {
      // Percentage of salary
      return 2 * e.getSalary() / 100;
    } else {
      return 5 * e.getSalary() / 100;
    }
  } else if (person instanceof BusinessOwner) {
    return 10 * e.getProfit() / 100;
  } else if (person instanceof Veteran) {
    return 0;
  }
  // null return for double wrapper class
  return null;
}",5
338,2,1,1,1,"public Double getTax(Person person) {
  if (person instanceof Employee) {
    Employee e = (Employee) person;
    if (e.getSalary() < 10000) {
      // Percentage of salary
      return 2 * e.getSalary() / 100;
    } else {
      return 5 * e.getSalary() / 100;
    }
  } else if (person instanceof BusinessOwner) {
    return 10 * e.getProfit() / 100;
  } else if (person instanceof Veteran) {
    return 0;
  }
  // null return for double wrapper class
  return null;
}",9136014,339,73,"9136014public Double getTax(Person person) {
  if (person instanceof Employee) {
    Employee e = (Employee) person;
    if (e.getSalary() < 10000) {
      // Percentage of salary
      return 2 * e.getSalary() / 100;
    } else {
      return 5 * e.getSalary() / 100;
    }
  } else if (person instanceof BusinessOwner) {
    return 10 * e.getProfit() / 100;
  } else if (person instanceof Veteran) {
    return 0;
  }
  // null return for double wrapper class
  return null;
}",5
339,2,1,4,3,"public Double getTax(Person person) {
  if (person instanceof Employee) {
    Employee e = (Employee) person;
    if (e.getSalary() < 10000) {
      // Percentage of salary
      return 2 * e.getSalary() / 100;
    } else {
      return 5 * e.getSalary() / 100;
    }
  } else if (person instanceof BusinessOwner) {
    return 10 * e.getProfit() / 100;
  } else if (person instanceof Veteran) {
    return 0;
  }
  // null return for double wrapper class
  return null;
}",9136014,340,73,"9136014public Double getTax(Person person) {
  if (person instanceof Employee) {
    Employee e = (Employee) person;
    if (e.getSalary() < 10000) {
      // Percentage of salary
      return 2 * e.getSalary() / 100;
    } else {
      return 5 * e.getSalary() / 100;
    }
  } else if (person instanceof BusinessOwner) {
    return 10 * e.getProfit() / 100;
  } else if (person instanceof Veteran) {
    return 0;
  }
  // null return for double wrapper class
  return null;
}",5
340,2,1,2,3,"public Double getTax(Person person) {
  if (person instanceof Employee) {
    Employee e = (Employee) person;
    if (e.getSalary() < 10000) {
      // Percentage of salary
      return 2 * e.getSalary() / 100;
    } else {
      return 5 * e.getSalary() / 100;
    }
  } else if (person instanceof BusinessOwner) {
    return 10 * e.getProfit() / 100;
  } else if (person instanceof Veteran) {
    return 0;
  }
  // null return for double wrapper class
  return null;
}",9136014,341,73,"9136014public Double getTax(Person person) {
  if (person instanceof Employee) {
    Employee e = (Employee) person;
    if (e.getSalary() < 10000) {
      // Percentage of salary
      return 2 * e.getSalary() / 100;
    } else {
      return 5 * e.getSalary() / 100;
    }
  } else if (person instanceof BusinessOwner) {
    return 10 * e.getProfit() / 100;
  } else if (person instanceof Veteran) {
    return 0;
  }
  // null return for double wrapper class
  return null;
}",5
341,2,1,2,3,"public Double getTax(Person person) {
  if (person instanceof Employee) {
    Employee e = (Employee) person;
    if (e.getSalary() < 10000) {
      // Percentage of salary
      return 2 * e.getSalary() / 100;
    } else {
      return 5 * e.getSalary() / 100;
    }
  } else if (person instanceof BusinessOwner) {
    return 10 * e.getProfit() / 100;
  } else if (person instanceof Veteran) {
    return 0;
  }
  // null return for double wrapper class
  return null;
}",9136014,342,73,"9136014public Double getTax(Person person) {
  if (person instanceof Employee) {
    Employee e = (Employee) person;
    if (e.getSalary() < 10000) {
      // Percentage of salary
      return 2 * e.getSalary() / 100;
    } else {
      return 5 * e.getSalary() / 100;
    }
  } else if (person instanceof BusinessOwner) {
    return 10 * e.getProfit() / 100;
  } else if (person instanceof Veteran) {
    return 0;
  }
  // null return for double wrapper class
  return null;
}",5
342,1,0,1,4,"// largest difference between array elements
public int maxDiffArr(int[] a) {
  
}",9136014,343,12,"9136014// largest difference between array elements
public int maxDiffArr(int[] a) {
  
}",2
343,1,0,2,4,"// largest difference between array elements
public int maxDiffArr(int[] a) {
  
}",9136014,344,12,"9136014// largest difference between array elements
public int maxDiffArr(int[] a) {
  
}",2
344,1,1,2,2,"// largest difference between array elements
public int maxDiffArr(int[] a) {
  Map<Integer> map = new HashMap<>();
  
}",9136014,345,17,"9136014// largest difference between array elements
public int maxDiffArr(int[] a) {
  Map<Integer> map = new HashMap<>();
  
}",1
345,1,1,4,2,"// largest difference between array elements
public int maxDiffArr(int[] a) {
  Arrays.sort(a);
  
}",9136014,346,13,"9136014// largest difference between array elements
public int maxDiffArr(int[] a) {
  Arrays.sort(a);
  
}",1
346,1,0,2,2,"// largest difference between array elements
public int maxDiffArr(int[] a) {
  // sort the array in increasing order
  Arrays.sort(a);
  // difference between the last and first is the max difference
  return a[a.length - 1] - a[0];
}",9136014,347,37,"9136014// largest difference between array elements
public int maxDiffArr(int[] a) {
  // sort the array in increasing order
  Arrays.sort(a);
  // difference between the last and first is the max difference
  return a[a.length - 1] - a[0];
}",1
347,1,0,2,4,"// largest difference between array elements
public int maxDiffArr(int[] a) {
  // sort the array in increasing order
  Arrays.sort(a);
  // difference between the last and first array elements
  // is the max difference
  return a[a.length - 1] - a[0];
}",9136014,348,40,"9136014// largest difference between array elements
public int maxDiffArr(int[] a) {
  // sort the array in increasing order
  Arrays.sort(a);
  // difference between the last and first array elements
  // is the max difference
  return a[a.length - 1] - a[0];
}",8
348,1,0,1,1,"// largest difference between array elements
public int maxDiffArr(int[] a) {
  // sort the array in increasing order
  Arrays.sort(a);
  // difference between the last and first array elements
  // is the max difference
  return a[a.length - 1] - a[0];
}",9136014,349,40,"9136014// largest difference between array elements
public int maxDiffArr(int[] a) {
  // sort the array in increasing order
  Arrays.sort(a);
  // difference between the last and first array elements
  // is the max difference
  return a[a.length - 1] - a[0];
}",8
349,1,0,5,1,"// largest difference between array elements
public int maxDiffArr(int[] a) {
  // sort the array in increasing order
  Arrays.sort(a);
  // difference between the last and first array elements
  // is the max difference
  return a[a.length - 1] - a[0];
}",9136014,350,40,"9136014// largest difference between array elements
public int maxDiffArr(int[] a) {
  // sort the array in increasing order
  Arrays.sort(a);
  // difference between the last and first array elements
  // is the max difference
  return a[a.length - 1] - a[0];
}",8
350,1,1,5,1,"// largest difference between array elements
public int maxDiffArr(int[] a) {
  // sort the array in increasing order
  Arrays.sort(a);
  // difference between the last and first array elements
  // is the max difference
  return a[a.length - 1] - a[0];
}",9136014,351,40,"9136014// largest difference between array elements
public int maxDiffArr(int[] a) {
  // sort the array in increasing order
  Arrays.sort(a);
  // difference between the last and first array elements
  // is the max difference
  return a[a.length - 1] - a[0];
}",8
351,1,1,5,2,"// largest difference between array elements
public int maxDiffArr(int[] a) {
  // sort the array in increasing order
  Arrays.sort(a);
  // difference between the last and first array elements
  // is the max difference
  return a[a.length - 1] - a[0];
}",9136014,352,40,"9136014// largest difference between array elements
public int maxDiffArr(int[] a) {
  // sort the array in increasing order
  Arrays.sort(a);
  // difference between the last and first array elements
  // is the max difference
  return a[a.length - 1] - a[0];
}",8
352,1,0,5,1,"// largest difference between array elements
public int maxDiffArr(int[] a) {
  // sort the array in increasing order
  Arrays.sort(a);
  // difference between the last and first array elements
  // is the max difference
  return a[a.length - 1] - a[0];
}",9136014,353,40,"9136014// largest difference between array elements
public int maxDiffArr(int[] a) {
  // sort the array in increasing order
  Arrays.sort(a);
  // difference between the last and first array elements
  // is the max difference
  return a[a.length - 1] - a[0];
}",8
353,1,0,3,2,"// largest difference between array elements
public int maxDiffArr(int[] a) {
  // sort the array in increasing order
  Arrays.sort(a);
  // difference between the last and first array elements
  // is the max difference
  return a[a.length - 1] - a[0];
}",9136014,354,40,"9136014// largest difference between array elements
public int maxDiffArr(int[] a) {
  // sort the array in increasing order
  Arrays.sort(a);
  // difference between the last and first array elements
  // is the max difference
  return a[a.length - 1] - a[0];
}",8
354,1,0,2,3,"// largest difference between array elements
public int maxDiffArr(int[] a) {
  // sort the array in increasing order
  Arrays.sort(a);
  // difference between the last and first array elements
  // is the max difference
  return a[a.length - 1] - a[0];
}",9136014,355,40,"9136014// largest difference between array elements
public int maxDiffArr(int[] a) {
  // sort the array in increasing order
  Arrays.sort(a);
  // difference between the last and first array elements
  // is the max difference
  return a[a.length - 1] - a[0];
}",8
355,2,1,3,3,"// Function overloading for different parameters
// calculate tax for Employee
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran
public double calculateTax(Veteran v){
  return 0;
}

// calculate tax for Person
public double calculateTax(Person p){
  return 0;
}",3368542,356,73,"3368542// Function overloading for different parameters
// calculate tax for Employee
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran
public double calculateTax(Veteran v){
  return 0;
}

// calculate tax for Person
public double calculateTax(Person p){
  return 0;
}",8
356,2,0,1,2,"// Function overloading for different parameters
// calculate tax for Employee
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran
public double calculateTax(Veteran v){
  return 0;
}

// calculate tax for Person
public double calculateTax(Person p){
  return 0;
}",3368542,357,73,"3368542// Function overloading for different parameters
// calculate tax for Employee
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran
public double calculateTax(Veteran v){
  return 0;
}

// calculate tax for Person
public double calculateTax(Person p){
  return 0;
}",8
357,2,0,3,1,"// Function overloading for different parameters
// calculate tax for Employee
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran
public double calculateTax(Veteran v){
  return 0;
}

// calculate tax for Person
public double calculateTax(Person p){
  return 0;
}",3368542,358,73,"3368542// Function overloading for different parameters
// calculate tax for Employee
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran
public double calculateTax(Veteran v){
  return 0;
}

// calculate tax for Person
public double calculateTax(Person p){
  return 0;
}",8
358,2,1,1,3,"// Function overloading for different parameters
// calculate tax for Employee
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran
public double calculateTax(Veteran v){
  return 0;
}

// calculate tax for Person
public double calculateTax(Person p){
  return 0;
}",3368542,359,73,"3368542// Function overloading for different parameters
// calculate tax for Employee
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran
public double calculateTax(Veteran v){
  return 0;
}

// calculate tax for Person
public double calculateTax(Person p){
  return 0;
}",8
359,2,1,2,1,"// Function overloading for different parameters
// calculate tax for Employee
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran
public double calculateTax(Veteran v){
  return 0;
}

// calculate tax for Person
public double calculateTax(Person p){
  return 0;
}",3368542,360,73,"3368542// Function overloading for different parameters
// calculate tax for Employee
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran
public double calculateTax(Veteran v){
  return 0;
}

// calculate tax for Person
public double calculateTax(Person p){
  return 0;
}",8
360,2,1,4,1,"// Function overloading for different parameters
// calculate tax for Employee
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran
public double calculateTax(Veteran v){
  return 0;
}

// calculate tax for Person
public double calculateTax(Person p){
  return 0;
}",3368542,361,73,"3368542// Function overloading for different parameters
// calculate tax for Employee
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran
public double calculateTax(Veteran v){
  return 0;
}

// calculate tax for Person
public double calculateTax(Person p){
  return 0;
}",8
361,2,0,4,1,"// Function overloading for different parameters
// calculate tax for Employee
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran
public double calculateTax(Veteran v){
  return 0;
}

// calculate tax for Person
public double calculateTax(Person p){
  return 0;
}",3368542,362,73,"3368542// Function overloading for different parameters
// calculate tax for Employee
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran
public double calculateTax(Veteran v){
  return 0;
}

// calculate tax for Person
public double calculateTax(Person p){
  return 0;
}",8
362,2,0,5,2,"// Function overloading for different parameters
// calculate tax for Employee
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran
public double calculateTax(Veteran v){
  return 0;
}

// calculate tax for Person
public double calculateTax(Person p){
  return 0;
}",3368542,363,73,"3368542// Function overloading for different parameters
// calculate tax for Employee
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran
public double calculateTax(Veteran v){
  return 0;
}

// calculate tax for Person
public double calculateTax(Person p){
  return 0;
}",8
363,2,1,3,1,"// Method overloading for different types of parameters
// calculate tax for Employee
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran
public double calculateTax(Veteran v){
  return 0;
}

// calculate tax for Person
public double calculateTax(Person p){
  return 0;
}",3368542,364,75,"3368542// Method overloading for different types of parameters
// calculate tax for Employee
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran
public double calculateTax(Veteran v){
  return 0;
}

// calculate tax for Person
public double calculateTax(Person p){
  return 0;
}",4
364,2,1,2,3,"// Method overloading for different types of parameters
// calculate tax for Employee
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran
public double calculateTax(Veteran v){
  return 0;
}

// calculate tax for Person
public double calculateTax(Person p){
  return 0;
}",3368542,365,75,"3368542// Method overloading for different types of parameters
// calculate tax for Employee
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran
public double calculateTax(Veteran v){
  return 0;
}

// calculate tax for Person
public double calculateTax(Person p){
  return 0;
}",4
365,2,1,4,2,"// Method overloading for different types of parameters
// calculate tax for Employee
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran
public double calculateTax(Veteran v){
  return 0;
}

// calculate tax for Person
public double calculateTax(Person p){
  return 0;
}",3368542,366,75,"3368542// Method overloading for different types of parameters
// calculate tax for Employee
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran
public double calculateTax(Veteran v){
  return 0;
}

// calculate tax for Person
public double calculateTax(Person p){
  return 0;
}",4
366,2,1,2,3,"// Method overloading for different types of parameters
// calculate tax for Employee
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran
public double calculateTax(Veteran v){
  return 0;
}

// calculate tax for Person
public double calculateTax(Person p){
  return 0;
}",3368542,367,75,"3368542// Method overloading for different types of parameters
// calculate tax for Employee
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran
public double calculateTax(Veteran v){
  return 0;
}

// calculate tax for Person
public double calculateTax(Person p){
  return 0;
}",4
367,2,0,4,1,"// Method overloading for different types of parameters
// calculate tax for Employee object
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner object
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran object
public double calculateTax(Veteran v){
  return 0;
}

// calculate tax for Person object
public double calculateTax(Person p){
  return 0;
}",3368542,368,79,"3368542// Method overloading for different types of parameters
// calculate tax for Employee object
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner object
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran object
public double calculateTax(Veteran v){
  return 0;
}

// calculate tax for Person object
public double calculateTax(Person p){
  return 0;
}",3
368,2,0,1,1,"// Method overloading for different types of parameters
// calculate tax for Employee object
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner object
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran object
public double calculateTax(Veteran v){
  return 0;
}

// calculate tax for Person object
public double calculateTax(Person p){
  return 0;
}",3368542,369,79,"3368542// Method overloading for different types of parameters
// calculate tax for Employee object
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner object
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran object
public double calculateTax(Veteran v){
  return 0;
}

// calculate tax for Person object
public double calculateTax(Person p){
  return 0;
}",3
369,2,0,5,1,"// Method overloading for different types of parameters
// calculate tax for Employee object
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner object
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran object
public double calculateTax(Veteran v){
  return 0;
}

// calculate tax for Person object
public double calculateTax(Person p){
  return 0;
}",3368542,370,79,"3368542// Method overloading for different types of parameters
// calculate tax for Employee object
public double calculateTax(Employee e){
  double sal = e.getSalary();
  if (sal < 100000){
    return sal * 0.02;
  }
  else{
    return sal * 0.05;
  }
}

// calculate tax for BusinessOwner object
public double calculateTax(BusinessOwner b){
  return b.getProfit() * 0.1;
}

// calculate tax for Veteran object
public double calculateTax(Veteran v){
  return 0;
}

// calculate tax for Person object
public double calculateTax(Person p){
  return 0;
}",3
370,1,0,2,1,"public int maxDifference(int[] input){
  if(input.length == 0 || input == null)
    return 0;
  // Return the maximum difference of max and min.
  int max = -2147483648;
  int min = 2147483647;
  
  for(int i = 0; i < input.length; i++){
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max - min;
}


",3368542,371,56,"3368542public int maxDifference(int[] input){
  if(input.length == 0 || input == null)
    return 0;
  // Return the maximum difference of max and min.
  int max = -2147483648;
  int min = 2147483647;
  
  for(int i = 0; i < input.length; i++){
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max - min;
}


",12
371,1,1,3,1,"public int maxDifference(int[] input){
  if(input.length == 0 || input == null)
    return 0;
  // Return the maximum difference of max and min.
  int max = -2147483648;
  int min = 2147483647;
  
  for(int i = 0; i < input.length; i++){
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max - min;
}


",3368542,372,56,"3368542public int maxDifference(int[] input){
  if(input.length == 0 || input == null)
    return 0;
  // Return the maximum difference of max and min.
  int max = -2147483648;
  int min = 2147483647;
  
  for(int i = 0; i < input.length; i++){
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max - min;
}


",12
372,1,0,1,1,"public int maxDifference(int[] input){
  if(input.length == 0 || input == null)
    return 0;
  // Return the maximum difference of max and min.
  int max = -2147483648;
  int min = 2147483647;
  
  for(int i = 0; i < input.length; i++){
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max - min;
}


",3368542,373,56,"3368542public int maxDifference(int[] input){
  if(input.length == 0 || input == null)
    return 0;
  // Return the maximum difference of max and min.
  int max = -2147483648;
  int min = 2147483647;
  
  for(int i = 0; i < input.length; i++){
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max - min;
}


",12
373,1,1,3,1,"public int maxDifference(int[] input){
  if(input.length == 0 || input == null)
    return 0;
  // Return the maximum difference of max and min.
  int max = -2147483648;
  int min = 2147483647;
  
  for(int i = 0; i < input.length; i++){
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max - min;
}


",3368542,374,56,"3368542public int maxDifference(int[] input){
  if(input.length == 0 || input == null)
    return 0;
  // Return the maximum difference of max and min.
  int max = -2147483648;
  int min = 2147483647;
  
  for(int i = 0; i < input.length; i++){
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max - min;
}


",12
374,1,0,1,1,"public int maxDifference(int[] input){
  if(input.length == 0 || input == null)
    return 0;
  // Return the maximum difference of max and min.
  int max = -2147483648;
  int min = 2147483647;
  
  for(int i = 0; i < input.length; i++){
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max - min;
}


",3368542,375,56,"3368542public int maxDifference(int[] input){
  if(input.length == 0 || input == null)
    return 0;
  // Return the maximum difference of max and min.
  int max = -2147483648;
  int min = 2147483647;
  
  for(int i = 0; i < input.length; i++){
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max - min;
}


",12
375,1,1,4,1,"public int maxDifference(int[] input){
  if(input.length == 0 || input == null)
    return 0;
  // Return the maximum difference of max and min.
  int max = -2147483648;
  int min = 2147483647;
  
  for(int i = 0; i < input.length; i++){
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max - min;
}


",3368542,376,56,"3368542public int maxDifference(int[] input){
  if(input.length == 0 || input == null)
    return 0;
  // Return the maximum difference of max and min.
  int max = -2147483648;
  int min = 2147483647;
  
  for(int i = 0; i < input.length; i++){
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max - min;
}


",12
376,1,0,4,1,"public int maxDifference(int[] input){
  if(input.length == 0 || input == null)
    return 0;
  // Return the maximum difference of max and min.
  int max = -2147483648;
  int min = 2147483647;
  
  for(int i = 0; i < input.length; i++){
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max - min;
}


",3368542,377,56,"3368542public int maxDifference(int[] input){
  if(input.length == 0 || input == null)
    return 0;
  // Return the maximum difference of max and min.
  int max = -2147483648;
  int min = 2147483647;
  
  for(int i = 0; i < input.length; i++){
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max - min;
}


",12
377,1,0,3,1,"public int maxDifference(int[] input){
  if(input.length == 0 || input == null)
    return 0;
  // Return the maximum difference of max and min.
  int max = -2147483648;
  int min = 2147483647;
  
  for(int i = 0; i < input.length; i++){
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max - min;
}


",3368542,378,56,"3368542public int maxDifference(int[] input){
  if(input.length == 0 || input == null)
    return 0;
  // Return the maximum difference of max and min.
  int max = -2147483648;
  int min = 2147483647;
  
  for(int i = 0; i < input.length; i++){
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max - min;
}


",12
378,1,0,3,1,"public int maxDifference(int[] input){
  if(input.length == 0 || input == null)
    return 0;
  // Return the maximum difference of max and min.
  int max = -2147483648;
  int min = 2147483647;
  
  for(int i = 0; i < input.length; i++){
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max - min;
}


",3368542,379,56,"3368542public int maxDifference(int[] input){
  if(input.length == 0 || input == null)
    return 0;
  // Return the maximum difference of max and min.
  int max = -2147483648;
  int min = 2147483647;
  
  for(int i = 0; i < input.length; i++){
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max - min;
}


",12
379,1,0,4,1,"public int maxDifference(int[] input){
  if(input.length == 0 || input == null)
    return 0;
  // Return the maximum difference of max and min.
  int max = -2147483648;
  int min = 2147483647;
  
  for(int i = 0; i < input.length; i++){
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max - min;
}


",3368542,380,56,"3368542public int maxDifference(int[] input){
  if(input.length == 0 || input == null)
    return 0;
  // Return the maximum difference of max and min.
  int max = -2147483648;
  int min = 2147483647;
  
  for(int i = 0; i < input.length; i++){
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max - min;
}


",12
380,1,0,1,1,"public int maxDifference(int[] input){
  if(input.length == 0 || input == null)
    return 0;
  // Return the maximum difference of max and min.
  int max = -2147483648;
  int min = 2147483647;
  
  for(int i = 0; i < input.length; i++){
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max - min;
}


",3368542,381,56,"3368542public int maxDifference(int[] input){
  if(input.length == 0 || input == null)
    return 0;
  // Return the maximum difference of max and min.
  int max = -2147483648;
  int min = 2147483647;
  
  for(int i = 0; i < input.length; i++){
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max - min;
}


",12
381,1,1,3,1,"public int maxDifference(int[] input){
  if(input.length == 0 || input == null)
    return 0;
  // Return the maximum difference of max and min.
  int max = -2147483648;
  int min = 2147483647;
  
  for(int i = 0; i < input.length; i++){
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max - min;
}


",3368542,382,56,"3368542public int maxDifference(int[] input){
  if(input.length == 0 || input == null)
    return 0;
  // Return the maximum difference of max and min.
  int max = -2147483648;
  int min = 2147483647;
  
  for(int i = 0; i < input.length; i++){
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max - min;
}


",12
382,1,1,5,1,"public int maxDifference(int[] input){
  if(input.length == 0 || input == null)
    return 0;
  // Find the maximum and minimum from the integer array
  // Return the difference of max and min.
  int max = -2147483648;
  int min = 2147483647;
  
  for(int i = 0; i < input.length; i++){
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max - min;
}


",3368542,383,65,"3368542public int maxDifference(int[] input){
  if(input.length == 0 || input == null)
    return 0;
  // Find the maximum and minimum from the integer array
  // Return the difference of max and min.
  int max = -2147483648;
  int min = 2147483647;
  
  for(int i = 0; i < input.length; i++){
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max - min;
}


",2
383,1,0,4,1,"public int maxDifference(int[] input){
  if(input.length == 0 || input == null)
    return 0;
  // Find the maximum and minimum from the integer array
  // Return the difference of max and min.
  int max = -2147483648;
  int min = 2147483647;
  
  for(int i = 0; i < input.length; i++){
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max - min;
}


",3368542,384,65,"3368542public int maxDifference(int[] input){
  if(input.length == 0 || input == null)
    return 0;
  // Find the maximum and minimum from the integer array
  // Return the difference of max and min.
  int max = -2147483648;
  int min = 2147483647;
  
  for(int i = 0; i < input.length; i++){
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max - min;
}


",2
384,1,0,1,3,"public int maxDifference(int[] input){
  if(input.length == 0 || input == null)
    return -1;
  // Find the maximum and minimum from the integer array
  // Return the difference of max and min.
  int max = -2147483648;
  int min = 2147483647;
  
  for(int i = 0; i < input.length; i++){
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max - min;
}


",3368542,385,65,"3368542public int maxDifference(int[] input){
  if(input.length == 0 || input == null)
    return -1;
  // Find the maximum and minimum from the integer array
  // Return the difference of max and min.
  int max = -2147483648;
  int min = 2147483647;
  
  for(int i = 0; i < input.length; i++){
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max - min;
}


",2
385,1,1,3,1,"public int maxDifference(int[] input){
  if(input.length == 0 || input == null)
    return -1;
  // Find the maximum and minimum from the integer array
  // Return the difference of max and min.
  int max = -2147483648;
  int min = 2147483647;
  
  for(int i = 0; i < input.length; i++){
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max - min;
}


",3368542,386,65,"3368542public int maxDifference(int[] input){
  if(input.length == 0 || input == null)
    return -1;
  // Find the maximum and minimum from the integer array
  // Return the difference of max and min.
  int max = -2147483648;
  int min = 2147483647;
  
  for(int i = 0; i < input.length; i++){
    if(input[i] > max)
      max = input[i];
    if(input[i] < min)
      min = input[i];
  }
  return max - min;
}


",2
386,1,1,3,1,"int largestDifferenceInArray(int a[]) {
  
}",2442936,387,5,"2442936int largestDifferenceInArray(int a[]) {
  
}",10
387,1,1,5,1,"int largestDifferenceInArray(int a[]) {
  
}",2442936,388,5,"2442936int largestDifferenceInArray(int a[]) {
  
}",10
388,1,0,4,2,"int largestDifferenceInArray(int a[]) {
  
}",2442936,389,5,"2442936int largestDifferenceInArray(int a[]) {
  
}",10
389,1,1,4,1,"int largestDifferenceInArray(int a[]) {
  
}",2442936,390,5,"2442936int largestDifferenceInArray(int a[]) {
  
}",10
390,1,1,2,1,"int largestDifferenceInArray(int a[]) {
  
}",2442936,391,5,"2442936int largestDifferenceInArray(int a[]) {
  
}",10
391,1,0,1,2,"int largestDifferenceInArray(int a[]) {
  
}",2442936,392,5,"2442936int largestDifferenceInArray(int a[]) {
  
}",10
392,1,0,5,1,"int largestDifferenceInArray(int a[]) {
  
}",2442936,393,5,"2442936int largestDifferenceInArray(int a[]) {
  
}",10
393,1,0,3,1,"int largestDifferenceInArray(int a[]) {
  
}",2442936,394,5,"2442936int largestDifferenceInArray(int a[]) {
  
}",10
394,1,1,1,1,"int largestDifferenceInArray(int a[]) {
  
}",2442936,395,5,"2442936int largestDifferenceInArray(int a[]) {
  
}",10
395,1,0,2,1,"int largestDifferenceInArray(int a[]) {
  
}",2442936,396,5,"2442936int largestDifferenceInArray(int a[]) {
  
}",10
396,1,1,3,1,"int largestDifferenceInArray(int[] a) {
 /* determines largest difference between two elements in array */
}",2442936,397,15,"2442936int largestDifferenceInArray(int[] a) {
 /* determines largest difference between two elements in array */
}",7
397,1,1,2,1,"int largestDifferenceInArray(int[] a) {
 /* determines largest difference between two elements in array */
}",2442936,398,15,"2442936int largestDifferenceInArray(int[] a) {
 /* determines largest difference between two elements in array */
}",7
398,1,0,3,1,"int largestDifferenceInArray(int[] a) {
 /* determines largest difference between two elements in array */
}",2442936,399,15,"2442936int largestDifferenceInArray(int[] a) {
 /* determines largest difference between two elements in array */
}",7
399,1,0,2,1,"int largestDifferenceInArray(int[] a) {
 /* determines largest difference between two elements in array */
}",2442936,400,15,"2442936int largestDifferenceInArray(int[] a) {
 /* determines largest difference between two elements in array */
}",7
400,1,1,5,1,"int largestDifferenceInArray(int[] a) {
 /* determines largest difference between two elements in array */
}",2442936,401,15,"2442936int largestDifferenceInArray(int[] a) {
 /* determines largest difference between two elements in array */
}",7
401,1,0,1,1,"int largestDifferenceInArray(int[] a) {
 /* determines largest difference between two elements in array */
}",2442936,402,15,"2442936int largestDifferenceInArray(int[] a) {
 /* determines largest difference between two elements in array */
}",7
402,1,1,5,1,"int largestDifferenceInArray(int[] a) {
 /* determines largest difference between two elements in array */
}",2442936,403,15,"2442936int largestDifferenceInArray(int[] a) {
 /* determines largest difference between two elements in array */
}",7
403,1,1,4,1,"int largestDifferenceInArray(int[] a) {
 	/* determines largest difference between two elements in array */
  	int max = a[0];
  	for (int i = 1; i < a.length; i++) {
        if (max < a[i]) {
          max = a[i];
        }
    }
}",2442936,404,39,"2442936int largestDifferenceInArray(int[] a) {
 	/* determines largest difference between two elements in array */
  	int max = a[0];
  	for (int i = 1; i < a.length; i++) {
        if (max < a[i]) {
          max = a[i];
        }
    }
}",2
404,1,1,2,4,"int largestDifferenceInArray(int[] a) {
 	/* determines largest difference between two elements in array */
  	int max = a[0];
  	for (int i = 1; i < a.length; i++) {
        if (max < a[i]) {
          max = a[i];
        }
    }
}",2442936,405,39,"2442936int largestDifferenceInArray(int[] a) {
 	/* determines largest difference between two elements in array */
  	int max = a[0];
  	for (int i = 1; i < a.length; i++) {
        if (max < a[i]) {
          max = a[i];
        }
    }
}",2
405,2,1,5,1,"int getTaxFromPerson(Person p) {
  
}",2442936,406,5,"2442936int getTaxFromPerson(Person p) {
  
}",7
406,2,0,2,1,"int getTaxFromPerson(Person p) {
  
}",2442936,407,5,"2442936int getTaxFromPerson(Person p) {
  
}",7
407,2,1,1,1,"int getTaxFromPerson(Person p) {
  
}",2442936,408,5,"2442936int getTaxFromPerson(Person p) {
  
}",7
408,2,1,3,1,"int getTaxFromPerson(Person p) {
  
}",2442936,409,5,"2442936int getTaxFromPerson(Person p) {
  
}",7
409,2,0,4,1,"int getTaxFromPerson(Person p) {
  
}",2442936,410,5,"2442936int getTaxFromPerson(Person p) {
  
}",7
410,2,1,2,1,"int getTaxFromPerson(Person p) {
  
}",2442936,411,5,"2442936int getTaxFromPerson(Person p) {
  
}",7
411,2,0,3,1,"int getTaxFromPerson(Person p) {
  
}",2442936,412,5,"2442936int getTaxFromPerson(Person p) {
  
}",7
412,2,0,2,1,"int getTaxFromPerson(Person p) {
  /* given a person, determine their tax liabilities */
}",2442936,413,14,"2442936int getTaxFromPerson(Person p) {
  /* given a person, determine their tax liabilities */
}",2
413,2,0,1,2,"int getTaxFromPerson(Person p) {
  /* given a person, determine their tax liabilities */
}",2442936,414,14,"2442936int getTaxFromPerson(Person p) {
  /* given a person, determine their tax liabilities */
}",2
414,2,1,3,1,"int getTaxFromPerson(Person p) {
  /* given a person, determine their tax liabilities */
  if (p == Employee) {
    
  }
}",2442936,415,20,"2442936int getTaxFromPerson(Person p) {
  /* given a person, determine their tax liabilities */
  if (p == Employee) {
    
  }
}",8
415,2,0,2,1,"int getTaxFromPerson(Person p) {
  /* given a person, determine their tax liabilities */
  if (p == Employee) {
    
  }
}",2442936,416,20,"2442936int getTaxFromPerson(Person p) {
  /* given a person, determine their tax liabilities */
  if (p == Employee) {
    
  }
}",8
416,2,0,5,1,"int getTaxFromPerson(Person p) {
  /* given a person, determine their tax liabilities */
  if (p == Employee) {
    
  }
}",2442936,417,20,"2442936int getTaxFromPerson(Person p) {
  /* given a person, determine their tax liabilities */
  if (p == Employee) {
    
  }
}",8
417,2,1,4,1,"int getTaxFromPerson(Person p) {
  /* given a person, determine their tax liabilities */
  if (p == Employee) {
    
  }
}",2442936,418,20,"2442936int getTaxFromPerson(Person p) {
  /* given a person, determine their tax liabilities */
  if (p == Employee) {
    
  }
}",8
418,2,1,5,1,"int getTaxFromPerson(Person p) {
  /* given a person, determine their tax liabilities */
  if (p == Employee) {
    
  }
}",2442936,419,20,"2442936int getTaxFromPerson(Person p) {
  /* given a person, determine their tax liabilities */
  if (p == Employee) {
    
  }
}",8
419,2,0,3,1,"int getTaxFromPerson(Person p) {
  /* given a person, determine their tax liabilities */
  if (p == Employee) {
    
  }
}",2442936,420,20,"2442936int getTaxFromPerson(Person p) {
  /* given a person, determine their tax liabilities */
  if (p == Employee) {
    
  }
}",8
420,2,1,1,1,"int getTaxFromPerson(Person p) {
  /* given a person, determine their tax liabilities */
  if (p == Employee) {
    
  }
}",2442936,421,20,"2442936int getTaxFromPerson(Person p) {
  /* given a person, determine their tax liabilities */
  if (p == Employee) {
    
  }
}",8
421,2,0,1,1,"int getTaxFromPerson(Person p) {
  /* given a person, determine their tax liabilities */
  if (p == Employee) {
    
  }
}",2442936,422,20,"2442936int getTaxFromPerson(Person p) {
  /* given a person, determine their tax liabilities */
  if (p == Employee) {
    
  }
}",8
422,2,0,2,1,"int getTaxFromPerson(Person p) {
  /* given a person, determine their tax liabilities */
  int salary = p.getSalary();
  if (salary > 10000) {
  	return p.getSalary() * 0.05;
  } else {
  	return p.getSalary() * 0.02;
  }
}",2442936,423,35,"2442936int getTaxFromPerson(Person p) {
  /* given a person, determine their tax liabilities */
  int salary = p.getSalary();
  if (salary > 10000) {
  	return p.getSalary() * 0.05;
  } else {
  	return p.getSalary() * 0.02;
  }
}",4
423,2,0,1,1,"int getTaxFromPerson(Person p) {
  /* given a person, determine their tax liabilities */
  int salary = p.getSalary();
  if (salary > 10000) {
  	return p.getSalary() * 0.05;
  } else {
  	return p.getSalary() * 0.02;
  }
}",2442936,424,35,"2442936int getTaxFromPerson(Person p) {
  /* given a person, determine their tax liabilities */
  int salary = p.getSalary();
  if (salary > 10000) {
  	return p.getSalary() * 0.05;
  } else {
  	return p.getSalary() * 0.02;
  }
}",4
424,2,0,5,1,"int getTaxFromPerson(Person p) {
  /* given a person, determine their tax liabilities */
  int salary = p.getSalary();
  if (salary > 10000) {
  	return p.getSalary() * 0.05;
  } else {
  	return p.getSalary() * 0.02;
  }
}",2442936,425,35,"2442936int getTaxFromPerson(Person p) {
  /* given a person, determine their tax liabilities */
  int salary = p.getSalary();
  if (salary > 10000) {
  	return p.getSalary() * 0.05;
  } else {
  	return p.getSalary() * 0.02;
  }
}",4
425,2,0,5,4,"int getTaxFromPerson(Person p) {
  /* given a person, determine their tax liabilities */
  int salary = p.getSalary();
  if (salary > 10000) {
  	return p.getSalary() * 0.05;
  } else {
  	return p.getSalary() * 0.02;
  }
}",2442936,426,35,"2442936int getTaxFromPerson(Person p) {
  /* given a person, determine their tax liabilities */
  int salary = p.getSalary();
  if (salary > 10000) {
  	return p.getSalary() * 0.05;
  } else {
  	return p.getSalary() * 0.02;
  }
}",4
